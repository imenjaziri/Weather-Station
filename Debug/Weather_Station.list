
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025950  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d98  08025ae0  08025ae0  00026ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026878  08026878  00028268  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08026878  08026878  00027878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026880  08026880  00028268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026880  08026880  00027880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026884  08026884  00027884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000268  20000000  08026888  00028000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006464  20000268  08026af0  00028268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200066cc  08026af0  000286cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028268  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031946  00000000  00000000  00028298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f13  00000000  00000000  00059bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002458  00000000  00000000  00060af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c06  00000000  00000000  00062f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000319c3  00000000  00000000  00064b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032ee2  00000000  00000000  00096519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120626  00000000  00000000  000c93fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e9a21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bb6c  00000000  00000000  001e9a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001f55d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08025ac8 	.word	0x08025ac8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	08025ac8 	.word	0x08025ac8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 ba09 	b.w	80010dc <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9be 	b.w	80010dc <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	468e      	mov	lr, r1
 8000dec:	4604      	mov	r4, r0
 8000dee:	4688      	mov	r8, r1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d14a      	bne.n	8000e8a <__udivmoddi4+0xa6>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d962      	bls.n	8000ec0 <__udivmoddi4+0xdc>
 8000dfa:	fab2 f682 	clz	r6, r2
 8000dfe:	b14e      	cbz	r6, 8000e14 <__udivmoddi4+0x30>
 8000e00:	f1c6 0320 	rsb	r3, r6, #32
 8000e04:	fa01 f806 	lsl.w	r8, r1, r6
 8000e08:	fa20 f303 	lsr.w	r3, r0, r3
 8000e0c:	40b7      	lsls	r7, r6
 8000e0e:	ea43 0808 	orr.w	r8, r3, r8
 8000e12:	40b4      	lsls	r4, r6
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	fa1f fc87 	uxth.w	ip, r7
 8000e1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e20:	0c23      	lsrs	r3, r4, #16
 8000e22:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e2a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0x62>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e38:	f080 80ea 	bcs.w	8001010 <__udivmoddi4+0x22c>
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f240 80e7 	bls.w	8001010 <__udivmoddi4+0x22c>
 8000e42:	3902      	subs	r1, #2
 8000e44:	443b      	add	r3, r7
 8000e46:	1a9a      	subs	r2, r3, r2
 8000e48:	b2a3      	uxth	r3, r4
 8000e4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e56:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e5a:	459c      	cmp	ip, r3
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x8e>
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e64:	f080 80d6 	bcs.w	8001014 <__udivmoddi4+0x230>
 8000e68:	459c      	cmp	ip, r3
 8000e6a:	f240 80d3 	bls.w	8001014 <__udivmoddi4+0x230>
 8000e6e:	443b      	add	r3, r7
 8000e70:	3802      	subs	r0, #2
 8000e72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e76:	eba3 030c 	sub.w	r3, r3, ip
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	b11d      	cbz	r5, 8000e86 <__udivmoddi4+0xa2>
 8000e7e:	40f3      	lsrs	r3, r6
 8000e80:	2200      	movs	r2, #0
 8000e82:	e9c5 3200 	strd	r3, r2, [r5]
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d905      	bls.n	8000e9a <__udivmoddi4+0xb6>
 8000e8e:	b10d      	cbz	r5, 8000e94 <__udivmoddi4+0xb0>
 8000e90:	e9c5 0100 	strd	r0, r1, [r5]
 8000e94:	2100      	movs	r1, #0
 8000e96:	4608      	mov	r0, r1
 8000e98:	e7f5      	b.n	8000e86 <__udivmoddi4+0xa2>
 8000e9a:	fab3 f183 	clz	r1, r3
 8000e9e:	2900      	cmp	r1, #0
 8000ea0:	d146      	bne.n	8000f30 <__udivmoddi4+0x14c>
 8000ea2:	4573      	cmp	r3, lr
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xc8>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 8105 	bhi.w	80010b6 <__udivmoddi4+0x2d2>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb6e 0203 	sbc.w	r2, lr, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	4690      	mov	r8, r2
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e5      	beq.n	8000e86 <__udivmoddi4+0xa2>
 8000eba:	e9c5 4800 	strd	r4, r8, [r5]
 8000ebe:	e7e2      	b.n	8000e86 <__udivmoddi4+0xa2>
 8000ec0:	2a00      	cmp	r2, #0
 8000ec2:	f000 8090 	beq.w	8000fe6 <__udivmoddi4+0x202>
 8000ec6:	fab2 f682 	clz	r6, r2
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	f040 80a4 	bne.w	8001018 <__udivmoddi4+0x234>
 8000ed0:	1a8a      	subs	r2, r1, r2
 8000ed2:	0c03      	lsrs	r3, r0, #16
 8000ed4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed8:	b280      	uxth	r0, r0
 8000eda:	b2bc      	uxth	r4, r7
 8000edc:	2101      	movs	r1, #1
 8000ede:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ee2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eea:	fb04 f20c 	mul.w	r2, r4, ip
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x11e>
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ef8:	d202      	bcs.n	8000f00 <__udivmoddi4+0x11c>
 8000efa:	429a      	cmp	r2, r3
 8000efc:	f200 80e0 	bhi.w	80010c0 <__udivmoddi4+0x2dc>
 8000f00:	46c4      	mov	ip, r8
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f08:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f10:	fb02 f404 	mul.w	r4, r2, r4
 8000f14:	429c      	cmp	r4, r3
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x144>
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f1e:	d202      	bcs.n	8000f26 <__udivmoddi4+0x142>
 8000f20:	429c      	cmp	r4, r3
 8000f22:	f200 80ca 	bhi.w	80010ba <__udivmoddi4+0x2d6>
 8000f26:	4602      	mov	r2, r0
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0x98>
 8000f30:	f1c1 0620 	rsb	r6, r1, #32
 8000f34:	408b      	lsls	r3, r1
 8000f36:	fa22 f706 	lsr.w	r7, r2, r6
 8000f3a:	431f      	orrs	r7, r3
 8000f3c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f40:	fa20 f306 	lsr.w	r3, r0, r6
 8000f44:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f4c:	4323      	orrs	r3, r4
 8000f4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f52:	fa1f fc87 	uxth.w	ip, r7
 8000f56:	fbbe f0f9 	udiv	r0, lr, r9
 8000f5a:	0c1c      	lsrs	r4, r3, #16
 8000f5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f64:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f68:	45a6      	cmp	lr, r4
 8000f6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f6e:	d909      	bls.n	8000f84 <__udivmoddi4+0x1a0>
 8000f70:	193c      	adds	r4, r7, r4
 8000f72:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f76:	f080 809c 	bcs.w	80010b2 <__udivmoddi4+0x2ce>
 8000f7a:	45a6      	cmp	lr, r4
 8000f7c:	f240 8099 	bls.w	80010b2 <__udivmoddi4+0x2ce>
 8000f80:	3802      	subs	r0, #2
 8000f82:	443c      	add	r4, r7
 8000f84:	eba4 040e 	sub.w	r4, r4, lr
 8000f88:	fa1f fe83 	uxth.w	lr, r3
 8000f8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f90:	fb09 4413 	mls	r4, r9, r3, r4
 8000f94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f98:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f9c:	45a4      	cmp	ip, r4
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x1ce>
 8000fa0:	193c      	adds	r4, r7, r4
 8000fa2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fa6:	f080 8082 	bcs.w	80010ae <__udivmoddi4+0x2ca>
 8000faa:	45a4      	cmp	ip, r4
 8000fac:	d97f      	bls.n	80010ae <__udivmoddi4+0x2ca>
 8000fae:	3b02      	subs	r3, #2
 8000fb0:	443c      	add	r4, r7
 8000fb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fb6:	eba4 040c 	sub.w	r4, r4, ip
 8000fba:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fbe:	4564      	cmp	r4, ip
 8000fc0:	4673      	mov	r3, lr
 8000fc2:	46e1      	mov	r9, ip
 8000fc4:	d362      	bcc.n	800108c <__udivmoddi4+0x2a8>
 8000fc6:	d05f      	beq.n	8001088 <__udivmoddi4+0x2a4>
 8000fc8:	b15d      	cbz	r5, 8000fe2 <__udivmoddi4+0x1fe>
 8000fca:	ebb8 0203 	subs.w	r2, r8, r3
 8000fce:	eb64 0409 	sbc.w	r4, r4, r9
 8000fd2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fd6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fda:	431e      	orrs	r6, r3
 8000fdc:	40cc      	lsrs	r4, r1
 8000fde:	e9c5 6400 	strd	r6, r4, [r5]
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	e74f      	b.n	8000e86 <__udivmoddi4+0xa2>
 8000fe6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fea:	0c01      	lsrs	r1, r0, #16
 8000fec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ff0:	b280      	uxth	r0, r0
 8000ff2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4638      	mov	r0, r7
 8000ffa:	463c      	mov	r4, r7
 8000ffc:	46b8      	mov	r8, r7
 8000ffe:	46be      	mov	lr, r7
 8001000:	2620      	movs	r6, #32
 8001002:	fbb1 f1f7 	udiv	r1, r1, r7
 8001006:	eba2 0208 	sub.w	r2, r2, r8
 800100a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800100e:	e766      	b.n	8000ede <__udivmoddi4+0xfa>
 8001010:	4601      	mov	r1, r0
 8001012:	e718      	b.n	8000e46 <__udivmoddi4+0x62>
 8001014:	4610      	mov	r0, r2
 8001016:	e72c      	b.n	8000e72 <__udivmoddi4+0x8e>
 8001018:	f1c6 0220 	rsb	r2, r6, #32
 800101c:	fa2e f302 	lsr.w	r3, lr, r2
 8001020:	40b7      	lsls	r7, r6
 8001022:	40b1      	lsls	r1, r6
 8001024:	fa20 f202 	lsr.w	r2, r0, r2
 8001028:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800102c:	430a      	orrs	r2, r1
 800102e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001032:	b2bc      	uxth	r4, r7
 8001034:	fb0e 3318 	mls	r3, lr, r8, r3
 8001038:	0c11      	lsrs	r1, r2, #16
 800103a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800103e:	fb08 f904 	mul.w	r9, r8, r4
 8001042:	40b0      	lsls	r0, r6
 8001044:	4589      	cmp	r9, r1
 8001046:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800104a:	b280      	uxth	r0, r0
 800104c:	d93e      	bls.n	80010cc <__udivmoddi4+0x2e8>
 800104e:	1879      	adds	r1, r7, r1
 8001050:	f108 3cff 	add.w	ip, r8, #4294967295
 8001054:	d201      	bcs.n	800105a <__udivmoddi4+0x276>
 8001056:	4589      	cmp	r9, r1
 8001058:	d81f      	bhi.n	800109a <__udivmoddi4+0x2b6>
 800105a:	eba1 0109 	sub.w	r1, r1, r9
 800105e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001062:	fb09 f804 	mul.w	r8, r9, r4
 8001066:	fb0e 1119 	mls	r1, lr, r9, r1
 800106a:	b292      	uxth	r2, r2
 800106c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001070:	4542      	cmp	r2, r8
 8001072:	d229      	bcs.n	80010c8 <__udivmoddi4+0x2e4>
 8001074:	18ba      	adds	r2, r7, r2
 8001076:	f109 31ff 	add.w	r1, r9, #4294967295
 800107a:	d2c4      	bcs.n	8001006 <__udivmoddi4+0x222>
 800107c:	4542      	cmp	r2, r8
 800107e:	d2c2      	bcs.n	8001006 <__udivmoddi4+0x222>
 8001080:	f1a9 0102 	sub.w	r1, r9, #2
 8001084:	443a      	add	r2, r7
 8001086:	e7be      	b.n	8001006 <__udivmoddi4+0x222>
 8001088:	45f0      	cmp	r8, lr
 800108a:	d29d      	bcs.n	8000fc8 <__udivmoddi4+0x1e4>
 800108c:	ebbe 0302 	subs.w	r3, lr, r2
 8001090:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001094:	3801      	subs	r0, #1
 8001096:	46e1      	mov	r9, ip
 8001098:	e796      	b.n	8000fc8 <__udivmoddi4+0x1e4>
 800109a:	eba7 0909 	sub.w	r9, r7, r9
 800109e:	4449      	add	r1, r9
 80010a0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010a4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010a8:	fb09 f804 	mul.w	r8, r9, r4
 80010ac:	e7db      	b.n	8001066 <__udivmoddi4+0x282>
 80010ae:	4673      	mov	r3, lr
 80010b0:	e77f      	b.n	8000fb2 <__udivmoddi4+0x1ce>
 80010b2:	4650      	mov	r0, sl
 80010b4:	e766      	b.n	8000f84 <__udivmoddi4+0x1a0>
 80010b6:	4608      	mov	r0, r1
 80010b8:	e6fd      	b.n	8000eb6 <__udivmoddi4+0xd2>
 80010ba:	443b      	add	r3, r7
 80010bc:	3a02      	subs	r2, #2
 80010be:	e733      	b.n	8000f28 <__udivmoddi4+0x144>
 80010c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010c4:	443b      	add	r3, r7
 80010c6:	e71c      	b.n	8000f02 <__udivmoddi4+0x11e>
 80010c8:	4649      	mov	r1, r9
 80010ca:	e79c      	b.n	8001006 <__udivmoddi4+0x222>
 80010cc:	eba1 0109 	sub.w	r1, r1, r9
 80010d0:	46c4      	mov	ip, r8
 80010d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010d6:	fb09 f804 	mul.w	r8, r9, r4
 80010da:	e7c4      	b.n	8001066 <__udivmoddi4+0x282>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <Start_SatellitePrediction_Task>:
time_t first_los_utc=0;
extern volatile uint8_t gps_rtc_updated;

//#ifdef SATELLITE
void Start_SatellitePrediction_Task(void const * argument)
{while (!gps_rtc_updated) {
 80010e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010e4:	ed2d 8b04 	vpush	{d8-d9}
 80010e8:	b0ce      	sub	sp, #312	@ 0x138
 80010ea:	af06      	add	r7, sp, #24
 80010ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80010f0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80010f4:	6018      	str	r0, [r3, #0]
 80010f6:	e002      	b.n	80010fe <Start_SatellitePrediction_Task+0x1e>
	osDelay(100);
 80010f8:	2064      	movs	r0, #100	@ 0x64
 80010fa:	f017 fe1a 	bl	8018d32 <osDelay>
{while (!gps_rtc_updated) {
 80010fe:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <Start_SatellitePrediction_Task+0xd8>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f7      	beq.n	80010f8 <Start_SatellitePrediction_Task+0x18>
	}
while ((fabs(MyGps.lat_gps) < 0.001) || (fabs(MyGps.long_gps) < 0.001) || (MyGps.alt_gps < 1.0)) {
 8001108:	e00a      	b.n	8001120 <Start_SatellitePrediction_Task+0x40>
   HAL_UART_Transmit(&huart2, (uint8_t*)"Waiting for valid GPS coordinates...\r\n", 38, HAL_MAX_DELAY);
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	2226      	movs	r2, #38	@ 0x26
 8001110:	492a      	ldr	r1, [pc, #168]	@ (80011bc <Start_SatellitePrediction_Task+0xdc>)
 8001112:	482b      	ldr	r0, [pc, #172]	@ (80011c0 <Start_SatellitePrediction_Task+0xe0>)
 8001114:	f016 fa06 	bl	8017524 <HAL_UART_Transmit>
   osDelay(1000);
 8001118:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800111c:	f017 fe09 	bl	8018d32 <osDelay>
while ((fabs(MyGps.lat_gps) < 0.001) || (fabs(MyGps.long_gps) < 0.001) || (MyGps.alt_gps < 1.0)) {
 8001120:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <Start_SatellitePrediction_Task+0xe4>)
 8001122:	edd3 7a01 	vldr	s15, [r3, #4]
 8001126:	eef0 7ae7 	vabs.f32	s15, s15
 800112a:	ee17 0a90 	vmov	r0, s15
 800112e:	f7ff fa1b 	bl	8000568 <__aeabi_f2d>
 8001132:	a31f      	add	r3, pc, #124	@ (adr r3, 80011b0 <Start_SatellitePrediction_Task+0xd0>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff fce0 	bl	8000afc <__aeabi_dcmplt>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1e3      	bne.n	800110a <Start_SatellitePrediction_Task+0x2a>
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <Start_SatellitePrediction_Task+0xe4>)
 8001144:	edd3 7a02 	vldr	s15, [r3, #8]
 8001148:	eef0 7ae7 	vabs.f32	s15, s15
 800114c:	ee17 0a90 	vmov	r0, s15
 8001150:	f7ff fa0a 	bl	8000568 <__aeabi_f2d>
 8001154:	a316      	add	r3, pc, #88	@ (adr r3, 80011b0 <Start_SatellitePrediction_Task+0xd0>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff fccf 	bl	8000afc <__aeabi_dcmplt>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1d2      	bne.n	800110a <Start_SatellitePrediction_Task+0x2a>
 8001164:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <Start_SatellitePrediction_Task+0xe4>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800116e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001176:	d4c8      	bmi.n	800110a <Start_SatellitePrediction_Task+0x2a>
 }
	const char *tle_line_1 = "1 25544U 98067A   25210.88923082  .00012694  00000-0  22837-3 0  9997";
 8001178:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <Start_SatellitePrediction_Task+0xe8>)
 800117a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	const char *tle_line_2 = "2 25544  51.6360  95.4190 0002167 129.1276 319.5356 15.50207453521782";
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <Start_SatellitePrediction_Task+0xec>)
 8001180:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	// Create orbit object
	predict_orbital_elements_t *iss = predict_parse_tle(tle_line_1, tle_line_2);
 8001184:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8001188:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800118c:	f003 fcb8 	bl	8004b00 <predict_parse_tle>
 8001190:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	if (!iss) {
 8001194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001198:	2b00      	cmp	r3, #0
 800119a:	d11b      	bne.n	80011d4 <Start_SatellitePrediction_Task+0xf4>
		HAL_UART_Transmit(&huart2,(const uint8_t *)"Failed to initialize orbit from tle!", strlen("Failed to initialize orbit from tle!"),100);
 800119c:	2364      	movs	r3, #100	@ 0x64
 800119e:	2224      	movs	r2, #36	@ 0x24
 80011a0:	490b      	ldr	r1, [pc, #44]	@ (80011d0 <Start_SatellitePrediction_Task+0xf0>)
 80011a2:	4807      	ldr	r0, [pc, #28]	@ (80011c0 <Start_SatellitePrediction_Task+0xe0>)
 80011a4:	f016 f9be 	bl	8017524 <HAL_UART_Transmit>
		exit(1);
 80011a8:	2001      	movs	r0, #1
 80011aa:	f01b f829 	bl	801c200 <exit>
 80011ae:	bf00      	nop
 80011b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011b4:	3f50624d 	.word	0x3f50624d
 80011b8:	2000127c 	.word	0x2000127c
 80011bc:	08025ae0 	.word	0x08025ae0
 80011c0:	20001420 	.word	0x20001420
 80011c4:	20000000 	.word	0x20000000
 80011c8:	08025b08 	.word	0x08025b08
 80011cc:	08025b50 	.word	0x08025b50
 80011d0:	08025b98 	.word	0x08025b98
	}

	// Create observer object
	predict_observer_t *obs = predict_create_observer("My Ground Station", MyGps.lat_gps*M_PI/180.0, MyGps.long_gps*M_PI/180.0, MyGps.alt_gps);
 80011d4:	4bba      	ldr	r3, [pc, #744]	@ (80014c0 <Start_SatellitePrediction_Task+0x3e0>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f9c5 	bl	8000568 <__aeabi_f2d>
 80011de:	a3b6      	add	r3, pc, #728	@ (adr r3, 80014b8 <Start_SatellitePrediction_Task+0x3d8>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fa18 	bl	8000618 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4bb3      	ldr	r3, [pc, #716]	@ (80014c4 <Start_SatellitePrediction_Task+0x3e4>)
 80011f6:	f7ff fb39 	bl	800086c <__aeabi_ddiv>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	ec43 2b18 	vmov	d8, r2, r3
 8001202:	4baf      	ldr	r3, [pc, #700]	@ (80014c0 <Start_SatellitePrediction_Task+0x3e0>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f9ae 	bl	8000568 <__aeabi_f2d>
 800120c:	a3aa      	add	r3, pc, #680	@ (adr r3, 80014b8 <Start_SatellitePrediction_Task+0x3d8>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff fa01 	bl	8000618 <__aeabi_dmul>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	4ba8      	ldr	r3, [pc, #672]	@ (80014c4 <Start_SatellitePrediction_Task+0x3e4>)
 8001224:	f7ff fb22 	bl	800086c <__aeabi_ddiv>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	ec43 2b19 	vmov	d9, r2, r3
 8001230:	4ba3      	ldr	r3, [pc, #652]	@ (80014c0 <Start_SatellitePrediction_Task+0x3e0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f997 	bl	8000568 <__aeabi_f2d>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	ec43 2b12 	vmov	d2, r2, r3
 8001242:	eeb0 1a49 	vmov.f32	s2, s18
 8001246:	eef0 1a69 	vmov.f32	s3, s19
 800124a:	eeb0 0a48 	vmov.f32	s0, s16
 800124e:	eef0 0a68 	vmov.f32	s1, s17
 8001252:	489d      	ldr	r0, [pc, #628]	@ (80014c8 <Start_SatellitePrediction_Task+0x3e8>)
 8001254:	f002 fba0 	bl	8003998 <predict_create_observer>
 8001258:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	sprintf(buff,"MyPos: lat=%f, lon=%f, alt=%f\n", MyGps.lat_gps*180.0/M_PI, MyGps.long_gps*180.0/M_PI,MyGps.alt_gps);
 800125c:	4b98      	ldr	r3, [pc, #608]	@ (80014c0 <Start_SatellitePrediction_Task+0x3e0>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f981 	bl	8000568 <__aeabi_f2d>
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	4b96      	ldr	r3, [pc, #600]	@ (80014c4 <Start_SatellitePrediction_Task+0x3e4>)
 800126c:	f7ff f9d4 	bl	8000618 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	a38f      	add	r3, pc, #572	@ (adr r3, 80014b8 <Start_SatellitePrediction_Task+0x3d8>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff faf5 	bl	800086c <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4690      	mov	r8, r2
 8001288:	4699      	mov	r9, r3
 800128a:	4b8d      	ldr	r3, [pc, #564]	@ (80014c0 <Start_SatellitePrediction_Task+0x3e0>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f96a 	bl	8000568 <__aeabi_f2d>
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b8a      	ldr	r3, [pc, #552]	@ (80014c4 <Start_SatellitePrediction_Task+0x3e4>)
 800129a:	f7ff f9bd 	bl	8000618 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	a384      	add	r3, pc, #528	@ (adr r3, 80014b8 <Start_SatellitePrediction_Task+0x3d8>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff fade 	bl	800086c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4614      	mov	r4, r2
 80012b6:	461d      	mov	r5, r3
 80012b8:	4b81      	ldr	r3, [pc, #516]	@ (80014c0 <Start_SatellitePrediction_Task+0x3e0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f953 	bl	8000568 <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012ca:	e9cd 4500 	strd	r4, r5, [sp]
 80012ce:	4642      	mov	r2, r8
 80012d0:	464b      	mov	r3, r9
 80012d2:	497e      	ldr	r1, [pc, #504]	@ (80014cc <Start_SatellitePrediction_Task+0x3ec>)
 80012d4:	487e      	ldr	r0, [pc, #504]	@ (80014d0 <Start_SatellitePrediction_Task+0x3f0>)
 80012d6:	f01c fe5b 	bl	801df90 <siprintf>
		HAL_UART_Transmit(&huart2,(const uint8_t *)buff, strlen(buff),100);
 80012da:	487d      	ldr	r0, [pc, #500]	@ (80014d0 <Start_SatellitePrediction_Task+0x3f0>)
 80012dc:	f7fe ffd8 	bl	8000290 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	2364      	movs	r3, #100	@ 0x64
 80012e6:	497a      	ldr	r1, [pc, #488]	@ (80014d0 <Start_SatellitePrediction_Task+0x3f0>)
 80012e8:	487a      	ldr	r0, [pc, #488]	@ (80014d4 <Start_SatellitePrediction_Task+0x3f4>)
 80012ea:	f016 f91b 	bl	8017524 <HAL_UART_Transmit>
	//predict_observer_t *obs = predict_create_observer("My Ground Station", 36.84*M_PI/180.0, 10.9*M_PI/180.0, 60.3);
	if (!obs) {
 80012ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d105      	bne.n	8001302 <Start_SatellitePrediction_Task+0x222>
		HAL_UART_Transmit(&huart2,(const uint8_t *)"Failed to initialize observer!", strlen("Failed to initialize observer!"),100);
 80012f6:	2364      	movs	r3, #100	@ 0x64
 80012f8:	221e      	movs	r2, #30
 80012fa:	4977      	ldr	r1, [pc, #476]	@ (80014d8 <Start_SatellitePrediction_Task+0x3f8>)
 80012fc:	4875      	ldr	r0, [pc, #468]	@ (80014d4 <Start_SatellitePrediction_Task+0x3f4>)
 80012fe:	f016 f911 	bl	8017524 <HAL_UART_Transmit>
	}
	rtc_to_time_t();
 8001302:	f000 f94f 	bl	80015a4 <rtc_to_time_t>
	predict_julian_date_t julian_time = predict_to_julian(timestamp);
 8001306:	4b75      	ldr	r3, [pc, #468]	@ (80014dc <Start_SatellitePrediction_Task+0x3fc>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f002 fad6 	bl	80038c0 <predict_to_julian>
 8001314:	ed87 0b42 	vstr	d0, [r7, #264]	@ 0x108
	struct predict_position iss_orbit;
	predict_orbit(iss, &iss_orbit, julian_time);
 8001318:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800131c:	ed97 0b42 	vldr	d0, [r7, #264]	@ 0x108
 8001320:	4619      	mov	r1, r3
 8001322:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001326:	f004 f873 	bl	8005410 <predict_orbit>
	sprintf(buff,"ISS: lat=%f, lon=%f, alt=%f\n", iss_orbit.latitude*180.0/M_PI, iss_orbit.longitude*180.0/M_PI, iss_orbit.altitude);
 800132a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b64      	ldr	r3, [pc, #400]	@ (80014c4 <Start_SatellitePrediction_Task+0x3e4>)
 8001334:	f7ff f970 	bl	8000618 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	a35d      	add	r3, pc, #372	@ (adr r3, 80014b8 <Start_SatellitePrediction_Task+0x3d8>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	f7ff fa91 	bl	800086c <__aeabi_ddiv>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4614      	mov	r4, r2
 8001350:	461d      	mov	r5, r3
 8001352:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b5a      	ldr	r3, [pc, #360]	@ (80014c4 <Start_SatellitePrediction_Task+0x3e4>)
 800135c:	f7ff f95c 	bl	8000618 <__aeabi_dmul>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	a353      	add	r3, pc, #332	@ (adr r3, 80014b8 <Start_SatellitePrediction_Task+0x3d8>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f7ff fa7d 	bl	800086c <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800137e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001382:	e9cd 0100 	strd	r0, r1, [sp]
 8001386:	4622      	mov	r2, r4
 8001388:	462b      	mov	r3, r5
 800138a:	4955      	ldr	r1, [pc, #340]	@ (80014e0 <Start_SatellitePrediction_Task+0x400>)
 800138c:	4850      	ldr	r0, [pc, #320]	@ (80014d0 <Start_SatellitePrediction_Task+0x3f0>)
 800138e:	f01c fdff 	bl	801df90 <siprintf>
	HAL_UART_Transmit(&huart2,(const uint8_t *)buff, strlen(buff),100);
 8001392:	484f      	ldr	r0, [pc, #316]	@ (80014d0 <Start_SatellitePrediction_Task+0x3f0>)
 8001394:	f7fe ff7c 	bl	8000290 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	2364      	movs	r3, #100	@ 0x64
 800139e:	494c      	ldr	r1, [pc, #304]	@ (80014d0 <Start_SatellitePrediction_Task+0x3f0>)
 80013a0:	484c      	ldr	r0, [pc, #304]	@ (80014d4 <Start_SatellitePrediction_Task+0x3f4>)
 80013a2:	f016 f8bf 	bl	8017524 <HAL_UART_Transmit>

	// Observe ISS
	struct predict_observation iss_obs;
	predict_observe_orbit(obs, &iss_orbit, &iss_obs);
 80013a6:	f107 0208 	add.w	r2, r7, #8
 80013aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013ae:	4619      	mov	r1, r3
 80013b0:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80013b4:	f002 fb24 	bl	8003a00 <predict_observe_orbit>
	sprintf(buff,"ISS: azi=%f (rate: %f), ele=%f (rate: %f)\n", iss_obs.azimuth*180.0/M_PI, iss_obs.azimuth_rate*180.0/M_PI, iss_obs.elevation*180.0/M_PI, iss_obs.elevation_rate*180.0/M_PI);
 80013b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013c0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b3e      	ldr	r3, [pc, #248]	@ (80014c4 <Start_SatellitePrediction_Task+0x3e4>)
 80013ca:	f7ff f925 	bl	8000618 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	a338      	add	r3, pc, #224	@ (adr r3, 80014b8 <Start_SatellitePrediction_Task+0x3d8>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff fa46 	bl	800086c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4692      	mov	sl, r2
 80013e6:	469b      	mov	fp, r3
 80013e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013f0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	4b32      	ldr	r3, [pc, #200]	@ (80014c4 <Start_SatellitePrediction_Task+0x3e4>)
 80013fa:	f7ff f90d 	bl	8000618 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	a32c      	add	r3, pc, #176	@ (adr r3, 80014b8 <Start_SatellitePrediction_Task+0x3d8>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff fa2e 	bl	800086c <__aeabi_ddiv>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4614      	mov	r4, r2
 8001416:	461d      	mov	r5, r3
 8001418:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800141c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001420:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b26      	ldr	r3, [pc, #152]	@ (80014c4 <Start_SatellitePrediction_Task+0x3e4>)
 800142a:	f7ff f8f5 	bl	8000618 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	a320      	add	r3, pc, #128	@ (adr r3, 80014b8 <Start_SatellitePrediction_Task+0x3d8>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff fa16 	bl	800086c <__aeabi_ddiv>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4690      	mov	r8, r2
 8001446:	4699      	mov	r9, r3
 8001448:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800144c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001450:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <Start_SatellitePrediction_Task+0x3e4>)
 800145a:	f7ff f8dd 	bl	8000618 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	a314      	add	r3, pc, #80	@ (adr r3, 80014b8 <Start_SatellitePrediction_Task+0x3d8>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f9fe 	bl	800086c <__aeabi_ddiv>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001478:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800147c:	e9cd 4500 	strd	r4, r5, [sp]
 8001480:	4652      	mov	r2, sl
 8001482:	465b      	mov	r3, fp
 8001484:	4917      	ldr	r1, [pc, #92]	@ (80014e4 <Start_SatellitePrediction_Task+0x404>)
 8001486:	4812      	ldr	r0, [pc, #72]	@ (80014d0 <Start_SatellitePrediction_Task+0x3f0>)
 8001488:	f01c fd82 	bl	801df90 <siprintf>
	HAL_UART_Transmit(&huart2,(const uint8_t *)buff, strlen(buff),100);
 800148c:	4810      	ldr	r0, [pc, #64]	@ (80014d0 <Start_SatellitePrediction_Task+0x3f0>)
 800148e:	f7fe feff 	bl	8000290 <strlen>
 8001492:	4603      	mov	r3, r0
 8001494:	b29a      	uxth	r2, r3
 8001496:	2364      	movs	r3, #100	@ 0x64
 8001498:	490d      	ldr	r1, [pc, #52]	@ (80014d0 <Start_SatellitePrediction_Task+0x3f0>)
 800149a:	480e      	ldr	r0, [pc, #56]	@ (80014d4 <Start_SatellitePrediction_Task+0x3f4>)
 800149c:	f016 f842 	bl	8017524 <HAL_UART_Transmit>
	// Predict ISS
	list_next_passes(obs, iss, 10, julian_time);
 80014a0:	ed97 0b42 	vldr	d0, [r7, #264]	@ 0x108
 80014a4:	220a      	movs	r2, #10
 80014a6:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80014aa:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80014ae:	f000 f917 	bl	80016e0 <list_next_passes>

	for(;;)
	{ while (!gps_rtc_updated) {
 80014b2:	e01c      	b.n	80014ee <Start_SatellitePrediction_Task+0x40e>
 80014b4:	f3af 8000 	nop.w
 80014b8:	54442d18 	.word	0x54442d18
 80014bc:	400921fb 	.word	0x400921fb
 80014c0:	20000000 	.word	0x20000000
 80014c4:	40668000 	.word	0x40668000
 80014c8:	08025bc0 	.word	0x08025bc0
 80014cc:	08025bd4 	.word	0x08025bd4
 80014d0:	20000284 	.word	0x20000284
 80014d4:	20001420 	.word	0x20001420
 80014d8:	08025bf4 	.word	0x08025bf4
 80014dc:	200004e0 	.word	0x200004e0
 80014e0:	08025c14 	.word	0x08025c14
 80014e4:	08025c34 	.word	0x08025c34
	    osDelay(100);  // Wait for GPS to update RTC
 80014e8:	2064      	movs	r0, #100	@ 0x64
 80014ea:	f017 fc22 	bl	8018d32 <osDelay>
	{ while (!gps_rtc_updated) {
 80014ee:	4b27      	ldr	r3, [pc, #156]	@ (800158c <Start_SatellitePrediction_Task+0x4ac>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f7      	beq.n	80014e8 <Start_SatellitePrediction_Task+0x408>
	}
	sprintf(buff,"MyPos: lat=%f, lon=%f, alt=%f\n", MyGps.lat_gps, MyGps.long_gps,MyGps.alt_gps);
 80014f8:	4b25      	ldr	r3, [pc, #148]	@ (8001590 <Start_SatellitePrediction_Task+0x4b0>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f833 	bl	8000568 <__aeabi_f2d>
 8001502:	4680      	mov	r8, r0
 8001504:	4689      	mov	r9, r1
 8001506:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <Start_SatellitePrediction_Task+0x4b0>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f82c 	bl	8000568 <__aeabi_f2d>
 8001510:	4604      	mov	r4, r0
 8001512:	460d      	mov	r5, r1
 8001514:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <Start_SatellitePrediction_Task+0x4b0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f825 	bl	8000568 <__aeabi_f2d>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001526:	e9cd 4500 	strd	r4, r5, [sp]
 800152a:	4642      	mov	r2, r8
 800152c:	464b      	mov	r3, r9
 800152e:	4919      	ldr	r1, [pc, #100]	@ (8001594 <Start_SatellitePrediction_Task+0x4b4>)
 8001530:	4819      	ldr	r0, [pc, #100]	@ (8001598 <Start_SatellitePrediction_Task+0x4b8>)
 8001532:	f01c fd2d 	bl	801df90 <siprintf>
		HAL_UART_Transmit(&huart2,(const uint8_t *)buff, strlen(buff),100);
 8001536:	4818      	ldr	r0, [pc, #96]	@ (8001598 <Start_SatellitePrediction_Task+0x4b8>)
 8001538:	f7fe feaa 	bl	8000290 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	b29a      	uxth	r2, r3
 8001540:	2364      	movs	r3, #100	@ 0x64
 8001542:	4915      	ldr	r1, [pc, #84]	@ (8001598 <Start_SatellitePrediction_Task+0x4b8>)
 8001544:	4815      	ldr	r0, [pc, #84]	@ (800159c <Start_SatellitePrediction_Task+0x4bc>)
 8001546:	f015 ffed 	bl	8017524 <HAL_UART_Transmit>
		time_t now=rtc_to_time_t();
 800154a:	f000 f82b 	bl	80015a4 <rtc_to_time_t>
 800154e:	e9c7 0140 	strd	r0, r1, [r7, #256]	@ 0x100
		if (now>first_los_utc)
 8001552:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <Start_SatellitePrediction_Task+0x4c0>)
 8001554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001558:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800155c:	4290      	cmp	r0, r2
 800155e:	eb71 0303 	sbcs.w	r3, r1, r3
 8001562:	da0e      	bge.n	8001582 <Start_SatellitePrediction_Task+0x4a2>
		{
			predict_julian_date_t  jd       = predict_to_julian(now);
 8001564:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8001568:	f002 f9aa 	bl	80038c0 <predict_to_julian>
 800156c:	ed87 0b3e 	vstr	d0, [r7, #248]	@ 0xf8
			list_next_passes(obs, iss, 10, jd);
 8001570:	ed97 0b3e 	vldr	d0, [r7, #248]	@ 0xf8
 8001574:	220a      	movs	r2, #10
 8001576:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800157a:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800157e:	f000 f8af 	bl	80016e0 <list_next_passes>
		}

		// Add if actual timestamp is less than the last pass then execute again  list next passes
		osDelay(5000);
 8001582:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001586:	f017 fbd4 	bl	8018d32 <osDelay>
	{ while (!gps_rtc_updated) {
 800158a:	e792      	b.n	80014b2 <Start_SatellitePrediction_Task+0x3d2>
 800158c:	2000127c 	.word	0x2000127c
 8001590:	20000000 	.word	0x20000000
 8001594:	08025bd4 	.word	0x08025bd4
 8001598:	20000284 	.word	0x20000284
 800159c:	20001420 	.word	0x20001420
 80015a0:	200004e8 	.word	0x200004e8

080015a4 <rtc_to_time_t>:

		/* USER CODE END Start_SatellitePrediction_Task */
	}
}
time_t rtc_to_time_t()
{
 80015a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015a8:	b099      	sub	sp, #100	@ 0x64
 80015aa:	af06      	add	r7, sp, #24
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80015ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	4843      	ldr	r0, [pc, #268]	@ (80016c4 <rtc_to_time_t+0x120>)
 80015b6:	f014 fe0a 	bl	80161ce <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80015ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4840      	ldr	r0, [pc, #256]	@ (80016c4 <rtc_to_time_t+0x120>)
 80015c4:	f014 fee6 	bl	8016394 <HAL_RTC_GetDate>
	time_t raw;
	// 2) Fill struct tm with the *raw* RTC time (assumed local)
	struct tm timeinfo = { 0 };
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2224      	movs	r2, #36	@ 0x24
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f01c fd71 	bl	801e0b6 <memset>
	timeinfo.tm_hour =sTime.Hours;
 80015d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015d8:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_min  =  sTime.Minutes;
 80015da:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80015de:	60bb      	str	r3, [r7, #8]
	timeinfo.tm_sec  = sTime.Seconds ;
 80015e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80015e4:	607b      	str	r3, [r7, #4]
	timeinfo.tm_year = sDate.Year + 100;
 80015e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80015ea:	3364      	adds	r3, #100	@ 0x64
 80015ec:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_mon  = sDate.Month - 1;
 80015ee:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80015f2:	3b01      	subs	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
	timeinfo.tm_mday = sDate.Date;
 80015f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80015fa:	613b      	str	r3, [r7, #16]
	timeinfo.tm_isdst = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
		snprintf(buff, sizeof(buff), "Prediction based on RTC: %04d-%02d-%02d %02d:%02d:%02d UTC\r\n",
		         sDate.Year+2000, sDate.Month, sDate.Date,
 8001600:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
		snprintf(buff, sizeof(buff), "Prediction based on RTC: %04d-%02d-%02d %02d:%02d:%02d UTC\r\n",
 8001604:	f503 6efa 	add.w	lr, r3, #2000	@ 0x7d0
		         sDate.Year+2000, sDate.Month, sDate.Date,
 8001608:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800160c:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
				 sTime.Hours, sTime.Minutes, sTime.Seconds );
 8001610:	f897 002c 	ldrb.w	r0, [r7, #44]	@ 0x2c
 8001614:	f897 602d 	ldrb.w	r6, [r7, #45]	@ 0x2d
 8001618:	f897 c02e 	ldrb.w	ip, [r7, #46]	@ 0x2e
		snprintf(buff, sizeof(buff), "Prediction based on RTC: %04d-%02d-%02d %02d:%02d:%02d UTC\r\n",
 800161c:	4663      	mov	r3, ip
 800161e:	9304      	str	r3, [sp, #16]
 8001620:	9603      	str	r6, [sp, #12]
 8001622:	9002      	str	r0, [sp, #8]
 8001624:	9101      	str	r1, [sp, #4]
 8001626:	9200      	str	r2, [sp, #0]
 8001628:	4673      	mov	r3, lr
 800162a:	4a27      	ldr	r2, [pc, #156]	@ (80016c8 <rtc_to_time_t+0x124>)
 800162c:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8001630:	4826      	ldr	r0, [pc, #152]	@ (80016cc <rtc_to_time_t+0x128>)
 8001632:	f01c fc77 	bl	801df24 <sniprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8001636:	4825      	ldr	r0, [pc, #148]	@ (80016cc <rtc_to_time_t+0x128>)
 8001638:	f7fe fe2a 	bl	8000290 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	4921      	ldr	r1, [pc, #132]	@ (80016cc <rtc_to_time_t+0x128>)
 8001646:	4822      	ldr	r0, [pc, #136]	@ (80016d0 <rtc_to_time_t+0x12c>)
 8001648:	f015 ff6c 	bl	8017524 <HAL_UART_Transmit>
	// 3) Get a “local” time_t
	raw = mktime(&timeinfo);
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	4618      	mov	r0, r3
 8001650:	f01c fffc 	bl	801e64c <mktime>
 8001654:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
	raw -= ((MyGps.offset/100) * 3600)+((MyGps.offset%100)*60);
 8001658:	4b1e      	ldr	r3, [pc, #120]	@ (80016d4 <rtc_to_time_t+0x130>)
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	4a1e      	ldr	r2, [pc, #120]	@ (80016d8 <rtc_to_time_t+0x134>)
 800165e:	fb82 1203 	smull	r1, r2, r2, r3
 8001662:	1152      	asrs	r2, r2, #5
 8001664:	17db      	asrs	r3, r3, #31
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800166c:	fb02 f103 	mul.w	r1, r2, r3
 8001670:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <rtc_to_time_t+0x130>)
 8001672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001674:	4a18      	ldr	r2, [pc, #96]	@ (80016d8 <rtc_to_time_t+0x134>)
 8001676:	fb82 0203 	smull	r0, r2, r2, r3
 800167a:	1150      	asrs	r0, r2, #5
 800167c:	17da      	asrs	r2, r3, #31
 800167e:	1a82      	subs	r2, r0, r2
 8001680:	2064      	movs	r0, #100	@ 0x64
 8001682:	fb00 f202 	mul.w	r2, r0, r2
 8001686:	1a9a      	subs	r2, r3, r2
 8001688:	4613      	mov	r3, r2
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	17da      	asrs	r2, r3, #31
 8001694:	461c      	mov	r4, r3
 8001696:	4615      	mov	r5, r2
 8001698:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800169c:	ebb2 0804 	subs.w	r8, r2, r4
 80016a0:	eb63 0905 	sbc.w	r9, r3, r5
 80016a4:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40

	// 5) Now raw is the true UTC time_t
	timestamp = raw;
 80016a8:	490c      	ldr	r1, [pc, #48]	@ (80016dc <rtc_to_time_t+0x138>)
 80016aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80016ae:	e9c1 2300 	strd	r2, r3, [r1]
	return timestamp;}
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <rtc_to_time_t+0x138>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	374c      	adds	r7, #76	@ 0x4c
 80016be:	46bd      	mov	sp, r7
 80016c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016c4:	20001280 	.word	0x20001280
 80016c8:	08025c60 	.word	0x08025c60
 80016cc:	20000284 	.word	0x20000284
 80016d0:	20001420 	.word	0x20001420
 80016d4:	20000000 	.word	0x20000000
 80016d8:	51eb851f 	.word	0x51eb851f
 80016dc:	200004e0 	.word	0x200004e0

080016e0 <list_next_passes>:


time_t list_next_passes(predict_observer_t *obs,predict_orbital_elements_t *sat,
		uint8_t count,predict_julian_date_t start_time_julian)
{
 80016e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016e4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80016e8:	af14      	add	r7, sp, #80	@ 0x50
 80016ea:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80016ee:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80016f2:	6018      	str	r0, [r3, #0]
 80016f4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80016f8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80016fc:	6019      	str	r1, [r3, #0]
 80016fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001702:	ed83 0b00 	vstr	d0, [r3]
 8001706:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800170a:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 800170e:	701a      	strb	r2, [r3, #0]
	double elevation_step;
	predict_julian_date_t t = start_time_julian;
 8001710:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
	for(int i = 0; i < count; i++) {
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8001722:	e220      	b.n	8001b66 <list_next_passes+0x486>
		// Next AOS prediction
		struct predict_observation aos =predict_next_aos(obs, sat, t);
 8001724:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001728:	f5a3 70f8 	sub.w	r0, r3, #496	@ 0x1f0
 800172c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001730:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 8001734:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001738:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800173c:	ed97 0b9c 	vldr	d0, [r7, #624]	@ 0x270
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	f002 fdd8 	bl	80042f8 <predict_next_aos>
		// 2) rough horizon-set to bound the pass
		struct predict_observation los0 =predict_next_los(obs, sat,aos.time + ONE_SEC_IN_DAYS);
 8001748:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800174c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001750:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001754:	f20f 4340 	addw	r3, pc, #1088	@ 0x440
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe fda6 	bl	80002ac <__adddf3>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	ec43 2b17 	vmov	d7, r2, r3
 8001768:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800176c:	f5a3 70cc 	sub.w	r0, r3, #408	@ 0x198
 8001770:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001774:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 8001778:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800177c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001780:	eeb0 0a47 	vmov.f32	s0, s14
 8001784:	eef0 0a67 	vmov.f32	s1, s15
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	6819      	ldr	r1, [r3, #0]
 800178c:	f003 f868 	bl	8004860 <predict_next_los>

		// 3) scan between AOS and LOS0 in 10 s steps for true peak
		double best_el = -1e9, best_t = aos.time;
 8001790:	f20f 4324 	addw	r3, pc, #1060	@ 0x424
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	e9c7 2398 	strd	r2, r3, [r7, #608]	@ 0x260
 800179c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80017a0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
		for(elevation_step=aos.time;elevation_step <= los0.time;elevation_step += SCAN_STEP_DAYS)
 80017ac:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80017b0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278
 80017bc:	e03a      	b.n	8001834 <list_next_passes+0x154>
		{
			struct predict_position pos;
			predict_orbit(sat, &pos, elevation_step);
 80017be:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 80017c2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80017c6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80017ca:	ed97 0b9e 	vldr	d0, [r7, #632]	@ 0x278
 80017ce:	4611      	mov	r1, r2
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	f003 fe1d 	bl	8005410 <predict_orbit>

			struct predict_observation obsr;
			predict_observe_orbit(obs, &pos, &obsr);
 80017d6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80017da:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
 80017de:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80017e2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	f002 f90a 	bl	8003a00 <predict_observe_orbit>

			if (obsr.elevation > best_el) {
 80017ec:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80017f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017f8:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 80017fc:	f7ff f97e 	bl	8000afc <__aeabi_dcmplt>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <list_next_passes+0x13e>
				best_el = obsr.elevation;
 8001806:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800180a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800180e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001812:	e9c7 2398 	strd	r2, r3, [r7, #608]	@ 0x260
				best_t  = elevation_step;
 8001816:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 800181a:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
		for(elevation_step=aos.time;elevation_step <= los0.time;elevation_step += SCAN_STEP_DAYS)
 800181e:	a3e8      	add	r3, pc, #928	@ (adr r3, 8001bc0 <list_next_passes+0x4e0>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8001828:	f7fe fd40 	bl	80002ac <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278
 8001834:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001838:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8001844:	f7ff f964 	bl	8000b10 <__aeabi_dcmple>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1b7      	bne.n	80017be <list_next_passes+0xde>
			}
		}

		// 4) skip if peak < 10°
		if (best_el < MIN_EL_RAD) {
 800184e:	a3de      	add	r3, pc, #888	@ (adr r3, 8001bc8 <list_next_passes+0x4e8>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 8001858:	f7ff f950 	bl	8000afc <__aeabi_dcmplt>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d014      	beq.n	800188c <list_next_passes+0x1ac>
			t = los0.time + ONE_SEC_IN_DAYS;
 8001862:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001866:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800186a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800186e:	a3ca      	add	r3, pc, #808	@ (adr r3, 8001b98 <list_next_passes+0x4b8>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fd1a 	bl	80002ac <__adddf3>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
			i--;    // don’t count it
 8001880:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8001884:	3b01      	subs	r3, #1
 8001886:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800188a:	e167      	b.n	8001b5c <list_next_passes+0x47c>
			continue;
		}

		// 5) now find the *real* LOS after that peak
		struct predict_observation los =
				predict_next_los(obs, sat,
 800188c:	a3c2      	add	r3, pc, #776	@ (adr r3, 8001b98 <list_next_passes+0x4b8>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8001896:	f7fe fd09 	bl	80002ac <__adddf3>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	ec43 2b17 	vmov	d7, r2, r3
 80018a2:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
 80018a6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80018aa:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 80018ae:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80018b2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80018b6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ba:	eef0 0a67 	vmov.f32	s1, s15
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	6819      	ldr	r1, [r3, #0]
 80018c2:	f002 ffcd 	bl	8004860 <predict_next_los>
						best_t + ONE_SEC_IN_DAYS);

		// 6) convert & print
		time_t aos_t = predict_from_julian(aos.time);
 80018c6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80018ca:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80018ce:	ed93 7b00 	vldr	d7, [r3]
 80018d2:	eeb0 0a47 	vmov.f32	s0, s14
 80018d6:	eef0 0a67 	vmov.f32	s1, s15
 80018da:	f002 f819 	bl	8003910 <predict_from_julian>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	e9c7 2390 	strd	r2, r3, [r7, #576]	@ 0x240
		time_t max_t = predict_from_julian(best_t);
 80018e6:	ed97 0b96 	vldr	d0, [r7, #600]	@ 0x258
 80018ea:	f002 f811 	bl	8003910 <predict_from_julian>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
		time_t los_t = predict_from_julian(los.time);
 80018f6:	ed97 7b66 	vldr	d7, [r7, #408]	@ 0x198
 80018fa:	eeb0 0a47 	vmov.f32	s0, s14
 80018fe:	eef0 0a67 	vmov.f32	s1, s15
 8001902:	f002 f805 	bl	8003910 <predict_from_julian>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
		if (i == 0)
 800190e:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8001912:	2b00      	cmp	r3, #0
 8001914:	d104      	bne.n	8001920 <list_next_passes+0x240>
		{first_los_utc = los_t;}
 8001916:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 800191a:	49a1      	ldr	r1, [pc, #644]	@ (8001ba0 <list_next_passes+0x4c0>)
 800191c:	e9c1 2300 	strd	r2, r3, [r1]

		int    dur    = (int)(los_t - aos_t);
 8001920:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 8001924:	4611      	mov	r1, r2
 8001926:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	@ 0x240
 800192a:	4613      	mov	r3, r2
 800192c:	1acb      	subs	r3, r1, r3
 800192e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
		struct tm aos_tm, max_tm, los_tm;
		{
			struct tm *tmp = gmtime(&aos_t);
 8001932:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001936:	4618      	mov	r0, r3
 8001938:	f01c fc00 	bl	801e13c <gmtime>
 800193c:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
			if (tmp) memcpy(&aos_tm, tmp, sizeof(struct tm));
 8001940:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <list_next_passes+0x278>
 8001948:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800194c:	2224      	movs	r2, #36	@ 0x24
 800194e:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8001952:	4618      	mov	r0, r3
 8001954:	f01d fc37 	bl	801f1c6 <memcpy>
		}
		{
			struct tm *tmp = gmtime(&max_t);
 8001958:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800195c:	4618      	mov	r0, r3
 800195e:	f01c fbed 	bl	801e13c <gmtime>
 8001962:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
			if (tmp) memcpy(&max_tm, tmp, sizeof(struct tm));
 8001966:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800196a:	2b00      	cmp	r3, #0
 800196c:	d007      	beq.n	800197e <list_next_passes+0x29e>
 800196e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001972:	2224      	movs	r2, #36	@ 0x24
 8001974:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8001978:	4618      	mov	r0, r3
 800197a:	f01d fc24 	bl	801f1c6 <memcpy>
		}
		{
			struct tm *tmp = gmtime(&los_t);
 800197e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001982:	4618      	mov	r0, r3
 8001984:	f01c fbda 	bl	801e13c <gmtime>
 8001988:	f8c7 0248 	str.w	r0, [r7, #584]	@ 0x248
			if (tmp) memcpy(&los_tm, tmp, sizeof(struct tm));
 800198c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <list_next_passes+0x2c4>
 8001994:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001998:	2224      	movs	r2, #36	@ 0x24
 800199a:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 800199e:	4618      	mov	r0, r3
 80019a0:	f01d fc11 	bl	801f1c6 <memcpy>
				"Max El  : %.1f° at %02d:%02d:%02d UTC\r\n"
				"Az AOS  : %.1f°\r\n"
				"Az LOS  : %.1f°\r\n"
				"--------------------------------------------------------\r\n\r\n",
				// date & time from aos_tm:
				aos_tm.tm_year + 1900, aos_tm.tm_mon + 1, aos_tm.tm_mday,
 80019a4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80019a8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80019ac:	695b      	ldr	r3, [r3, #20]
		snprintf(buff, sizeof(buff),
 80019ae:	f203 7a6c 	addw	sl, r3, #1900	@ 0x76c
				aos_tm.tm_year + 1900, aos_tm.tm_mon + 1, aos_tm.tm_mday,
 80019b2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80019b6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80019ba:	691b      	ldr	r3, [r3, #16]
		snprintf(buff, sizeof(buff),
 80019bc:	3301      	adds	r3, #1
 80019be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019c0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80019c4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019cc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80019d0:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80019d4:	6899      	ldr	r1, [r3, #8]
 80019d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80019d8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80019dc:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80019e0:	6858      	ldr	r0, [r3, #4]
 80019e2:	6278      	str	r0, [r7, #36]	@ 0x24
 80019e4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80019e8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80019ec:	681c      	ldr	r4, [r3, #0]
 80019ee:	623c      	str	r4, [r7, #32]
 80019f0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80019f4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80019f8:	689d      	ldr	r5, [r3, #8]
 80019fa:	61fd      	str	r5, [r7, #28]
 80019fc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a00:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a04:	685e      	ldr	r6, [r3, #4]
 8001a06:	61be      	str	r6, [r7, #24]
 8001a08:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a0c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8001a18:	4a62      	ldr	r2, [pc, #392]	@ (8001ba4 <list_next_passes+0x4c4>)
 8001a1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a1e:	441a      	add	r2, r3
 8001a20:	1152      	asrs	r2, r2, #5
 8001a22:	17db      	asrs	r3, r3, #31
 8001a24:	1ad2      	subs	r2, r2, r3
 8001a26:	613a      	str	r2, [r7, #16]
 8001a28:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8001a2c:	4b5d      	ldr	r3, [pc, #372]	@ (8001ba4 <list_next_passes+0x4c4>)
 8001a2e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a32:	4413      	add	r3, r2
 8001a34:	1159      	asrs	r1, r3, #5
 8001a36:	17d3      	asrs	r3, r2, #31
 8001a38:	1ace      	subs	r6, r1, r3
 8001a3a:	4633      	mov	r3, r6
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	1b9b      	subs	r3, r3, r6
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	1ad6      	subs	r6, r2, r3
				aos_tm.tm_hour,      aos_tm.tm_min,      aos_tm.tm_sec,
				los_tm.tm_hour,      los_tm.tm_min,      los_tm.tm_sec,
				dur/60, dur%60, best_el * 180.0/M_PI,
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b57      	ldr	r3, [pc, #348]	@ (8001ba8 <list_next_passes+0x4c8>)
 8001a4a:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 8001a4e:	f7fe fde3 	bl	8000618 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
		snprintf(buff, sizeof(buff),
 8001a5a:	a34d      	add	r3, pc, #308	@ (adr r3, 8001b90 <list_next_passes+0x4b0>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe ff04 	bl	800086c <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4690      	mov	r8, r2
 8001a6a:	4699      	mov	r9, r3
 8001a6c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a70:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001a74:	6899      	ldr	r1, [r3, #8]
 8001a76:	60f9      	str	r1, [r7, #12]
 8001a78:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a7c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001a80:	6858      	ldr	r0, [r3, #4]
 8001a82:	60b8      	str	r0, [r7, #8]
 8001a84:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a88:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001a8c:	681c      	ldr	r4, [r3, #0]
 8001a8e:	607c      	str	r4, [r7, #4]
				max_tm.tm_hour,max_tm.tm_min,max_tm.tm_sec,
				aos.azimuth * 180.0/M_PI,
 8001a90:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a94:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001a98:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <list_next_passes+0x4c8>)
 8001aa2:	f7fe fdb9 	bl	8000618 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
		snprintf(buff, sizeof(buff),
 8001aae:	a338      	add	r3, pc, #224	@ (adr r3, 8001b90 <list_next_passes+0x4b0>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe feda 	bl	800086c <__aeabi_ddiv>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4614      	mov	r4, r2
 8001abe:	461d      	mov	r5, r3
				los.azimuth * 180.0/M_PI
 8001ac0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	4b37      	ldr	r3, [pc, #220]	@ (8001ba8 <list_next_passes+0x4c8>)
 8001aca:	f7fe fda5 	bl	8000618 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
		snprintf(buff, sizeof(buff),
 8001ad6:	a32e      	add	r3, pc, #184	@ (adr r3, 8001b90 <list_next_passes+0x4b0>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe fec6 	bl	800086c <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8001ae8:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8001aec:	687c      	ldr	r4, [r7, #4]
 8001aee:	940e      	str	r4, [sp, #56]	@ 0x38
 8001af0:	68b8      	ldr	r0, [r7, #8]
 8001af2:	900d      	str	r0, [sp, #52]	@ 0x34
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	910c      	str	r1, [sp, #48]	@ 0x30
 8001af8:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8001afc:	9609      	str	r6, [sp, #36]	@ 0x24
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	9208      	str	r2, [sp, #32]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	9307      	str	r3, [sp, #28]
 8001b06:	69be      	ldr	r6, [r7, #24]
 8001b08:	9606      	str	r6, [sp, #24]
 8001b0a:	69fd      	ldr	r5, [r7, #28]
 8001b0c:	9505      	str	r5, [sp, #20]
 8001b0e:	6a3c      	ldr	r4, [r7, #32]
 8001b10:	9404      	str	r4, [sp, #16]
 8001b12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b14:	9003      	str	r0, [sp, #12]
 8001b16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b18:	9102      	str	r1, [sp, #8]
 8001b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b1c:	9201      	str	r2, [sp, #4]
 8001b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	4653      	mov	r3, sl
 8001b24:	4a21      	ldr	r2, [pc, #132]	@ (8001bac <list_next_passes+0x4cc>)
 8001b26:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8001b2a:	4821      	ldr	r0, [pc, #132]	@ (8001bb0 <list_next_passes+0x4d0>)
 8001b2c:	f01c f9fa 	bl	801df24 <sniprintf>
		);
		HAL_UART_Transmit(&huart2,(uint8_t*)buff,strlen(buff),HAL_MAX_DELAY);
 8001b30:	481f      	ldr	r0, [pc, #124]	@ (8001bb0 <list_next_passes+0x4d0>)
 8001b32:	f7fe fbad 	bl	8000290 <strlen>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	491c      	ldr	r1, [pc, #112]	@ (8001bb0 <list_next_passes+0x4d0>)
 8001b40:	481c      	ldr	r0, [pc, #112]	@ (8001bb4 <list_next_passes+0x4d4>)
 8001b42:	f015 fcef 	bl	8017524 <HAL_UART_Transmit>

		// 7) advance to after this LOS
		t = los.time + ONE_SEC_IN_DAYS;
 8001b46:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8001b4a:	a313      	add	r3, pc, #76	@ (adr r3, 8001b98 <list_next_passes+0x4b8>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	f7fe fbac 	bl	80002ac <__adddf3>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
	for(int i = 0; i < count; i++) {
 8001b5c:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8001b60:	3301      	adds	r3, #1
 8001b62:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8001b66:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001b6a:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f6ff add5 	blt.w	8001724 <list_next_passes+0x44>
	}

	return first_los_utc;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <list_next_passes+0x4c0>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f507 7720 	add.w	r7, r7, #640	@ 0x280
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b8e:	bf00      	nop
 8001b90:	54442d18 	.word	0x54442d18
 8001b94:	400921fb 	.word	0x400921fb
 8001b98:	a0ce5129 	.word	0xa0ce5129
 8001b9c:	3ee845c8 	.word	0x3ee845c8
 8001ba0:	200004e8 	.word	0x200004e8
 8001ba4:	88888889 	.word	0x88888889
 8001ba8:	40668000 	.word	0x40668000
 8001bac:	08025ca0 	.word	0x08025ca0
 8001bb0:	20000284 	.word	0x20000284
 8001bb4:	20001420 	.word	0x20001420
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	c1cdcd65 	.word	0xc1cdcd65
 8001bc0:	c901e574 	.word	0xc901e574
 8001bc4:	3f1e573a 	.word	0x3f1e573a
 8001bc8:	4ae74487 	.word	0x4ae74487
 8001bcc:	3fc65718 	.word	0x3fc65718

08001bd0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
 8001bf0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb4 <MX_ADC1_Init+0xe4>)
 8001bf6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c04:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c0a:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c10:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c12:	2204      	movs	r2, #4
 8001c14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c16:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c1c:	4b24      	ldr	r3, [pc, #144]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c22:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c28:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c36:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c44:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c4a:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c52:	4817      	ldr	r0, [pc, #92]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c54:	f010 fd80 	bl	8012758 <HAL_ADC_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001c5e:	f000 febf 	bl	80029e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4810      	ldr	r0, [pc, #64]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c6e:	f011 fadb 	bl	8013228 <HAL_ADCEx_MultiModeConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001c78:	f000 feb2 	bl	80029e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <MX_ADC1_Init+0xe8>)
 8001c7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c80:	2306      	movs	r3, #6
 8001c82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c88:	237f      	movs	r3, #127	@ 0x7f
 8001c8a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <MX_ADC1_Init+0xe0>)
 8001c9a:	f010 fead 	bl	80129f8 <HAL_ADC_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001ca4:	f000 fe9c 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	3728      	adds	r7, #40	@ 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200004f0 	.word	0x200004f0
 8001cb4:	50040000 	.word	0x50040000
 8001cb8:	14f00020 	.word	0x14f00020

08001cbc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
 8001cd0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001cd2:	4b29      	ldr	r3, [pc, #164]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001cd4:	4a29      	ldr	r2, [pc, #164]	@ (8001d7c <MX_ADC2_Init+0xc0>)
 8001cd6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001cd8:	4b27      	ldr	r3, [pc, #156]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001cde:	4b26      	ldr	r3, [pc, #152]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ce4:	4b24      	ldr	r3, [pc, #144]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cea:	4b23      	ldr	r3, [pc, #140]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cf0:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001cf6:	4b20      	ldr	r3, [pc, #128]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001d02:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d10:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d16:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d32:	4811      	ldr	r0, [pc, #68]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001d34:	f010 fd10 	bl	8012758 <HAL_ADC_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001d3e:	f000 fe4f 	bl	80029e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d42:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <MX_ADC2_Init+0xc4>)
 8001d44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d46:	2306      	movs	r3, #6
 8001d48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d4e:	237f      	movs	r3, #127	@ 0x7f
 8001d50:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d52:	2304      	movs	r3, #4
 8001d54:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4806      	ldr	r0, [pc, #24]	@ (8001d78 <MX_ADC2_Init+0xbc>)
 8001d60:	f010 fe4a 	bl	80129f8 <HAL_ADC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8001d6a:	f000 fe39 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000554 	.word	0x20000554
 8001d7c:	50040100 	.word	0x50040100
 8001d80:	04300002 	.word	0x04300002

08001d84 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08c      	sub	sp, #48	@ 0x30
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a33      	ldr	r2, [pc, #204]	@ (8001e70 <HAL_ADC_MspInit+0xec>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d12e      	bne.n	8001e04 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001da6:	4b33      	ldr	r3, [pc, #204]	@ (8001e74 <HAL_ADC_MspInit+0xf0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	4a31      	ldr	r2, [pc, #196]	@ (8001e74 <HAL_ADC_MspInit+0xf0>)
 8001dae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001db0:	4b30      	ldr	r3, [pc, #192]	@ (8001e74 <HAL_ADC_MspInit+0xf0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10b      	bne.n	8001dd0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001db8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e78 <HAL_ADC_MspInit+0xf4>)
 8001dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8001e78 <HAL_ADC_MspInit+0xf4>)
 8001dbe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001dc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e78 <HAL_ADC_MspInit+0xf4>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4b29      	ldr	r3, [pc, #164]	@ (8001e78 <HAL_ADC_MspInit+0xf4>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd4:	4a28      	ldr	r2, [pc, #160]	@ (8001e78 <HAL_ADC_MspInit+0xf4>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ddc:	4b26      	ldr	r3, [pc, #152]	@ (8001e78 <HAL_ADC_MspInit+0xf4>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001de8:	2301      	movs	r3, #1
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001dec:	230b      	movs	r3, #11
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dfe:	f011 fc33 	bl	8013668 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001e02:	e031      	b.n	8001e68 <HAL_ADC_MspInit+0xe4>
  else if(adcHandle->Instance==ADC2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <HAL_ADC_MspInit+0xf8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d12c      	bne.n	8001e68 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <HAL_ADC_MspInit+0xf0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	4a17      	ldr	r2, [pc, #92]	@ (8001e74 <HAL_ADC_MspInit+0xf0>)
 8001e16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001e18:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <HAL_ADC_MspInit+0xf0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d10b      	bne.n	8001e38 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001e20:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_ADC_MspInit+0xf4>)
 8001e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e24:	4a14      	ldr	r2, [pc, #80]	@ (8001e78 <HAL_ADC_MspInit+0xf4>)
 8001e26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e2c:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <HAL_ADC_MspInit+0xf4>)
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e38:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <HAL_ADC_MspInit+0xf4>)
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001e78 <HAL_ADC_MspInit+0xf4>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <HAL_ADC_MspInit+0xf4>)
 8001e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e50:	2301      	movs	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e54:	230b      	movs	r3, #11
 8001e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	4807      	ldr	r0, [pc, #28]	@ (8001e80 <HAL_ADC_MspInit+0xfc>)
 8001e64:	f011 fc00 	bl	8013668 <HAL_GPIO_Init>
}
 8001e68:	bf00      	nop
 8001e6a:	3730      	adds	r7, #48	@ 0x30
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	50040000 	.word	0x50040000
 8001e74:	200005b8 	.word	0x200005b8
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	50040100 	.word	0x50040100
 8001e80:	48000800 	.word	0x48000800

08001e84 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4a07      	ldr	r2, [pc, #28]	@ (8001eb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e94:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	4a06      	ldr	r2, [pc, #24]	@ (8001eb4 <vApplicationGetIdleTaskMemory+0x30>)
 8001e9a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2280      	movs	r2, #128	@ 0x80
 8001ea0:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200005dc 	.word	0x200005dc
 8001eb4:	2000067c 	.word	0x2000067c

08001eb8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a07      	ldr	r2, [pc, #28]	@ (8001ee4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001ec8:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	4a06      	ldr	r2, [pc, #24]	@ (8001ee8 <vApplicationGetTimerTaskMemory+0x30>)
 8001ece:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ed6:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	2000087c 	.word	0x2000087c
 8001ee8:	2000091c 	.word	0x2000091c

08001eec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001eec:	b5b0      	push	{r4, r5, r7, lr}
 8001eee:	b0b2      	sub	sp, #200	@ 0xc8
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	GpsToIhm=xQueueCreate(10,sizeof(GPS_IHM));
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	210c      	movs	r1, #12
 8001ef6:	200a      	movs	r0, #10
 8001ef8:	f017 f8cb 	bl	8019092 <xQueueGenericCreate>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4a44      	ldr	r2, [pc, #272]	@ (8002010 <MX_FREERTOS_Init+0x124>)
 8001f00:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001f02:	4b44      	ldr	r3, [pc, #272]	@ (8002014 <MX_FREERTOS_Init+0x128>)
 8001f04:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8001f08:	461d      	mov	r5, r3
 8001f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001f16:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f016 febc 	bl	8018c9a <osThreadCreate>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4a3c      	ldr	r2, [pc, #240]	@ (8002018 <MX_FREERTOS_Init+0x12c>)
 8001f26:	6013      	str	r3, [r2, #0]

  /* definition and creation of IHM_Task */
  osThreadDef(IHM_Task, Start_IHM_Task, osPriorityIdle, 0, 512);
 8001f28:	4b3c      	ldr	r3, [pc, #240]	@ (800201c <MX_FREERTOS_Init+0x130>)
 8001f2a:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001f2e:	461d      	mov	r5, r3
 8001f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IHM_TaskHandle = osThreadCreate(osThread(IHM_Task), NULL);
 8001f3c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f016 fea9 	bl	8018c9a <osThreadCreate>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4a35      	ldr	r2, [pc, #212]	@ (8002020 <MX_FREERTOS_Init+0x134>)
 8001f4c:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS_Task */
  osThreadDef(GPS_Task, Start_GPS_Task, osPriorityIdle, 0, 512);
 8001f4e:	4b35      	ldr	r3, [pc, #212]	@ (8002024 <MX_FREERTOS_Init+0x138>)
 8001f50:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001f54:	461d      	mov	r5, r3
 8001f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPS_TaskHandle = osThreadCreate(osThread(GPS_Task), NULL);
 8001f62:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f016 fe96 	bl	8018c9a <osThreadCreate>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4a2d      	ldr	r2, [pc, #180]	@ (8002028 <MX_FREERTOS_Init+0x13c>)
 8001f72:	6013      	str	r3, [r2, #0]

  /* definition and creation of SatellitePredic */
  osThreadDef(SatellitePredic, Start_SatellitePrediction_Task, osPriorityIdle, 0, 1024);
 8001f74:	4b2d      	ldr	r3, [pc, #180]	@ (800202c <MX_FREERTOS_Init+0x140>)
 8001f76:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001f7a:	461d      	mov	r5, r3
 8001f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SatellitePredicHandle = osThreadCreate(osThread(SatellitePredic), NULL);
 8001f88:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f016 fe83 	bl	8018c9a <osThreadCreate>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4a26      	ldr	r2, [pc, #152]	@ (8002030 <MX_FREERTOS_Init+0x144>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sensors_Task */
  osThreadDef(Sensors_Task, Start_Sensors_Task, osPriorityIdle, 0, 512);
 8001f9a:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <MX_FREERTOS_Init+0x148>)
 8001f9c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001fa0:	461d      	mov	r5, r3
 8001fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001faa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Sensors_TaskHandle = osThreadCreate(osThread(Sensors_Task), NULL);
 8001fae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f016 fe70 	bl	8018c9a <osThreadCreate>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <MX_FREERTOS_Init+0x14c>)
 8001fbe:	6013      	str	r3, [r2, #0]

  /* definition and creation of MonitorTask */
  osThreadDef(MonitorTask, StartMonitorTask, osPriorityIdle, 0, 256);
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800203c <MX_FREERTOS_Init+0x150>)
 8001fc2:	f107 0420 	add.w	r4, r7, #32
 8001fc6:	461d      	mov	r5, r3
 8001fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MonitorTaskHandle = osThreadCreate(osThread(MonitorTask), NULL);
 8001fd4:	f107 0320 	add.w	r3, r7, #32
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f016 fe5d 	bl	8018c9a <osThreadCreate>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a17      	ldr	r2, [pc, #92]	@ (8002040 <MX_FREERTOS_Init+0x154>)
 8001fe4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Lora_Task */
  osThreadDef(Lora_Task, Start_Lora_Task, osPriorityIdle, 0, 512);
 8001fe6:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <MX_FREERTOS_Init+0x158>)
 8001fe8:	1d3c      	adds	r4, r7, #4
 8001fea:	461d      	mov	r5, r3
 8001fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ff4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Lora_TaskHandle = osThreadCreate(osThread(Lora_Task), NULL);
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f016 fe4c 	bl	8018c9a <osThreadCreate>
 8002002:	4603      	mov	r3, r0
 8002004:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <MX_FREERTOS_Init+0x15c>)
 8002006:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002008:	bf00      	nop
 800200a:	37c8      	adds	r7, #200	@ 0xc8
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}
 8002010:	200005bc 	.word	0x200005bc
 8002014:	08025dd4 	.word	0x08025dd4
 8002018:	200005c0 	.word	0x200005c0
 800201c:	08025dfc 	.word	0x08025dfc
 8002020:	200005c4 	.word	0x200005c4
 8002024:	08025e24 	.word	0x08025e24
 8002028:	200005c8 	.word	0x200005c8
 800202c:	08025e50 	.word	0x08025e50
 8002030:	200005cc 	.word	0x200005cc
 8002034:	08025e7c 	.word	0x08025e7c
 8002038:	200005d0 	.word	0x200005d0
 800203c:	08025ea4 	.word	0x08025ea4
 8002040:	200005d4 	.word	0x200005d4
 8002044:	08025ecc 	.word	0x08025ecc
 8002048:	200005d8 	.word	0x200005d8

0800204c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */

	for(;;)
	{
		osDelay(1);
 8002054:	2001      	movs	r0, #1
 8002056:	f016 fe6c 	bl	8018d32 <osDelay>
 800205a:	e7fb      	b.n	8002054 <StartDefaultTask+0x8>

0800205c <Start_IHM_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_IHM_Task */
__weak void Start_IHM_Task(void const * argument)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_IHM_Task */

	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8002064:	2001      	movs	r0, #1
 8002066:	f016 fe64 	bl	8018d32 <osDelay>
 800206a:	e7fb      	b.n	8002064 <Start_IHM_Task+0x8>

0800206c <StartMonitorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMonitorTask */
void StartMonitorTask(void const * argument)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
				uxTaskGetStackHighWaterMark(Sensors_TaskHandle) ,
				(unsigned long)xPortGetFreeHeapSize(),uxTaskGetStackHighWaterMark(Lora_TaskHandle));

		HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
*/
		osDelay(10);
 8002074:	200a      	movs	r0, #10
 8002076:	f016 fe5c 	bl	8018d32 <osDelay>
 800207a:	e7fb      	b.n	8002074 <StartMonitorTask+0x8>

0800207c <Start_Lora_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Lora_Task */
__weak void Start_Lora_Task(void const * argument)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Lora_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002084:	2001      	movs	r0, #1
 8002086:	f016 fe54 	bl	8018d32 <osDelay>
 800208a:	e7fb      	b.n	8002084 <Start_Lora_Task+0x8>

0800208c <_gettimeofday>:
 *  Created on: Jun 23, 2025
 *      Author: ThinkPad
 */

int _gettimeofday()
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

    return 0;  // return non-zero for error
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	@ 0x28
 80020a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 0314 	add.w	r3, r7, #20
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b2:	4b36      	ldr	r3, [pc, #216]	@ (800218c <MX_GPIO_Init+0xf0>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	4a35      	ldr	r2, [pc, #212]	@ (800218c <MX_GPIO_Init+0xf0>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020be:	4b33      	ldr	r3, [pc, #204]	@ (800218c <MX_GPIO_Init+0xf0>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ca:	4b30      	ldr	r3, [pc, #192]	@ (800218c <MX_GPIO_Init+0xf0>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	4a2f      	ldr	r2, [pc, #188]	@ (800218c <MX_GPIO_Init+0xf0>)
 80020d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d6:	4b2d      	ldr	r3, [pc, #180]	@ (800218c <MX_GPIO_Init+0xf0>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <MX_GPIO_Init+0xf0>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	4a29      	ldr	r2, [pc, #164]	@ (800218c <MX_GPIO_Init+0xf0>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ee:	4b27      	ldr	r3, [pc, #156]	@ (800218c <MX_GPIO_Init+0xf0>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	4b24      	ldr	r3, [pc, #144]	@ (800218c <MX_GPIO_Init+0xf0>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	4a23      	ldr	r2, [pc, #140]	@ (800218c <MX_GPIO_Init+0xf0>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002106:	4b21      	ldr	r3, [pc, #132]	@ (800218c <MX_GPIO_Init+0xf0>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	2120      	movs	r1, #32
 8002116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800211a:	f011 fc67 	bl	80139ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800211e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002124:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	4816      	ldr	r0, [pc, #88]	@ (8002190 <MX_GPIO_Init+0xf4>)
 8002136:	f011 fa97 	bl	8013668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800213a:	2302      	movs	r3, #2
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800213e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002144:	2302      	movs	r3, #2
 8002146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4619      	mov	r1, r3
 800214e:	4810      	ldr	r0, [pc, #64]	@ (8002190 <MX_GPIO_Init+0xf4>)
 8002150:	f011 fa8a 	bl	8013668 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002154:	2320      	movs	r3, #32
 8002156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	2301      	movs	r3, #1
 800215a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800216e:	f011 fa7b 	bl	8013668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2105      	movs	r1, #5
 8002176:	2007      	movs	r0, #7
 8002178:	f011 f9be 	bl	80134f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800217c:	2007      	movs	r0, #7
 800217e:	f011 f9d7 	bl	8013530 <HAL_NVIC_EnableIRQ>

}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	@ 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	48000800 	.word	0x48000800

08002194 <GPS_Init>:
char buffs[200];
int test_year=0;
int test_month=0;
int test_day=0;
void GPS_Init()
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8002198:	2201      	movs	r2, #1
 800219a:	4903      	ldr	r1, [pc, #12]	@ (80021a8 <GPS_Init+0x14>)
 800219c:	4803      	ldr	r0, [pc, #12]	@ (80021ac <GPS_Init+0x18>)
 800219e:	f015 fa4b 	bl	8017638 <HAL_UART_Receive_IT>
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000d1c 	.word	0x20000d1c
 80021ac:	20001398 	.word	0x20001398

080021b0 <GPS_validate>:


int GPS_validate(char *nmeastr){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i=0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
	calculated_check=0;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if(nmeastr[i] == '$')
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b24      	cmp	r3, #36	@ 0x24
 80021ca:	d103      	bne.n	80021d4 <GPS_validate+0x24>
		i++;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3301      	adds	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80021d2:	e00c      	b.n	80021ee <GPS_validate+0x3e>
		return 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e047      	b.n	8002268 <GPS_validate+0xb8>
		calculated_check ^= nmeastr[i];// calculate the checksum
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4053      	eors	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
		i++;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	3301      	adds	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
	while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	4413      	add	r3, r2
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d008      	beq.n	800220c <GPS_validate+0x5c>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b2a      	cmp	r3, #42	@ 0x2a
 8002204:	d002      	beq.n	800220c <GPS_validate+0x5c>
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b4a      	cmp	r3, #74	@ 0x4a
 800220a:	dde5      	ble.n	80021d8 <GPS_validate+0x28>
	}

	if(i >= 75){
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2b4a      	cmp	r3, #74	@ 0x4a
 8002210:	dd01      	ble.n	8002216 <GPS_validate+0x66>
		return 0;// the string was too long so return an error
 8002212:	2300      	movs	r3, #0
 8002214:	e028      	b.n	8002268 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*'){
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002220:	d119      	bne.n	8002256 <GPS_validate+0xa6>
		check[0] = nmeastr[i+1];    //put hex chars in check string
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3301      	adds	r3, #1
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i+2];
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3302      	adds	r3, #2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;// no checksum separator found there for invalid

	sprintf(checkcalcstr,"%02X",calculated_check);
 800223e:	f107 0308 	add.w	r3, r7, #8
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	490a      	ldr	r1, [pc, #40]	@ (8002270 <GPS_validate+0xc0>)
 8002246:	4618      	mov	r0, r3
 8002248:	f01b fea2 	bl	801df90 <siprintf>
	return((checkcalcstr[0] == check[0])
 800224c:	7a3a      	ldrb	r2, [r7, #8]
 800224e:	7b3b      	ldrb	r3, [r7, #12]
			&& (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8002250:	429a      	cmp	r2, r3
 8002252:	d108      	bne.n	8002266 <GPS_validate+0xb6>
 8002254:	e001      	b.n	800225a <GPS_validate+0xaa>
		return 0;// no checksum separator found there for invalid
 8002256:	2300      	movs	r3, #0
 8002258:	e006      	b.n	8002268 <GPS_validate+0xb8>
			&& (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800225a:	7a7a      	ldrb	r2, [r7, #9]
 800225c:	7b7b      	ldrb	r3, [r7, #13]
 800225e:	429a      	cmp	r2, r3
 8002260:	d101      	bne.n	8002266 <GPS_validate+0xb6>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <GPS_validate+0xb8>
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	08025ee8 	.word	0x08025ee8

08002274 <GPS_parse>:
void GPS_parse(char *GPSstrParse){
 8002274:	b580      	push	{r7, lr}
 8002276:	b0ba      	sub	sp, #232	@ 0xe8
 8002278:	af08      	add	r7, sp, #32
 800227a:	6078      	str	r0, [r7, #4]
	if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 800227c:	2206      	movs	r2, #6
 800227e:	498a      	ldr	r1, [pc, #552]	@ (80024a8 <GPS_parse+0x234>)
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f01b ff2d 	bl	801e0e0 <strncmp>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d138      	bne.n	80022fe <GPS_parse+0x8a>
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 800228c:	4b87      	ldr	r3, [pc, #540]	@ (80024ac <GPS_parse+0x238>)
 800228e:	9307      	str	r3, [sp, #28]
 8002290:	4b87      	ldr	r3, [pc, #540]	@ (80024b0 <GPS_parse+0x23c>)
 8002292:	9306      	str	r3, [sp, #24]
 8002294:	4b87      	ldr	r3, [pc, #540]	@ (80024b4 <GPS_parse+0x240>)
 8002296:	9305      	str	r3, [sp, #20]
 8002298:	4b87      	ldr	r3, [pc, #540]	@ (80024b8 <GPS_parse+0x244>)
 800229a:	9304      	str	r3, [sp, #16]
 800229c:	4b87      	ldr	r3, [pc, #540]	@ (80024bc <GPS_parse+0x248>)
 800229e:	9303      	str	r3, [sp, #12]
 80022a0:	4b87      	ldr	r3, [pc, #540]	@ (80024c0 <GPS_parse+0x24c>)
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	4b87      	ldr	r3, [pc, #540]	@ (80024c4 <GPS_parse+0x250>)
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	4b87      	ldr	r3, [pc, #540]	@ (80024c8 <GPS_parse+0x254>)
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	4b87      	ldr	r3, [pc, #540]	@ (80024cc <GPS_parse+0x258>)
 80022ae:	4a88      	ldr	r2, [pc, #544]	@ (80024d0 <GPS_parse+0x25c>)
 80022b0:	4988      	ldr	r1, [pc, #544]	@ (80024d4 <GPS_parse+0x260>)
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f01b fe8e 	bl	801dfd4 <siscanf>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f340 80e2 	ble.w	8002484 <GPS_parse+0x210>
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80022c0:	4b85      	ldr	r3, [pc, #532]	@ (80024d8 <GPS_parse+0x264>)
 80022c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80022c6:	4b84      	ldr	r3, [pc, #528]	@ (80024d8 <GPS_parse+0x264>)
 80022c8:	7e1b      	ldrb	r3, [r3, #24]
 80022ca:	4618      	mov	r0, r3
 80022cc:	eeb0 0a67 	vmov.f32	s0, s15
 80022d0:	f000 f92c 	bl	800252c <GPS_nmea_to_dec>
 80022d4:	eef0 7a40 	vmov.f32	s15, s0
 80022d8:	4b7f      	ldr	r3, [pc, #508]	@ (80024d8 <GPS_parse+0x264>)
 80022da:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80022de:	4b7e      	ldr	r3, [pc, #504]	@ (80024d8 <GPS_parse+0x264>)
 80022e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80022e4:	4b7c      	ldr	r3, [pc, #496]	@ (80024d8 <GPS_parse+0x264>)
 80022e6:	7e5b      	ldrb	r3, [r3, #25]
 80022e8:	4618      	mov	r0, r3
 80022ea:	eeb0 0a67 	vmov.f32	s0, s15
 80022ee:	f000 f91d 	bl	800252c <GPS_nmea_to_dec>
 80022f2:	eef0 7a40 	vmov.f32	s15, s0
 80022f6:	4b78      	ldr	r3, [pc, #480]	@ (80024d8 <GPS_parse+0x264>)
 80022f8:	edc3 7a00 	vstr	s15, [r3]
			return;
 80022fc:	e0d0      	b.n	80024a0 <GPS_parse+0x22c>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6)) {
 80022fe:	2206      	movs	r2, #6
 8002300:	4976      	ldr	r1, [pc, #472]	@ (80024dc <GPS_parse+0x268>)
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f01b feec 	bl	801e0e0 <strncmp>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 8083 	bne.w	8002416 <GPS_parse+0x1a2>
		char *tokens[20];
		int i = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		char tempStr[100];
		// Copie sécurisée pour strtok
		strncpy(tempStr, GPSstrParse, sizeof(tempStr)-1);
 8002316:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800231a:	2263      	movs	r2, #99	@ 0x63
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4618      	mov	r0, r3
 8002320:	f01b fef0 	bl	801e104 <strncpy>
		tempStr[sizeof(tempStr)-1] = '\0';
 8002324:	2300      	movs	r3, #0
 8002326:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf

		// Extraction des tokens (y compris vides)
		char *p = tempStr;
 800232a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800232e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		while(i < 20) {
 8002332:	e01f      	b.n	8002374 <GPS_parse+0x100>
		    tokens[i++] = p;
 8002334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	33c8      	adds	r3, #200	@ 0xc8
 8002342:	443b      	add	r3, r7
 8002344:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002348:	f843 2cbc 	str.w	r2, [r3, #-188]
		    p = strchr(p, ',');
 800234c:	212c      	movs	r1, #44	@ 0x2c
 800234e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8002352:	f01b feb8 	bl	801e0c6 <strchr>
 8002356:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
		    if(p) {
 800235a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00d      	beq.n	800237e <GPS_parse+0x10a>
		        *p = '\0';
 8002362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
		        p++;
 800236a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800236e:	3301      	adds	r3, #1
 8002370:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		while(i < 20) {
 8002374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002378:	2b13      	cmp	r3, #19
 800237a:	dddb      	ble.n	8002334 <GPS_parse+0xc0>
 800237c:	e000      	b.n	8002380 <GPS_parse+0x10c>
		    } else {
		        break;
 800237e:	bf00      	nop
		    snprintf(buffs, sizeof(buffs), "Token[%d]: %s\n", j, tokens[j]);
		    HAL_UART_Transmit(&huart2, (uint8_t*)buffs, strlen(buffs), HAL_MAX_DELAY);
		}*/

		// Extraction correcte de la date (token numéro 9)
		if (i > 9 && strlen(tokens[9]) == 6) {
 8002380:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002384:	2b09      	cmp	r3, #9
 8002386:	dd7d      	ble.n	8002484 <GPS_parse+0x210>
 8002388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238a:	4618      	mov	r0, r3
 800238c:	f7fd ff80 	bl	8000290 <strlen>
 8002390:	4603      	mov	r3, r0
 8002392:	2b06      	cmp	r3, #6
 8002394:	d176      	bne.n	8002484 <GPS_parse+0x210>
		    GPS.date = atoi(tokens[9]);
 8002396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002398:	4618      	mov	r0, r3
 800239a:	f019 ff28 	bl	801c1ee <atoi>
 800239e:	4603      	mov	r3, r0
 80023a0:	4a4d      	ldr	r2, [pc, #308]	@ (80024d8 <GPS_parse+0x264>)
 80023a2:	6393      	str	r3, [r2, #56]	@ 0x38
		    days = GPS.date / 10000;
 80023a4:	4b4c      	ldr	r3, [pc, #304]	@ (80024d8 <GPS_parse+0x264>)
 80023a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a8:	4a4d      	ldr	r2, [pc, #308]	@ (80024e0 <GPS_parse+0x26c>)
 80023aa:	fb82 1203 	smull	r1, r2, r2, r3
 80023ae:	1312      	asrs	r2, r2, #12
 80023b0:	17db      	asrs	r3, r3, #31
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	4a4b      	ldr	r2, [pc, #300]	@ (80024e4 <GPS_parse+0x270>)
 80023b6:	6013      	str	r3, [r2, #0]
		    mon = (GPS.date / 100) % 100;
 80023b8:	4b47      	ldr	r3, [pc, #284]	@ (80024d8 <GPS_parse+0x264>)
 80023ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023bc:	4a4a      	ldr	r2, [pc, #296]	@ (80024e8 <GPS_parse+0x274>)
 80023be:	fb82 1203 	smull	r1, r2, r2, r3
 80023c2:	1152      	asrs	r2, r2, #5
 80023c4:	17db      	asrs	r3, r3, #31
 80023c6:	1ad2      	subs	r2, r2, r3
 80023c8:	4b47      	ldr	r3, [pc, #284]	@ (80024e8 <GPS_parse+0x274>)
 80023ca:	fb83 1302 	smull	r1, r3, r3, r2
 80023ce:	1159      	asrs	r1, r3, #5
 80023d0:	17d3      	asrs	r3, r2, #31
 80023d2:	1acb      	subs	r3, r1, r3
 80023d4:	2164      	movs	r1, #100	@ 0x64
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	4a43      	ldr	r2, [pc, #268]	@ (80024ec <GPS_parse+0x278>)
 80023de:	6013      	str	r3, [r2, #0]
		    yr = GPS.date % 100;
 80023e0:	4b3d      	ldr	r3, [pc, #244]	@ (80024d8 <GPS_parse+0x264>)
 80023e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023e4:	4b40      	ldr	r3, [pc, #256]	@ (80024e8 <GPS_parse+0x274>)
 80023e6:	fb83 1302 	smull	r1, r3, r3, r2
 80023ea:	1159      	asrs	r1, r3, #5
 80023ec:	17d3      	asrs	r3, r2, #31
 80023ee:	1acb      	subs	r3, r1, r3
 80023f0:	2164      	movs	r1, #100	@ 0x64
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	4a3d      	ldr	r2, [pc, #244]	@ (80024f0 <GPS_parse+0x27c>)
 80023fa:	6013      	str	r3, [r2, #0]

		    MyGps.day = days;
 80023fc:	4b39      	ldr	r3, [pc, #228]	@ (80024e4 <GPS_parse+0x270>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a3c      	ldr	r2, [pc, #240]	@ (80024f4 <GPS_parse+0x280>)
 8002402:	6193      	str	r3, [r2, #24]
		    MyGps.month = mon;
 8002404:	4b39      	ldr	r3, [pc, #228]	@ (80024ec <GPS_parse+0x278>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a3a      	ldr	r2, [pc, #232]	@ (80024f4 <GPS_parse+0x280>)
 800240a:	61d3      	str	r3, [r2, #28]
		    MyGps.year = yr;
 800240c:	4b38      	ldr	r3, [pc, #224]	@ (80024f0 <GPS_parse+0x27c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a38      	ldr	r2, [pc, #224]	@ (80024f4 <GPS_parse+0x280>)
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	e036      	b.n	8002484 <GPS_parse+0x210>


	}
	}

	else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8002416:	2206      	movs	r2, #6
 8002418:	4937      	ldr	r1, [pc, #220]	@ (80024f8 <GPS_parse+0x284>)
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f01b fe60 	bl	801e0e0 <strncmp>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d111      	bne.n	800244a <GPS_parse+0x1d6>
		if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8002426:	4b35      	ldr	r3, [pc, #212]	@ (80024fc <GPS_parse+0x288>)
 8002428:	9303      	str	r3, [sp, #12]
 800242a:	4b29      	ldr	r3, [pc, #164]	@ (80024d0 <GPS_parse+0x25c>)
 800242c:	9302      	str	r3, [sp, #8]
 800242e:	4b24      	ldr	r3, [pc, #144]	@ (80024c0 <GPS_parse+0x24c>)
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	4b24      	ldr	r3, [pc, #144]	@ (80024c4 <GPS_parse+0x250>)
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	4b24      	ldr	r3, [pc, #144]	@ (80024c8 <GPS_parse+0x254>)
 8002438:	4a24      	ldr	r2, [pc, #144]	@ (80024cc <GPS_parse+0x258>)
 800243a:	4931      	ldr	r1, [pc, #196]	@ (8002500 <GPS_parse+0x28c>)
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f01b fdc9 	bl	801dfd4 <siscanf>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	dd1d      	ble.n	8002484 <GPS_parse+0x210>
			return;
 8002448:	e02a      	b.n	80024a0 <GPS_parse+0x22c>
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 800244a:	2206      	movs	r2, #6
 800244c:	492d      	ldr	r1, [pc, #180]	@ (8002504 <GPS_parse+0x290>)
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f01b fe46 	bl	801e0e0 <strncmp>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d114      	bne.n	8002484 <GPS_parse+0x210>
		if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800245a:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <GPS_parse+0x294>)
 800245c:	9305      	str	r3, [sp, #20]
 800245e:	4b2b      	ldr	r3, [pc, #172]	@ (800250c <GPS_parse+0x298>)
 8002460:	9304      	str	r3, [sp, #16]
 8002462:	4b2b      	ldr	r3, [pc, #172]	@ (8002510 <GPS_parse+0x29c>)
 8002464:	9303      	str	r3, [sp, #12]
 8002466:	4b2b      	ldr	r3, [pc, #172]	@ (8002514 <GPS_parse+0x2a0>)
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	4b2b      	ldr	r3, [pc, #172]	@ (8002518 <GPS_parse+0x2a4>)
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	4b2b      	ldr	r3, [pc, #172]	@ (800251c <GPS_parse+0x2a8>)
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	4b2b      	ldr	r3, [pc, #172]	@ (8002520 <GPS_parse+0x2ac>)
 8002474:	4a2b      	ldr	r2, [pc, #172]	@ (8002524 <GPS_parse+0x2b0>)
 8002476:	492c      	ldr	r1, [pc, #176]	@ (8002528 <GPS_parse+0x2b4>)
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f01b fdab 	bl	801dfd4 <siscanf>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	dc0c      	bgt.n	800249e <GPS_parse+0x22a>
			return;
	}
	MyGps.alt_gps=GPS.msl_altitude;
 8002484:	4b14      	ldr	r3, [pc, #80]	@ (80024d8 <GPS_parse+0x264>)
 8002486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002488:	4a1a      	ldr	r2, [pc, #104]	@ (80024f4 <GPS_parse+0x280>)
 800248a:	6013      	str	r3, [r2, #0]
	MyGps.lat_gps=GPS.dec_latitude;
 800248c:	4b12      	ldr	r3, [pc, #72]	@ (80024d8 <GPS_parse+0x264>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a18      	ldr	r2, [pc, #96]	@ (80024f4 <GPS_parse+0x280>)
 8002492:	6053      	str	r3, [r2, #4]
	MyGps.long_gps=GPS.dec_longitude;
 8002494:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <GPS_parse+0x264>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a16      	ldr	r2, [pc, #88]	@ (80024f4 <GPS_parse+0x280>)
 800249a:	6093      	str	r3, [r2, #8]
 800249c:	e000      	b.n	80024a0 <GPS_parse+0x22c>
			return;
 800249e:	bf00      	nop
	//sprintf(buffs, "Raw GPS altitude from NMEA: %.2f m\r\n", GPS.msl_altitude);
	//HAL_UART_Transmit(&huart2,(uint8_t*)buffs, strlen(buffs), HAL_MAX_DELAY);
}
 80024a0:	37c8      	adds	r7, #200	@ 0xc8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	08025ef0 	.word	0x08025ef0
 80024ac:	20000de8 	.word	0x20000de8
 80024b0:	20000de4 	.word	0x20000de4
 80024b4:	20000de0 	.word	0x20000de0
 80024b8:	20000ddc 	.word	0x20000ddc
 80024bc:	20000dd8 	.word	0x20000dd8
 80024c0:	20000dd5 	.word	0x20000dd5
 80024c4:	20000dc8 	.word	0x20000dc8
 80024c8:	20000dd4 	.word	0x20000dd4
 80024cc:	20000dcc 	.word	0x20000dcc
 80024d0:	20000dd0 	.word	0x20000dd0
 80024d4:	08025ef8 	.word	0x08025ef8
 80024d8:	20000dbc 	.word	0x20000dbc
 80024dc:	08025f20 	.word	0x08025f20
 80024e0:	68db8bad 	.word	0x68db8bad
 80024e4:	20000dac 	.word	0x20000dac
 80024e8:	51eb851f 	.word	0x51eb851f
 80024ec:	20000db0 	.word	0x20000db0
 80024f0:	20000db4 	.word	0x20000db4
 80024f4:	20000000 	.word	0x20000000
 80024f8:	08025f28 	.word	0x08025f28
 80024fc:	20000df8 	.word	0x20000df8
 8002500:	08025f30 	.word	0x08025f30
 8002504:	08025f4c 	.word	0x08025f4c
 8002508:	20000e10 	.word	0x20000e10
 800250c:	20000e0c 	.word	0x20000e0c
 8002510:	20000e09 	.word	0x20000e09
 8002514:	20000dec 	.word	0x20000dec
 8002518:	20000e08 	.word	0x20000e08
 800251c:	20000e04 	.word	0x20000e04
 8002520:	20000e00 	.word	0x20000e00
 8002524:	20000dfc 	.word	0x20000dfc
 8002528:	08025f54 	.word	0x08025f54

0800252c <GPS_nmea_to_dec>:
float GPS_nmea_to_dec(float deg_coord, char nsew) {
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	ed87 0a01 	vstr	s0, [r7, #4]
 8002536:	4603      	mov	r3, r0
 8002538:	70fb      	strb	r3, [r7, #3]
	int degree = (int)(deg_coord/100);
 800253a:	ed97 7a01 	vldr	s14, [r7, #4]
 800253e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80025c0 <GPS_nmea_to_dec+0x94>
 8002542:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800254a:	ee17 3a90 	vmov	r3, s15
 800254e:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree*100;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2264      	movs	r2, #100	@ 0x64
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002560:	ed97 7a01 	vldr	s14, [r7, #4]
 8002564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002568:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 800256c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002570:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80025c4 <GPS_nmea_to_dec+0x98>
 8002574:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002578:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002586:	ed97 7a02 	vldr	s14, [r7, #8]
 800258a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258e:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W') { // return negative
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	2b53      	cmp	r3, #83	@ 0x53
 8002596:	d002      	beq.n	800259e <GPS_nmea_to_dec+0x72>
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	2b57      	cmp	r3, #87	@ 0x57
 800259c:	d105      	bne.n	80025aa <GPS_nmea_to_dec+0x7e>
		decimal *= -1;
 800259e:	edd7 7a05 	vldr	s15, [r7, #20]
 80025a2:	eef1 7a67 	vneg.f32	s15, s15
 80025a6:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	ee07 3a90 	vmov	s15, r3
}
 80025b0:	eeb0 0a67 	vmov.f32	s0, s15
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	42c80000 	.word	0x42c80000
 80025c4:	42700000 	.word	0x42700000

080025c8 <GPS_Nmea_time>:
void GPS_Nmea_time(){
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
	uint32_t time_int = (uint32_t)GPS.utc_time;
 80025ce:	4b3d      	ldr	r3, [pc, #244]	@ (80026c4 <GPS_Nmea_time+0xfc>)
 80025d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80025d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025d8:	ee17 3a90 	vmov	r3, s15
 80025dc:	607b      	str	r3, [r7, #4]
	hr = time_int/10000 + MyGps.offset/100;   // get the hours from the 6 digit number
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a39      	ldr	r2, [pc, #228]	@ (80026c8 <GPS_Nmea_time+0x100>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	0b5a      	lsrs	r2, r3, #13
 80025e8:	4b38      	ldr	r3, [pc, #224]	@ (80026cc <GPS_Nmea_time+0x104>)
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	4938      	ldr	r1, [pc, #224]	@ (80026d0 <GPS_Nmea_time+0x108>)
 80025ee:	fb81 0103 	smull	r0, r1, r1, r3
 80025f2:	1149      	asrs	r1, r1, #5
 80025f4:	17db      	asrs	r3, r3, #31
 80025f6:	1acb      	subs	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b35      	ldr	r3, [pc, #212]	@ (80026d4 <GPS_Nmea_time+0x10c>)
 80025fe:	601a      	str	r2, [r3, #0]

	min = (time_int/100)%100 + MyGps.offset%100;  // get the minutes from the 6 digit number
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a33      	ldr	r2, [pc, #204]	@ (80026d0 <GPS_Nmea_time+0x108>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	095a      	lsrs	r2, r3, #5
 800260a:	4b31      	ldr	r3, [pc, #196]	@ (80026d0 <GPS_Nmea_time+0x108>)
 800260c:	fba3 1302 	umull	r1, r3, r3, r2
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	2164      	movs	r1, #100	@ 0x64
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	4a2c      	ldr	r2, [pc, #176]	@ (80026cc <GPS_Nmea_time+0x104>)
 800261c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800261e:	492c      	ldr	r1, [pc, #176]	@ (80026d0 <GPS_Nmea_time+0x108>)
 8002620:	fb81 0102 	smull	r0, r1, r1, r2
 8002624:	1148      	asrs	r0, r1, #5
 8002626:	17d1      	asrs	r1, r2, #31
 8002628:	1a41      	subs	r1, r0, r1
 800262a:	2064      	movs	r0, #100	@ 0x64
 800262c:	fb00 f101 	mul.w	r1, r0, r1
 8002630:	1a51      	subs	r1, r2, r1
 8002632:	460a      	mov	r2, r1
 8002634:	4413      	add	r3, r2
 8002636:	461a      	mov	r2, r3
 8002638:	4b27      	ldr	r3, [pc, #156]	@ (80026d8 <GPS_Nmea_time+0x110>)
 800263a:	601a      	str	r2, [r3, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 800263c:	4b26      	ldr	r3, [pc, #152]	@ (80026d8 <GPS_Nmea_time+0x110>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b3b      	cmp	r3, #59	@ 0x3b
 8002642:	dd09      	ble.n	8002658 <GPS_Nmea_time+0x90>
	{
		min = min-60;
 8002644:	4b24      	ldr	r3, [pc, #144]	@ (80026d8 <GPS_Nmea_time+0x110>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3b3c      	subs	r3, #60	@ 0x3c
 800264a:	4a23      	ldr	r2, [pc, #140]	@ (80026d8 <GPS_Nmea_time+0x110>)
 800264c:	6013      	str	r3, [r2, #0]
		hr++;
 800264e:	4b21      	ldr	r3, [pc, #132]	@ (80026d4 <GPS_Nmea_time+0x10c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	4a1f      	ldr	r2, [pc, #124]	@ (80026d4 <GPS_Nmea_time+0x10c>)
 8002656:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8002658:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <GPS_Nmea_time+0x10c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da09      	bge.n	8002674 <GPS_Nmea_time+0xac>
	{
		hr=24+hr;
 8002660:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <GPS_Nmea_time+0x10c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3318      	adds	r3, #24
 8002666:	4a1b      	ldr	r2, [pc, #108]	@ (80026d4 <GPS_Nmea_time+0x10c>)
 8002668:	6013      	str	r3, [r2, #0]
		daychange--;
 800266a:	4b1c      	ldr	r3, [pc, #112]	@ (80026dc <GPS_Nmea_time+0x114>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3b01      	subs	r3, #1
 8002670:	4a1a      	ldr	r2, [pc, #104]	@ (80026dc <GPS_Nmea_time+0x114>)
 8002672:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8002674:	4b17      	ldr	r3, [pc, #92]	@ (80026d4 <GPS_Nmea_time+0x10c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b17      	cmp	r3, #23
 800267a:	dd09      	ble.n	8002690 <GPS_Nmea_time+0xc8>
	{
		hr=hr-24;
 800267c:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <GPS_Nmea_time+0x10c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3b18      	subs	r3, #24
 8002682:	4a14      	ldr	r2, [pc, #80]	@ (80026d4 <GPS_Nmea_time+0x10c>)
 8002684:	6013      	str	r3, [r2, #0]
		daychange++;
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <GPS_Nmea_time+0x114>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <GPS_Nmea_time+0x114>)
 800268e:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	MyGps.hours= hr;
 8002690:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <GPS_Nmea_time+0x10c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0d      	ldr	r2, [pc, #52]	@ (80026cc <GPS_Nmea_time+0x104>)
 8002696:	60d3      	str	r3, [r2, #12]
	MyGps.minutes= min;
 8002698:	4b0f      	ldr	r3, [pc, #60]	@ (80026d8 <GPS_Nmea_time+0x110>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0b      	ldr	r2, [pc, #44]	@ (80026cc <GPS_Nmea_time+0x104>)
 800269e:	6113      	str	r3, [r2, #16]
	MyGps.seconds = time_int%100;
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <GPS_Nmea_time+0x108>)
 80026a4:	fba3 1302 	umull	r1, r3, r3, r2
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	2164      	movs	r1, #100	@ 0x64
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <GPS_Nmea_time+0x104>)
 80026b6:	615a      	str	r2, [r3, #20]

}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	20000dbc 	.word	0x20000dbc
 80026c8:	d1b71759 	.word	0xd1b71759
 80026cc:	20000000 	.word	0x20000000
 80026d0:	51eb851f 	.word	0x51eb851f
 80026d4:	20000da4 	.word	0x20000da4
 80026d8:	20000da8 	.word	0x20000da8
 80026dc:	20000db8 	.word	0x20000db8

080026e0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002754 <MX_I2C2_Init+0x74>)
 80026e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002758 <MX_I2C2_Init+0x78>)
 80026e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80026ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002754 <MX_I2C2_Init+0x74>)
 80026ec:	4a1b      	ldr	r2, [pc, #108]	@ (800275c <MX_I2C2_Init+0x7c>)
 80026ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80026f0:	4b18      	ldr	r3, [pc, #96]	@ (8002754 <MX_I2C2_Init+0x74>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026f6:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <MX_I2C2_Init+0x74>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026fc:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <MX_I2C2_Init+0x74>)
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002702:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <MX_I2C2_Init+0x74>)
 8002704:	2200      	movs	r2, #0
 8002706:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002708:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <MX_I2C2_Init+0x74>)
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <MX_I2C2_Init+0x74>)
 8002710:	2200      	movs	r2, #0
 8002712:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002714:	4b0f      	ldr	r3, [pc, #60]	@ (8002754 <MX_I2C2_Init+0x74>)
 8002716:	2200      	movs	r2, #0
 8002718:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800271a:	480e      	ldr	r0, [pc, #56]	@ (8002754 <MX_I2C2_Init+0x74>)
 800271c:	f011 f996 	bl	8013a4c <HAL_I2C_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002726:	f000 f95b 	bl	80029e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800272a:	2100      	movs	r1, #0
 800272c:	4809      	ldr	r0, [pc, #36]	@ (8002754 <MX_I2C2_Init+0x74>)
 800272e:	f012 f840 	bl	80147b2 <HAL_I2CEx_ConfigAnalogFilter>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002738:	f000 f952 	bl	80029e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800273c:	2100      	movs	r1, #0
 800273e:	4805      	ldr	r0, [pc, #20]	@ (8002754 <MX_I2C2_Init+0x74>)
 8002740:	f012 f882 	bl	8014848 <HAL_I2CEx_ConfigDigitalFilter>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800274a:	f000 f949 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000e14 	.word	0x20000e14
 8002758:	40005800 	.word	0x40005800
 800275c:	10d19ce4 	.word	0x10d19ce4

08002760 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b0ac      	sub	sp, #176	@ 0xb0
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	2288      	movs	r2, #136	@ 0x88
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f01b fc98 	bl	801e0b6 <memset>
  if(i2cHandle->Instance==I2C2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a29      	ldr	r2, [pc, #164]	@ (8002830 <HAL_I2C_MspInit+0xd0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d14b      	bne.n	8002828 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002794:	2300      	movs	r3, #0
 8002796:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4618      	mov	r0, r3
 800279e:	f012 ff35 	bl	801560c <HAL_RCCEx_PeriphCLKConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80027a8:	f000 f91a 	bl	80029e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ac:	4b21      	ldr	r3, [pc, #132]	@ (8002834 <HAL_I2C_MspInit+0xd4>)
 80027ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b0:	4a20      	ldr	r2, [pc, #128]	@ (8002834 <HAL_I2C_MspInit+0xd4>)
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <HAL_I2C_MspInit+0xd4>)
 80027ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027c4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027cc:	2312      	movs	r3, #18
 80027ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d8:	2303      	movs	r3, #3
 80027da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027de:	2304      	movs	r3, #4
 80027e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027e8:	4619      	mov	r1, r3
 80027ea:	4813      	ldr	r0, [pc, #76]	@ (8002838 <HAL_I2C_MspInit+0xd8>)
 80027ec:	f010 ff3c 	bl	8013668 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027f0:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <HAL_I2C_MspInit+0xd4>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002834 <HAL_I2C_MspInit+0xd4>)
 80027f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80027fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002834 <HAL_I2C_MspInit+0xd4>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8002808:	2200      	movs	r2, #0
 800280a:	2105      	movs	r1, #5
 800280c:	2021      	movs	r0, #33	@ 0x21
 800280e:	f010 fe73 	bl	80134f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002812:	2021      	movs	r0, #33	@ 0x21
 8002814:	f010 fe8c 	bl	8013530 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2105      	movs	r1, #5
 800281c:	2022      	movs	r0, #34	@ 0x22
 800281e:	f010 fe6b 	bl	80134f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002822:	2022      	movs	r0, #34	@ 0x22
 8002824:	f010 fe84 	bl	8013530 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002828:	bf00      	nop
 800282a:	37b0      	adds	r7, #176	@ 0xb0
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40005800 	.word	0x40005800
 8002834:	40021000 	.word	0x40021000
 8002838:	48000400 	.word	0x48000400

0800283c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002840:	f00f fdbe 	bl	80123c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002844:	f000 f820 	bl	8002888 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002848:	f000 f871 	bl	800292e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800284c:	f7ff fc26 	bl	800209c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002850:	f000 fea2 	bl	8003598 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002854:	f000 fa4a 	bl	8002cec <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002858:	f000 fe6e 	bl	8003538 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800285c:	f7ff f9b8 	bl	8001bd0 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002860:	f7ff ff3e 	bl	80026e0 <MX_I2C2_Init>
  MX_ADC2_Init();
 8002864:	f7ff fa2a 	bl	8001cbc <MX_ADC2_Init>
  MX_TIM2_Init();
 8002868:	f000 fd5c 	bl	8003324 <MX_TIM2_Init>
  MX_TIM3_Init();
 800286c:	f000 fda8 	bl	80033c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Reset_Flag=1;
 8002870:	4b04      	ldr	r3, [pc, #16]	@ (8002884 <main+0x48>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002876:	f7ff fb39 	bl	8001eec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800287a:	f016 fa07 	bl	8018c8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800287e:	bf00      	nop
 8002880:	e7fd      	b.n	800287e <main+0x42>
 8002882:	bf00      	nop
 8002884:	20000e68 	.word	0x20000e68

08002888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b096      	sub	sp, #88	@ 0x58
 800288c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	2244      	movs	r2, #68	@ 0x44
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f01b fc0d 	bl	801e0b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800289c:	463b      	mov	r3, r7
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80028aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80028ae:	f012 f825 	bl	80148fc <HAL_PWREx_ControlVoltageScaling>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80028b8:	f000 f892 	bl	80029e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80028bc:	230a      	movs	r3, #10
 80028be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028c6:	2310      	movs	r3, #16
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80028ca:	2301      	movs	r3, #1
 80028cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ce:	2302      	movs	r3, #2
 80028d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028d2:	2302      	movs	r3, #2
 80028d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80028d6:	2301      	movs	r3, #1
 80028d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80028da:	230a      	movs	r3, #10
 80028dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80028de:	2307      	movs	r3, #7
 80028e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028e2:	2302      	movs	r3, #2
 80028e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028e6:	2302      	movs	r3, #2
 80028e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	4618      	mov	r0, r3
 80028f0:	f012 f85a 	bl	80149a8 <HAL_RCC_OscConfig>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <SystemClock_Config+0x76>
  {
    Error_Handler();
 80028fa:	f000 f871 	bl	80029e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028fe:	230f      	movs	r3, #15
 8002900:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002902:	2303      	movs	r3, #3
 8002904:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002912:	463b      	mov	r3, r7
 8002914:	2104      	movs	r1, #4
 8002916:	4618      	mov	r0, r3
 8002918:	f012 fc22 	bl	8015160 <HAL_RCC_ClockConfig>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002922:	f000 f85d 	bl	80029e0 <Error_Handler>
  }
}
 8002926:	bf00      	nop
 8002928:	3758      	adds	r7, #88	@ 0x58
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b0a2      	sub	sp, #136	@ 0x88
 8002932:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002934:	463b      	mov	r3, r7
 8002936:	2288      	movs	r2, #136	@ 0x88
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f01b fbbb 	bl	801e0b6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002940:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002944:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002946:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800294a:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800294c:	2302      	movs	r3, #2
 800294e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002950:	2301      	movs	r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002954:	2308      	movs	r3, #8
 8002956:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002958:	2307      	movs	r3, #7
 800295a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800295c:	2302      	movs	r3, #2
 800295e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002960:	2302      	movs	r3, #2
 8002962:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002964:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002968:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800296a:	463b      	mov	r3, r7
 800296c:	4618      	mov	r0, r3
 800296e:	f012 fe4d 	bl	801560c <HAL_RCCEx_PeriphCLKConfig>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8002978:	f000 f832 	bl	80029e0 <Error_Handler>
  }
}
 800297c:	bf00      	nop
 800297e:	3788      	adds	r7, #136	@ 0x88
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0e      	ldr	r2, [pc, #56]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002996:	f00f fd33 	bl	8012400 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a2:	d10f      	bne.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0x40>
  	{
  		HAL_TIM_Base_Stop_IT(&htim2);
 80029a4:	480a      	ldr	r0, [pc, #40]	@ (80029d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80029a6:	f014 f807 	bl	80169b8 <HAL_TIM_Base_Stop_IT>
  		debounce_active = 0;
 80029aa:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]

  		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 80029b0:	2102      	movs	r1, #2
 80029b2:	4809      	ldr	r0, [pc, #36]	@ (80029d8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80029b4:	f011 f802 	bl	80139bc <HAL_GPIO_ReadPin>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d102      	bne.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0x40>
  		{
  			valid_press = 1;
 80029be:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
  		}
  	}
  /* USER CODE END Callback 1 */
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40001000 	.word	0x40001000
 80029d0:	20001300 	.word	0x20001300
 80029d4:	20000e69 	.word	0x20000e69
 80029d8:	48000800 	.word	0x48000800
 80029dc:	20000e6a 	.word	0x20000e6a

080029e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029e4:	b672      	cpsid	i
}
 80029e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029e8:	bf00      	nop
 80029ea:	e7fd      	b.n	80029e8 <Error_Handler+0x8>

080029ec <Start_GPS_Task>:
extern QueueHandle_t GpsToIhm;
volatile uint8_t gps_rtc_updated = 0;
char buffx[300];

void Start_GPS_Task(void const * argument)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	GpsMessageBufferHandle = xMessageBufferCreate(xGpsMessageBufferSizeBytes);
 80029f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80029f8:	2201      	movs	r2, #1
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f016 ff93 	bl	8019928 <xStreamBufferGenericCreate>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4a1f      	ldr	r2, [pc, #124]	@ (8002a84 <Start_GPS_Task+0x98>)
 8002a06:	6013      	str	r3, [r2, #0]
	if( GpsMessageBufferHandle != NULL )
 8002a08:	4b1e      	ldr	r3, [pc, #120]	@ (8002a84 <Start_GPS_Task+0x98>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <Start_GPS_Task+0x30>
	{
	}
	else
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)"Error in MessageBuffer Creation\r\n", 34, 100);
 8002a10:	2364      	movs	r3, #100	@ 0x64
 8002a12:	2222      	movs	r2, #34	@ 0x22
 8002a14:	491c      	ldr	r1, [pc, #112]	@ (8002a88 <Start_GPS_Task+0x9c>)
 8002a16:	481d      	ldr	r0, [pc, #116]	@ (8002a8c <Start_GPS_Task+0xa0>)
 8002a18:	f014 fd84 	bl	8017524 <HAL_UART_Transmit>
	}
	GPS_Init();
 8002a1c:	f7ff fbba 	bl	8002194 <GPS_Init>
	for(;;)
	{
		xMessageBufferReceive( GpsMessageBufferHandle, received_nmea, sizeof(received_nmea), portMAX_DELAY);
 8002a20:	4b18      	ldr	r3, [pc, #96]	@ (8002a84 <Start_GPS_Task+0x98>)
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	f04f 33ff 	mov.w	r3, #4294967295
 8002a28:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002a2c:	4918      	ldr	r1, [pc, #96]	@ (8002a90 <Start_GPS_Task+0xa4>)
 8002a2e:	f017 f8bd 	bl	8019bac <xStreamBufferReceive>
		Sentence_parse((char*)received_nmea);
 8002a32:	4817      	ldr	r0, [pc, #92]	@ (8002a90 <Start_GPS_Task+0xa4>)
 8002a34:	f000 f88a 	bl	8002b4c <Sentence_parse>
		if (Assign_Values==1){
 8002a38:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <Start_GPS_Task+0xa8>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d11c      	bne.n	8002a7a <Start_GPS_Task+0x8e>
			GPS_Nmea_time();
 8002a40:	f7ff fdc2 	bl	80025c8 <GPS_Nmea_time>
			gps_to_rtc.hours = MyGps.hours;
 8002a44:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <Start_GPS_Task+0xac>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4a14      	ldr	r2, [pc, #80]	@ (8002a9c <Start_GPS_Task+0xb0>)
 8002a4a:	6013      	str	r3, [r2, #0]
			gps_to_rtc.minutes = MyGps.minutes;
 8002a4c:	4b12      	ldr	r3, [pc, #72]	@ (8002a98 <Start_GPS_Task+0xac>)
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <Start_GPS_Task+0xb0>)
 8002a52:	6053      	str	r3, [r2, #4]
			gps_to_rtc.seconds = MyGps.seconds;
 8002a54:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <Start_GPS_Task+0xac>)
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	4a10      	ldr	r2, [pc, #64]	@ (8002a9c <Start_GPS_Task+0xb0>)
 8002a5a:	6093      	str	r3, [r2, #8]
			gps_to_rtc.day = MyGps.day;
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <Start_GPS_Task+0xac>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4a0e      	ldr	r2, [pc, #56]	@ (8002a9c <Start_GPS_Task+0xb0>)
 8002a62:	60d3      	str	r3, [r2, #12]
			gps_to_rtc.month = MyGps.month;
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <Start_GPS_Task+0xac>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	4a0c      	ldr	r2, [pc, #48]	@ (8002a9c <Start_GPS_Task+0xb0>)
 8002a6a:	6113      	str	r3, [r2, #16]
			gps_to_rtc.year = MyGps.year;
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a98 <Start_GPS_Task+0xac>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4a0a      	ldr	r2, [pc, #40]	@ (8002a9c <Start_GPS_Task+0xb0>)
 8002a72:	6153      	str	r3, [r2, #20]
		/*	snprintf(buffx, sizeof(buffx), "Parsed GPS Time: %02d:%02d:%02d, Date: %02d-%02d-%02d\r\n",
					MyGps.hours, MyGps.minutes, MyGps.seconds, MyGps.day, MyGps.month, MyGps.year);
			HAL_UART_Transmit(&huart2, (uint8_t*)buffx, strlen(buffx), HAL_MAX_DELAY);*/
			GPS_GetFromRTC(&gps_to_rtc);};
 8002a74:	4809      	ldr	r0, [pc, #36]	@ (8002a9c <Start_GPS_Task+0xb0>)
 8002a76:	f000 f885 	bl	8002b84 <GPS_GetFromRTC>
		//	xQueueSend(GpsToIhm, &gps_to_ihm,0);

		osDelay(1000);
 8002a7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a7e:	f016 f958 	bl	8018d32 <osDelay>
		xMessageBufferReceive( GpsMessageBufferHandle, received_nmea, sizeof(received_nmea), portMAX_DELAY);
 8002a82:	e7cd      	b.n	8002a20 <Start_GPS_Task+0x34>
 8002a84:	20000e6c 	.word	0x20000e6c
 8002a88:	08025f74 	.word	0x08025f74
 8002a8c:	20001420 	.word	0x20001420
 8002a90:	20001064 	.word	0x20001064
 8002a94:	2000125d 	.word	0x2000125d
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	20001260 	.word	0x20001260

08002aa0 <GPS_UART_CallBack>:
	}
}
void GPS_UART_CallBack() {
 8002aa0:	b598      	push	{r3, r4, r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8002aa4:	4b21      	ldr	r3, [pc, #132]	@ (8002b2c <GPS_UART_CallBack+0x8c>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b0a      	cmp	r3, #10
 8002aaa:	d010      	beq.n	8002ace <GPS_UART_CallBack+0x2e>
 8002aac:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <GPS_UART_CallBack+0x90>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	b25b      	sxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0b      	blt.n	8002ace <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b30 <GPS_UART_CallBack+0x90>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	b2d1      	uxtb	r1, r2
 8002abe:	4a1c      	ldr	r2, [pc, #112]	@ (8002b30 <GPS_UART_CallBack+0x90>)
 8002ac0:	7011      	strb	r1, [r2, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b19      	ldr	r3, [pc, #100]	@ (8002b2c <GPS_UART_CallBack+0x8c>)
 8002ac6:	7819      	ldrb	r1, [r3, #0]
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <GPS_UART_CallBack+0x94>)
 8002aca:	5499      	strb	r1, [r3, r2]
 8002acc:	e026      	b.n	8002b1c <GPS_UART_CallBack+0x7c>
	} else {
		rx_buffer[rx_index] = '\0';
 8002ace:	4b18      	ldr	r3, [pc, #96]	@ (8002b30 <GPS_UART_CallBack+0x90>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <GPS_UART_CallBack+0x94>)
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	5499      	strb	r1, [r3, r2]
		memcpy(NMEA_ToParse,rx_buffer,rx_index);
 8002ada:	4b15      	ldr	r3, [pc, #84]	@ (8002b30 <GPS_UART_CallBack+0x90>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4914      	ldr	r1, [pc, #80]	@ (8002b34 <GPS_UART_CallBack+0x94>)
 8002ae2:	4815      	ldr	r0, [pc, #84]	@ (8002b38 <GPS_UART_CallBack+0x98>)
 8002ae4:	f01c fb6f 	bl	801f1c6 <memcpy>
		xGpsBytesSent=xMessageBufferSendFromISR(GpsMessageBufferHandle,NMEA_ToParse,strlen((char*)NMEA_ToParse),&xHigherPriorityTaskWokenGps);
 8002ae8:	4b14      	ldr	r3, [pc, #80]	@ (8002b3c <GPS_UART_CallBack+0x9c>)
 8002aea:	681c      	ldr	r4, [r3, #0]
 8002aec:	4812      	ldr	r0, [pc, #72]	@ (8002b38 <GPS_UART_CallBack+0x98>)
 8002aee:	f7fd fbcf 	bl	8000290 <strlen>
 8002af2:	4602      	mov	r2, r0
 8002af4:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <GPS_UART_CallBack+0xa0>)
 8002af6:	4910      	ldr	r1, [pc, #64]	@ (8002b38 <GPS_UART_CallBack+0x98>)
 8002af8:	4620      	mov	r0, r4
 8002afa:	f016 ffa7 	bl	8019a4c <xStreamBufferSendFromISR>
 8002afe:	4603      	mov	r3, r0
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <GPS_UART_CallBack+0xa4>)
 8002b04:	701a      	strb	r2, [r3, #0]
		if( xGpsBytesSent != strlen((char*)NMEA_ToParse))
 8002b06:	480c      	ldr	r0, [pc, #48]	@ (8002b38 <GPS_UART_CallBack+0x98>)
 8002b08:	f7fd fbc2 	bl	8000290 <strlen>
		{
		/*	HAL_UART_Transmit(&huart2, (const uint8_t *)"GPS Message sent different from buffer data\r\n",strlen("GPS Message sent different from buffer data\r\n"),100);*/
		}
		memset(rx_buffer,0,sizeof(rx_buffer));
 8002b0c:	2280      	movs	r2, #128	@ 0x80
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4808      	ldr	r0, [pc, #32]	@ (8002b34 <GPS_UART_CallBack+0x94>)
 8002b12:	f01b fad0 	bl	801e0b6 <memset>
		rx_index = 0;
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <GPS_UART_CallBack+0x90>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4903      	ldr	r1, [pc, #12]	@ (8002b2c <GPS_UART_CallBack+0x8c>)
 8002b20:	4809      	ldr	r0, [pc, #36]	@ (8002b48 <GPS_UART_CallBack+0xa8>)
 8002b22:	f014 fd89 	bl	8017638 <HAL_UART_Receive_IT>
}
 8002b26:	bf00      	nop
 8002b28:	bd98      	pop	{r3, r4, r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000d1c 	.word	0x20000d1c
 8002b30:	20000da0 	.word	0x20000da0
 8002b34:	20000d20 	.word	0x20000d20
 8002b38:	20000e70 	.word	0x20000e70
 8002b3c:	20000e6c 	.word	0x20000e6c
 8002b40:	20001258 	.word	0x20001258
 8002b44:	2000125c 	.word	0x2000125c
 8002b48:	20001398 	.word	0x20001398

08002b4c <Sentence_parse>:

void Sentence_parse(char* str){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
	if (GPS_validate(str)) {
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fb2b 	bl	80021b0 <GPS_validate>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <Sentence_parse+0x22>
		GPS_parse(str);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fb87 	bl	8002274 <GPS_parse>
		Assign_Values=1;
 8002b66:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <Sentence_parse+0x30>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
	}
	else GPS_Valid=0;
}
 8002b6c:	e002      	b.n	8002b74 <Sentence_parse+0x28>
	else GPS_Valid=0;
 8002b6e:	4b04      	ldr	r3, [pc, #16]	@ (8002b80 <Sentence_parse+0x34>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	2000125d 	.word	0x2000125d
 8002b80:	20000028 	.word	0x20000028

08002b84 <GPS_GetFromRTC>:
void GPS_GetFromRTC(GPS_RTC *gps_rtc){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08c      	sub	sp, #48	@ 0x30
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time;
	RTC_DateTypeDef rtc_date;

	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	2200      	movs	r2, #0
 8002b92:	4619      	mov	r1, r3
 8002b94:	4825      	ldr	r0, [pc, #148]	@ (8002c2c <GPS_GetFromRTC+0xa8>)
 8002b96:	f013 fb1a 	bl	80161ce <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4822      	ldr	r0, [pc, #136]	@ (8002c2c <GPS_GetFromRTC+0xa8>)
 8002ba4:	f013 fbf6 	bl	8016394 <HAL_RTC_GetDate>

	// Calcul différence temps en minutes
	int rtc_minutes_total = rtc_time.Hours * 60 + rtc_time.Minutes;
 8002ba8:	7b3b      	ldrb	r3, [r7, #12]
 8002baa:	461a      	mov	r2, r3
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	7b7b      	ldrb	r3, [r7, #13]
 8002bb8:	4413      	add	r3, r2
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int gps_minutes_total = gps_rtc->hours * 60 + gps_rtc->minutes;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4413      	add	r3, r2
 8002bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	int diff_minutes = abs(rtc_minutes_total - gps_minutes_total);
 8002bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bfb8      	it	lt
 8002bdc:	425b      	neglt	r3, r3
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24

	// Vérification date
	int rtc_date_match = (rtc_date.Date == gps_rtc->day) &&
 8002be0:	7abb      	ldrb	r3, [r7, #10]
 8002be2:	461a      	mov	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
                         (rtc_date.Month == gps_rtc->month) &&
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d10d      	bne.n	8002c08 <GPS_GetFromRTC+0x84>
 8002bec:	7a7b      	ldrb	r3, [r7, #9]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
	int rtc_date_match = (rtc_date.Date == gps_rtc->day) &&
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d107      	bne.n	8002c08 <GPS_GetFromRTC+0x84>
                         (rtc_date.Year == gps_rtc->year);
 8002bf8:	7afb      	ldrb	r3, [r7, #11]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
                         (rtc_date.Month == gps_rtc->month) &&
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d101      	bne.n	8002c08 <GPS_GetFromRTC+0x84>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <GPS_GetFromRTC+0x86>
 8002c08:	2300      	movs	r3, #0
	int rtc_date_match = (rtc_date.Date == gps_rtc->day) &&
 8002c0a:	623b      	str	r3, [r7, #32]

	// Synchroniser RTC si écart > 5 min ou si la date diffère
	if (diff_minutes >= 5 || !rtc_date_match) {
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	dc02      	bgt.n	8002c18 <GPS_GetFromRTC+0x94>
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <GPS_GetFromRTC+0xa0>
		RTC_SetFromGPS(gps_rtc);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f80b 	bl	8002c34 <RTC_SetFromGPS>
		gps_rtc_updated = 1;
 8002c1e:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <GPS_GetFromRTC+0xac>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
	/*	HAL_UART_Transmit(&huart2,
            (const uint8_t*)"RTC synchronized from GPS\r\n",
			strlen("RTC synchronized from GPS\r\n"),
			1000);*/
	}
}
 8002c24:	bf00      	nop
 8002c26:	3730      	adds	r7, #48	@ 0x30
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20001280 	.word	0x20001280
 8002c30:	2000127c 	.word	0x2000127c

08002c34 <RTC_SetFromGPS>:
void RTC_SetFromGPS(GPS_RTC *gps_rtc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

	RTC_TimeTypeDef sTime={0};
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate ={0} ;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
	sTime.Hours = gps_rtc->hours;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = gps_rtc->minutes;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = gps_rtc->seconds;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
	sDate.Year = gps_rtc->year;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	72fb      	strb	r3, [r7, #11]
	sDate.Month = gps_rtc->month;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	727b      	strb	r3, [r7, #9]
	sDate.Date = gps_rtc->day;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	72bb      	strb	r3, [r7, #10]
	sDate.WeekDay = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	2200      	movs	r2, #0
 8002c92:	4619      	mov	r1, r3
 8002c94:	480b      	ldr	r0, [pc, #44]	@ (8002cc4 <RTC_SetFromGPS+0x90>)
 8002c96:	f013 f9fd 	bl	8016094 <HAL_RTC_SetTime>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <RTC_SetFromGPS+0x70>
	{
		Error_Handler();
 8002ca0:	f7ff fe9e 	bl	80029e0 <Error_Handler>
	}
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002ca4:	f107 0308 	add.w	r3, r7, #8
 8002ca8:	2200      	movs	r2, #0
 8002caa:	4619      	mov	r1, r3
 8002cac:	4805      	ldr	r0, [pc, #20]	@ (8002cc4 <RTC_SetFromGPS+0x90>)
 8002cae:	f013 faea 	bl	8016286 <HAL_RTC_SetDate>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <RTC_SetFromGPS+0x88>
	{
		Error_Handler();
 8002cb8:	f7ff fe92 	bl	80029e0 <Error_Handler>
	}
}
 8002cbc:	bf00      	nop
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20001280 	.word	0x20001280

08002cc8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart1.Instance)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <HAL_UART_RxCpltCallback+0x20>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d101      	bne.n	8002ce0 <HAL_UART_RxCpltCallback+0x18>
	{
		GPS_UART_CallBack();
 8002cdc:	f7ff fee0 	bl	8002aa0 <GPS_UART_CallBack>
	}
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20001398 	.word	0x20001398

08002cec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b092      	sub	sp, #72	@ 0x48
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002cf2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002d02:	2300      	movs	r3, #0
 8002d04:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	222c      	movs	r2, #44	@ 0x2c
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f01b f9d2 	bl	801e0b6 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002d12:	4b3c      	ldr	r3, [pc, #240]	@ (8002e04 <MX_RTC_Init+0x118>)
 8002d14:	4a3c      	ldr	r2, [pc, #240]	@ (8002e08 <MX_RTC_Init+0x11c>)
 8002d16:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002d18:	4b3a      	ldr	r3, [pc, #232]	@ (8002e04 <MX_RTC_Init+0x118>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002d1e:	4b39      	ldr	r3, [pc, #228]	@ (8002e04 <MX_RTC_Init+0x118>)
 8002d20:	227f      	movs	r2, #127	@ 0x7f
 8002d22:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002d24:	4b37      	ldr	r3, [pc, #220]	@ (8002e04 <MX_RTC_Init+0x118>)
 8002d26:	22ff      	movs	r2, #255	@ 0xff
 8002d28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d2a:	4b36      	ldr	r3, [pc, #216]	@ (8002e04 <MX_RTC_Init+0x118>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002d30:	4b34      	ldr	r3, [pc, #208]	@ (8002e04 <MX_RTC_Init+0x118>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d36:	4b33      	ldr	r3, [pc, #204]	@ (8002e04 <MX_RTC_Init+0x118>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d3c:	4b31      	ldr	r3, [pc, #196]	@ (8002e04 <MX_RTC_Init+0x118>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d42:	4830      	ldr	r0, [pc, #192]	@ (8002e04 <MX_RTC_Init+0x118>)
 8002d44:	f013 f91e 	bl	8015f84 <HAL_RTC_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002d4e:	f7ff fe47 	bl	80029e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 16;
 8002d52:	2310      	movs	r3, #16
 8002d54:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 27;
 8002d58:	231b      	movs	r3, #27
 8002d5a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 30;
 8002d5e:	231e      	movs	r3, #30
 8002d60:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002d6c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d70:	2200      	movs	r2, #0
 8002d72:	4619      	mov	r1, r3
 8002d74:	4823      	ldr	r0, [pc, #140]	@ (8002e04 <MX_RTC_Init+0x118>)
 8002d76:	f013 f98d 	bl	8016094 <HAL_RTC_SetTime>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8002d80:	f7ff fe2e 	bl	80029e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002d84:	2302      	movs	r3, #2
 8002d86:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JUNE;
 8002d8a:	2306      	movs	r3, #6
 8002d8c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 3;
 8002d90:	2303      	movs	r3, #3
 8002d92:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 25;
 8002d96:	2319      	movs	r3, #25
 8002d98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002d9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002da0:	2200      	movs	r2, #0
 8002da2:	4619      	mov	r1, r3
 8002da4:	4817      	ldr	r0, [pc, #92]	@ (8002e04 <MX_RTC_Init+0x118>)
 8002da6:	f013 fa6e 	bl	8016286 <HAL_RTC_SetDate>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8002db0:	f7ff fe16 	bl	80029e0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8002dde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	2200      	movs	r2, #0
 8002de8:	4619      	mov	r1, r3
 8002dea:	4806      	ldr	r0, [pc, #24]	@ (8002e04 <MX_RTC_Init+0x118>)
 8002dec:	f013 fb1f 	bl	801642e <HAL_RTC_SetAlarm>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8002df6:	f7ff fdf3 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002dfa:	bf00      	nop
 8002dfc:	3748      	adds	r7, #72	@ 0x48
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20001280 	.word	0x20001280
 8002e08:	40002800 	.word	0x40002800

08002e0c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b0a4      	sub	sp, #144	@ 0x90
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e14:	f107 0308 	add.w	r3, r7, #8
 8002e18:	2288      	movs	r2, #136	@ 0x88
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f01b f94a 	bl	801e0b6 <memset>
  if(rtcHandle->Instance==RTC)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a10      	ldr	r2, [pc, #64]	@ (8002e68 <HAL_RTC_MspInit+0x5c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d118      	bne.n	8002e5e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e30:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002e32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f012 fbe4 	bl	801560c <HAL_RCCEx_PeriphCLKConfig>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002e4a:	f7ff fdc9 	bl	80029e0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e4e:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <HAL_RTC_MspInit+0x60>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e54:	4a05      	ldr	r2, [pc, #20]	@ (8002e6c <HAL_RTC_MspInit+0x60>)
 8002e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002e5e:	bf00      	nop
 8002e60:	3790      	adds	r7, #144	@ 0x90
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40002800 	.word	0x40002800
 8002e6c:	40021000 	.word	0x40021000

08002e70 <Start_Sensors_Task>:

int16_t position = 0;

int speed =0;

void Start_Sensors_Task(void const * argument) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b092      	sub	sp, #72	@ 0x48
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), 1000);
	} else {
		HAL_UART_Transmit(&huart2, (uint8_t*)"Erreur capteur SHT40\r\n", 23, 1000);
	}
	*/
 HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002e78:	213c      	movs	r1, #60	@ 0x3c
 8002e7a:	4805      	ldr	r0, [pc, #20]	@ (8002e90 <Start_Sensors_Task+0x20>)
 8002e7c:	f013 fe71 	bl	8016b62 <HAL_TIM_Encoder_Start>

	for (;;) {
		 Encoder_Update_Speed();
 8002e80:	f000 f828 	bl	8002ed4 <Encoder_Update_Speed>

		    char msg[64];
		  //  snprintf(msg, sizeof(msg), "RPM: %.2f\r\n", measured_rpm);
		  //  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);

		    osDelay(1000);
 8002e84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e88:	f015 ff53 	bl	8018d32 <osDelay>
	for (;;) {
 8002e8c:	bf00      	nop
 8002e8e:	e7f7      	b.n	8002e80 <Start_Sensors_Task+0x10>
 8002e90:	2000134c 	.word	0x2000134c

08002e94 <HAL_GPIO_EXTI_Callback>:

	return 0;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_1 && debounce_active == 0)
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d10e      	bne.n	8002ec2 <HAL_GPIO_EXTI_Callback+0x2e>
 8002ea4:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <HAL_GPIO_EXTI_Callback+0x38>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_GPIO_EXTI_Callback+0x2e>
	{   debounce_active=1;
 8002eae:	4b07      	ldr	r3, [pc, #28]	@ (8002ecc <HAL_GPIO_EXTI_Callback+0x38>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002eb4:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8002ebc:	4804      	ldr	r0, [pc, #16]	@ (8002ed0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002ebe:	f013 fd0b 	bl	80168d8 <HAL_TIM_Base_Start_IT>
	}

}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000e69 	.word	0x20000e69
 8002ed0:	20001300 	.word	0x20001300

08002ed4 <Encoder_Update_Speed>:

	count = (int16_t)counter;

	position = count/4;
}*/
void Encoder_Update_Speed() {
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
    int32_t current_position = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 8002eda:	4b21      	ldr	r3, [pc, #132]	@ (8002f60 <Encoder_Update_Speed+0x8c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	b21b      	sxth	r3, r3
 8002ee2:	60bb      	str	r3, [r7, #8]
    int32_t delta = current_position - last_position;
 8002ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f64 <Encoder_Update_Speed+0x90>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	60fb      	str	r3, [r7, #12]

    // handle overflow
    if (delta > 32768) delta -= 65536;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ef4:	dd03      	ble.n	8002efe <Encoder_Update_Speed+0x2a>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8002efc:	60fb      	str	r3, [r7, #12]
    if (delta < -32768) delta += 65536;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8002f04:	da03      	bge.n	8002f0e <Encoder_Update_Speed+0x3a>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002f0c:	60fb      	str	r3, [r7, #12]

    last_position = current_position;
 8002f0e:	4a15      	ldr	r2, [pc, #84]	@ (8002f64 <Encoder_Update_Speed+0x90>)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	6013      	str	r3, [r2, #0]

    float CPR = 330.0f;
 8002f14:	4b14      	ldr	r3, [pc, #80]	@ (8002f68 <Encoder_Update_Speed+0x94>)
 8002f16:	607b      	str	r3, [r7, #4]

    // ignorer les changements anormaux
    if (abs(delta) > 3000) {
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	bfb8      	it	lt
 8002f1e:	425b      	neglt	r3, r3
 8002f20:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002f24:	4293      	cmp	r3, r2
 8002f26:	dd04      	ble.n	8002f32 <Encoder_Update_Speed+0x5e>
        measured_rpm = 0;
 8002f28:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <Encoder_Update_Speed+0x98>)
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
        return;
 8002f30:	e011      	b.n	8002f56 <Encoder_Update_Speed+0x82>
    }

    measured_rpm = fabs((delta / CPR) * 600.0f);  // vitesse absolue
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	ee07 3a90 	vmov	s15, r3
 8002f38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f44:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002f70 <Encoder_Update_Speed+0x9c>
 8002f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f4c:	eef0 7ae7 	vabs.f32	s15, s15
 8002f50:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <Encoder_Update_Speed+0x98>)
 8002f52:	edc3 7a00 	vstr	s15, [r3]
}
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	2000134c 	.word	0x2000134c
 8002f64:	200012a4 	.word	0x200012a4
 8002f68:	43a50000 	.word	0x43a50000
 8002f6c:	200012a8 	.word	0x200012a8
 8002f70:	44160000 	.word	0x44160000

08002f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7a:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <HAL_MspInit+0x4c>)
 8002f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f7e:	4a10      	ldr	r2, [pc, #64]	@ (8002fc0 <HAL_MspInit+0x4c>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f86:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <HAL_MspInit+0x4c>)
 8002f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <HAL_MspInit+0x4c>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f96:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc0 <HAL_MspInit+0x4c>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f9e:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <HAL_MspInit+0x4c>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	210f      	movs	r1, #15
 8002fae:	f06f 0001 	mvn.w	r0, #1
 8002fb2:	f010 faa1 	bl	80134f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08e      	sub	sp, #56	@ 0x38
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fd2:	4b34      	ldr	r3, [pc, #208]	@ (80030a4 <HAL_InitTick+0xe0>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd6:	4a33      	ldr	r2, [pc, #204]	@ (80030a4 <HAL_InitTick+0xe0>)
 8002fd8:	f043 0310 	orr.w	r3, r3, #16
 8002fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fde:	4b31      	ldr	r3, [pc, #196]	@ (80030a4 <HAL_InitTick+0xe0>)
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fea:	f107 0210 	add.w	r2, r7, #16
 8002fee:	f107 0314 	add.w	r3, r7, #20
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f012 fa77 	bl	80154e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003004:	f012 fa44 	bl	8015490 <HAL_RCC_GetPCLK1Freq>
 8003008:	6378      	str	r0, [r7, #52]	@ 0x34
 800300a:	e004      	b.n	8003016 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800300c:	f012 fa40 	bl	8015490 <HAL_RCC_GetPCLK1Freq>
 8003010:	4603      	mov	r3, r0
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003018:	4a23      	ldr	r2, [pc, #140]	@ (80030a8 <HAL_InitTick+0xe4>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	0c9b      	lsrs	r3, r3, #18
 8003020:	3b01      	subs	r3, #1
 8003022:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003024:	4b21      	ldr	r3, [pc, #132]	@ (80030ac <HAL_InitTick+0xe8>)
 8003026:	4a22      	ldr	r2, [pc, #136]	@ (80030b0 <HAL_InitTick+0xec>)
 8003028:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800302a:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <HAL_InitTick+0xe8>)
 800302c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003030:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003032:	4a1e      	ldr	r2, [pc, #120]	@ (80030ac <HAL_InitTick+0xe8>)
 8003034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003036:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003038:	4b1c      	ldr	r3, [pc, #112]	@ (80030ac <HAL_InitTick+0xe8>)
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303e:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <HAL_InitTick+0xe8>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003044:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <HAL_InitTick+0xe8>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800304a:	4818      	ldr	r0, [pc, #96]	@ (80030ac <HAL_InitTick+0xe8>)
 800304c:	f013 fbec 	bl	8016828 <HAL_TIM_Base_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003056:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800305a:	2b00      	cmp	r3, #0
 800305c:	d11b      	bne.n	8003096 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800305e:	4813      	ldr	r0, [pc, #76]	@ (80030ac <HAL_InitTick+0xe8>)
 8003060:	f013 fc3a 	bl	80168d8 <HAL_TIM_Base_Start_IT>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800306a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800306e:	2b00      	cmp	r3, #0
 8003070:	d111      	bne.n	8003096 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003072:	2036      	movs	r0, #54	@ 0x36
 8003074:	f010 fa5c 	bl	8013530 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	d808      	bhi.n	8003090 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800307e:	2200      	movs	r2, #0
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	2036      	movs	r0, #54	@ 0x36
 8003084:	f010 fa38 	bl	80134f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003088:	4a0a      	ldr	r2, [pc, #40]	@ (80030b4 <HAL_InitTick+0xf0>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e002      	b.n	8003096 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003096:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800309a:	4618      	mov	r0, r3
 800309c:	3738      	adds	r7, #56	@ 0x38
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
 80030a8:	431bde83 	.word	0x431bde83
 80030ac:	200012ac 	.word	0x200012ac
 80030b0:	40001000 	.word	0x40001000
 80030b4:	20000034 	.word	0x20000034

080030b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030bc:	bf00      	nop
 80030be:	e7fd      	b.n	80030bc <NMI_Handler+0x4>

080030c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <HardFault_Handler+0x4>

080030c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030cc:	bf00      	nop
 80030ce:	e7fd      	b.n	80030cc <MemManage_Handler+0x4>

080030d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030d4:	bf00      	nop
 80030d6:	e7fd      	b.n	80030d4 <BusFault_Handler+0x4>

080030d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030dc:	bf00      	nop
 80030de:	e7fd      	b.n	80030dc <UsageFault_Handler+0x4>

080030e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80030f2:	2002      	movs	r0, #2
 80030f4:	f010 fc92 	bl	8013a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}

080030fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003100:	4802      	ldr	r0, [pc, #8]	@ (800310c <TIM2_IRQHandler+0x10>)
 8003102:	f013 fdbc 	bl	8016c7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20001300 	.word	0x20001300

08003110 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003114:	4802      	ldr	r0, [pc, #8]	@ (8003120 <I2C2_EV_IRQHandler+0x10>)
 8003116:	f010 fd34 	bl	8013b82 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000e14 	.word	0x20000e14

08003124 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003128:	4802      	ldr	r0, [pc, #8]	@ (8003134 <I2C2_ER_IRQHandler+0x10>)
 800312a:	f010 fd44 	bl	8013bb6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000e14 	.word	0x20000e14

08003138 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800313c:	4802      	ldr	r0, [pc, #8]	@ (8003148 <USART1_IRQHandler+0x10>)
 800313e:	f014 fac7 	bl	80176d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20001398 	.word	0x20001398

0800314c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003150:	4802      	ldr	r0, [pc, #8]	@ (800315c <USART2_IRQHandler+0x10>)
 8003152:	f014 fabd 	bl	80176d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */



  /* USER CODE END USART2_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20001420 	.word	0x20001420

08003160 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003164:	4802      	ldr	r0, [pc, #8]	@ (8003170 <TIM6_DAC_IRQHandler+0x10>)
 8003166:	f013 fd8a 	bl	8016c7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	200012ac 	.word	0x200012ac

08003174 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return 1;
 8003178:	2301      	movs	r3, #1
}
 800317a:	4618      	mov	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <_kill>:

int _kill(int pid, int sig)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800318e:	f01b ffe3 	bl	801f158 <__errno>
 8003192:	4603      	mov	r3, r0
 8003194:	2216      	movs	r2, #22
 8003196:	601a      	str	r2, [r3, #0]
  return -1;
 8003198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <_exit>:

void _exit (int status)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff ffe7 	bl	8003184 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031b6:	bf00      	nop
 80031b8:	e7fd      	b.n	80031b6 <_exit+0x12>

080031ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b086      	sub	sp, #24
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	e00a      	b.n	80031e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031cc:	f3af 8000 	nop.w
 80031d0:	4601      	mov	r1, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	60ba      	str	r2, [r7, #8]
 80031d8:	b2ca      	uxtb	r2, r1
 80031da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3301      	adds	r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	dbf0      	blt.n	80031cc <_read+0x12>
  }

  return len;
 80031ea:	687b      	ldr	r3, [r7, #4]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	e009      	b.n	800321a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	60ba      	str	r2, [r7, #8]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	3301      	adds	r3, #1
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	429a      	cmp	r2, r3
 8003220:	dbf1      	blt.n	8003206 <_write+0x12>
  }
  return len;
 8003222:	687b      	ldr	r3, [r7, #4]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <_close>:

int _close(int file)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003254:	605a      	str	r2, [r3, #4]
  return 0;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <_isatty>:

int _isatty(int file)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800326c:	2301      	movs	r3, #1
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800329c:	4a14      	ldr	r2, [pc, #80]	@ (80032f0 <_sbrk+0x5c>)
 800329e:	4b15      	ldr	r3, [pc, #84]	@ (80032f4 <_sbrk+0x60>)
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032a8:	4b13      	ldr	r3, [pc, #76]	@ (80032f8 <_sbrk+0x64>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d102      	bne.n	80032b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032b0:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <_sbrk+0x64>)
 80032b2:	4a12      	ldr	r2, [pc, #72]	@ (80032fc <_sbrk+0x68>)
 80032b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032b6:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <_sbrk+0x64>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d207      	bcs.n	80032d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032c4:	f01b ff48 	bl	801f158 <__errno>
 80032c8:	4603      	mov	r3, r0
 80032ca:	220c      	movs	r2, #12
 80032cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
 80032d2:	e009      	b.n	80032e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032d4:	4b08      	ldr	r3, [pc, #32]	@ (80032f8 <_sbrk+0x64>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032da:	4b07      	ldr	r3, [pc, #28]	@ (80032f8 <_sbrk+0x64>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	4a05      	ldr	r2, [pc, #20]	@ (80032f8 <_sbrk+0x64>)
 80032e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032e6:	68fb      	ldr	r3, [r7, #12]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20018000 	.word	0x20018000
 80032f4:	00000400 	.word	0x00000400
 80032f8:	200012fc 	.word	0x200012fc
 80032fc:	200066d0 	.word	0x200066d0

08003300 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003304:	4b06      	ldr	r3, [pc, #24]	@ (8003320 <SystemInit+0x20>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330a:	4a05      	ldr	r2, [pc, #20]	@ (8003320 <SystemInit+0x20>)
 800330c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003310:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800332a:	f107 0310 	add.w	r3, r7, #16
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003338:	1d3b      	adds	r3, r7, #4
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003342:	4b1e      	ldr	r3, [pc, #120]	@ (80033bc <MX_TIM2_Init+0x98>)
 8003344:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003348:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 800334a:	4b1c      	ldr	r3, [pc, #112]	@ (80033bc <MX_TIM2_Init+0x98>)
 800334c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003350:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003352:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <MX_TIM2_Init+0x98>)
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 160-1;
 8003358:	4b18      	ldr	r3, [pc, #96]	@ (80033bc <MX_TIM2_Init+0x98>)
 800335a:	229f      	movs	r2, #159	@ 0x9f
 800335c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800335e:	4b17      	ldr	r3, [pc, #92]	@ (80033bc <MX_TIM2_Init+0x98>)
 8003360:	2200      	movs	r2, #0
 8003362:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003364:	4b15      	ldr	r3, [pc, #84]	@ (80033bc <MX_TIM2_Init+0x98>)
 8003366:	2200      	movs	r2, #0
 8003368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800336a:	4814      	ldr	r0, [pc, #80]	@ (80033bc <MX_TIM2_Init+0x98>)
 800336c:	f013 fa5c 	bl	8016828 <HAL_TIM_Base_Init>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003376:	f7ff fb33 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800337a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800337e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003380:	f107 0310 	add.w	r3, r7, #16
 8003384:	4619      	mov	r1, r3
 8003386:	480d      	ldr	r0, [pc, #52]	@ (80033bc <MX_TIM2_Init+0x98>)
 8003388:	f013 fd80 	bl	8016e8c <HAL_TIM_ConfigClockSource>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003392:	f7ff fb25 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800339e:	1d3b      	adds	r3, r7, #4
 80033a0:	4619      	mov	r1, r3
 80033a2:	4806      	ldr	r0, [pc, #24]	@ (80033bc <MX_TIM2_Init+0x98>)
 80033a4:	f013 ffca 	bl	801733c <HAL_TIMEx_MasterConfigSynchronization>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80033ae:	f7ff fb17 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033b2:	bf00      	nop
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20001300 	.word	0x20001300

080033c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08c      	sub	sp, #48	@ 0x30
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033c6:	f107 030c 	add.w	r3, r7, #12
 80033ca:	2224      	movs	r2, #36	@ 0x24
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f01a fe71 	bl	801e0b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033d4:	463b      	mov	r3, r7
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033de:	4b21      	ldr	r3, [pc, #132]	@ (8003464 <MX_TIM3_Init+0xa4>)
 80033e0:	4a21      	ldr	r2, [pc, #132]	@ (8003468 <MX_TIM3_Init+0xa8>)
 80033e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003464 <MX_TIM3_Init+0xa4>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003464 <MX_TIM3_Init+0xa4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 80033f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003464 <MX_TIM3_Init+0xa4>)
 80033f2:	f640 427f 	movw	r2, #3199	@ 0xc7f
 80033f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <MX_TIM3_Init+0xa4>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033fe:	4b19      	ldr	r3, [pc, #100]	@ (8003464 <MX_TIM3_Init+0xa4>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003404:	2303      	movs	r3, #3
 8003406:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003408:	2302      	movs	r3, #2
 800340a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800340c:	2301      	movs	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003418:	2302      	movs	r3, #2
 800341a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800341c:	2301      	movs	r3, #1
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003420:	2300      	movs	r3, #0
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003428:	f107 030c 	add.w	r3, r7, #12
 800342c:	4619      	mov	r1, r3
 800342e:	480d      	ldr	r0, [pc, #52]	@ (8003464 <MX_TIM3_Init+0xa4>)
 8003430:	f013 faf1 	bl	8016a16 <HAL_TIM_Encoder_Init>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800343a:	f7ff fad1 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003446:	463b      	mov	r3, r7
 8003448:	4619      	mov	r1, r3
 800344a:	4806      	ldr	r0, [pc, #24]	@ (8003464 <MX_TIM3_Init+0xa4>)
 800344c:	f013 ff76 	bl	801733c <HAL_TIMEx_MasterConfigSynchronization>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003456:	f7ff fac3 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800345a:	bf00      	nop
 800345c:	3730      	adds	r7, #48	@ 0x30
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	2000134c 	.word	0x2000134c
 8003468:	40000400 	.word	0x40000400

0800346c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800347c:	d113      	bne.n	80034a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800347e:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <HAL_TIM_Base_MspInit+0x44>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003482:	4a0b      	ldr	r2, [pc, #44]	@ (80034b0 <HAL_TIM_Base_MspInit+0x44>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	6593      	str	r3, [r2, #88]	@ 0x58
 800348a:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <HAL_TIM_Base_MspInit+0x44>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003496:	2200      	movs	r2, #0
 8003498:	2105      	movs	r1, #5
 800349a:	201c      	movs	r0, #28
 800349c:	f010 f82c 	bl	80134f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034a0:	201c      	movs	r0, #28
 80034a2:	f010 f845 	bl	8013530 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000

080034b4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	@ 0x28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034bc:	f107 0314 	add.w	r3, r7, #20
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a17      	ldr	r2, [pc, #92]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x7c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d128      	bne.n	8003528 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034d6:	4b17      	ldr	r3, [pc, #92]	@ (8003534 <HAL_TIM_Encoder_MspInit+0x80>)
 80034d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034da:	4a16      	ldr	r2, [pc, #88]	@ (8003534 <HAL_TIM_Encoder_MspInit+0x80>)
 80034dc:	f043 0302 	orr.w	r3, r3, #2
 80034e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034e2:	4b14      	ldr	r3, [pc, #80]	@ (8003534 <HAL_TIM_Encoder_MspInit+0x80>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ee:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <HAL_TIM_Encoder_MspInit+0x80>)
 80034f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f2:	4a10      	ldr	r2, [pc, #64]	@ (8003534 <HAL_TIM_Encoder_MspInit+0x80>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003534 <HAL_TIM_Encoder_MspInit+0x80>)
 80034fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003506:	23c0      	movs	r3, #192	@ 0xc0
 8003508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350a:	2302      	movs	r3, #2
 800350c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003512:	2300      	movs	r3, #0
 8003514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003516:	2302      	movs	r3, #2
 8003518:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003524:	f010 f8a0 	bl	8013668 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003528:	bf00      	nop
 800352a:	3728      	adds	r7, #40	@ 0x28
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40000400 	.word	0x40000400
 8003534:	40021000 	.word	0x40021000

08003538 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800353c:	4b14      	ldr	r3, [pc, #80]	@ (8003590 <MX_USART1_UART_Init+0x58>)
 800353e:	4a15      	ldr	r2, [pc, #84]	@ (8003594 <MX_USART1_UART_Init+0x5c>)
 8003540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003542:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <MX_USART1_UART_Init+0x58>)
 8003544:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800354a:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <MX_USART1_UART_Init+0x58>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003550:	4b0f      	ldr	r3, [pc, #60]	@ (8003590 <MX_USART1_UART_Init+0x58>)
 8003552:	2200      	movs	r2, #0
 8003554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003556:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <MX_USART1_UART_Init+0x58>)
 8003558:	2200      	movs	r2, #0
 800355a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800355c:	4b0c      	ldr	r3, [pc, #48]	@ (8003590 <MX_USART1_UART_Init+0x58>)
 800355e:	2204      	movs	r2, #4
 8003560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003562:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <MX_USART1_UART_Init+0x58>)
 8003564:	2200      	movs	r2, #0
 8003566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003568:	4b09      	ldr	r3, [pc, #36]	@ (8003590 <MX_USART1_UART_Init+0x58>)
 800356a:	2200      	movs	r2, #0
 800356c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800356e:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <MX_USART1_UART_Init+0x58>)
 8003570:	2200      	movs	r2, #0
 8003572:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003574:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <MX_USART1_UART_Init+0x58>)
 8003576:	2200      	movs	r2, #0
 8003578:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800357a:	4805      	ldr	r0, [pc, #20]	@ (8003590 <MX_USART1_UART_Init+0x58>)
 800357c:	f013 ff84 	bl	8017488 <HAL_UART_Init>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003586:	f7ff fa2b 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20001398 	.word	0x20001398
 8003594:	40013800 	.word	0x40013800

08003598 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800359c:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <MX_USART2_UART_Init+0x58>)
 800359e:	4a15      	ldr	r2, [pc, #84]	@ (80035f4 <MX_USART2_UART_Init+0x5c>)
 80035a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80035a2:	4b13      	ldr	r3, [pc, #76]	@ (80035f0 <MX_USART2_UART_Init+0x58>)
 80035a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80035a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035aa:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <MX_USART2_UART_Init+0x58>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035b0:	4b0f      	ldr	r3, [pc, #60]	@ (80035f0 <MX_USART2_UART_Init+0x58>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035b6:	4b0e      	ldr	r3, [pc, #56]	@ (80035f0 <MX_USART2_UART_Init+0x58>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035bc:	4b0c      	ldr	r3, [pc, #48]	@ (80035f0 <MX_USART2_UART_Init+0x58>)
 80035be:	220c      	movs	r2, #12
 80035c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035c2:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <MX_USART2_UART_Init+0x58>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035c8:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <MX_USART2_UART_Init+0x58>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035ce:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <MX_USART2_UART_Init+0x58>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035d4:	4b06      	ldr	r3, [pc, #24]	@ (80035f0 <MX_USART2_UART_Init+0x58>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035da:	4805      	ldr	r0, [pc, #20]	@ (80035f0 <MX_USART2_UART_Init+0x58>)
 80035dc:	f013 ff54 	bl	8017488 <HAL_UART_Init>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80035e6:	f7ff f9fb 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20001420 	.word	0x20001420
 80035f4:	40004400 	.word	0x40004400

080035f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b0ae      	sub	sp, #184	@ 0xb8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003610:	f107 031c 	add.w	r3, r7, #28
 8003614:	2288      	movs	r2, #136	@ 0x88
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f01a fd4c 	bl	801e0b6 <memset>
  if(uartHandle->Instance==USART1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a4b      	ldr	r2, [pc, #300]	@ (8003750 <HAL_UART_MspInit+0x158>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d145      	bne.n	80036b4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003628:	2301      	movs	r3, #1
 800362a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800362c:	2300      	movs	r3, #0
 800362e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003630:	f107 031c 	add.w	r3, r7, #28
 8003634:	4618      	mov	r0, r3
 8003636:	f011 ffe9 	bl	801560c <HAL_RCCEx_PeriphCLKConfig>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003640:	f7ff f9ce 	bl	80029e0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003644:	4b43      	ldr	r3, [pc, #268]	@ (8003754 <HAL_UART_MspInit+0x15c>)
 8003646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003648:	4a42      	ldr	r2, [pc, #264]	@ (8003754 <HAL_UART_MspInit+0x15c>)
 800364a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800364e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003650:	4b40      	ldr	r3, [pc, #256]	@ (8003754 <HAL_UART_MspInit+0x15c>)
 8003652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800365c:	4b3d      	ldr	r3, [pc, #244]	@ (8003754 <HAL_UART_MspInit+0x15c>)
 800365e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003660:	4a3c      	ldr	r2, [pc, #240]	@ (8003754 <HAL_UART_MspInit+0x15c>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003668:	4b3a      	ldr	r3, [pc, #232]	@ (8003754 <HAL_UART_MspInit+0x15c>)
 800366a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003674:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003678:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003688:	2303      	movs	r3, #3
 800368a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800368e:	2307      	movs	r3, #7
 8003690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003694:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003698:	4619      	mov	r1, r3
 800369a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800369e:	f00f ffe3 	bl	8013668 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	2105      	movs	r1, #5
 80036a6:	2025      	movs	r0, #37	@ 0x25
 80036a8:	f00f ff26 	bl	80134f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036ac:	2025      	movs	r0, #37	@ 0x25
 80036ae:	f00f ff3f 	bl	8013530 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036b2:	e048      	b.n	8003746 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a27      	ldr	r2, [pc, #156]	@ (8003758 <HAL_UART_MspInit+0x160>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d143      	bne.n	8003746 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036be:	2302      	movs	r3, #2
 80036c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036c2:	2300      	movs	r3, #0
 80036c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036c6:	f107 031c 	add.w	r3, r7, #28
 80036ca:	4618      	mov	r0, r3
 80036cc:	f011 ff9e 	bl	801560c <HAL_RCCEx_PeriphCLKConfig>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80036d6:	f7ff f983 	bl	80029e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036da:	4b1e      	ldr	r3, [pc, #120]	@ (8003754 <HAL_UART_MspInit+0x15c>)
 80036dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036de:	4a1d      	ldr	r2, [pc, #116]	@ (8003754 <HAL_UART_MspInit+0x15c>)
 80036e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003754 <HAL_UART_MspInit+0x15c>)
 80036e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f2:	4b18      	ldr	r3, [pc, #96]	@ (8003754 <HAL_UART_MspInit+0x15c>)
 80036f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f6:	4a17      	ldr	r2, [pc, #92]	@ (8003754 <HAL_UART_MspInit+0x15c>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036fe:	4b15      	ldr	r3, [pc, #84]	@ (8003754 <HAL_UART_MspInit+0x15c>)
 8003700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800370a:	230c      	movs	r3, #12
 800370c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003710:	2302      	movs	r3, #2
 8003712:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371c:	2303      	movs	r3, #3
 800371e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003722:	2307      	movs	r3, #7
 8003724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003728:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800372c:	4619      	mov	r1, r3
 800372e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003732:	f00f ff99 	bl	8013668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003736:	2200      	movs	r2, #0
 8003738:	2105      	movs	r1, #5
 800373a:	2026      	movs	r0, #38	@ 0x26
 800373c:	f00f fedc 	bl	80134f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003740:	2026      	movs	r0, #38	@ 0x26
 8003742:	f00f fef5 	bl	8013530 <HAL_NVIC_EnableIRQ>
}
 8003746:	bf00      	nop
 8003748:	37b8      	adds	r7, #184	@ 0xb8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40013800 	.word	0x40013800
 8003754:	40021000 	.word	0x40021000
 8003758:	40004400 	.word	0x40004400

0800375c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800375c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003794 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003760:	f7ff fdce 	bl	8003300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003764:	480c      	ldr	r0, [pc, #48]	@ (8003798 <LoopForever+0x6>)
  ldr r1, =_edata
 8003766:	490d      	ldr	r1, [pc, #52]	@ (800379c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003768:	4a0d      	ldr	r2, [pc, #52]	@ (80037a0 <LoopForever+0xe>)
  movs r3, #0
 800376a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800376c:	e002      	b.n	8003774 <LoopCopyDataInit>

0800376e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800376e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003772:	3304      	adds	r3, #4

08003774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003778:	d3f9      	bcc.n	800376e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800377a:	4a0a      	ldr	r2, [pc, #40]	@ (80037a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800377c:	4c0a      	ldr	r4, [pc, #40]	@ (80037a8 <LoopForever+0x16>)
  movs r3, #0
 800377e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003780:	e001      	b.n	8003786 <LoopFillZerobss>

08003782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003784:	3204      	adds	r2, #4

08003786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003788:	d3fb      	bcc.n	8003782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800378a:	f01b fceb 	bl	801f164 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800378e:	f7ff f855 	bl	800283c <main>

08003792 <LoopForever>:

LoopForever:
    b LoopForever
 8003792:	e7fe      	b.n	8003792 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003794:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800379c:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 80037a0:	08026888 	.word	0x08026888
  ldr r2, =_sbss
 80037a4:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 80037a8:	200066cc 	.word	0x200066cc

080037ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037ac:	e7fe      	b.n	80037ac <ADC1_2_IRQHandler>

080037ae <mktime_utc>:
 *
 * \param timeinfo_utc Broken down time, assumed to be in UTC
 * \return Time in UTC
 **/
time_t mktime_utc(const struct tm* timeinfo_utc)
{
 80037ae:	b5b0      	push	{r4, r5, r7, lr}
 80037b0:	b0a6      	sub	sp, #152	@ 0x98
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
	time_t curr_time = time(NULL);
 80037b6:	2000      	movs	r0, #0
 80037b8:	f01b f900 	bl	801e9bc <time>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	int timezone_diff = 0; //deviation of the current timezone from UTC in seconds
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	//get UTC time, interpret resulting tm as a localtime
	struct tm timeinfo_gmt;
	gmtime_r(&curr_time, &timeinfo_gmt);
 80037ca:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80037ce:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f01a fccf 	bl	801e178 <gmtime_r>
	time_t time_gmt = mktime(&timeinfo_gmt);
 80037da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80037de:	4618      	mov	r0, r3
 80037e0:	f01a ff34 	bl	801e64c <mktime>
 80037e4:	e9c7 0122 	strd	r0, r1, [r7, #136]	@ 0x88

	//get localtime, interpret resulting tm as localtime
	struct tm timeinfo_local;
	localtime_r(&curr_time, &timeinfo_local);
 80037e8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80037ec:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80037f0:	4611      	mov	r1, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f01a fd66 	bl	801e2c4 <localtime_r>
	time_t time_local = mktime(&timeinfo_local);
 80037f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80037fc:	4618      	mov	r0, r3
 80037fe:	f01a ff25 	bl	801e64c <mktime>
 8003802:	e9c7 0120 	strd	r0, r1, [r7, #128]	@ 0x80

	//find the time difference between the two interpretations
	timezone_diff += difftime(time_local, time_gmt);
 8003806:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800380a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800380e:	f01a fc8c 	bl	801e12a <difftime>
 8003812:	ec55 4b10 	vmov	r4, r5, d0
 8003816:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800381a:	f7fc fe93 	bl	8000544 <__aeabi_i2d>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4620      	mov	r0, r4
 8003824:	4629      	mov	r1, r5
 8003826:	f7fc fd41 	bl	80002ac <__adddf3>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	f7fd f9a1 	bl	8000b78 <__aeabi_d2iz>
 8003836:	4603      	mov	r3, r0
 8003838:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	//hack for preventing mktime from assuming localtime: add timezone difference to the input struct.
	struct tm ret_timeinfo;
	ret_timeinfo.tm_sec = timeinfo_utc->tm_sec + timezone_diff;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003844:	4413      	add	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
	ret_timeinfo.tm_min = timeinfo_utc->tm_min;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]
	ret_timeinfo.tm_hour = timeinfo_utc->tm_hour;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	617b      	str	r3, [r7, #20]
	ret_timeinfo.tm_mday = timeinfo_utc->tm_mday;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	61bb      	str	r3, [r7, #24]
	ret_timeinfo.tm_mon = timeinfo_utc->tm_mon;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	61fb      	str	r3, [r7, #28]
	ret_timeinfo.tm_year = timeinfo_utc->tm_year;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	623b      	str	r3, [r7, #32]
	ret_timeinfo.tm_isdst = timeinfo_utc->tm_isdst;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return mktime(&ret_timeinfo);
 800386c:	f107 030c 	add.w	r3, r7, #12
 8003870:	4618      	mov	r0, r3
 8003872:	f01a feeb 	bl	801e64c <mktime>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
}
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	3798      	adds	r7, #152	@ 0x98
 8003880:	46bd      	mov	sp, r7
 8003882:	bdb0      	pop	{r4, r5, r7, pc}

08003884 <get_julian_start_day>:
 * Helper function for getting the Julian day start date (1979-12-31 00:00 UTC) as time_t.
 *
 * \return Internally defined Julian start date (fixed)
 **/
time_t get_julian_start_day()
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	@ 0x28
 8003888:	af00      	add	r7, sp, #0
	struct tm start_time;
	start_time.tm_sec = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	607b      	str	r3, [r7, #4]
	start_time.tm_min = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
	start_time.tm_hour = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
	start_time.tm_mday = 31;
 8003896:	231f      	movs	r3, #31
 8003898:	613b      	str	r3, [r7, #16]
	start_time.tm_mon = 11;
 800389a:	230b      	movs	r3, #11
 800389c:	617b      	str	r3, [r7, #20]
	start_time.tm_year = 1979-1900;
 800389e:	234f      	movs	r3, #79	@ 0x4f
 80038a0:	61bb      	str	r3, [r7, #24]
	start_time.tm_isdst = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24
	return mktime_utc(&start_time);
 80038a6:	1d3b      	adds	r3, r7, #4
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff80 	bl	80037ae <mktime_utc>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
}
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	3728      	adds	r7, #40	@ 0x28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	0000      	movs	r0, r0
	...

080038c0 <predict_to_julian>:

predict_julian_date_t predict_to_julian(time_t input_time)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	e9c7 0100 	strd	r0, r1, [r7]
	//get number of seconds since 1979-12-31 00:00:00 UTC, convert to days
	double seconds = difftime(input_time, get_julian_start_day());
 80038ca:	f7ff ffdb 	bl	8003884 <get_julian_start_day>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038d6:	f01a fc28 	bl	801e12a <difftime>
 80038da:	ed87 0b02 	vstr	d0, [r7, #8]
	return seconds/SECONDS_PER_DAY;
 80038de:	a30a      	add	r3, pc, #40	@ (adr r3, 8003908 <predict_to_julian+0x48>)
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038e8:	f7fc ffc0 	bl	800086c <__aeabi_ddiv>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80038f4:	eeb0 0a47 	vmov.f32	s0, s14
 80038f8:	eef0 0a67 	vmov.f32	s1, s15
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	f3af 8000 	nop.w
 8003908:	00000000 	.word	0x00000000
 800390c:	40f51800 	.word	0x40f51800

08003910 <predict_from_julian>:

time_t predict_from_julian(predict_julian_date_t date)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b090      	sub	sp, #64	@ 0x40
 8003914:	af00      	add	r7, sp, #0
 8003916:	ed87 0b00 	vstr	d0, [r7]
	double seconds_since = date*SECONDS_PER_DAY;
 800391a:	a31d      	add	r3, pc, #116	@ (adr r3, 8003990 <predict_from_julian+0x80>)
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003924:	f7fc fe78 	bl	8000618 <__aeabi_dmul>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	time_t ret_time = get_julian_start_day();
 8003930:	f7ff ffa8 	bl	8003884 <get_julian_start_day>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	
	//add number of seconds since julian start day to the julian start day, get current time_t
	struct tm timeinfo;
	gmtime_r(&ret_time, &timeinfo); 
 800393c:	f107 020c 	add.w	r2, r7, #12
 8003940:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f01a fc16 	bl	801e178 <gmtime_r>
	timeinfo.tm_sec += seconds_since;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fc fdf8 	bl	8000544 <__aeabi_i2d>
 8003954:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003958:	f7fc fca8 	bl	80002ac <__adddf3>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	f7fd f908 	bl	8000b78 <__aeabi_d2iz>
 8003968:	4603      	mov	r3, r0
 800396a:	60fb      	str	r3, [r7, #12]
	ret_time = mktime_utc(&timeinfo);
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff1c 	bl	80037ae <mktime_utc>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	return ret_time;
 800397e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8003982:	4610      	mov	r0, r2
 8003984:	4619      	mov	r1, r3
 8003986:	3740      	adds	r7, #64	@ 0x40
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	f3af 8000 	nop.w
 8003990:	00000000 	.word	0x00000000
 8003994:	40f51800 	.word	0x40f51800

08003998 <predict_create_observer>:
#include "sun.h"

void observer_calculate(const predict_observer_t *observer, double time, const double pos[3], const double vel[3], struct predict_observation *result);

predict_observer_t *predict_create_observer(const char *name, double lat, double lon, double alt)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	@ 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	61f8      	str	r0, [r7, #28]
 80039a0:	ed87 0b04 	vstr	d0, [r7, #16]
 80039a4:	ed87 1b02 	vstr	d1, [r7, #8]
 80039a8:	ed87 2b00 	vstr	d2, [r7]
	// Allocate memory
	predict_observer_t *obs = (predict_observer_t*)malloc(sizeof(predict_observer_t));
 80039ac:	2098      	movs	r0, #152	@ 0x98
 80039ae:	f018 fc39 	bl	801c224 <malloc>
 80039b2:	4603      	mov	r3, r0
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
	if (obs == NULL) return NULL;
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <predict_create_observer+0x28>
 80039bc:	2300      	movs	r3, #0
 80039be:	e019      	b.n	80039f4 <predict_create_observer+0x5c>

	strncpy(obs->name, name, 128);
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	2280      	movs	r2, #128	@ 0x80
 80039c4:	69f9      	ldr	r1, [r7, #28]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f01a fb9c 	bl	801e104 <strncpy>
	obs->name[127] = '\0';
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	obs->latitude = lat;
 80039d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039da:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	obs->longitude = lon;
 80039de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039e4:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	obs->altitude = alt;
 80039e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ee:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

	return obs;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3728      	adds	r7, #40	@ 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	0000      	movs	r0, r0
	...

08003a00 <predict_observe_orbit>:
 *
 * Calculated range, azimuth, elevation and relative velocity from the
 * given observer position.
 **/
void predict_observe_orbit(const predict_observer_t *observer, const struct predict_position *orbit, struct predict_observation *obs)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b09c      	sub	sp, #112	@ 0x70
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
	if (obs == NULL) return;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d071      	beq.n	8003af6 <predict_observe_orbit+0xf6>
	
	double julTime = orbit->time + JULIAN_TIME_DIFF;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a18:	a33d      	add	r3, pc, #244	@ (adr r3, 8003b10 <predict_observe_orbit+0x110>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f7fc fc45 	bl	80002ac <__adddf3>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

	observer_calculate(observer, julTime, orbit->position, orbit->velocity, obs);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f103 0110 	add.w	r1, r3, #16
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f86b 	bl	8003b18 <observer_calculate>

	// Calculate visibility status of the orbit: Orbit is visible if sun elevation is low enough and the orbit is above the horizon, but still in sunlight.
	obs->visible = false;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	struct predict_observation sun_obs;
	predict_observe_sun(observer, orbit->time, &sun_obs);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	ed93 7b00 	vldr	d7, [r3]
 8003a50:	f107 0310 	add.w	r3, r7, #16
 8003a54:	4619      	mov	r1, r3
 8003a56:	eeb0 0a47 	vmov.f32	s0, s14
 8003a5a:	eef0 0a67 	vmov.f32	s1, s15
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f00d faee 	bl	8011040 <predict_observe_sun>
	if (!(orbit->eclipsed) && (sun_obs.elevation*180.0/M_PI < NAUTICAL_TWILIGHT_SUN_ELEVATION) && (obs->elevation*180.0/M_PI > 0)) {
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d13d      	bne.n	8003ae8 <predict_observe_orbit+0xe8>
 8003a6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	4b24      	ldr	r3, [pc, #144]	@ (8003b08 <predict_observe_orbit+0x108>)
 8003a76:	f7fc fdcf 	bl	8000618 <__aeabi_dmul>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	a31f      	add	r3, pc, #124	@ (adr r3, 8003b00 <predict_observe_orbit+0x100>)
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	f7fc fef0 	bl	800086c <__aeabi_ddiv>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	4b1c      	ldr	r3, [pc, #112]	@ (8003b0c <predict_observe_orbit+0x10c>)
 8003a9a:	f7fd f82f 	bl	8000afc <__aeabi_dcmplt>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d021      	beq.n	8003ae8 <predict_observe_orbit+0xe8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	4b16      	ldr	r3, [pc, #88]	@ (8003b08 <predict_observe_orbit+0x108>)
 8003ab0:	f7fc fdb2 	bl	8000618 <__aeabi_dmul>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	a310      	add	r3, pc, #64	@ (adr r3, 8003b00 <predict_observe_orbit+0x100>)
 8003abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac2:	f7fc fed3 	bl	800086c <__aeabi_ddiv>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	f7fd f82f 	bl	8000b38 <__aeabi_dcmpgt>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <predict_observe_orbit+0xe8>
		obs->visible = true;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}
	obs->time = orbit->time;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	e9c1 2300 	strd	r2, r3, [r1]
 8003af4:	e000      	b.n	8003af8 <predict_observe_orbit+0xf8>
	if (obs == NULL) return;
 8003af6:	bf00      	nop
}
 8003af8:	3770      	adds	r7, #112	@ 0x70
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	54442d18 	.word	0x54442d18
 8003b04:	400921fb 	.word	0x400921fb
 8003b08:	40668000 	.word	0x40668000
 8003b0c:	c0280000 	.word	0xc0280000
 8003b10:	40000000 	.word	0x40000000
 8003b14:	4142a5e7 	.word	0x4142a5e7

08003b18 <observer_calculate>:

void observer_calculate(const predict_observer_t *observer, double time, const double pos[3], const double vel[3], struct predict_observation *result)
{
 8003b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b1c:	b0d6      	sub	sp, #344	@ 0x158
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	f507 74ac 	add.w	r4, r7, #344	@ 0x158
 8003b24:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8003b28:	6020      	str	r0, [r4, #0]
 8003b2a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003b2e:	ed00 0b02 	vstr	d0, [r0, #-8]
 8003b32:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8003b36:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8003b3a:	6001      	str	r1, [r0, #0]
 8003b3c:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8003b40:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8003b44:	600a      	str	r2, [r1, #0]
 8003b46:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8003b4a:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8003b4e:	6013      	str	r3, [r2, #0]
	double obs_vel[3];
	double range[3];
	double rgvel[3];
	
	geodetic_t geodetic;
	geodetic.lat = observer->latitude;
 8003b50:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003b54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8003b5e:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8003b62:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 8003b66:	e9c1 2300 	strd	r2, r3, [r1]
	geodetic.lon = observer->longitude;
 8003b6a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003b6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8003b78:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8003b7c:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 8003b80:	e9c1 2302 	strd	r2, r3, [r1, #8]
	geodetic.alt = observer->altitude / 1000.0;
 8003b84:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003b88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	4bd0      	ldr	r3, [pc, #832]	@ (8003ed8 <observer_calculate+0x3c0>)
 8003b98:	f7fc fe68 	bl	800086c <__aeabi_ddiv>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8003ba4:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 8003ba8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	geodetic.theta = 0.0;
 8003bac:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003bb0:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Calculate_User_PosVel(time, &geodetic, obs_pos, obs_vel);
 8003bc0:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8003bc4:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8003bc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003bcc:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	ed14 0b02 	vldr	d0, [r4, #-8]
 8003bd8:	f00d fe22 	bl	8011820 <Calculate_User_PosVel>

	vec3_sub(pos, obs_pos, range);
 8003bdc:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8003be0:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8003be4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003be8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	f00d fbb4 	bl	801135a <vec3_sub>
	vec3_sub(vel, obs_vel, rgvel);
 8003bf2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003bf6:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8003bfa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003bfe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	f00d fba9 	bl	801135a <vec3_sub>
	
	double range_length = vec3_length(range);
 8003c08:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f00d fae6 	bl	80111de <vec3_length>
 8003c12:	ed87 0b52 	vstr	d0, [r7, #328]	@ 0x148
	double range_rate_length = vec3_dot(range, rgvel) / range_length;
 8003c16:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003c1a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f00d fb25 	bl	8011270 <vec3_dot>
 8003c26:	ec51 0b10 	vmov	r0, r1, d0
 8003c2a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8003c2e:	f7fc fe1d 	bl	800086c <__aeabi_ddiv>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

	double theta_dot = 2*M_PI*EARTH_ROTATIONS_PER_SIDERIAL_DAY/SECONDS_PER_DAY;
 8003c3a:	a3a5      	add	r3, pc, #660	@ (adr r3, 8003ed0 <observer_calculate+0x3b8>)
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	double sin_lat = sin(geodetic.lat);
 8003c44:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003c48:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003c4c:	ed93 7b00 	vldr	d7, [r3]
 8003c50:	eeb0 0a47 	vmov.f32	s0, s14
 8003c54:	eef0 0a67 	vmov.f32	s1, s15
 8003c58:	f01e ff4a 	bl	8022af0 <sin>
 8003c5c:	ed87 0b4c 	vstr	d0, [r7, #304]	@ 0x130
	double cos_lat = cos(geodetic.lat);
 8003c60:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003c64:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003c68:	ed93 7b00 	vldr	d7, [r3]
 8003c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8003c70:	eef0 0a67 	vmov.f32	s1, s15
 8003c74:	f01e fee0 	bl	8022a38 <cos>
 8003c78:	ed87 0b4a 	vstr	d0, [r7, #296]	@ 0x128
	double sin_theta = sin(geodetic.theta);
 8003c7c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003c80:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003c84:	ed93 7b06 	vldr	d7, [r3, #24]
 8003c88:	eeb0 0a47 	vmov.f32	s0, s14
 8003c8c:	eef0 0a67 	vmov.f32	s1, s15
 8003c90:	f01e ff2e 	bl	8022af0 <sin>
 8003c94:	ed87 0b48 	vstr	d0, [r7, #288]	@ 0x120
	double cos_theta = cos(geodetic.theta);
 8003c98:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003c9c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003ca0:	ed93 7b06 	vldr	d7, [r3, #24]
 8003ca4:	eeb0 0a47 	vmov.f32	s0, s14
 8003ca8:	eef0 0a67 	vmov.f32	s1, s15
 8003cac:	f01e fec4 	bl	8022a38 <cos>
 8003cb0:	ed87 0b46 	vstr	d0, [r7, #280]	@ 0x118
	
	double top_s = sin_lat*cos_theta*range[0] + sin_lat*sin_theta*range[1] - cos_lat*range[2];
 8003cb4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003cb8:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8003cbc:	f7fc fcac 	bl	8000618 <__aeabi_dmul>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003ccc:	f7fc fca4 	bl	8000618 <__aeabi_dmul>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4614      	mov	r4, r2
 8003cd6:	461d      	mov	r5, r3
 8003cd8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003cdc:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8003ce0:	f7fc fc9a 	bl	8000618 <__aeabi_dmul>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003cf0:	f7fc fc92 	bl	8000618 <__aeabi_dmul>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	f7fc fad6 	bl	80002ac <__adddf3>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4614      	mov	r4, r2
 8003d06:	461d      	mov	r5, r3
 8003d08:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003d0c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8003d10:	f7fc fc82 	bl	8000618 <__aeabi_dmul>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4620      	mov	r0, r4
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	f7fc fac4 	bl	80002a8 <__aeabi_dsub>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	double top_e = -sin_theta*range[0] + cos_theta*range[1];
 8003d28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003d32:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003d3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d40:	f7fc fc6a 	bl	8000618 <__aeabi_dmul>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4614      	mov	r4, r2
 8003d4a:	461d      	mov	r5, r3
 8003d4c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003d50:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003d54:	f7fc fc60 	bl	8000618 <__aeabi_dmul>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	4629      	mov	r1, r5
 8003d60:	f7fc faa4 	bl	80002ac <__adddf3>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	double top_z = cos_lat*cos_theta*range[0] + cos_lat*sin_theta*range[1] + sin_lat*range[2];
 8003d6c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003d70:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8003d74:	f7fc fc50 	bl	8000618 <__aeabi_dmul>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003d84:	f7fc fc48 	bl	8000618 <__aeabi_dmul>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	461d      	mov	r5, r3
 8003d90:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003d94:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8003d98:	f7fc fc3e 	bl	8000618 <__aeabi_dmul>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4610      	mov	r0, r2
 8003da2:	4619      	mov	r1, r3
 8003da4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003da8:	f7fc fc36 	bl	8000618 <__aeabi_dmul>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4620      	mov	r0, r4
 8003db2:	4629      	mov	r1, r5
 8003db4:	f7fc fa7a 	bl	80002ac <__adddf3>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	461d      	mov	r5, r3
 8003dc0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003dc4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003dc8:	f7fc fc26 	bl	8000618 <__aeabi_dmul>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	f7fc fa6a 	bl	80002ac <__adddf3>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100


	double top_s_dot = sin_lat*(cos_theta*rgvel[0] - sin_theta*range[0]*theta_dot) + 
 8003de0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003de8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dec:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003df0:	f7fc fc12 	bl	8000618 <__aeabi_dmul>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4614      	mov	r4, r2
 8003dfa:	461d      	mov	r5, r3
 8003dfc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e00:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003e04:	f7fc fc08 	bl	8000618 <__aeabi_dmul>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003e14:	f7fc fc00 	bl	8000618 <__aeabi_dmul>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	4629      	mov	r1, r5
 8003e20:	f7fc fa42 	bl	80002a8 <__aeabi_dsub>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003e30:	f7fc fbf2 	bl	8000618 <__aeabi_dmul>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4690      	mov	r8, r2
 8003e3a:	4699      	mov	r9, r3
						sin_lat*(sin_theta*rgvel[1] + cos_theta*range[1]*theta_dot) -
 8003e3c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e44:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003e48:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003e4c:	f7fc fbe4 	bl	8000618 <__aeabi_dmul>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4614      	mov	r4, r2
 8003e56:	461d      	mov	r5, r3
 8003e58:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003e5c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003e60:	f7fc fbda 	bl	8000618 <__aeabi_dmul>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003e70:	f7fc fbd2 	bl	8000618 <__aeabi_dmul>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4620      	mov	r0, r4
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	f7fc fa16 	bl	80002ac <__adddf3>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4610      	mov	r0, r2
 8003e86:	4619      	mov	r1, r3
 8003e88:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003e8c:	f7fc fbc4 	bl	8000618 <__aeabi_dmul>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
	double top_s_dot = sin_lat*(cos_theta*rgvel[0] - sin_theta*range[0]*theta_dot) + 
 8003e94:	4640      	mov	r0, r8
 8003e96:	4649      	mov	r1, r9
 8003e98:	f7fc fa08 	bl	80002ac <__adddf3>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	461d      	mov	r5, r3
						cos_lat*rgvel[2];
 8003ea4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003eac:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003eb0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8003eb4:	f7fc fbb0 	bl	8000618 <__aeabi_dmul>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
	double top_s_dot = sin_lat*(cos_theta*rgvel[0] - sin_theta*range[0]*theta_dot) + 
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f7fc f9f2 	bl	80002a8 <__aeabi_dsub>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	e008      	b.n	8003edc <observer_calculate+0x3c4>
 8003eca:	bf00      	nop
 8003ecc:	f3af 8000 	nop.w
 8003ed0:	f6f4de84 	.word	0xf6f4de84
 8003ed4:	3f131da7 	.word	0x3f131da7
 8003ed8:	408f4000 	.word	0x408f4000
 8003edc:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
	double top_e_dot = - (sin_theta*rgvel[0] + cos_theta*range[0]*theta_dot) + 
						(cos_theta*rgvel[1] - sin_theta*range[1]*theta_dot);
 8003ee0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ee8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003eec:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003ef0:	f7fc fb92 	bl	8000618 <__aeabi_dmul>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4614      	mov	r4, r2
 8003efa:	461d      	mov	r5, r3
 8003efc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003f00:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003f04:	f7fc fb88 	bl	8000618 <__aeabi_dmul>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4619      	mov	r1, r3
 8003f10:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003f14:	f7fc fb80 	bl	8000618 <__aeabi_dmul>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f7fc f9c2 	bl	80002a8 <__aeabi_dsub>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4690      	mov	r8, r2
 8003f2a:	4699      	mov	r9, r3
	double top_e_dot = - (sin_theta*rgvel[0] + cos_theta*range[0]*theta_dot) + 
 8003f2c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f38:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003f3c:	f7fc fb6c 	bl	8000618 <__aeabi_dmul>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4614      	mov	r4, r2
 8003f46:	461d      	mov	r5, r3
 8003f48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f4c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003f50:	f7fc fb62 	bl	8000618 <__aeabi_dmul>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003f60:	f7fc fb5a 	bl	8000618 <__aeabi_dmul>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4620      	mov	r0, r4
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	f7fc f99e 	bl	80002ac <__adddf3>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4640      	mov	r0, r8
 8003f76:	4649      	mov	r1, r9
 8003f78:	f7fc f996 	bl	80002a8 <__aeabi_dsub>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0

	double top_z_dot = cos_lat * ( cos_theta*(rgvel[0] + range[1]*theta_dot) + 
 8003f84:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f8c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003f90:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003f94:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003f98:	f7fc fb3e 	bl	8000618 <__aeabi_dmul>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	f7fc f982 	bl	80002ac <__adddf3>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003fb4:	f7fc fb30 	bl	8000618 <__aeabi_dmul>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4690      	mov	r8, r2
 8003fbe:	4699      	mov	r9, r3
								sin_theta*(rgvel[1] - range[0]*theta_dot) ) +
 8003fc0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fc8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003fcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003fd0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003fd4:	f7fc fb20 	bl	8000618 <__aeabi_dmul>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4629      	mov	r1, r5
 8003fe0:	f7fc f962 	bl	80002a8 <__aeabi_dsub>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4619      	mov	r1, r3
 8003fec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003ff0:	f7fc fb12 	bl	8000618 <__aeabi_dmul>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
	double top_z_dot = cos_lat * ( cos_theta*(rgvel[0] + range[1]*theta_dot) + 
 8003ff8:	4640      	mov	r0, r8
 8003ffa:	4649      	mov	r1, r9
 8003ffc:	f7fc f956 	bl	80002ac <__adddf3>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4610      	mov	r0, r2
 8004006:	4619      	mov	r1, r3
 8004008:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800400c:	f7fc fb04 	bl	8000618 <__aeabi_dmul>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4614      	mov	r4, r2
 8004016:	461d      	mov	r5, r3
								sin_lat*rgvel[2];
 8004018:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800401c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004020:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004024:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004028:	f7fc faf6 	bl	8000618 <__aeabi_dmul>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
	double top_z_dot = cos_lat * ( cos_theta*(rgvel[0] + range[1]*theta_dot) + 
 8004030:	4620      	mov	r0, r4
 8004032:	4629      	mov	r1, r5
 8004034:	f7fc f93a 	bl	80002ac <__adddf3>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
	
	// Azimut
	double y = -top_e / top_s;
 8004040:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800404a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004054:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004058:	f7fc fc08 	bl	800086c <__aeabi_ddiv>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
	double az = atan(-top_e / top_s);
 8004064:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800406e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800407c:	f7fc fbf6 	bl	800086c <__aeabi_ddiv>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	ec43 2b17 	vmov	d7, r2, r3
 8004088:	eeb0 0a47 	vmov.f32	s0, s14
 800408c:	eef0 0a67 	vmov.f32	s1, s15
 8004090:	f01e fb3a 	bl	8022708 <atan>
 8004094:	ed87 0b54 	vstr	d0, [r7, #336]	@ 0x150

	if (top_s > 0.0) az = az + M_PI;
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80040a4:	f7fc fd48 	bl	8000b38 <__aeabi_dcmpgt>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <observer_calculate+0x5ac>
 80040ae:	a38d      	add	r3, pc, #564	@ (adr r3, 80042e4 <observer_calculate+0x7cc>)
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 80040b8:	f7fc f8f8 	bl	80002ac <__adddf3>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
	if (az < 0.0) az = az + 2*M_PI;
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 80040d0:	f7fc fd14 	bl	8000afc <__aeabi_dcmplt>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <observer_calculate+0x5d8>
 80040da:	a384      	add	r3, pc, #528	@ (adr r3, 80042ec <observer_calculate+0x7d4>)
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 80040e4:	f7fc f8e2 	bl	80002ac <__adddf3>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150

	// Azimut rate
	double y_dot = - (top_e_dot*top_s - top_s_dot*top_e) / (top_s*top_s);
 80040f0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80040f4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 80040f8:	f7fc fa8e 	bl	8000618 <__aeabi_dmul>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4614      	mov	r4, r2
 8004102:	461d      	mov	r5, r3
 8004104:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8004108:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800410c:	f7fc fa84 	bl	8000618 <__aeabi_dmul>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4620      	mov	r0, r4
 8004116:	4629      	mov	r1, r5
 8004118:	f7fc f8c6 	bl	80002a8 <__aeabi_dsub>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4692      	mov	sl, r2
 8004122:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8004126:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800412a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800412e:	f7fc fa73 	bl	8000618 <__aeabi_dmul>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4650      	mov	r0, sl
 8004138:	4659      	mov	r1, fp
 800413a:	f7fc fb97 	bl	800086c <__aeabi_ddiv>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	double az_dot = y_dot / (1 + y*y);
 8004146:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800414a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800414e:	f7fc fa63 	bl	8000618 <__aeabi_dmul>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	4b60      	ldr	r3, [pc, #384]	@ (80042e0 <observer_calculate+0x7c8>)
 8004160:	f7fc f8a4 	bl	80002ac <__adddf3>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 800416c:	f7fc fb7e 	bl	800086c <__aeabi_ddiv>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0

	// Elevation
	double x = top_z / range_length;
 8004178:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800417c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8004180:	f7fc fb74 	bl	800086c <__aeabi_ddiv>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
	double el = asin_(x);
 800418c:	ed97 0b32 	vldr	d0, [r7, #200]	@ 0xc8
 8004190:	f00e f8d6 	bl	8012340 <asin_>
 8004194:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0

	// Elevation rate
	double x_dot = (top_z_dot*range_length - range_rate_length*top_z) / (range_length * range_length);
 8004198:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800419c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80041a0:	f7fc fa3a 	bl	8000618 <__aeabi_dmul>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4614      	mov	r4, r2
 80041aa:	461d      	mov	r5, r3
 80041ac:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 80041b0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80041b4:	f7fc fa30 	bl	8000618 <__aeabi_dmul>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4620      	mov	r0, r4
 80041be:	4629      	mov	r1, r5
 80041c0:	f7fc f872 	bl	80002a8 <__aeabi_dsub>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4614      	mov	r4, r2
 80041ca:	461d      	mov	r5, r3
 80041cc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80041d0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80041d4:	f7fc fa20 	bl	8000618 <__aeabi_dmul>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4620      	mov	r0, r4
 80041de:	4629      	mov	r1, r5
 80041e0:	f7fc fb44 	bl	800086c <__aeabi_ddiv>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
	double el_dot = x_dot / sqrt( 1 - x*x );
 80041ec:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80041f0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041f4:	f7fc fa10 	bl	8000618 <__aeabi_dmul>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	f04f 0000 	mov.w	r0, #0
 8004200:	4937      	ldr	r1, [pc, #220]	@ (80042e0 <observer_calculate+0x7c8>)
 8004202:	f7fc f851 	bl	80002a8 <__aeabi_dsub>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	ec43 2b17 	vmov	d7, r2, r3
 800420e:	eeb0 0a47 	vmov.f32	s0, s14
 8004212:	eef0 0a67 	vmov.f32	s1, s15
 8004216:	f01e fa49 	bl	80226ac <sqrt>
 800421a:	ec53 2b10 	vmov	r2, r3, d0
 800421e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8004222:	f7fc fb23 	bl	800086c <__aeabi_ddiv>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	
	result->azimuth = az;
 800422e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004232:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004236:	6819      	ldr	r1, [r3, #0]
 8004238:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800423c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	result->azimuth_rate = az_dot;
 8004240:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004244:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004248:	6819      	ldr	r1, [r3, #0]
 800424a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800424e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	result->elevation = el;
 8004252:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004256:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800425a:	6819      	ldr	r1, [r3, #0]
 800425c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8004260:	e9c1 2306 	strd	r2, r3, [r1, #24]
	result->elevation_rate = el_dot;
 8004264:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004268:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800426c:	6819      	ldr	r1, [r3, #0]
 800426e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8004272:	e9c1 2308 	strd	r2, r3, [r1, #32]
	result->range = range_length;
 8004276:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800427a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800427e:	6819      	ldr	r1, [r3, #0]
 8004280:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8004284:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	result->range_rate = range_rate_length; 
 8004288:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800428c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004290:	6819      	ldr	r1, [r3, #0]
 8004292:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8004296:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	result->range_x = range[0];
 800429a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800429e:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 80042a2:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80042a6:	6809      	ldr	r1, [r1, #0]
 80042a8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	result->range_y = range[1];
 80042ac:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80042b0:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 80042b4:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80042b8:	6809      	ldr	r1, [r1, #0]
 80042ba:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	result->range_z = range[2];
 80042be:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80042c2:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 80042c6:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80042ca:	6809      	ldr	r1, [r1, #0]
 80042cc:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

}
 80042d0:	bf00      	nop
 80042d2:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 80042d6:	46bd      	mov	sp, r7
 80042d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042dc:	f3af 8000 	nop.w
 80042e0:	3ff00000 	.word	0x3ff00000
 80042e4:	54442d18 	.word	0x54442d18
 80042e8:	400921fb 	.word	0x400921fb
 80042ec:	54442d18 	.word	0x54442d18
 80042f0:	401921fb 	.word	0x401921fb
 80042f4:	00000000 	.word	0x00000000

080042f8 <predict_next_aos>:

struct predict_observation predict_next_aos(const predict_observer_t *observer, const predict_orbital_elements_t *orbital_elements, double start_utc)
{
 80042f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042fc:	b0dc      	sub	sp, #368	@ 0x170
 80042fe:	af00      	add	r7, sp, #0
 8004300:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004304:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004308:	6018      	str	r0, [r3, #0]
 800430a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800430e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004312:	6019      	str	r1, [r3, #0]
 8004314:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004318:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	463b      	mov	r3, r7
 8004320:	ed83 0b00 	vstr	d0, [r3]
	double curr_time = start_utc;
 8004324:	463b      	mov	r3, r7
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
	struct predict_observation obs;
	double time_step = 0;
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

	struct predict_position orbit;
	predict_orbit(orbital_elements, &orbit, curr_time);
 800433a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800433e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004342:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004346:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 800434a:	4611      	mov	r1, r2
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	f001 f85f 	bl	8005410 <predict_orbit>
	predict_observe_orbit(observer, &orbit, &obs);
 8004352:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8004356:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800435a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800435e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	f7ff fb4c 	bl	8003a00 <predict_observe_orbit>

	//check whether AOS can happen after specified start time
	if (predict_aos_happens(orbital_elements, observer->latitude) && !predict_is_geosynchronous(orbital_elements) && !orbit.decayed) {
 8004368:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800436c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 8004376:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800437a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800437e:	eeb0 0a47 	vmov.f32	s0, s14
 8004382:	eef0 0a67 	vmov.f32	s1, s15
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	f000 ffba 	bl	8005300 <predict_aos_happens>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8164 	beq.w	800465c <predict_next_aos+0x364>
 8004394:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004398:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	f000 feef 	bl	8005180 <predict_is_geosynchronous>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f083 0301 	eor.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8156 	beq.w	800465c <predict_next_aos+0x364>
 80043b0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80043b4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80043b8:	7a1b      	ldrb	r3, [r3, #8]
 80043ba:	f083 0301 	eor.w	r3, r3, #1
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 814b 	beq.w	800465c <predict_next_aos+0x364>
		//Bisection method, Brent's algorithm? Given a coherent root finding algorithm,
		//can rather have one function for iterating the orbit and then let get_next_aos/los
		//specify bounding intervals for the root finding.

		//skip the rest of the pass if the satellite is currently in range, since we want the _next_ AOS.
		if (obs.elevation > 0.0) {
 80043c6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	f7fc fbb1 	bl	8000b38 <__aeabi_dcmpgt>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d03b      	beq.n	8004454 <predict_next_aos+0x15c>
			struct predict_observation los = predict_next_los(observer, orbital_elements, curr_time);
 80043dc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80043e0:	f5a3 70ac 	sub.w	r0, r3, #344	@ 0x158
 80043e4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80043e8:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 80043ec:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80043f0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80043f4:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	6819      	ldr	r1, [r3, #0]
 80043fc:	f000 fa30 	bl	8004860 <predict_next_los>
			curr_time = los.time;
 8004400:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004404:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			curr_time += 1.0/(MINUTES_PER_DAY*1.0)*20; //skip 20 minutes. LOS might still be within the elevation threshold. (rough quickfix from predict)
 8004410:	a3ab      	add	r3, pc, #684	@ (adr r3, 80046c0 <predict_next_aos+0x3c8>)
 8004412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004416:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800441a:	f7fb ff47 	bl	80002ac <__adddf3>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 8004426:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800442a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800442e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004432:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8004436:	4611      	mov	r1, r2
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	f000 ffe9 	bl	8005410 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 800443e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8004442:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8004446:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800444a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	f7ff fad6 	bl	8003a00 <predict_observe_orbit>
		}

		//iteration until the orbit is roughly in range again, before the satellite pass
		while ((obs.elevation*180.0/M_PI < -1.0) || (obs.elevation_rate < 0)) {
 8004454:	e065      	b.n	8004522 <predict_next_aos+0x22a>
			time_step = 0.00035*(obs.elevation*180.0/M_PI*((orbit.altitude/8400.0)+0.46)-2.0);
 8004456:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	4b96      	ldr	r3, [pc, #600]	@ (80046b8 <predict_next_aos+0x3c0>)
 8004460:	f7fc f8da 	bl	8000618 <__aeabi_dmul>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4610      	mov	r0, r2
 800446a:	4619      	mov	r1, r3
 800446c:	a386      	add	r3, pc, #536	@ (adr r3, 8004688 <predict_next_aos+0x390>)
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	f7fc f9fb 	bl	800086c <__aeabi_ddiv>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4690      	mov	r8, r2
 800447c:	4699      	mov	r9, r3
 800447e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004482:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004486:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800448a:	a381      	add	r3, pc, #516	@ (adr r3, 8004690 <predict_next_aos+0x398>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	f7fc f9ec 	bl	800086c <__aeabi_ddiv>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4610      	mov	r0, r2
 800449a:	4619      	mov	r1, r3
 800449c:	a37e      	add	r3, pc, #504	@ (adr r3, 8004698 <predict_next_aos+0x3a0>)
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f7fb ff03 	bl	80002ac <__adddf3>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4640      	mov	r0, r8
 80044ac:	4649      	mov	r1, r9
 80044ae:	f7fc f8b3 	bl	8000618 <__aeabi_dmul>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80044c2:	f7fb fef1 	bl	80002a8 <__aeabi_dsub>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	a374      	add	r3, pc, #464	@ (adr r3, 80046a0 <predict_next_aos+0x3a8>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	f7fc f8a0 	bl	8000618 <__aeabi_dmul>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
			curr_time -= time_step;
 80044e0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 80044e4:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 80044e8:	f7fb fede 	bl	80002a8 <__aeabi_dsub>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 80044f4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80044f8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80044fc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004500:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8004504:	4611      	mov	r1, r2
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	f000 ff82 	bl	8005410 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 800450c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8004510:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8004514:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004518:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	f7ff fa6f 	bl	8003a00 <predict_observe_orbit>
		while ((obs.elevation*180.0/M_PI < -1.0) || (obs.elevation_rate < 0)) {
 8004522:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	4b63      	ldr	r3, [pc, #396]	@ (80046b8 <predict_next_aos+0x3c0>)
 800452c:	f7fc f874 	bl	8000618 <__aeabi_dmul>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	a353      	add	r3, pc, #332	@ (adr r3, 8004688 <predict_next_aos+0x390>)
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	f7fc f995 	bl	800086c <__aeabi_ddiv>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4610      	mov	r0, r2
 8004548:	4619      	mov	r1, r3
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	4b5b      	ldr	r3, [pc, #364]	@ (80046bc <predict_next_aos+0x3c4>)
 8004550:	f7fc fad4 	bl	8000afc <__aeabi_dcmplt>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	f47f af7d 	bne.w	8004456 <predict_next_aos+0x15e>
 800455c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	f7fc fac8 	bl	8000afc <__aeabi_dcmplt>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	f47f af71 	bne.w	8004456 <predict_next_aos+0x15e>
		}

		//fine tune the results until the elevation is within a low enough threshold
		while (fabs(obs.elevation*180/M_PI) > AOSLOS_HORIZON_THRESHOLD) {
 8004574:	e053      	b.n	800461e <predict_next_aos+0x326>
			time_step = obs.elevation*180.0/M_PI*sqrt(orbit.altitude)/530000.0;
 8004576:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	4b4e      	ldr	r3, [pc, #312]	@ (80046b8 <predict_next_aos+0x3c0>)
 8004580:	f7fc f84a 	bl	8000618 <__aeabi_dmul>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	a33e      	add	r3, pc, #248	@ (adr r3, 8004688 <predict_next_aos+0x390>)
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	f7fc f96b 	bl	800086c <__aeabi_ddiv>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4690      	mov	r8, r2
 800459c:	4699      	mov	r9, r3
 800459e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80045a2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80045a6:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 80045aa:	eeb0 0a47 	vmov.f32	s0, s14
 80045ae:	eef0 0a67 	vmov.f32	s1, s15
 80045b2:	f01e f87b 	bl	80226ac <sqrt>
 80045b6:	ec53 2b10 	vmov	r2, r3, d0
 80045ba:	4640      	mov	r0, r8
 80045bc:	4649      	mov	r1, r9
 80045be:	f7fc f82b 	bl	8000618 <__aeabi_dmul>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4610      	mov	r0, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	a337      	add	r3, pc, #220	@ (adr r3, 80046a8 <predict_next_aos+0x3b0>)
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	f7fc f94c 	bl	800086c <__aeabi_ddiv>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
			curr_time -= time_step;
 80045dc:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 80045e0:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 80045e4:	f7fb fe60 	bl	80002a8 <__aeabi_dsub>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 80045f0:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80045f4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80045f8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80045fc:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8004600:	4611      	mov	r1, r2
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	f000 ff04 	bl	8005410 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 8004608:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800460c:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8004610:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004614:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	f7ff f9f1 	bl	8003a00 <predict_observe_orbit>
		while (fabs(obs.elevation*180/M_PI) > AOSLOS_HORIZON_THRESHOLD) {
 800461e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	4b24      	ldr	r3, [pc, #144]	@ (80046b8 <predict_next_aos+0x3c0>)
 8004628:	f7fb fff6 	bl	8000618 <__aeabi_dmul>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
 8004634:	a314      	add	r3, pc, #80	@ (adr r3, 8004688 <predict_next_aos+0x390>)
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f7fc f917 	bl	800086c <__aeabi_ddiv>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4614      	mov	r4, r2
 8004644:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8004648:	a319      	add	r3, pc, #100	@ (adr r3, 80046b0 <predict_next_aos+0x3b8>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	4620      	mov	r0, r4
 8004650:	4629      	mov	r1, r5
 8004652:	f7fc fa71 	bl	8000b38 <__aeabi_dcmpgt>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d18c      	bne.n	8004576 <predict_next_aos+0x27e>
		}
	}
	return obs;
 800465c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004660:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800466c:	2258      	movs	r2, #88	@ 0x58
 800466e:	4619      	mov	r1, r3
 8004670:	f01a fda9 	bl	801f1c6 <memcpy>
}
 8004674:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004678:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8004682:	46bd      	mov	sp, r7
 8004684:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004688:	54442d18 	.word	0x54442d18
 800468c:	400921fb 	.word	0x400921fb
 8004690:	00000000 	.word	0x00000000
 8004694:	40c06800 	.word	0x40c06800
 8004698:	d70a3d71 	.word	0xd70a3d71
 800469c:	3fdd70a3 	.word	0x3fdd70a3
 80046a0:	8db8bac7 	.word	0x8db8bac7
 80046a4:	3f36f006 	.word	0x3f36f006
 80046a8:	00000000 	.word	0x00000000
 80046ac:	41202ca0 	.word	0x41202ca0
 80046b0:	33333333 	.word	0x33333333
 80046b4:	3fd33333 	.word	0x3fd33333
 80046b8:	40668000 	.word	0x40668000
 80046bc:	bff00000 	.word	0xbff00000
 80046c0:	1c71c71d 	.word	0x1c71c71d
 80046c4:	3f8c71c7 	.word	0x3f8c71c7

080046c8 <step_pass>:
 * \param curr_time Time from which to start stepping
 * \param direction Either POSITIVE_DIRECTION (step from current time to pass end) or NEGATIVE_DIRECTION (step from current time to start of pass). In case of the former, the pass will be stepped until either elevation is negative or the derivative of the elevation is negative
 * \return Time for when we have stepped out of the pass
 * \copyright GPLv2+
 **/
double step_pass(const predict_observer_t *observer, const predict_orbital_elements_t *orbital_elements, double curr_time, enum step_pass_direction direction) {
 80046c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046cc:	b0c5      	sub	sp, #276	@ 0x114
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6178      	str	r0, [r7, #20]
 80046d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80046d6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80046da:	6019      	str	r1, [r3, #0]
 80046dc:	f107 0310 	add.w	r3, r7, #16
 80046e0:	ed03 0b02 	vstr	d0, [r3, #-8]
 80046e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80046e8:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80046ec:	701a      	strb	r2, [r3, #0]
	struct predict_position orbit;
	struct predict_observation obs;
	do {
		predict_orbit(orbital_elements, &orbit, curr_time);
 80046ee:	f107 0310 	add.w	r3, r7, #16
 80046f2:	4619      	mov	r1, r3
 80046f4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80046f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80046fc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004700:	ed11 0b02 	vldr	d0, [r1, #-8]
 8004704:	4611      	mov	r1, r2
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	f000 fe82 	bl	8005410 <predict_orbit>
		predict_observe_orbit(observer, &orbit, &obs);
 800470c:	f107 0218 	add.w	r2, r7, #24
 8004710:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004714:	4619      	mov	r1, r3
 8004716:	6978      	ldr	r0, [r7, #20]
 8004718:	f7ff f972 	bl	8003a00 <predict_observe_orbit>

		//weird time stepping from Predict, but which magically works
		double time_step = cos(obs.elevation - 1.0)*sqrt(orbit.altitude)/25000.0;
 800471c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	4b4c      	ldr	r3, [pc, #304]	@ (8004858 <step_pass+0x190>)
 8004726:	f7fb fdbf 	bl	80002a8 <__aeabi_dsub>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	ec43 2b17 	vmov	d7, r2, r3
 8004732:	eeb0 0a47 	vmov.f32	s0, s14
 8004736:	eef0 0a67 	vmov.f32	s1, s15
 800473a:	f01e f97d 	bl	8022a38 <cos>
 800473e:	ec59 8b10 	vmov	r8, r9, d0
 8004742:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 8004746:	eeb0 0a47 	vmov.f32	s0, s14
 800474a:	eef0 0a67 	vmov.f32	s1, s15
 800474e:	f01d ffad 	bl	80226ac <sqrt>
 8004752:	ec53 2b10 	vmov	r2, r3, d0
 8004756:	4640      	mov	r0, r8
 8004758:	4649      	mov	r1, r9
 800475a:	f7fb ff5d 	bl	8000618 <__aeabi_dmul>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4610      	mov	r0, r2
 8004764:	4619      	mov	r1, r3
 8004766:	a33a      	add	r3, pc, #232	@ (adr r3, 8004850 <step_pass+0x188>)
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f7fc f87e 	bl	800086c <__aeabi_ddiv>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
		if (((direction == POSITIVE_DIRECTION) && time_step < 0) || ((direction == NEGATIVE_DIRECTION) && time_step > 0)) {
 8004778:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800477c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <step_pass+0xd4>
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8004792:	f7fc f9b3 	bl	8000afc <__aeabi_dcmplt>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d111      	bne.n	80047c0 <step_pass+0xf8>
 800479c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047a0:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d112      	bne.n	80047d0 <step_pass+0x108>
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 80047b6:	f7fc f9bf 	bl	8000b38 <__aeabi_dcmpgt>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <step_pass+0x108>
			time_step = -time_step;
 80047c0:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 80047c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047c8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80047cc:	e9c7 4542 	strd	r4, r5, [r7, #264]	@ 0x108
		}

		curr_time += time_step;
 80047d0:	f107 0310 	add.w	r3, r7, #16
 80047d4:	461e      	mov	r6, r3
 80047d6:	f107 0310 	add.w	r3, r7, #16
 80047da:	4619      	mov	r1, r3
 80047dc:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80047e0:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80047e4:	f7fb fd62 	bl	80002ac <__adddf3>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	e946 2302 	strd	r2, r3, [r6, #-8]
	} while ((obs.elevation >= 0) || ((direction == POSITIVE_DIRECTION) && (obs.elevation_rate > 0.0)));
 80047f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	f7fc f992 	bl	8000b24 <__aeabi_dcmpge>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	f47f af73 	bne.w	80046ee <step_pass+0x26>
 8004808:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800480c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10b      	bne.n	800482e <step_pass+0x166>
 8004816:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	f7fc f989 	bl	8000b38 <__aeabi_dcmpgt>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	f47f af60 	bne.w	80046ee <step_pass+0x26>
	return curr_time;
 800482e:	f107 0310 	add.w	r3, r7, #16
 8004832:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004836:	ec43 2b17 	vmov	d7, r2, r3
}
 800483a:	eeb0 0a47 	vmov.f32	s0, s14
 800483e:	eef0 0a67 	vmov.f32	s1, s15
 8004842:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8004846:	46bd      	mov	sp, r7
 8004848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800484c:	f3af 8000 	nop.w
 8004850:	00000000 	.word	0x00000000
 8004854:	40d86a00 	.word	0x40d86a00
 8004858:	3ff00000 	.word	0x3ff00000
 800485c:	00000000 	.word	0x00000000

08004860 <predict_next_los>:

struct predict_observation predict_next_los(const predict_observer_t *observer, const predict_orbital_elements_t *orbital_elements, double start_utc)
{
 8004860:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004864:	b0dc      	sub	sp, #368	@ 0x170
 8004866:	af00      	add	r7, sp, #0
 8004868:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800486c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004870:	6018      	str	r0, [r3, #0]
 8004872:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004876:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800487a:	6019      	str	r1, [r3, #0]
 800487c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004880:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	463b      	mov	r3, r7
 8004888:	ed83 0b00 	vstr	d0, [r3]
	double curr_time = start_utc;
 800488c:	463b      	mov	r3, r7
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
	struct predict_observation obs;
	double time_step = 0;
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

	struct predict_position orbit;
	predict_orbit(orbital_elements, &orbit, curr_time);
 80048a2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80048a6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80048aa:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80048ae:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 80048b2:	4611      	mov	r1, r2
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	f000 fdab 	bl	8005410 <predict_orbit>
	predict_observe_orbit(observer, &orbit, &obs);
 80048ba:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80048be:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80048c2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80048c6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	f7ff f898 	bl	8003a00 <predict_observe_orbit>

	//check whether AOS/LOS can happen after specified start time
	if (predict_aos_happens(orbital_elements, observer->latitude) && !predict_is_geosynchronous(orbital_elements) && !orbit.decayed) {
 80048d0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80048d4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 80048de:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80048e2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80048e6:	eeb0 0a47 	vmov.f32	s0, s14
 80048ea:	eef0 0a67 	vmov.f32	s1, s15
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	f000 fd06 	bl	8005300 <predict_aos_happens>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80d9 	beq.w	8004aae <predict_next_los+0x24e>
 80048fc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004900:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	f000 fc3b 	bl	8005180 <predict_is_geosynchronous>
 800490a:	4603      	mov	r3, r0
 800490c:	f083 0301 	eor.w	r3, r3, #1
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80cb 	beq.w	8004aae <predict_next_los+0x24e>
 8004918:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800491c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004920:	7a1b      	ldrb	r3, [r3, #8]
 8004922:	f083 0301 	eor.w	r3, r3, #1
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80c0 	beq.w	8004aae <predict_next_los+0x24e>
		//iteration algorithm from Predict, see comments in predict_next_aos().

		//iterate until next satellite pass
		if (obs.elevation < 0.0) {
 800492e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	f7fc f8df 	bl	8000afc <__aeabi_dcmplt>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d030      	beq.n	80049a6 <predict_next_los+0x146>
			struct predict_observation aos = predict_next_aos(observer, orbital_elements, curr_time);
 8004944:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004948:	f5a3 70ac 	sub.w	r0, r3, #344	@ 0x158
 800494c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004950:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 8004954:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004958:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800495c:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	f7ff fcc8 	bl	80042f8 <predict_next_aos>
			curr_time = aos.time;
 8004968:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800496c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 8004978:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800497c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004980:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004984:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8004988:	4611      	mov	r1, r2
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	f000 fd40 	bl	8005410 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 8004990:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8004994:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8004998:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800499c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	f7ff f82d 	bl	8003a00 <predict_observe_orbit>
		}

		//step through the pass
		curr_time = step_pass(observer, orbital_elements, curr_time, POSITIVE_DIRECTION);
 80049a6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80049aa:	f5a3 71b2 	sub.w	r1, r3, #356	@ 0x164
 80049ae:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80049b2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80049b6:	2200      	movs	r2, #0
 80049b8:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 80049bc:	6809      	ldr	r1, [r1, #0]
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	f7ff fe82 	bl	80046c8 <step_pass>
 80049c4:	ed87 0b5a 	vstr	d0, [r7, #360]	@ 0x168

		//fine tune to elevation threshold
		do {
			time_step = obs.elevation*180.0/M_PI*sqrt(orbit.altitude)/502500.0;
 80049c8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	4b49      	ldr	r3, [pc, #292]	@ (8004af8 <predict_next_los+0x298>)
 80049d2:	f7fb fe21 	bl	8000618 <__aeabi_dmul>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	a340      	add	r3, pc, #256	@ (adr r3, 8004ae0 <predict_next_los+0x280>)
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f7fb ff42 	bl	800086c <__aeabi_ddiv>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4690      	mov	r8, r2
 80049ee:	4699      	mov	r9, r3
 80049f0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80049f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80049f8:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 80049fc:	eeb0 0a47 	vmov.f32	s0, s14
 8004a00:	eef0 0a67 	vmov.f32	s1, s15
 8004a04:	f01d fe52 	bl	80226ac <sqrt>
 8004a08:	ec53 2b10 	vmov	r2, r3, d0
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	4649      	mov	r1, r9
 8004a10:	f7fb fe02 	bl	8000618 <__aeabi_dmul>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	a332      	add	r3, pc, #200	@ (adr r3, 8004ae8 <predict_next_los+0x288>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f7fb ff23 	bl	800086c <__aeabi_ddiv>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
			curr_time += time_step;
 8004a2e:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8004a32:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8004a36:	f7fb fc39 	bl	80002ac <__adddf3>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 8004a42:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004a46:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004a4a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004a4e:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8004a52:	4611      	mov	r1, r2
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	f000 fcdb 	bl	8005410 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 8004a5a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8004a5e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8004a62:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004a66:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	f7fe ffc8 	bl	8003a00 <predict_observe_orbit>
		} while (fabs(obs.elevation*180.0/M_PI) > AOSLOS_HORIZON_THRESHOLD);
 8004a70:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	4b1f      	ldr	r3, [pc, #124]	@ (8004af8 <predict_next_los+0x298>)
 8004a7a:	f7fb fdcd 	bl	8000618 <__aeabi_dmul>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4610      	mov	r0, r2
 8004a84:	4619      	mov	r1, r3
 8004a86:	a316      	add	r3, pc, #88	@ (adr r3, 8004ae0 <predict_next_los+0x280>)
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	f7fb feee 	bl	800086c <__aeabi_ddiv>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4614      	mov	r4, r2
 8004a96:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8004a9a:	a315      	add	r3, pc, #84	@ (adr r3, 8004af0 <predict_next_los+0x290>)
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	f7fc f848 	bl	8000b38 <__aeabi_dcmpgt>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d18c      	bne.n	80049c8 <predict_next_los+0x168>
	}
	return obs;
 8004aae:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004ab2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004abe:	2258      	movs	r2, #88	@ 0x58
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	f01a fb80 	bl	801f1c6 <memcpy>
}
 8004ac6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004aca:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ada:	bf00      	nop
 8004adc:	f3af 8000 	nop.w
 8004ae0:	54442d18 	.word	0x54442d18
 8004ae4:	400921fb 	.word	0x400921fb
 8004ae8:	00000000 	.word	0x00000000
 8004aec:	411eab90 	.word	0x411eab90
 8004af0:	33333333 	.word	0x33333333
 8004af4:	3fd33333 	.word	0x3fd33333
 8004af8:	40668000 	.word	0x40668000
 8004afc:	00000000 	.word	0x00000000

08004b00 <predict_parse_tle>:

//length of buffer used for extracting subsets of TLE strings for parsing
#define SUBSTRING_BUFFER_LENGTH 50

predict_orbital_elements_t* predict_parse_tle(const char *tle_line_1, const char *tle_line_2)
{
 8004b00:	b5b0      	push	{r4, r5, r7, lr}
 8004b02:	b0aa      	sub	sp, #168	@ 0xa8
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
	double tempnum;
	predict_orbital_elements_t *m = (predict_orbital_elements_t*)malloc(sizeof(predict_orbital_elements_t));
 8004b0a:	2078      	movs	r0, #120	@ 0x78
 8004b0c:	f017 fb8a 	bl	801c224 <malloc>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	if (m == NULL) return NULL;
 8004b16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <predict_parse_tle+0x22>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e312      	b.n	8005148 <predict_parse_tle+0x648>

	char substring_buffer[SUBSTRING_BUFFER_LENGTH];
	m->satellite_number = atol(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,2,6));
 8004b22:	f107 020c 	add.w	r2, r7, #12
 8004b26:	2306      	movs	r3, #6
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	2132      	movs	r1, #50	@ 0x32
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f00d fb82 	bl	8012238 <SubString>
 8004b34:	4603      	mov	r3, r0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f017 fb5d 	bl	801c1f6 <atol>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b42:	601a      	str	r2, [r3, #0]
	m->element_number = atol(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,64,67));
 8004b44:	f107 020c 	add.w	r2, r7, #12
 8004b48:	2343      	movs	r3, #67	@ 0x43
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	2340      	movs	r3, #64	@ 0x40
 8004b4e:	2132      	movs	r1, #50	@ 0x32
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f00d fb71 	bl	8012238 <SubString>
 8004b56:	4603      	mov	r3, r0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f017 fb4c 	bl	801c1f6 <atol>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b64:	605a      	str	r2, [r3, #4]
	m->epoch_year = atoi(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,18,19));
 8004b66:	f107 020c 	add.w	r2, r7, #12
 8004b6a:	2313      	movs	r3, #19
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	2312      	movs	r3, #18
 8004b70:	2132      	movs	r1, #50	@ 0x32
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f00d fb60 	bl	8012238 <SubString>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f017 fb37 	bl	801c1ee <atoi>
 8004b80:	4602      	mov	r2, r0
 8004b82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b86:	615a      	str	r2, [r3, #20]
	strncpy(m->designator, SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,9,16),8);
 8004b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b8c:	f103 0408 	add.w	r4, r3, #8
 8004b90:	f107 020c 	add.w	r2, r7, #12
 8004b94:	2310      	movs	r3, #16
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	2309      	movs	r3, #9
 8004b9a:	2132      	movs	r1, #50	@ 0x32
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f00d fb4b 	bl	8012238 <SubString>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f019 faab 	bl	801e104 <strncpy>
	m->epoch_day = atof(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,20,31));
 8004bae:	f107 020c 	add.w	r2, r7, #12
 8004bb2:	231f      	movs	r3, #31
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	2314      	movs	r3, #20
 8004bb8:	2132      	movs	r1, #50	@ 0x32
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f00d fb3c 	bl	8012238 <SubString>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f017 fb10 	bl	801c1e8 <atof>
 8004bc8:	eeb0 7a40 	vmov.f32	s14, s0
 8004bcc:	eef0 7a60 	vmov.f32	s15, s1
 8004bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004bd4:	ed83 7b06 	vstr	d7, [r3, #24]
	m->inclination = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,8,15));
 8004bd8:	f107 020c 	add.w	r2, r7, #12
 8004bdc:	230f      	movs	r3, #15
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2308      	movs	r3, #8
 8004be2:	2132      	movs	r1, #50	@ 0x32
 8004be4:	6838      	ldr	r0, [r7, #0]
 8004be6:	f00d fb27 	bl	8012238 <SubString>
 8004bea:	4603      	mov	r3, r0
 8004bec:	4618      	mov	r0, r3
 8004bee:	f017 fafb 	bl	801c1e8 <atof>
 8004bf2:	eeb0 7a40 	vmov.f32	s14, s0
 8004bf6:	eef0 7a60 	vmov.f32	s15, s1
 8004bfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004bfe:	ed83 7b08 	vstr	d7, [r3, #32]
	m->right_ascension = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,17,24));
 8004c02:	f107 020c 	add.w	r2, r7, #12
 8004c06:	2318      	movs	r3, #24
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	2311      	movs	r3, #17
 8004c0c:	2132      	movs	r1, #50	@ 0x32
 8004c0e:	6838      	ldr	r0, [r7, #0]
 8004c10:	f00d fb12 	bl	8012238 <SubString>
 8004c14:	4603      	mov	r3, r0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f017 fae6 	bl	801c1e8 <atof>
 8004c1c:	eeb0 7a40 	vmov.f32	s14, s0
 8004c20:	eef0 7a60 	vmov.f32	s15, s1
 8004c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c28:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
	m->eccentricity = 1.0e-07*atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,26,32));
 8004c2c:	f107 020c 	add.w	r2, r7, #12
 8004c30:	2320      	movs	r3, #32
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	231a      	movs	r3, #26
 8004c36:	2132      	movs	r1, #50	@ 0x32
 8004c38:	6838      	ldr	r0, [r7, #0]
 8004c3a:	f00d fafd 	bl	8012238 <SubString>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f017 fad1 	bl	801c1e8 <atof>
 8004c46:	ec51 0b10 	vmov	r0, r1, d0
 8004c4a:	f20f 4380 	addw	r3, pc, #1152	@ 0x480
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	f7fb fce1 	bl	8000618 <__aeabi_dmul>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8004c5e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	m->argument_of_perigee = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,34,41));
 8004c62:	f107 020c 	add.w	r2, r7, #12
 8004c66:	2329      	movs	r3, #41	@ 0x29
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	2322      	movs	r3, #34	@ 0x22
 8004c6c:	2132      	movs	r1, #50	@ 0x32
 8004c6e:	6838      	ldr	r0, [r7, #0]
 8004c70:	f00d fae2 	bl	8012238 <SubString>
 8004c74:	4603      	mov	r3, r0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f017 fab6 	bl	801c1e8 <atof>
 8004c7c:	eeb0 7a40 	vmov.f32	s14, s0
 8004c80:	eef0 7a60 	vmov.f32	s15, s1
 8004c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c88:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
	m->mean_anomaly = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,43,50));
 8004c8c:	f107 020c 	add.w	r2, r7, #12
 8004c90:	2332      	movs	r3, #50	@ 0x32
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	232b      	movs	r3, #43	@ 0x2b
 8004c96:	2132      	movs	r1, #50	@ 0x32
 8004c98:	6838      	ldr	r0, [r7, #0]
 8004c9a:	f00d facd 	bl	8012238 <SubString>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f017 faa1 	bl	801c1e8 <atof>
 8004ca6:	eeb0 7a40 	vmov.f32	s14, s0
 8004caa:	eef0 7a60 	vmov.f32	s15, s1
 8004cae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004cb2:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
	m->mean_motion = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,52,62));
 8004cb6:	f107 020c 	add.w	r2, r7, #12
 8004cba:	233e      	movs	r3, #62	@ 0x3e
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	2334      	movs	r3, #52	@ 0x34
 8004cc0:	2132      	movs	r1, #50	@ 0x32
 8004cc2:	6838      	ldr	r0, [r7, #0]
 8004cc4:	f00d fab8 	bl	8012238 <SubString>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f017 fa8c 	bl	801c1e8 <atof>
 8004cd0:	eeb0 7a40 	vmov.f32	s14, s0
 8004cd4:	eef0 7a60 	vmov.f32	s15, s1
 8004cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004cdc:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
	m->derivative_mean_motion  = atof(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,33,42));
 8004ce0:	f107 020c 	add.w	r2, r7, #12
 8004ce4:	232a      	movs	r3, #42	@ 0x2a
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	2321      	movs	r3, #33	@ 0x21
 8004cea:	2132      	movs	r1, #50	@ 0x32
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f00d faa3 	bl	8012238 <SubString>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f017 fa77 	bl	801c1e8 <atof>
 8004cfa:	eeb0 7a40 	vmov.f32	s14, s0
 8004cfe:	eef0 7a60 	vmov.f32	s15, s1
 8004d02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d06:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
	tempnum=1.0e-5*atof(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,44,49));
 8004d0a:	f107 020c 	add.w	r2, r7, #12
 8004d0e:	2331      	movs	r3, #49	@ 0x31
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	232c      	movs	r3, #44	@ 0x2c
 8004d14:	2132      	movs	r1, #50	@ 0x32
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f00d fa8e 	bl	8012238 <SubString>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f017 fa62 	bl	801c1e8 <atof>
 8004d24:	ec51 0b10 	vmov	r0, r1, d0
 8004d28:	a3ea      	add	r3, pc, #936	@ (adr r3, 80050d4 <predict_parse_tle+0x5d4>)
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f7fb fc73 	bl	8000618 <__aeabi_dmul>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	m->second_derivative_mean_motion = tempnum/pow(10.0,(tle_line_1[51]-'0'));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3333      	adds	r3, #51	@ 0x33
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	3b30      	subs	r3, #48	@ 0x30
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fb fbfe 	bl	8000544 <__aeabi_i2d>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	ec43 2b11 	vmov	d1, r2, r3
 8004d50:	ed9f 0bc7 	vldr	d0, [pc, #796]	@ 8005070 <predict_parse_tle+0x570>
 8004d54:	f01d fc3a 	bl	80225cc <pow>
 8004d58:	ec53 2b10 	vmov	r2, r3, d0
 8004d5c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8004d60:	f7fb fd84 	bl	800086c <__aeabi_ddiv>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8004d6c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	tempnum=1.0e-5*atof(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,53,58));
 8004d70:	f107 020c 	add.w	r2, r7, #12
 8004d74:	233a      	movs	r3, #58	@ 0x3a
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	2335      	movs	r3, #53	@ 0x35
 8004d7a:	2132      	movs	r1, #50	@ 0x32
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f00d fa5b 	bl	8012238 <SubString>
 8004d82:	4603      	mov	r3, r0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f017 fa2f 	bl	801c1e8 <atof>
 8004d8a:	ec51 0b10 	vmov	r0, r1, d0
 8004d8e:	a3d1      	add	r3, pc, #836	@ (adr r3, 80050d4 <predict_parse_tle+0x5d4>)
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	f7fb fc40 	bl	8000618 <__aeabi_dmul>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	m->bstar_drag_term = tempnum/pow(10.0,(tle_line_1[60]-'0'));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	333c      	adds	r3, #60	@ 0x3c
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	3b30      	subs	r3, #48	@ 0x30
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fb fbcb 	bl	8000544 <__aeabi_i2d>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	ec43 2b11 	vmov	d1, r2, r3
 8004db6:	ed9f 0bae 	vldr	d0, [pc, #696]	@ 8005070 <predict_parse_tle+0x570>
 8004dba:	f01d fc07 	bl	80225cc <pow>
 8004dbe:	ec53 2b10 	vmov	r2, r3, d0
 8004dc2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8004dc6:	f7fb fd51 	bl	800086c <__aeabi_ddiv>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8004dd2:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	m->revolutions_at_epoch = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,63,67));
 8004dd6:	f107 020c 	add.w	r2, r7, #12
 8004dda:	2343      	movs	r3, #67	@ 0x43
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	233f      	movs	r3, #63	@ 0x3f
 8004de0:	2132      	movs	r1, #50	@ 0x32
 8004de2:	6838      	ldr	r0, [r7, #0]
 8004de4:	f00d fa28 	bl	8012238 <SubString>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4618      	mov	r0, r3
 8004dec:	f017 f9fc 	bl	801c1e8 <atof>
 8004df0:	ec53 2b10 	vmov	r2, r3, d0
 8004df4:	4610      	mov	r0, r2
 8004df6:	4619      	mov	r1, r3
 8004df8:	f7fb febe 	bl	8000b78 <__aeabi_d2iz>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e02:	669a      	str	r2, [r3, #104]	@ 0x68

	/* Period > 225 minutes is deep space */
	double ao, xnodp, dd1, dd2, delo, a1, del1, r1;
	double temp = TWO_PI/MINUTES_PER_DAY/MINUTES_PER_DAY;
 8004e04:	a3b5      	add	r3, pc, #724	@ (adr r3, 80050dc <predict_parse_tle+0x5dc>)
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	double xno = m->mean_motion*temp*MINUTES_PER_DAY; //from old TLE struct
 8004e0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e12:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8004e16:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004e1a:	f7fb fbfd 	bl	8000618 <__aeabi_dmul>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4610      	mov	r0, r2
 8004e24:	4619      	mov	r1, r3
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	4ba3      	ldr	r3, [pc, #652]	@ (80050b8 <predict_parse_tle+0x5b8>)
 8004e2c:	f7fb fbf4 	bl	8000618 <__aeabi_dmul>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	dd1=(XKE/xno);
 8004e38:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8004e3c:	a18e      	add	r1, pc, #568	@ (adr r1, 8005078 <predict_parse_tle+0x578>)
 8004e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e42:	f7fb fd13 	bl	800086c <__aeabi_ddiv>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	dd2=TWO_THIRD;
 8004e4e:	a38c      	add	r3, pc, #560	@ (adr r3, 8005080 <predict_parse_tle+0x580>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	a1=pow(dd1,dd2);
 8004e58:	ed97 1b1c 	vldr	d1, [r7, #112]	@ 0x70
 8004e5c:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 8004e60:	f01d fbb4 	bl	80225cc <pow>
 8004e64:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
	r1=cos(m->inclination*M_PI/180.0);
 8004e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e6c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004e70:	a385      	add	r3, pc, #532	@ (adr r3, 8005088 <predict_parse_tle+0x588>)
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e76:	f7fb fbcf 	bl	8000618 <__aeabi_dmul>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	4b8d      	ldr	r3, [pc, #564]	@ (80050bc <predict_parse_tle+0x5bc>)
 8004e88:	f7fb fcf0 	bl	800086c <__aeabi_ddiv>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	ec43 2b17 	vmov	d7, r2, r3
 8004e94:	eeb0 0a47 	vmov.f32	s0, s14
 8004e98:	eef0 0a67 	vmov.f32	s1, s15
 8004e9c:	f01d fdcc 	bl	8022a38 <cos>
 8004ea0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
	dd1=(1.0-m->eccentricity*m->eccentricity);
 8004ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ea8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8004eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004eb0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004eb4:	f7fb fbb0 	bl	8000618 <__aeabi_dmul>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	f04f 0000 	mov.w	r0, #0
 8004ec0:	497f      	ldr	r1, [pc, #508]	@ (80050c0 <predict_parse_tle+0x5c0>)
 8004ec2:	f7fb f9f1 	bl	80002a8 <__aeabi_dsub>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	temp=CK2*1.5f*(r1*r1*3.0-1.0)/pow(dd1,1.5);
 8004ece:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004ed2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8004ed6:	f7fb fb9f 	bl	8000618 <__aeabi_dmul>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	4b77      	ldr	r3, [pc, #476]	@ (80050c4 <predict_parse_tle+0x5c4>)
 8004ee8:	f7fb fb96 	bl	8000618 <__aeabi_dmul>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	4b71      	ldr	r3, [pc, #452]	@ (80050c0 <predict_parse_tle+0x5c0>)
 8004efa:	f7fb f9d5 	bl	80002a8 <__aeabi_dsub>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	a362      	add	r3, pc, #392	@ (adr r3, 8005090 <predict_parse_tle+0x590>)
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	f7fb fb84 	bl	8000618 <__aeabi_dmul>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4614      	mov	r4, r2
 8004f16:	461d      	mov	r5, r3
 8004f18:	ed9f 1b5f 	vldr	d1, [pc, #380]	@ 8005098 <predict_parse_tle+0x598>
 8004f1c:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 8004f20:	f01d fb54 	bl	80225cc <pow>
 8004f24:	ec53 2b10 	vmov	r2, r3, d0
 8004f28:	4620      	mov	r0, r4
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	f7fb fc9e 	bl	800086c <__aeabi_ddiv>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	del1=temp/(a1*a1);
 8004f38:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004f3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f40:	f7fb fb6a 	bl	8000618 <__aeabi_dmul>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8004f4c:	f7fb fc8e 	bl	800086c <__aeabi_ddiv>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	ao=a1*(1.0-del1*(TWO_THIRD*.5+del1*(del1*1.654320987654321+1.0)));
 8004f58:	a351      	add	r3, pc, #324	@ (adr r3, 80050a0 <predict_parse_tle+0x5a0>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8004f62:	f7fb fb59 	bl	8000618 <__aeabi_dmul>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	4b53      	ldr	r3, [pc, #332]	@ (80050c0 <predict_parse_tle+0x5c0>)
 8004f74:	f7fb f99a 	bl	80002ac <__adddf3>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4619      	mov	r1, r3
 8004f80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f84:	f7fb fb48 	bl	8000618 <__aeabi_dmul>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	a345      	add	r3, pc, #276	@ (adr r3, 80050a8 <predict_parse_tle+0x5a8>)
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	f7fb f989 	bl	80002ac <__adddf3>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004fa6:	f7fb fb37 	bl	8000618 <__aeabi_dmul>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	f04f 0000 	mov.w	r0, #0
 8004fb2:	4943      	ldr	r1, [pc, #268]	@ (80050c0 <predict_parse_tle+0x5c0>)
 8004fb4:	f7fb f978 	bl	80002a8 <__aeabi_dsub>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fc0:	f7fb fb2a 	bl	8000618 <__aeabi_dmul>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	delo=temp/(ao*ao);
 8004fcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fd0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8004fd4:	f7fb fb20 	bl	8000618 <__aeabi_dmul>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8004fe0:	f7fb fc44 	bl	800086c <__aeabi_ddiv>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	xnodp=xno/(delo+1.0);
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	4b33      	ldr	r3, [pc, #204]	@ (80050c0 <predict_parse_tle+0x5c0>)
 8004ff2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8004ff6:	f7fb f959 	bl	80002ac <__adddf3>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005002:	f7fb fc33 	bl	800086c <__aeabi_ddiv>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	/* Select a deep-space/near-earth ephemeris */
	if (TWO_PI/xnodp/MINUTES_PER_DAY >= 0.15625) {
 800500e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005012:	a127      	add	r1, pc, #156	@ (adr r1, 80050b0 <predict_parse_tle+0x5b0>)
 8005014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005018:	f7fb fc28 	bl	800086c <__aeabi_ddiv>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4610      	mov	r0, r2
 8005022:	4619      	mov	r1, r3
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	4b23      	ldr	r3, [pc, #140]	@ (80050b8 <predict_parse_tle+0x5b8>)
 800502a:	f7fb fc1f 	bl	800086c <__aeabi_ddiv>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	4b23      	ldr	r3, [pc, #140]	@ (80050c8 <predict_parse_tle+0x5c8>)
 800503c:	f7fb fd72 	bl	8000b24 <__aeabi_dcmpge>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d05d      	beq.n	8005102 <predict_parse_tle+0x602>
		m->ephemeris = EPHEMERIS_SDP4;
 8005046:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800504a:	2201      	movs	r2, #1
 800504c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
		
		// Allocate memory for ephemeris data
		m->ephemeris_data = malloc(sizeof(struct _sdp4));
 8005050:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8005054:	f017 f8e6 	bl	801c224 <malloc>
 8005058:	4603      	mov	r3, r0
 800505a:	461a      	mov	r2, r3
 800505c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005060:	671a      	str	r2, [r3, #112]	@ 0x70

		if (m->ephemeris_data == NULL) {
 8005062:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005068:	2b00      	cmp	r3, #0
 800506a:	d141      	bne.n	80050f0 <predict_parse_tle+0x5f0>
 800506c:	e03a      	b.n	80050e4 <predict_parse_tle+0x5e4>
 800506e:	bf00      	nop
 8005070:	00000000 	.word	0x00000000
 8005074:	40240000 	.word	0x40240000
 8005078:	d08dcacf 	.word	0xd08dcacf
 800507c:	3fb309b5 	.word	0x3fb309b5
 8005080:	55555555 	.word	0x55555555
 8005084:	3fe55555 	.word	0x3fe55555
 8005088:	54442d18 	.word	0x54442d18
 800508c:	400921fb 	.word	0x400921fb
 8005090:	cbb15878 	.word	0xcbb15878
 8005094:	3f4a9b3a 	.word	0x3f4a9b3a
 8005098:	00000000 	.word	0x00000000
 800509c:	3ff80000 	.word	0x3ff80000
 80050a0:	48b0fcd7 	.word	0x48b0fcd7
 80050a4:	3ffa7819 	.word	0x3ffa7819
 80050a8:	55555555 	.word	0x55555555
 80050ac:	3fd55555 	.word	0x3fd55555
 80050b0:	54442d18 	.word	0x54442d18
 80050b4:	401921fb 	.word	0x401921fb
 80050b8:	40968000 	.word	0x40968000
 80050bc:	40668000 	.word	0x40668000
 80050c0:	3ff00000 	.word	0x3ff00000
 80050c4:	40080000 	.word	0x40080000
 80050c8:	3fc40000 	.word	0x3fc40000
 80050cc:	9abcaf48 	.word	0x9abcaf48
 80050d0:	3e7ad7f2 	.word	0x3e7ad7f2
 80050d4:	88e368f1 	.word	0x88e368f1
 80050d8:	3ee4f8b5 	.word	0x3ee4f8b5
 80050dc:	1fbf7384 	.word	0x1fbf7384
 80050e0:	3ec96b0f 	.word	0x3ec96b0f
			predict_destroy_orbital_elements(m);
 80050e4:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80050e8:	f000 f832 	bl	8005150 <predict_destroy_orbital_elements>
			return NULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e02b      	b.n	8005148 <predict_parse_tle+0x648>
		}
		// Initialize ephemeris data structure
		sdp4_init(m, (struct _sdp4*)m->ephemeris_data);
 80050f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f6:	4619      	mov	r1, r3
 80050f8:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80050fc:	f000 fc78 	bl	80059f0 <sdp4_init>
 8005100:	e020      	b.n	8005144 <predict_parse_tle+0x644>

	} else {
		m->ephemeris = EPHEMERIS_SGP4;
 8005102:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005106:	2200      	movs	r2, #0
 8005108:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
		
		// Allocate memory for ephemeris data
		m->ephemeris_data = malloc(sizeof(struct _sgp4));
 800510c:	f44f 7090 	mov.w	r0, #288	@ 0x120
 8005110:	f017 f888 	bl	801c224 <malloc>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800511c:	671a      	str	r2, [r3, #112]	@ 0x70

		if (m->ephemeris_data == NULL) {
 800511e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005124:	2b00      	cmp	r3, #0
 8005126:	d105      	bne.n	8005134 <predict_parse_tle+0x634>
			predict_destroy_orbital_elements(m);
 8005128:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800512c:	f000 f810 	bl	8005150 <predict_destroy_orbital_elements>
			return NULL;
 8005130:	2300      	movs	r3, #0
 8005132:	e009      	b.n	8005148 <predict_parse_tle+0x648>
		}
		// Initialize ephemeris data structure
		sgp4_init(m, (struct _sgp4*)m->ephemeris_data);
 8005134:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513a:	4619      	mov	r1, r3
 800513c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8005140:	f008 ff4e 	bl	800dfe0 <sgp4_init>
	}

	return m;
 8005144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 8005148:	4618      	mov	r0, r3
 800514a:	37a0      	adds	r7, #160	@ 0xa0
 800514c:	46bd      	mov	sp, r7
 800514e:	bdb0      	pop	{r4, r5, r7, pc}

08005150 <predict_destroy_orbital_elements>:

void predict_destroy_orbital_elements(predict_orbital_elements_t *m)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	if (m == NULL) return;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00c      	beq.n	8005178 <predict_destroy_orbital_elements+0x28>

	if (m->ephemeris_data != NULL) {
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005162:	2b00      	cmp	r3, #0
 8005164:	d004      	beq.n	8005170 <predict_destroy_orbital_elements+0x20>
		free(m->ephemeris_data);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516a:	4618      	mov	r0, r3
 800516c:	f017 f862 	bl	801c234 <free>
	}

	free(m);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f017 f85f 	bl	801c234 <free>
 8005176:	e000      	b.n	800517a <predict_destroy_orbital_elements+0x2a>
	if (m == NULL) return;
 8005178:	bf00      	nop
}
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <predict_is_geosynchronous>:

bool predict_is_geosynchronous(const predict_orbital_elements_t *m)
{
 8005180:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
	return (m->mean_motion >= GEOSYNCHRONOUS_LOWER_MEAN_MOTION)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
		&& (m->mean_motion <= GEOSYNCHRONOUS_UPPER_MEAN_MOTION)
		&& (fabs(m->eccentricity) <= GEOSYNCHRONOUS_ECCENTRICITY_THRESHOLD)
		&& (fabs(m->inclination) <= GEOSYNCHRONOUS_INCLINATION_THRESHOLD_DEGREES);
 8005190:	a320      	add	r3, pc, #128	@ (adr r3, 8005214 <predict_is_geosynchronous+0x94>)
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f7fb fcc5 	bl	8000b24 <__aeabi_dcmpge>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d02c      	beq.n	80051fa <predict_is_geosynchronous+0x7a>
		&& (m->mean_motion <= GEOSYNCHRONOUS_UPPER_MEAN_MOTION)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80051a6:	a31d      	add	r3, pc, #116	@ (adr r3, 800521c <predict_is_geosynchronous+0x9c>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f7fb fcb0 	bl	8000b10 <__aeabi_dcmple>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d021      	beq.n	80051fa <predict_is_geosynchronous+0x7a>
		&& (fabs(m->eccentricity) <= GEOSYNCHRONOUS_ECCENTRICITY_THRESHOLD)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80051bc:	4690      	mov	r8, r2
 80051be:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80051c2:	a318      	add	r3, pc, #96	@ (adr r3, 8005224 <predict_is_geosynchronous+0xa4>)
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	4640      	mov	r0, r8
 80051ca:	4649      	mov	r1, r9
 80051cc:	f7fb fca0 	bl	8000b10 <__aeabi_dcmple>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d011      	beq.n	80051fa <predict_is_geosynchronous+0x7a>
		&& (fabs(m->inclination) <= GEOSYNCHRONOUS_INCLINATION_THRESHOLD_DEGREES);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051dc:	4614      	mov	r4, r2
 80051de:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005210 <predict_is_geosynchronous+0x90>)
 80051e8:	4620      	mov	r0, r4
 80051ea:	4629      	mov	r1, r5
 80051ec:	f7fb fc90 	bl	8000b10 <__aeabi_dcmple>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <predict_is_geosynchronous+0x7a>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <predict_is_geosynchronous+0x7c>
 80051fa:	2300      	movs	r3, #0
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	b2db      	uxtb	r3, r3
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800520c:	f3af 8000 	nop.w
 8005210:	40518000 	.word	0x40518000
 8005214:	cccccccd 	.word	0xcccccccd
 8005218:	3feccccc 	.word	0x3feccccc
 800521c:	9999999a 	.word	0x9999999a
 8005220:	3ff19999 	.word	0x3ff19999
 8005224:	9999999a 	.word	0x9999999a
 8005228:	3fc99999 	.word	0x3fc99999
 800522c:	00000000 	.word	0x00000000

08005230 <predict_apogee>:

double predict_apogee(const predict_orbital_elements_t *m)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	double sma = 331.25*exp(log(1440.0/m->mean_motion)*(2.0/3.0));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800523e:	f04f 0000 	mov.w	r0, #0
 8005242:	492d      	ldr	r1, [pc, #180]	@ (80052f8 <predict_apogee+0xc8>)
 8005244:	f7fb fb12 	bl	800086c <__aeabi_ddiv>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	ec43 2b17 	vmov	d7, r2, r3
 8005250:	eeb0 0a47 	vmov.f32	s0, s14
 8005254:	eef0 0a67 	vmov.f32	s1, s15
 8005258:	f01d f97a 	bl	8022550 <log>
 800525c:	ec51 0b10 	vmov	r0, r1, d0
 8005260:	a31f      	add	r3, pc, #124	@ (adr r3, 80052e0 <predict_apogee+0xb0>)
 8005262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005266:	f7fb f9d7 	bl	8000618 <__aeabi_dmul>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	ec43 2b17 	vmov	d7, r2, r3
 8005272:	eeb0 0a47 	vmov.f32	s0, s14
 8005276:	eef0 0a67 	vmov.f32	s1, s15
 800527a:	f01d f8f1 	bl	8022460 <exp>
 800527e:	ec51 0b10 	vmov	r0, r1, d0
 8005282:	a319      	add	r3, pc, #100	@ (adr r3, 80052e8 <predict_apogee+0xb8>)
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	f7fb f9c6 	bl	8000618 <__aeabi_dmul>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return sma*(1.0+m->eccentricity)-EARTH_RADIUS_KM_WGS84;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	4b17      	ldr	r3, [pc, #92]	@ (80052fc <predict_apogee+0xcc>)
 80052a0:	f7fb f804 	bl	80002ac <__adddf3>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4610      	mov	r0, r2
 80052aa:	4619      	mov	r1, r3
 80052ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b0:	f7fb f9b2 	bl	8000618 <__aeabi_dmul>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4610      	mov	r0, r2
 80052ba:	4619      	mov	r1, r3
 80052bc:	a30c      	add	r3, pc, #48	@ (adr r3, 80052f0 <predict_apogee+0xc0>)
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	f7fa fff1 	bl	80002a8 <__aeabi_dsub>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80052ce:	eeb0 0a47 	vmov.f32	s0, s14
 80052d2:	eef0 0a67 	vmov.f32	s1, s15
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	f3af 8000 	nop.w
 80052e0:	55555555 	.word	0x55555555
 80052e4:	3fe55555 	.word	0x3fe55555
 80052e8:	00000000 	.word	0x00000000
 80052ec:	4074b400 	.word	0x4074b400
 80052f0:	126e978d 	.word	0x126e978d
 80052f4:	40b8ea23 	.word	0x40b8ea23
 80052f8:	40968000 	.word	0x40968000
 80052fc:	3ff00000 	.word	0x3ff00000

08005300 <predict_aos_happens>:

	return (aodp*(1-m->eccentricity)-AE)*EARTH_RADIUS_KM_WGS84;
}

bool predict_aos_happens(const predict_orbital_elements_t *m, double latitude)
{
 8005300:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005304:	b088      	sub	sp, #32
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	ed87 0b00 	vstr	d0, [r7]
	/* This function returns true if the satellite pointed to by
	   "x" can ever rise above the horizon of the ground station. */

	double lin, apogee;

	if (m->mean_motion==0.0)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	f7fb fbe4 	bl	8000ae8 <__aeabi_dcmpeq>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <predict_aos_happens+0x2a>
		return false;
 8005326:	2300      	movs	r3, #0
 8005328:	e060      	b.n	80053ec <predict_aos_happens+0xec>
	else
	{
		lin = m->inclination;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005330:	e9c7 2306 	strd	r2, r3, [r7, #24]

		if (lin >= 90.0) lin = 180.0-lin;
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	4b33      	ldr	r3, [pc, #204]	@ (8005408 <predict_aos_happens+0x108>)
 800533a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800533e:	f7fb fbf1 	bl	8000b24 <__aeabi_dcmpge>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <predict_aos_happens+0x5e>
 8005348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800534c:	f04f 0000 	mov.w	r0, #0
 8005350:	492e      	ldr	r1, [pc, #184]	@ (800540c <predict_aos_happens+0x10c>)
 8005352:	f7fa ffa9 	bl	80002a8 <__aeabi_dsub>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	e9c7 2306 	strd	r2, r3, [r7, #24]

		apogee = predict_apogee(m);
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff ff66 	bl	8005230 <predict_apogee>
 8005364:	ed87 0b04 	vstr	d0, [r7, #16]

		if ((acos(EARTH_RADIUS_KM_WGS84/(apogee+EARTH_RADIUS_KM_WGS84))+(lin*M_PI/180.0)) > fabs(latitude))
 8005368:	a323      	add	r3, pc, #140	@ (adr r3, 80053f8 <predict_aos_happens+0xf8>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005372:	f7fa ff9b 	bl	80002ac <__adddf3>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	a11f      	add	r1, pc, #124	@ (adr r1, 80053f8 <predict_aos_happens+0xf8>)
 800537c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005380:	f7fb fa74 	bl	800086c <__aeabi_ddiv>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	ec43 2b17 	vmov	d7, r2, r3
 800538c:	eeb0 0a47 	vmov.f32	s0, s14
 8005390:	eef0 0a67 	vmov.f32	s1, s15
 8005394:	f01c fff8 	bl	8022388 <acos>
 8005398:	ec59 8b10 	vmov	r8, r9, d0
 800539c:	a318      	add	r3, pc, #96	@ (adr r3, 8005400 <predict_aos_happens+0x100>)
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80053a6:	f7fb f937 	bl	8000618 <__aeabi_dmul>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4610      	mov	r0, r2
 80053b0:	4619      	mov	r1, r3
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	4b15      	ldr	r3, [pc, #84]	@ (800540c <predict_aos_happens+0x10c>)
 80053b8:	f7fb fa58 	bl	800086c <__aeabi_ddiv>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4640      	mov	r0, r8
 80053c2:	4649      	mov	r1, r9
 80053c4:	f7fa ff72 	bl	80002ac <__adddf3>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4610      	mov	r0, r2
 80053ce:	4619      	mov	r1, r3
 80053d0:	683c      	ldr	r4, [r7, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80053d8:	4622      	mov	r2, r4
 80053da:	462b      	mov	r3, r5
 80053dc:	f7fb fbac 	bl	8000b38 <__aeabi_dcmpgt>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <predict_aos_happens+0xea>
			return true;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <predict_aos_happens+0xec>
		else
			return false;
 80053ea:	2300      	movs	r3, #0
	}
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053f6:	bf00      	nop
 80053f8:	126e978d 	.word	0x126e978d
 80053fc:	40b8ea23 	.word	0x40b8ea23
 8005400:	54442d18 	.word	0x54442d18
 8005404:	400921fb 	.word	0x400921fb
 8005408:	40568000 	.word	0x40568000
 800540c:	40668000 	.word	0x40668000

08005410 <predict_orbit>:

/* This is the stuff we need to do repetitively while tracking. */
/* This is the old Calc() function. */
int predict_orbit(const predict_orbital_elements_t *orbital_elements, struct predict_position *m, double utc)
{
 8005410:	b5b0      	push	{r4, r5, r7, lr}
 8005412:	b0b6      	sub	sp, #216	@ 0xd8
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	ed87 0b00 	vstr	d0, [r7]
	/* Set time to now if now time is provided: */
	if (utc == 0) utc = predict_to_julian(time(NULL));
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	e9d7 0100 	ldrd	r0, r1, [r7]
 800542a:	f7fb fb5d 	bl	8000ae8 <__aeabi_dcmpeq>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <predict_orbit+0x3a>
 8005434:	2000      	movs	r0, #0
 8005436:	f019 fac1 	bl	801e9bc <time>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4610      	mov	r0, r2
 8005440:	4619      	mov	r1, r3
 8005442:	f7fe fa3d 	bl	80038c0 <predict_to_julian>
 8005446:	ed87 0b00 	vstr	d0, [r7]
	
	/* Satellite position and velocity vectors */
	vec3_set(m->position, 0, 0, 0);
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	3310      	adds	r3, #16
 800544e:	ed9f 2b3a 	vldr	d2, [pc, #232]	@ 8005538 <predict_orbit+0x128>
 8005452:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 8005538 <predict_orbit+0x128>
 8005456:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8005538 <predict_orbit+0x128>
 800545a:	4618      	mov	r0, r3
 800545c:	f00b fe9c 	bl	8011198 <vec3_set>
	vec3_set(m->velocity, 0, 0, 0);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	3328      	adds	r3, #40	@ 0x28
 8005464:	ed9f 2b34 	vldr	d2, [pc, #208]	@ 8005538 <predict_orbit+0x128>
 8005468:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8005538 <predict_orbit+0x128>
 800546c:	ed9f 0b32 	vldr	d0, [pc, #200]	@ 8005538 <predict_orbit+0x128>
 8005470:	4618      	mov	r0, r3
 8005472:	f00b fe91 	bl	8011198 <vec3_set>

	m->time = utc;
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800547c:	e9c1 2300 	strd	r2, r3, [r1]
	double julTime = utc + JULIAN_TIME_DIFF;
 8005480:	a331      	add	r3, pc, #196	@ (adr r3, 8005548 <predict_orbit+0x138>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	e9d7 0100 	ldrd	r0, r1, [r7]
 800548a:	f7fa ff0f 	bl	80002ac <__adddf3>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0

	/* Convert satellite's epoch time to Julian  */
	/* and calculate time since epoch in minutes */
	double epoch = 1000.0*orbital_elements->epoch_year + orbital_elements->epoch_day;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	4618      	mov	r0, r3
 800549c:	f7fb f852 	bl	8000544 <__aeabi_i2d>
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	4b26      	ldr	r3, [pc, #152]	@ (8005540 <predict_orbit+0x130>)
 80054a6:	f7fb f8b7 	bl	8000618 <__aeabi_dmul>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80054b8:	f7fa fef8 	bl	80002ac <__adddf3>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
	double jul_epoch = Julian_Date_of_Epoch(epoch);
 80054c4:	ed97 0b32 	vldr	d0, [r7, #200]	@ 0xc8
 80054c8:	f00c f86a 	bl	80115a0 <Julian_Date_of_Epoch>
 80054cc:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0
	double tsince = (julTime - jul_epoch)*MINUTES_PER_DAY;
 80054d0:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80054d4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80054d8:	f7fa fee6 	bl	80002a8 <__aeabi_dsub>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4610      	mov	r0, r2
 80054e2:	4619      	mov	r1, r3
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	4b16      	ldr	r3, [pc, #88]	@ (8005544 <predict_orbit+0x134>)
 80054ea:	f7fb f895 	bl	8000618 <__aeabi_dmul>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

	/* Call NORAD routines according to deep-space flag. */
	struct model_output output;
	switch (orbital_elements->ephemeris) {
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00c      	beq.n	800551a <predict_orbit+0x10a>
 8005500:	2b01      	cmp	r3, #1
 8005502:	d115      	bne.n	8005530 <predict_orbit+0x120>
		case EPHEMERIS_SDP4:
			sdp4_predict((struct _sdp4*)orbital_elements->ephemeris_data, tsince, &output);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005508:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800550c:	4611      	mov	r1, r2
 800550e:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 8005512:	4618      	mov	r0, r3
 8005514:	f001 fa68 	bl	80069e8 <sdp4_predict>
			break;
 8005518:	e01a      	b.n	8005550 <predict_orbit+0x140>
		case EPHEMERIS_SGP4:
			sgp4_predict((struct _sgp4*)orbital_elements->ephemeris_data, tsince, &output);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8005522:	4611      	mov	r1, r2
 8005524:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 8005528:	4618      	mov	r0, r3
 800552a:	f009 ffc9 	bl	800f4c0 <sgp4_predict>
			break;
 800552e:	e00f      	b.n	8005550 <predict_orbit+0x140>
		default:
			//Panic!
			return -1;
 8005530:	f04f 33ff 	mov.w	r3, #4294967295
 8005534:	e132      	b.n	800579c <predict_orbit+0x38c>
 8005536:	bf00      	nop
	...
 8005540:	408f4000 	.word	0x408f4000
 8005544:	40968000 	.word	0x40968000
 8005548:	40000000 	.word	0x40000000
 800554c:	4142a5e7 	.word	0x4142a5e7
	}
	m->position[0] = output.pos[0];
 8005550:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	e9c1 2304 	strd	r2, r3, [r1, #16]
	m->position[1] = output.pos[1];
 800555a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	e9c1 2306 	strd	r2, r3, [r1, #24]
	m->position[2] = output.pos[2];
 8005564:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	m->velocity[0] = output.vel[0];
 800556e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	m->velocity[1] = output.vel[1];
 8005578:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	m->velocity[2] = output.vel[2];
 8005582:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	m->phase = output.phase;
 800558c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	m->argument_of_perigee = output.omgadf;
 8005596:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
	m->inclination = output.xinck;
 80055a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	m->right_ascension = output.xnodek;
 80055aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88

	/* TODO: Remove? Scale position and velocity vectors to km and km/sec */
	Convert_Sat_State(m->position, m->velocity);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f103 0210 	add.w	r2, r3, #16
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	3328      	adds	r3, #40	@ 0x28
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f00b ff4d 	bl	8011460 <Convert_Sat_State>

	/* Calculate satellite Lat North, Lon East and Alt. */
	geodetic_t sat_geodetic;
	Calculate_LatLonAlt(utc, m->position, &sat_geodetic);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3310      	adds	r3, #16
 80055ca:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80055ce:	4611      	mov	r1, r2
 80055d0:	4618      	mov	r0, r3
 80055d2:	ed97 0b00 	vldr	d0, [r7]
 80055d6:	f00c fb2f 	bl	8011c38 <Calculate_LatLonAlt>

	m->latitude = sat_geodetic.lat;
 80055da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	m->longitude = sat_geodetic.lon;
 80055e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	m->altitude = sat_geodetic.alt;
 80055ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

	// Calculate solar position
	double solar_vector[3];
	sun_predict(m->time, solar_vector);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	ed93 7b00 	vldr	d7, [r3]
 80055fe:	f107 0310 	add.w	r3, r7, #16
 8005602:	4618      	mov	r0, r3
 8005604:	eeb0 0a47 	vmov.f32	s0, s14
 8005608:	eef0 0a67 	vmov.f32	s1, s15
 800560c:	f00b f980 	bl	8010910 <sun_predict>

	// Find eclipse depth and if sat is eclipsed
	m->eclipsed = is_eclipsed(m->position, solar_vector, &m->eclipse_depth);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f103 0010 	add.w	r0, r3, #16
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800561c:	f107 0310 	add.w	r3, r7, #16
 8005620:	4619      	mov	r1, r3
 8005622:	f000 f939 	bl	8005898 <is_eclipsed>
 8005626:	4603      	mov	r3, r0
 8005628:	461a      	mov	r2, r3
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	661a      	str	r2, [r3, #96]	@ 0x60

	// Calculate footprint
	m->footprint = 2.0*EARTH_RADIUS_KM_WGS84*acos(EARTH_RADIUS_KM_WGS84/(EARTH_RADIUS_KM_WGS84 + m->altitude));
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8005634:	a362      	add	r3, pc, #392	@ (adr r3, 80057c0 <predict_orbit+0x3b0>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f7fa fe37 	bl	80002ac <__adddf3>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	a15f      	add	r1, pc, #380	@ (adr r1, 80057c0 <predict_orbit+0x3b0>)
 8005644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005648:	f7fb f910 	bl	800086c <__aeabi_ddiv>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	ec43 2b17 	vmov	d7, r2, r3
 8005654:	eeb0 0a47 	vmov.f32	s0, s14
 8005658:	eef0 0a67 	vmov.f32	s1, s15
 800565c:	f01c fe94 	bl	8022388 <acos>
 8005660:	ec51 0b10 	vmov	r0, r1, d0
 8005664:	a358      	add	r3, pc, #352	@ (adr r3, 80057c8 <predict_orbit+0x3b8>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fa ffd5 	bl	8000618 <__aeabi_dmul>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	68b9      	ldr	r1, [r7, #8]
 8005674:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	
	// Calculate current number of revolutions around Earth
	double temp = TWO_PI/MINUTES_PER_DAY/MINUTES_PER_DAY;
 8005678:	a355      	add	r3, pc, #340	@ (adr r3, 80057d0 <predict_orbit+0x3c0>)
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	double age = julTime - jul_epoch;
 8005682:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8005686:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800568a:	f7fa fe0d 	bl	80002a8 <__aeabi_dsub>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
	double xno = orbital_elements->mean_motion*temp*MINUTES_PER_DAY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800569c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80056a0:	f7fa ffba 	bl	8000618 <__aeabi_dmul>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4610      	mov	r0, r2
 80056aa:	4619      	mov	r1, r3
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	4b41      	ldr	r3, [pc, #260]	@ (80057b8 <predict_orbit+0x3a8>)
 80056b2:	f7fa ffb1 	bl	8000618 <__aeabi_dmul>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	double xmo = orbital_elements->mean_anomaly * M_PI / 180.0;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80056c4:	a338      	add	r3, pc, #224	@ (adr r3, 80057a8 <predict_orbit+0x398>)
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	f7fa ffa5 	bl	8000618 <__aeabi_dmul>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4610      	mov	r0, r2
 80056d4:	4619      	mov	r1, r3
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	4b38      	ldr	r3, [pc, #224]	@ (80057bc <predict_orbit+0x3ac>)
 80056dc:	f7fb f8c6 	bl	800086c <__aeabi_ddiv>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	m->revolutions = (long)floor((xno*MINUTES_PER_DAY/(M_PI*2.0) + age*orbital_elements->bstar_drag_term)*age + xmo/(2.0*M_PI)) + orbital_elements->revolutions_at_epoch;
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	4b32      	ldr	r3, [pc, #200]	@ (80057b8 <predict_orbit+0x3a8>)
 80056ee:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80056f2:	f7fa ff91 	bl	8000618 <__aeabi_dmul>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4610      	mov	r0, r2
 80056fc:	4619      	mov	r1, r3
 80056fe:	a32c      	add	r3, pc, #176	@ (adr r3, 80057b0 <predict_orbit+0x3a0>)
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f7fb f8b2 	bl	800086c <__aeabi_ddiv>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4614      	mov	r4, r2
 800570e:	461d      	mov	r5, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8005716:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800571a:	f7fa ff7d 	bl	8000618 <__aeabi_dmul>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4620      	mov	r0, r4
 8005724:	4629      	mov	r1, r5
 8005726:	f7fa fdc1 	bl	80002ac <__adddf3>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8005736:	f7fa ff6f 	bl	8000618 <__aeabi_dmul>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4614      	mov	r4, r2
 8005740:	461d      	mov	r5, r3
 8005742:	a31b      	add	r3, pc, #108	@ (adr r3, 80057b0 <predict_orbit+0x3a0>)
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800574c:	f7fb f88e 	bl	800086c <__aeabi_ddiv>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4620      	mov	r0, r4
 8005756:	4629      	mov	r1, r5
 8005758:	f7fa fda8 	bl	80002ac <__adddf3>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	ec43 2b17 	vmov	d7, r2, r3
 8005764:	eeb0 0a47 	vmov.f32	s0, s14
 8005768:	eef0 0a67 	vmov.f32	s1, s15
 800576c:	f01d faf8 	bl	8022d60 <floor>
 8005770:	ec53 2b10 	vmov	r2, r3, d0
 8005774:	4610      	mov	r0, r2
 8005776:	4619      	mov	r1, r3
 8005778:	f7fb f9fe 	bl	8000b78 <__aeabi_d2iz>
 800577c:	4602      	mov	r2, r0
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005782:	441a      	add	r2, r3
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	679a      	str	r2, [r3, #120]	@ 0x78

	//calculate whether orbit is decayed
	m->decayed = predict_decayed(orbital_elements, utc);
 8005788:	ed97 0b00 	vldr	d0, [r7]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f823 	bl	80057d8 <predict_decayed>
 8005792:	4603      	mov	r3, r0
 8005794:	461a      	mov	r2, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	721a      	strb	r2, [r3, #8]

	return 0;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	37d8      	adds	r7, #216	@ 0xd8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bdb0      	pop	{r4, r5, r7, pc}
 80057a4:	f3af 8000 	nop.w
 80057a8:	54442d18 	.word	0x54442d18
 80057ac:	400921fb 	.word	0x400921fb
 80057b0:	54442d18 	.word	0x54442d18
 80057b4:	401921fb 	.word	0x401921fb
 80057b8:	40968000 	.word	0x40968000
 80057bc:	40668000 	.word	0x40668000
 80057c0:	126e978d 	.word	0x126e978d
 80057c4:	40b8ea23 	.word	0x40b8ea23
 80057c8:	126e978d 	.word	0x126e978d
 80057cc:	40c8ea23 	.word	0x40c8ea23
 80057d0:	1fbf7384 	.word	0x1fbf7384
 80057d4:	3ec96b0f 	.word	0x3ec96b0f

080057d8 <predict_decayed>:

bool predict_decayed(const predict_orbital_elements_t *orbital_elements, predict_julian_date_t time)
{
 80057d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80057dc:	b088      	sub	sp, #32
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	ed87 0b00 	vstr	d0, [r7]
	double satepoch;
	satepoch=DayNum(1,0,orbital_elements->epoch_year)+orbital_elements->epoch_day;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	461a      	mov	r2, r3
 80057ec:	2100      	movs	r1, #0
 80057ee:	2001      	movs	r0, #1
 80057f0:	f00c f942 	bl	8011a78 <DayNum>
 80057f4:	4603      	mov	r3, r0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fa fea4 	bl	8000544 <__aeabi_i2d>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005802:	f7fa fd53 	bl	80002ac <__adddf3>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	bool has_decayed = false;
 800580e:	2300      	movs	r3, #0
 8005810:	77fb      	strb	r3, [r7, #31]
	if (satepoch + ((16.666666 - orbital_elements->mean_motion)/(10.0*fabs(orbital_elements->derivative_mean_motion))) < time)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8005818:	a11c      	add	r1, pc, #112	@ (adr r1, 800588c <predict_decayed+0xb4>)
 800581a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800581e:	f7fa fd43 	bl	80002a8 <__aeabi_dsub>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4690      	mov	r8, r2
 8005828:	4699      	mov	r9, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8005830:	4614      	mov	r4, r2
 8005832:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	4b13      	ldr	r3, [pc, #76]	@ (8005888 <predict_decayed+0xb0>)
 800583c:	4620      	mov	r0, r4
 800583e:	4629      	mov	r1, r5
 8005840:	f7fa feea 	bl	8000618 <__aeabi_dmul>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4640      	mov	r0, r8
 800584a:	4649      	mov	r1, r9
 800584c:	f7fb f80e 	bl	800086c <__aeabi_ddiv>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4610      	mov	r0, r2
 8005856:	4619      	mov	r1, r3
 8005858:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800585c:	f7fa fd26 	bl	80002ac <__adddf3>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005868:	f7fb f966 	bl	8000b38 <__aeabi_dcmpgt>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <predict_decayed+0x9e>
	{
		has_decayed = true;
 8005872:	2301      	movs	r3, #1
 8005874:	77fb      	strb	r3, [r7, #31]
	}
	return has_decayed;
 8005876:	7ffb      	ldrb	r3, [r7, #31]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005882:	bf00      	nop
 8005884:	f3af 8000 	nop.w
 8005888:	40240000 	.word	0x40240000
 800588c:	9f7b5aea 	.word	0x9f7b5aea
 8005890:	4030aaaa 	.word	0x4030aaaa
 8005894:	00000000 	.word	0x00000000

08005898 <is_eclipsed>:

	/* Calculates if a position is eclipsed.  */
bool is_eclipsed(const double pos[3], const double sol[3], double *depth)
{
 8005898:	b5b0      	push	{r4, r5, r7, lr}
 800589a:	b096      	sub	sp, #88	@ 0x58
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
	double Rho[3], earth[3];

	/* Determine partial eclipse */
	double sd_earth = asin_(EARTH_RADIUS_KM_WGS84 / vec3_length(pos));
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f00b fc9a 	bl	80111de <vec3_length>
 80058aa:	ec53 2b10 	vmov	r2, r3, d0
 80058ae:	a14c      	add	r1, pc, #304	@ (adr r1, 80059e0 <is_eclipsed+0x148>)
 80058b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058b4:	f7fa ffda 	bl	800086c <__aeabi_ddiv>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	ec43 2b17 	vmov	d7, r2, r3
 80058c0:	eeb0 0a47 	vmov.f32	s0, s14
 80058c4:	eef0 0a67 	vmov.f32	s1, s15
 80058c8:	f00c fd3a 	bl	8012340 <asin_>
 80058cc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
	vec3_sub(sol, pos, Rho);
 80058d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80058d4:	461a      	mov	r2, r3
 80058d6:	68f9      	ldr	r1, [r7, #12]
 80058d8:	68b8      	ldr	r0, [r7, #8]
 80058da:	f00b fd3e 	bl	801135a <vec3_sub>
	double sd_sun = asin_(SOLAR_RADIUS_KM / vec3_length(Rho));
 80058de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80058e2:	4618      	mov	r0, r3
 80058e4:	f00b fc7b 	bl	80111de <vec3_length>
 80058e8:	ec53 2b10 	vmov	r2, r3, d0
 80058ec:	a13e      	add	r1, pc, #248	@ (adr r1, 80059e8 <is_eclipsed+0x150>)
 80058ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058f2:	f7fa ffbb 	bl	800086c <__aeabi_ddiv>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	ec43 2b17 	vmov	d7, r2, r3
 80058fe:	eeb0 0a47 	vmov.f32	s0, s14
 8005902:	eef0 0a67 	vmov.f32	s1, s15
 8005906:	f00c fd1b 	bl	8012340 <asin_>
 800590a:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
	vec3_mul_scalar(pos, -1, earth);
 800590e:	f107 0310 	add.w	r3, r7, #16
 8005912:	4619      	mov	r1, r3
 8005914:	ed9f 0b30 	vldr	d0, [pc, #192]	@ 80059d8 <is_eclipsed+0x140>
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f00b fce9 	bl	80112f0 <vec3_mul_scalar>
	
	double delta = acos_( vec3_dot(sol, earth) / vec3_length(sol) / vec3_length(earth) );
 800591e:	f107 0310 	add.w	r3, r7, #16
 8005922:	4619      	mov	r1, r3
 8005924:	68b8      	ldr	r0, [r7, #8]
 8005926:	f00b fca3 	bl	8011270 <vec3_dot>
 800592a:	ec55 4b10 	vmov	r4, r5, d0
 800592e:	68b8      	ldr	r0, [r7, #8]
 8005930:	f00b fc55 	bl	80111de <vec3_length>
 8005934:	ec53 2b10 	vmov	r2, r3, d0
 8005938:	4620      	mov	r0, r4
 800593a:	4629      	mov	r1, r5
 800593c:	f7fa ff96 	bl	800086c <__aeabi_ddiv>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4614      	mov	r4, r2
 8005946:	461d      	mov	r5, r3
 8005948:	f107 0310 	add.w	r3, r7, #16
 800594c:	4618      	mov	r0, r3
 800594e:	f00b fc46 	bl	80111de <vec3_length>
 8005952:	ec53 2b10 	vmov	r2, r3, d0
 8005956:	4620      	mov	r0, r4
 8005958:	4629      	mov	r1, r5
 800595a:	f7fa ff87 	bl	800086c <__aeabi_ddiv>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	ec43 2b17 	vmov	d7, r2, r3
 8005966:	eeb0 0a47 	vmov.f32	s0, s14
 800596a:	eef0 0a67 	vmov.f32	s1, s15
 800596e:	f00c fca7 	bl	80122c0 <acos_>
 8005972:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	*depth = sd_earth - sd_sun - delta;
 8005976:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800597a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800597e:	f7fa fc93 	bl	80002a8 <__aeabi_dsub>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4610      	mov	r0, r2
 8005988:	4619      	mov	r1, r3
 800598a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800598e:	f7fa fc8b 	bl	80002a8 <__aeabi_dsub>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	e9c1 2300 	strd	r2, r3, [r1]

	if (sd_earth < sd_sun) return false;
 800599c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059a0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80059a4:	f7fb f8aa 	bl	8000afc <__aeabi_dcmplt>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <is_eclipsed+0x11a>
 80059ae:	2300      	movs	r3, #0
 80059b0:	e00e      	b.n	80059d0 <is_eclipsed+0x138>
	else if (*depth >= 0) return true;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	f7fb f8b0 	bl	8000b24 <__aeabi_dcmpge>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <is_eclipsed+0x136>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <is_eclipsed+0x138>
	else return false;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3758      	adds	r7, #88	@ 0x58
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bdb0      	pop	{r4, r5, r7, pc}
 80059d8:	00000000 	.word	0x00000000
 80059dc:	bff00000 	.word	0xbff00000
 80059e0:	126e978d 	.word	0x126e978d
 80059e4:	40b8ea23 	.word	0x40b8ea23
 80059e8:	00000000 	.word	0x00000000
 80059ec:	41253d80 	.word	0x41253d80

080059f0 <sdp4_init>:
 * \copyright GPLv2+
 **/
void deep_arg_dynamic_init(const struct _sdp4 *m, deep_arg_dynamic_t *deep_dyn);

void sdp4_init(const predict_orbital_elements_t *tle, struct _sdp4 *m)
{
 80059f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f4:	b0ba      	sub	sp, #232	@ 0xe8
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80059fa:	6239      	str	r1, [r7, #32]
	m->lunarTermsDone = 0;
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
	m->resonanceFlag = 0;
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	2200      	movs	r2, #0
 8005a06:	605a      	str	r2, [r3, #4]
	m->synchronousFlag = 0;
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	609a      	str	r2, [r3, #8]

	//Calculate old TLE field values as used in the original sdp4
	double temp_tle = TWO_PI/MINUTES_PER_DAY/MINUTES_PER_DAY;
 8005a0e:	a3c9      	add	r3, pc, #804	@ (adr r3, 8005d34 <sdp4_init+0x344>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
	m->xnodeo = tle->right_ascension * M_PI / 180.0;
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8005a1e:	a3b6      	add	r3, pc, #728	@ (adr r3, 8005cf8 <sdp4_init+0x308>)
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	f7fa fdf8 	bl	8000618 <__aeabi_dmul>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4619      	mov	r1, r3
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	4bba      	ldr	r3, [pc, #744]	@ (8005d20 <sdp4_init+0x330>)
 8005a36:	f7fa ff19 	bl	800086c <__aeabi_ddiv>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	6a39      	ldr	r1, [r7, #32]
 8005a40:	e9c1 23b0 	strd	r2, r3, [r1, #704]	@ 0x2c0
	m->omegao = tle->argument_of_perigee * M_PI / 180.0;
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8005a4a:	a3ab      	add	r3, pc, #684	@ (adr r3, 8005cf8 <sdp4_init+0x308>)
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	f7fa fde2 	bl	8000618 <__aeabi_dmul>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	4baf      	ldr	r3, [pc, #700]	@ (8005d20 <sdp4_init+0x330>)
 8005a62:	f7fa ff03 	bl	800086c <__aeabi_ddiv>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	6a39      	ldr	r1, [r7, #32]
 8005a6c:	e9c1 23b2 	strd	r2, r3, [r1, #712]	@ 0x2c8
	m->xmo = tle->mean_anomaly * M_PI / 180.0;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8005a76:	a3a0      	add	r3, pc, #640	@ (adr r3, 8005cf8 <sdp4_init+0x308>)
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f7fa fdcc 	bl	8000618 <__aeabi_dmul>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4610      	mov	r0, r2
 8005a86:	4619      	mov	r1, r3
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	4ba4      	ldr	r3, [pc, #656]	@ (8005d20 <sdp4_init+0x330>)
 8005a8e:	f7fa feed 	bl	800086c <__aeabi_ddiv>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	6a39      	ldr	r1, [r7, #32]
 8005a98:	e9c1 23b4 	strd	r2, r3, [r1, #720]	@ 0x2d0
	m->xincl = tle->inclination * M_PI / 180.0;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005aa2:	a395      	add	r3, pc, #596	@ (adr r3, 8005cf8 <sdp4_init+0x308>)
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	f7fa fdb6 	bl	8000618 <__aeabi_dmul>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	4b99      	ldr	r3, [pc, #612]	@ (8005d20 <sdp4_init+0x330>)
 8005aba:	f7fa fed7 	bl	800086c <__aeabi_ddiv>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	6a39      	ldr	r1, [r7, #32]
 8005ac4:	e9c1 23b6 	strd	r2, r3, [r1, #728]	@ 0x2d8
	m->eo = tle->eccentricity;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005ace:	6a39      	ldr	r1, [r7, #32]
 8005ad0:	e9c1 23b8 	strd	r2, r3, [r1, #736]	@ 0x2e0
	m->xno = tle->mean_motion*temp_tle*MINUTES_PER_DAY;
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8005ada:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8005ade:	f7fa fd9b 	bl	8000618 <__aeabi_dmul>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	4619      	mov	r1, r3
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	4b8d      	ldr	r3, [pc, #564]	@ (8005d24 <sdp4_init+0x334>)
 8005af0:	f7fa fd92 	bl	8000618 <__aeabi_dmul>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	6a39      	ldr	r1, [r7, #32]
 8005afa:	e9c1 23ba 	strd	r2, r3, [r1, #744]	@ 0x2e8
	m->bstar = tle->bstar_drag_term / AE;
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8005b04:	6a39      	ldr	r1, [r7, #32]
 8005b06:	e9c1 23bc 	strd	r2, r3, [r1, #752]	@ 0x2f0
	m->epoch = 1000.0*tle->epoch_year + tle->epoch_day;
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fa fd18 	bl	8000544 <__aeabi_i2d>
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	4b83      	ldr	r3, [pc, #524]	@ (8005d28 <sdp4_init+0x338>)
 8005b1a:	f7fa fd7d 	bl	8000618 <__aeabi_dmul>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4610      	mov	r0, r2
 8005b24:	4619      	mov	r1, r3
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005b2c:	f7fa fbbe 	bl	80002ac <__adddf3>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	6a39      	ldr	r1, [r7, #32]
 8005b36:	e9c1 23be 	strd	r2, r3, [r1, #760]	@ 0x2f8

	/* Recover original mean motion (xnodp) and   */
	/* semimajor axis (aodp) from input elements. */
	double temp1, temp2, temp3, theta4, a1, a3ovk2, ao, c2, coef, coef1, x1m5th, xhdot1, del1, delo, eeta, eta, etasq, perigee, psisq, tsi, qoms24, s4, pinvsq;

	a1=pow(XKE/m->xno,TWO_THIRD);
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	@ 0x2e8
 8005b40:	a16f      	add	r1, pc, #444	@ (adr r1, 8005d00 <sdp4_init+0x310>)
 8005b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b46:	f7fa fe91 	bl	800086c <__aeabi_ddiv>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	ec43 2b17 	vmov	d7, r2, r3
 8005b52:	ed9f 1b6d 	vldr	d1, [pc, #436]	@ 8005d08 <sdp4_init+0x318>
 8005b56:	eeb0 0a47 	vmov.f32	s0, s14
 8005b5a:	eef0 0a67 	vmov.f32	s1, s15
 8005b5e:	f01c fd35 	bl	80225cc <pow>
 8005b62:	ed87 0b32 	vstr	d0, [r7, #200]	@ 0xc8
	m->deep_arg.cosio=cos(m->xincl);
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	ed93 7bb6 	vldr	d7, [r3, #728]	@ 0x2d8
 8005b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8005b70:	eef0 0a67 	vmov.f32	s1, s15
 8005b74:	f01c ff60 	bl	8022a38 <cos>
 8005b78:	eeb0 7a40 	vmov.f32	s14, s0
 8005b7c:	eef0 7a60 	vmov.f32	s15, s1
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
	m->deep_arg.theta2=m->deep_arg.cosio*m->deep_arg.cosio;
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8005b92:	f7fa fd41 	bl	8000618 <__aeabi_dmul>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	6a39      	ldr	r1, [r7, #32]
 8005b9c:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	m->x3thm1=3*m->deep_arg.theta2-1;
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	4b60      	ldr	r3, [pc, #384]	@ (8005d2c <sdp4_init+0x33c>)
 8005bac:	f7fa fd34 	bl	8000618 <__aeabi_dmul>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8005d30 <sdp4_init+0x340>)
 8005bbe:	f7fa fb73 	bl	80002a8 <__aeabi_dsub>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	6a39      	ldr	r1, [r7, #32]
 8005bc8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	m->deep_arg.eosq=m->eo*m->eo;
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	e9d3 01b8 	ldrd	r0, r1, [r3, #736]	@ 0x2e0
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 8005bd8:	f7fa fd1e 	bl	8000618 <__aeabi_dmul>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	6a39      	ldr	r1, [r7, #32]
 8005be2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	m->deep_arg.betao2=1-m->deep_arg.eosq;
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8005bec:	f04f 0000 	mov.w	r0, #0
 8005bf0:	494f      	ldr	r1, [pc, #316]	@ (8005d30 <sdp4_init+0x340>)
 8005bf2:	f7fa fb59 	bl	80002a8 <__aeabi_dsub>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	6a39      	ldr	r1, [r7, #32]
 8005bfc:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	m->deep_arg.betao=sqrt(m->deep_arg.betao2);
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 8005c06:	eeb0 0a47 	vmov.f32	s0, s14
 8005c0a:	eef0 0a67 	vmov.f32	s1, s15
 8005c0e:	f01c fd4d 	bl	80226ac <sqrt>
 8005c12:	eeb0 7a40 	vmov.f32	s14, s0
 8005c16:	eef0 7a60 	vmov.f32	s15, s1
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
	del1=1.5*CK2*m->x3thm1/(a1*a1*m->deep_arg.betao*m->deep_arg.betao2);
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005c26:	a33a      	add	r3, pc, #232	@ (adr r3, 8005d10 <sdp4_init+0x320>)
 8005c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2c:	f7fa fcf4 	bl	8000618 <__aeabi_dmul>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4614      	mov	r4, r2
 8005c36:	461d      	mov	r5, r3
 8005c38:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8005c3c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c40:	f7fa fcea 	bl	8000618 <__aeabi_dmul>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8005c52:	f7fa fce1 	bl	8000618 <__aeabi_dmul>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8005c64:	f7fa fcd8 	bl	8000618 <__aeabi_dmul>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	4629      	mov	r1, r5
 8005c70:	f7fa fdfc 	bl	800086c <__aeabi_ddiv>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
	ao=a1*(1-del1*(0.5*TWO_THIRD+del1*(1+134/81*del1)));
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	4b2b      	ldr	r3, [pc, #172]	@ (8005d30 <sdp4_init+0x340>)
 8005c82:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8005c86:	f7fa fb11 	bl	80002ac <__adddf3>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8005c96:	f7fa fcbf 	bl	8000618 <__aeabi_dmul>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	a31d      	add	r3, pc, #116	@ (adr r3, 8005d18 <sdp4_init+0x328>)
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	f7fa fb00 	bl	80002ac <__adddf3>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8005cb8:	f7fa fcae 	bl	8000618 <__aeabi_dmul>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	f04f 0000 	mov.w	r0, #0
 8005cc4:	491a      	ldr	r1, [pc, #104]	@ (8005d30 <sdp4_init+0x340>)
 8005cc6:	f7fa faef 	bl	80002a8 <__aeabi_dsub>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005cd2:	f7fa fca1 	bl	8000618 <__aeabi_dmul>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
	delo=1.5*CK2*m->x3thm1/(ao*ao*m->deep_arg.betao*m->deep_arg.betao2);
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005ce4:	a30a      	add	r3, pc, #40	@ (adr r3, 8005d10 <sdp4_init+0x320>)
 8005ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cea:	f7fa fc95 	bl	8000618 <__aeabi_dmul>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4614      	mov	r4, r2
 8005cf4:	461d      	mov	r5, r3
 8005cf6:	e021      	b.n	8005d3c <sdp4_init+0x34c>
 8005cf8:	54442d18 	.word	0x54442d18
 8005cfc:	400921fb 	.word	0x400921fb
 8005d00:	d08dcacf 	.word	0xd08dcacf
 8005d04:	3fb309b5 	.word	0x3fb309b5
 8005d08:	55555555 	.word	0x55555555
 8005d0c:	3fe55555 	.word	0x3fe55555
 8005d10:	cbb15878 	.word	0xcbb15878
 8005d14:	3f4a9b3a 	.word	0x3f4a9b3a
 8005d18:	55555555 	.word	0x55555555
 8005d1c:	3fd55555 	.word	0x3fd55555
 8005d20:	40668000 	.word	0x40668000
 8005d24:	40968000 	.word	0x40968000
 8005d28:	408f4000 	.word	0x408f4000
 8005d2c:	40080000 	.word	0x40080000
 8005d30:	3ff00000 	.word	0x3ff00000
 8005d34:	1fbf7384 	.word	0x1fbf7384
 8005d38:	3ec96b0f 	.word	0x3ec96b0f
 8005d3c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8005d40:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005d44:	f7fa fc68 	bl	8000618 <__aeabi_dmul>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8005d56:	f7fa fc5f 	bl	8000618 <__aeabi_dmul>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4610      	mov	r0, r2
 8005d60:	4619      	mov	r1, r3
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8005d68:	f7fa fc56 	bl	8000618 <__aeabi_dmul>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4620      	mov	r0, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	f7fa fd7a 	bl	800086c <__aeabi_ddiv>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	m->deep_arg.xnodp=m->xno/(1+delo);
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	e9d3 45ba 	ldrd	r4, r5, [r3, #744]	@ 0x2e8
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e80 <sdp4_init+0x490>)
 8005d8c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d90:	f7fa fa8c 	bl	80002ac <__adddf3>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4620      	mov	r0, r4
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	f7fa fd66 	bl	800086c <__aeabi_ddiv>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	6a39      	ldr	r1, [r7, #32]
 8005da6:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
	m->deep_arg.aodp=ao/(1-delo);
 8005daa:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8005dae:	f04f 0000 	mov.w	r0, #0
 8005db2:	4933      	ldr	r1, [pc, #204]	@ (8005e80 <sdp4_init+0x490>)
 8005db4:	f7fa fa78 	bl	80002a8 <__aeabi_dsub>
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005dc0:	f7fa fd54 	bl	800086c <__aeabi_ddiv>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	6a39      	ldr	r1, [r7, #32]
 8005dca:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	/* For perigee below 156 km, the values */
	/* of s and qoms2t are altered.         */

	s4=S_DENSITY_PARAM;
 8005dce:	a326      	add	r3, pc, #152	@ (adr r3, 8005e68 <sdp4_init+0x478>)
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	qoms24=QOMS2T;
 8005dd8:	a325      	add	r3, pc, #148	@ (adr r3, 8005e70 <sdp4_init+0x480>)
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
	perigee=(m->deep_arg.aodp*(1-m->eo)-AE)*EARTH_RADIUS_KM_WGS84;
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 8005dee:	f04f 0000 	mov.w	r0, #0
 8005df2:	4923      	ldr	r1, [pc, #140]	@ (8005e80 <sdp4_init+0x490>)
 8005df4:	f7fa fa58 	bl	80002a8 <__aeabi_dsub>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	4629      	mov	r1, r5
 8005e00:	f7fa fc0a 	bl	8000618 <__aeabi_dmul>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	4b1b      	ldr	r3, [pc, #108]	@ (8005e80 <sdp4_init+0x490>)
 8005e12:	f7fa fa49 	bl	80002a8 <__aeabi_dsub>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	a316      	add	r3, pc, #88	@ (adr r3, 8005e78 <sdp4_init+0x488>)
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	f7fa fbf8 	bl	8000618 <__aeabi_dmul>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

	if (perigee<156.0)
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	4b13      	ldr	r3, [pc, #76]	@ (8005e84 <sdp4_init+0x494>)
 8005e36:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8005e3a:	f7fa fe5f 	bl	8000afc <__aeabi_dcmplt>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d062      	beq.n	8005f0a <sdp4_init+0x51a>
	{
		if (perigee<=98.0)
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	4b0f      	ldr	r3, [pc, #60]	@ (8005e88 <sdp4_init+0x498>)
 8005e4a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8005e4e:	f7fa fe5f 	bl	8000b10 <__aeabi_dcmple>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d01b      	beq.n	8005e90 <sdp4_init+0x4a0>
			s4=20.0;
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e8c <sdp4_init+0x49c>)
 8005e5e:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
 8005e62:	e020      	b.n	8005ea6 <sdp4_init+0x4b6>
 8005e64:	f3af 8000 	nop.w
 8005e68:	0931012a 	.word	0x0931012a
 8005e6c:	3ff03217 	.word	0x3ff03217
 8005e70:	f9b8574f 	.word	0xf9b8574f
 8005e74:	3e2026c6 	.word	0x3e2026c6
 8005e78:	126e978d 	.word	0x126e978d
 8005e7c:	40b8ea23 	.word	0x40b8ea23
 8005e80:	3ff00000 	.word	0x3ff00000
 8005e84:	40638000 	.word	0x40638000
 8005e88:	40588000 	.word	0x40588000
 8005e8c:	40340000 	.word	0x40340000
		else
			s4=perigee-78.0;
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	4bc4      	ldr	r3, [pc, #784]	@ (80061a8 <sdp4_init+0x7b8>)
 8005e96:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8005e9a:	f7fa fa05 	bl	80002a8 <__aeabi_dsub>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8

		qoms24=pow((120-s4)*AE/EARTH_RADIUS_KM_WGS84,4);
 8005ea6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8005eaa:	f04f 0000 	mov.w	r0, #0
 8005eae:	49bf      	ldr	r1, [pc, #764]	@ (80061ac <sdp4_init+0x7bc>)
 8005eb0:	f7fa f9fa 	bl	80002a8 <__aeabi_dsub>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4619      	mov	r1, r3
 8005ebc:	a3b2      	add	r3, pc, #712	@ (adr r3, 8006188 <sdp4_init+0x798>)
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f7fa fcd3 	bl	800086c <__aeabi_ddiv>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	ec43 2b17 	vmov	d7, r2, r3
 8005ece:	ed9f 1bb0 	vldr	d1, [pc, #704]	@ 8006190 <sdp4_init+0x7a0>
 8005ed2:	eeb0 0a47 	vmov.f32	s0, s14
 8005ed6:	eef0 0a67 	vmov.f32	s1, s15
 8005eda:	f01c fb77 	bl	80225cc <pow>
 8005ede:	ed87 0b38 	vstr	d0, [r7, #224]	@ 0xe0
		s4=s4/EARTH_RADIUS_KM_WGS84+AE;
 8005ee2:	a3a9      	add	r3, pc, #676	@ (adr r3, 8006188 <sdp4_init+0x798>)
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8005eec:	f7fa fcbe 	bl	800086c <__aeabi_ddiv>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	4bac      	ldr	r3, [pc, #688]	@ (80061b0 <sdp4_init+0x7c0>)
 8005efe:	f7fa f9d5 	bl	80002ac <__adddf3>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	}

	pinvsq=1/(m->deep_arg.aodp*m->deep_arg.aodp*m->deep_arg.betao2*m->deep_arg.betao2);
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8005f16:	f7fa fb7f 	bl	8000618 <__aeabi_dmul>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4610      	mov	r0, r2
 8005f20:	4619      	mov	r1, r3
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8005f28:	f7fa fb76 	bl	8000618 <__aeabi_dmul>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4610      	mov	r0, r2
 8005f32:	4619      	mov	r1, r3
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8005f3a:	f7fa fb6d 	bl	8000618 <__aeabi_dmul>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	f04f 0000 	mov.w	r0, #0
 8005f46:	499a      	ldr	r1, [pc, #616]	@ (80061b0 <sdp4_init+0x7c0>)
 8005f48:	f7fa fc90 	bl	800086c <__aeabi_ddiv>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	m->deep_arg.sing=sin(m->omegao);
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	ed93 7bb2 	vldr	d7, [r3, #712]	@ 0x2c8
 8005f5a:	eeb0 0a47 	vmov.f32	s0, s14
 8005f5e:	eef0 0a67 	vmov.f32	s1, s15
 8005f62:	f01c fdc5 	bl	8022af0 <sin>
 8005f66:	eeb0 7a40 	vmov.f32	s14, s0
 8005f6a:	eef0 7a60 	vmov.f32	s15, s1
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
	m->deep_arg.cosg=cos(m->omegao);
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	ed93 7bb2 	vldr	d7, [r3, #712]	@ 0x2c8
 8005f7a:	eeb0 0a47 	vmov.f32	s0, s14
 8005f7e:	eef0 0a67 	vmov.f32	s1, s15
 8005f82:	f01c fd59 	bl	8022a38 <cos>
 8005f86:	eeb0 7a40 	vmov.f32	s14, s0
 8005f8a:	eef0 7a60 	vmov.f32	s15, s1
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
	tsi=1/(m->deep_arg.aodp-s4);
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8005f9a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8005f9e:	f7fa f983 	bl	80002a8 <__aeabi_dsub>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	f04f 0000 	mov.w	r0, #0
 8005faa:	4981      	ldr	r1, [pc, #516]	@ (80061b0 <sdp4_init+0x7c0>)
 8005fac:	f7fa fc5e 	bl	800086c <__aeabi_ddiv>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	eta=m->deep_arg.aodp*m->eo*tsi;
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 8005fc4:	f7fa fb28 	bl	8000618 <__aeabi_dmul>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005fd0:	f7fa fb22 	bl	8000618 <__aeabi_dmul>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	etasq=eta*eta;
 8005fdc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8005fe0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8005fe4:	f7fa fb18 	bl	8000618 <__aeabi_dmul>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	eeta=m->eo*eta;
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 8005ff6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8005ffa:	f7fa fb0d 	bl	8000618 <__aeabi_dmul>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	psisq=fabs(1-etasq);
 8006006:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800600a:	f04f 0000 	mov.w	r0, #0
 800600e:	4968      	ldr	r1, [pc, #416]	@ (80061b0 <sdp4_init+0x7c0>)
 8006010:	f7fa f94a 	bl	80002a8 <__aeabi_dsub>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4611      	mov	r1, r2
 800601a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800601c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006020:	67fb      	str	r3, [r7, #124]	@ 0x7c
	coef=qoms24*pow(tsi,4);
 8006022:	ed9f 1b5b 	vldr	d1, [pc, #364]	@ 8006190 <sdp4_init+0x7a0>
 8006026:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 800602a:	f01c facf 	bl	80225cc <pow>
 800602e:	ec53 2b10 	vmov	r2, r3, d0
 8006032:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006036:	f7fa faef 	bl	8000618 <__aeabi_dmul>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	coef1=coef/pow(psisq,3.5);
 8006042:	ed9f 1b55 	vldr	d1, [pc, #340]	@ 8006198 <sdp4_init+0x7a8>
 8006046:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 800604a:	f01c fabf 	bl	80225cc <pow>
 800604e:	ec53 2b10 	vmov	r2, r3, d0
 8006052:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006056:	f7fa fc09 	bl	800086c <__aeabi_ddiv>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	c2=coef1*m->deep_arg.xnodp*(m->deep_arg.aodp*(1+1.5*etasq+eeta*(4+etasq))+0.75*CK2*tsi/psisq*m->x3thm1*(8+3*etasq*(8+etasq)));
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	@ 0xb8
 8006068:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800606c:	f7fa fad4 	bl	8000618 <__aeabi_dmul>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	4b4c      	ldr	r3, [pc, #304]	@ (80061b4 <sdp4_init+0x7c4>)
 8006084:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006088:	f7fa fac6 	bl	8000618 <__aeabi_dmul>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4610      	mov	r0, r2
 8006092:	4619      	mov	r1, r3
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	4b45      	ldr	r3, [pc, #276]	@ (80061b0 <sdp4_init+0x7c0>)
 800609a:	f7fa f907 	bl	80002ac <__adddf3>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4690      	mov	r8, r2
 80060a4:	4699      	mov	r9, r3
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	4b43      	ldr	r3, [pc, #268]	@ (80061b8 <sdp4_init+0x7c8>)
 80060ac:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80060b0:	f7fa f8fc 	bl	80002ac <__adddf3>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4610      	mov	r0, r2
 80060ba:	4619      	mov	r1, r3
 80060bc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80060c0:	f7fa faaa 	bl	8000618 <__aeabi_dmul>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4640      	mov	r0, r8
 80060ca:	4649      	mov	r1, r9
 80060cc:	f7fa f8ee 	bl	80002ac <__adddf3>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4620      	mov	r0, r4
 80060d6:	4629      	mov	r1, r5
 80060d8:	f7fa fa9e 	bl	8000618 <__aeabi_dmul>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4690      	mov	r8, r2
 80060e2:	4699      	mov	r9, r3
 80060e4:	a32e      	add	r3, pc, #184	@ (adr r3, 80061a0 <sdp4_init+0x7b0>)
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060ee:	f7fa fa93 	bl	8000618 <__aeabi_dmul>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4610      	mov	r0, r2
 80060f8:	4619      	mov	r1, r3
 80060fa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80060fe:	f7fa fbb5 	bl	800086c <__aeabi_ddiv>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006110:	f7fa fa82 	bl	8000618 <__aeabi_dmul>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4692      	mov	sl, r2
 800611a:	469b      	mov	fp, r3
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	4b26      	ldr	r3, [pc, #152]	@ (80061bc <sdp4_init+0x7cc>)
 8006122:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006126:	f7fa fa77 	bl	8000618 <__aeabi_dmul>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4614      	mov	r4, r2
 8006130:	461d      	mov	r5, r3
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	4b22      	ldr	r3, [pc, #136]	@ (80061c0 <sdp4_init+0x7d0>)
 8006138:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800613c:	f7fa f8b6 	bl	80002ac <__adddf3>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4620      	mov	r0, r4
 8006146:	4629      	mov	r1, r5
 8006148:	f7fa fa66 	bl	8000618 <__aeabi_dmul>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4610      	mov	r0, r2
 8006152:	4619      	mov	r1, r3
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	4b19      	ldr	r3, [pc, #100]	@ (80061c0 <sdp4_init+0x7d0>)
 800615a:	f7fa f8a7 	bl	80002ac <__adddf3>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4650      	mov	r0, sl
 8006164:	4659      	mov	r1, fp
 8006166:	f7fa fa57 	bl	8000618 <__aeabi_dmul>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4640      	mov	r0, r8
 8006170:	4649      	mov	r1, r9
 8006172:	f7fa f89b 	bl	80002ac <__adddf3>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800617e:	f7fa fa4b 	bl	8000618 <__aeabi_dmul>
 8006182:	4602      	mov	r2, r0
 8006184:	e01e      	b.n	80061c4 <sdp4_init+0x7d4>
 8006186:	bf00      	nop
 8006188:	126e978d 	.word	0x126e978d
 800618c:	40b8ea23 	.word	0x40b8ea23
 8006190:	00000000 	.word	0x00000000
 8006194:	40100000 	.word	0x40100000
 8006198:	00000000 	.word	0x00000000
 800619c:	400c0000 	.word	0x400c0000
 80061a0:	cbb15878 	.word	0xcbb15878
 80061a4:	3f3a9b3a 	.word	0x3f3a9b3a
 80061a8:	40538000 	.word	0x40538000
 80061ac:	405e0000 	.word	0x405e0000
 80061b0:	3ff00000 	.word	0x3ff00000
 80061b4:	3ff80000 	.word	0x3ff80000
 80061b8:	40100000 	.word	0x40100000
 80061bc:	40080000 	.word	0x40080000
 80061c0:	40200000 	.word	0x40200000
 80061c4:	460b      	mov	r3, r1
 80061c6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	m->c1=m->bstar*c2;
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	e9d3 01bc 	ldrd	r0, r1, [r3, #752]	@ 0x2f0
 80061d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80061d4:	f7fa fa20 	bl	8000618 <__aeabi_dmul>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	6a39      	ldr	r1, [r7, #32]
 80061de:	e9c1 2306 	strd	r2, r3, [r1, #24]
	m->deep_arg.sinio=sin(m->xincl);
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	ed93 7bb6 	vldr	d7, [r3, #728]	@ 0x2d8
 80061e8:	eeb0 0a47 	vmov.f32	s0, s14
 80061ec:	eef0 0a67 	vmov.f32	s1, s15
 80061f0:	f01c fc7e 	bl	8022af0 <sin>
 80061f4:	eeb0 7a40 	vmov.f32	s14, s0
 80061f8:	eef0 7a60 	vmov.f32	s15, s1
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
	a3ovk2=-J3_HARMONIC_WGS72/CK2*pow(AE,3);
 8006202:	a3d2      	add	r3, pc, #840	@ (adr r3, 800654c <sdp4_init+0xb5c>)
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	m->x1mth2=1-m->deep_arg.theta2;
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8006212:	f04f 0000 	mov.w	r0, #0
 8006216:	49c8      	ldr	r1, [pc, #800]	@ (8006538 <sdp4_init+0xb48>)
 8006218:	f7fa f846 	bl	80002a8 <__aeabi_dsub>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	6a39      	ldr	r1, [r7, #32]
 8006222:	e9c1 2308 	strd	r2, r3, [r1, #32]
	m->c4=2*m->deep_arg.xnodp*coef1*m->deep_arg.aodp*m->deep_arg.betao2*(eta*(2+0.5*etasq)+m->eo*(0.5+2*etasq)-2*CK2*tsi/(m->deep_arg.aodp*psisq)*(-3*m->x3thm1*(1-2*eeta+etasq*(1.5-0.5*eeta))+0.75*m->x1mth2*(2*etasq-eeta*(1+etasq))*cos(2*m->omegao)));
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	@ 0xb8
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	f7fa f83c 	bl	80002ac <__adddf3>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4610      	mov	r0, r2
 800623a:	4619      	mov	r1, r3
 800623c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8006240:	f7fa f9ea 	bl	8000618 <__aeabi_dmul>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4610      	mov	r0, r2
 800624a:	4619      	mov	r1, r3
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8006252:	f7fa f9e1 	bl	8000618 <__aeabi_dmul>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4610      	mov	r0, r2
 800625c:	4619      	mov	r1, r3
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8006264:	f7fa f9d8 	bl	8000618 <__aeabi_dmul>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	4bb1      	ldr	r3, [pc, #708]	@ (800653c <sdp4_init+0xb4c>)
 8006276:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800627a:	f7fa f9cd 	bl	8000618 <__aeabi_dmul>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4610      	mov	r0, r2
 8006284:	4619      	mov	r1, r3
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800628e:	f7fa f80d 	bl	80002ac <__adddf3>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4610      	mov	r0, r2
 8006298:	4619      	mov	r1, r3
 800629a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800629e:	f7fa f9bb 	bl	8000618 <__aeabi_dmul>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4690      	mov	r8, r2
 80062a8:	4699      	mov	r9, r3
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	e9d3 45b8 	ldrd	r4, r5, [r3, #736]	@ 0x2e0
 80062b0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	f7f9 fff8 	bl	80002ac <__adddf3>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4610      	mov	r0, r2
 80062c2:	4619      	mov	r1, r3
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	4b9c      	ldr	r3, [pc, #624]	@ (800653c <sdp4_init+0xb4c>)
 80062ca:	f7f9 ffef 	bl	80002ac <__adddf3>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4620      	mov	r0, r4
 80062d4:	4629      	mov	r1, r5
 80062d6:	f7fa f99f 	bl	8000618 <__aeabi_dmul>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4640      	mov	r0, r8
 80062e0:	4649      	mov	r1, r9
 80062e2:	f7f9 ffe3 	bl	80002ac <__adddf3>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80062ee:	a38a      	add	r3, pc, #552	@ (adr r3, 8006518 <sdp4_init+0xb28>)
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80062f8:	f7fa f98e 	bl	8000618 <__aeabi_dmul>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4614      	mov	r4, r2
 8006302:	461d      	mov	r5, r3
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800630a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800630e:	f7fa f983 	bl	8000618 <__aeabi_dmul>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4620      	mov	r0, r4
 8006318:	4629      	mov	r1, r5
 800631a:	f7fa faa7 	bl	800086c <__aeabi_ddiv>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	e9c7 2300 	strd	r2, r3, [r7]
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	4b83      	ldr	r3, [pc, #524]	@ (8006540 <sdp4_init+0xb50>)
 8006332:	f7fa f971 	bl	8000618 <__aeabi_dmul>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4690      	mov	r8, r2
 800633c:	4699      	mov	r9, r3
 800633e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	f7f9 ffb1 	bl	80002ac <__adddf3>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	f04f 0000 	mov.w	r0, #0
 8006352:	4979      	ldr	r1, [pc, #484]	@ (8006538 <sdp4_init+0xb48>)
 8006354:	f7f9 ffa8 	bl	80002a8 <__aeabi_dsub>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4614      	mov	r4, r2
 800635e:	461d      	mov	r5, r3
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	4b75      	ldr	r3, [pc, #468]	@ (800653c <sdp4_init+0xb4c>)
 8006366:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800636a:	f7fa f955 	bl	8000618 <__aeabi_dmul>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	4973      	ldr	r1, [pc, #460]	@ (8006544 <sdp4_init+0xb54>)
 8006378:	f7f9 ff96 	bl	80002a8 <__aeabi_dsub>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4610      	mov	r0, r2
 8006382:	4619      	mov	r1, r3
 8006384:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006388:	f7fa f946 	bl	8000618 <__aeabi_dmul>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4620      	mov	r0, r4
 8006392:	4629      	mov	r1, r5
 8006394:	f7f9 ff8a 	bl	80002ac <__adddf3>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4640      	mov	r0, r8
 800639e:	4649      	mov	r1, r9
 80063a0:	f7fa f93a 	bl	8000618 <__aeabi_dmul>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4692      	mov	sl, r2
 80063aa:	469b      	mov	fp, r3
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	4b64      	ldr	r3, [pc, #400]	@ (8006548 <sdp4_init+0xb58>)
 80063b8:	f7fa f92e 	bl	8000618 <__aeabi_dmul>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4690      	mov	r8, r2
 80063c2:	4699      	mov	r9, r3
 80063c4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	f7f9 ff6e 	bl	80002ac <__adddf3>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4614      	mov	r4, r2
 80063d6:	461d      	mov	r5, r3
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	4b56      	ldr	r3, [pc, #344]	@ (8006538 <sdp4_init+0xb48>)
 80063de:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80063e2:	f7f9 ff63 	bl	80002ac <__adddf3>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4610      	mov	r0, r2
 80063ec:	4619      	mov	r1, r3
 80063ee:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80063f2:	f7fa f911 	bl	8000618 <__aeabi_dmul>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4620      	mov	r0, r4
 80063fc:	4629      	mov	r1, r5
 80063fe:	f7f9 ff53 	bl	80002a8 <__aeabi_dsub>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4640      	mov	r0, r8
 8006408:	4649      	mov	r1, r9
 800640a:	f7fa f905 	bl	8000618 <__aeabi_dmul>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4614      	mov	r4, r2
 8006414:	461d      	mov	r5, r3
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	e9d3 01b2 	ldrd	r0, r1, [r3, #712]	@ 0x2c8
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	f7f9 ff44 	bl	80002ac <__adddf3>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	ec43 2b17 	vmov	d7, r2, r3
 800642c:	eeb0 0a47 	vmov.f32	s0, s14
 8006430:	eef0 0a67 	vmov.f32	s1, s15
 8006434:	f01c fb00 	bl	8022a38 <cos>
 8006438:	ec53 2b10 	vmov	r2, r3, d0
 800643c:	4620      	mov	r0, r4
 800643e:	4629      	mov	r1, r5
 8006440:	f7fa f8ea 	bl	8000618 <__aeabi_dmul>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4650      	mov	r0, sl
 800644a:	4659      	mov	r1, fp
 800644c:	f7f9 ff2e 	bl	80002ac <__adddf3>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006458:	f7fa f8de 	bl	8000618 <__aeabi_dmul>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006464:	f7f9 ff20 	bl	80002a8 <__aeabi_dsub>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006470:	f7fa f8d2 	bl	8000618 <__aeabi_dmul>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	6a39      	ldr	r1, [r7, #32]
 800647a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	theta4=m->deep_arg.theta2*m->deep_arg.theta2;
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 800648a:	f7fa f8c5 	bl	8000618 <__aeabi_dmul>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp1=3*CK2*pinvsq*m->deep_arg.xnodp;
 8006496:	a322      	add	r3, pc, #136	@ (adr r3, 8006520 <sdp4_init+0xb30>)
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80064a0:	f7fa f8ba 	bl	8000618 <__aeabi_dmul>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4610      	mov	r0, r2
 80064aa:	4619      	mov	r1, r3
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 80064b2:	f7fa f8b1 	bl	8000618 <__aeabi_dmul>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp2=temp1*CK2*pinvsq;
 80064be:	a31a      	add	r3, pc, #104	@ (adr r3, 8006528 <sdp4_init+0xb38>)
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80064c8:	f7fa f8a6 	bl	8000618 <__aeabi_dmul>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80064d4:	f7fa f8a0 	bl	8000618 <__aeabi_dmul>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	temp3=1.25*CK4*pinvsq*pinvsq*m->deep_arg.xnodp;
 80064e0:	a313      	add	r3, pc, #76	@ (adr r3, 8006530 <sdp4_init+0xb40>)
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80064ea:	f7fa f895 	bl	8000618 <__aeabi_dmul>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4610      	mov	r0, r2
 80064f4:	4619      	mov	r1, r3
 80064f6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80064fa:	f7fa f88d 	bl	8000618 <__aeabi_dmul>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4610      	mov	r0, r2
 8006504:	4619      	mov	r1, r3
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 800650c:	f7fa f884 	bl	8000618 <__aeabi_dmul>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	e01e      	b.n	8006554 <sdp4_init+0xb64>
 8006516:	bf00      	nop
 8006518:	dd20e5a5 	.word	0xdd20e5a5
 800651c:	3f51bcd1 	.word	0x3f51bcd1
 8006520:	cbb15878 	.word	0xcbb15878
 8006524:	3f5a9b3a 	.word	0x3f5a9b3a
 8006528:	dd20e5a5 	.word	0xdd20e5a5
 800652c:	3f41bcd1 	.word	0x3f41bcd1
 8006530:	bdacda00 	.word	0xbdacda00
 8006534:	3eaa0bd0 	.word	0x3eaa0bd0
 8006538:	3ff00000 	.word	0x3ff00000
 800653c:	3fe00000 	.word	0x3fe00000
 8006540:	c0080000 	.word	0xc0080000
 8006544:	3ff80000 	.word	0x3ff80000
 8006548:	3fe80000 	.word	0x3fe80000
 800654c:	f3add061 	.word	0xf3add061
 8006550:	3f7335f7 	.word	0x3f7335f7
 8006554:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	m->deep_arg.xmdot=m->deep_arg.xnodp+0.5*temp1*m->deep_arg.betao*m->x3thm1+0.0625*temp2*m->deep_arg.betao*(13-78*m->deep_arg.theta2+137*theta4);
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	@ 0xb8
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	4bc7      	ldr	r3, [pc, #796]	@ (8006880 <sdp4_init+0xe90>)
 8006564:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8006568:	f7fa f856 	bl	8000618 <__aeabi_dmul>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800657a:	f7fa f84d 	bl	8000618 <__aeabi_dmul>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4610      	mov	r0, r2
 8006584:	4619      	mov	r1, r3
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800658c:	f7fa f844 	bl	8000618 <__aeabi_dmul>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4620      	mov	r0, r4
 8006596:	4629      	mov	r1, r5
 8006598:	f7f9 fe88 	bl	80002ac <__adddf3>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4614      	mov	r4, r2
 80065a2:	461d      	mov	r5, r3
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	4bb6      	ldr	r3, [pc, #728]	@ (8006884 <sdp4_init+0xe94>)
 80065aa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80065ae:	f7fa f833 	bl	8000618 <__aeabi_dmul>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4610      	mov	r0, r2
 80065b8:	4619      	mov	r1, r3
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80065c0:	f7fa f82a 	bl	8000618 <__aeabi_dmul>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4690      	mov	r8, r2
 80065ca:	4699      	mov	r9, r3
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	4bac      	ldr	r3, [pc, #688]	@ (8006888 <sdp4_init+0xe98>)
 80065d8:	f7fa f81e 	bl	8000618 <__aeabi_dmul>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	f04f 0000 	mov.w	r0, #0
 80065e4:	49a9      	ldr	r1, [pc, #676]	@ (800688c <sdp4_init+0xe9c>)
 80065e6:	f7f9 fe5f 	bl	80002a8 <__aeabi_dsub>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4692      	mov	sl, r2
 80065f0:	469b      	mov	fp, r3
 80065f2:	a39f      	add	r3, pc, #636	@ (adr r3, 8006870 <sdp4_init+0xe80>)
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80065fc:	f7fa f80c 	bl	8000618 <__aeabi_dmul>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4650      	mov	r0, sl
 8006606:	4659      	mov	r1, fp
 8006608:	f7f9 fe50 	bl	80002ac <__adddf3>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4640      	mov	r0, r8
 8006612:	4649      	mov	r1, r9
 8006614:	f7fa f800 	bl	8000618 <__aeabi_dmul>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4620      	mov	r0, r4
 800661e:	4629      	mov	r1, r5
 8006620:	f7f9 fe44 	bl	80002ac <__adddf3>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	6a39      	ldr	r1, [r7, #32]
 800662a:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	x1m5th=1-5*m->deep_arg.theta2;
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	4b95      	ldr	r3, [pc, #596]	@ (8006890 <sdp4_init+0xea0>)
 800663a:	f7f9 ffed 	bl	8000618 <__aeabi_dmul>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	4993      	ldr	r1, [pc, #588]	@ (8006894 <sdp4_init+0xea4>)
 8006648:	f7f9 fe2e 	bl	80002a8 <__aeabi_dsub>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	m->deep_arg.omgdot=-0.5*temp1*x1m5th+0.0625*temp2*(7-114*m->deep_arg.theta2+395*theta4)+temp3*(3-36*m->deep_arg.theta2+49*theta4);
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	4b8f      	ldr	r3, [pc, #572]	@ (8006898 <sdp4_init+0xea8>)
 800665a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800665e:	f7f9 ffdb 	bl	8000618 <__aeabi_dmul>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4610      	mov	r0, r2
 8006668:	4619      	mov	r1, r3
 800666a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800666e:	f7f9 ffd3 	bl	8000618 <__aeabi_dmul>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4614      	mov	r4, r2
 8006678:	461d      	mov	r5, r3
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	4b81      	ldr	r3, [pc, #516]	@ (8006884 <sdp4_init+0xe94>)
 8006680:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8006684:	f7f9 ffc8 	bl	8000618 <__aeabi_dmul>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	4690      	mov	r8, r2
 800668e:	4699      	mov	r9, r3
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	4b80      	ldr	r3, [pc, #512]	@ (800689c <sdp4_init+0xeac>)
 800669c:	f7f9 ffbc 	bl	8000618 <__aeabi_dmul>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	497d      	ldr	r1, [pc, #500]	@ (80068a0 <sdp4_init+0xeb0>)
 80066aa:	f7f9 fdfd 	bl	80002a8 <__aeabi_dsub>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4692      	mov	sl, r2
 80066b4:	469b      	mov	fp, r3
 80066b6:	a370      	add	r3, pc, #448	@ (adr r3, 8006878 <sdp4_init+0xe88>)
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80066c0:	f7f9 ffaa 	bl	8000618 <__aeabi_dmul>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4650      	mov	r0, sl
 80066ca:	4659      	mov	r1, fp
 80066cc:	f7f9 fdee 	bl	80002ac <__adddf3>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4640      	mov	r0, r8
 80066d6:	4649      	mov	r1, r9
 80066d8:	f7f9 ff9e 	bl	8000618 <__aeabi_dmul>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4620      	mov	r0, r4
 80066e2:	4629      	mov	r1, r5
 80066e4:	f7f9 fde2 	bl	80002ac <__adddf3>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4614      	mov	r4, r2
 80066ee:	461d      	mov	r5, r3
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	4b6a      	ldr	r3, [pc, #424]	@ (80068a4 <sdp4_init+0xeb4>)
 80066fc:	f7f9 ff8c 	bl	8000618 <__aeabi_dmul>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	f04f 0000 	mov.w	r0, #0
 8006708:	4967      	ldr	r1, [pc, #412]	@ (80068a8 <sdp4_init+0xeb8>)
 800670a:	f7f9 fdcd 	bl	80002a8 <__aeabi_dsub>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4690      	mov	r8, r2
 8006714:	4699      	mov	r9, r3
 8006716:	f04f 0200 	mov.w	r2, #0
 800671a:	4b64      	ldr	r3, [pc, #400]	@ (80068ac <sdp4_init+0xebc>)
 800671c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8006720:	f7f9 ff7a 	bl	8000618 <__aeabi_dmul>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4640      	mov	r0, r8
 800672a:	4649      	mov	r1, r9
 800672c:	f7f9 fdbe 	bl	80002ac <__adddf3>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4610      	mov	r0, r2
 8006736:	4619      	mov	r1, r3
 8006738:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800673c:	f7f9 ff6c 	bl	8000618 <__aeabi_dmul>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4620      	mov	r0, r4
 8006746:	4629      	mov	r1, r5
 8006748:	f7f9 fdb0 	bl	80002ac <__adddf3>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	6a39      	ldr	r1, [r7, #32]
 8006752:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	xhdot1=-temp1*m->deep_arg.cosio;
 8006756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006758:	61bb      	str	r3, [r7, #24]
 800675a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800675c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006760:	61fb      	str	r3, [r7, #28]
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8006768:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800676c:	f7f9 ff54 	bl	8000618 <__aeabi_dmul>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	m->deep_arg.xnodot=xhdot1+(0.5*temp2*(4-19*m->deep_arg.theta2)+2*temp3*(3-7*m->deep_arg.theta2))*m->deep_arg.cosio;
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	4b40      	ldr	r3, [pc, #256]	@ (8006880 <sdp4_init+0xe90>)
 800677e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8006782:	f7f9 ff49 	bl	8000618 <__aeabi_dmul>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4614      	mov	r4, r2
 800678c:	461d      	mov	r5, r3
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	4b45      	ldr	r3, [pc, #276]	@ (80068b0 <sdp4_init+0xec0>)
 800679a:	f7f9 ff3d 	bl	8000618 <__aeabi_dmul>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	f04f 0000 	mov.w	r0, #0
 80067a6:	4943      	ldr	r1, [pc, #268]	@ (80068b4 <sdp4_init+0xec4>)
 80067a8:	f7f9 fd7e 	bl	80002a8 <__aeabi_dsub>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4620      	mov	r0, r4
 80067b2:	4629      	mov	r1, r5
 80067b4:	f7f9 ff30 	bl	8000618 <__aeabi_dmul>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4614      	mov	r4, r2
 80067be:	461d      	mov	r5, r3
 80067c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	f7f9 fd70 	bl	80002ac <__adddf3>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4690      	mov	r8, r2
 80067d2:	4699      	mov	r9, r3
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 80067da:	f04f 0200 	mov.w	r2, #0
 80067de:	4b30      	ldr	r3, [pc, #192]	@ (80068a0 <sdp4_init+0xeb0>)
 80067e0:	f7f9 ff1a 	bl	8000618 <__aeabi_dmul>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	f04f 0000 	mov.w	r0, #0
 80067ec:	492e      	ldr	r1, [pc, #184]	@ (80068a8 <sdp4_init+0xeb8>)
 80067ee:	f7f9 fd5b 	bl	80002a8 <__aeabi_dsub>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4640      	mov	r0, r8
 80067f8:	4649      	mov	r1, r9
 80067fa:	f7f9 ff0d 	bl	8000618 <__aeabi_dmul>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4620      	mov	r0, r4
 8006804:	4629      	mov	r1, r5
 8006806:	f7f9 fd51 	bl	80002ac <__adddf3>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4610      	mov	r0, r2
 8006810:	4619      	mov	r1, r3
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8006818:	f7f9 fefe 	bl	8000618 <__aeabi_dmul>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4610      	mov	r0, r2
 8006822:	4619      	mov	r1, r3
 8006824:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006828:	f7f9 fd40 	bl	80002ac <__adddf3>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	6a39      	ldr	r1, [r7, #32]
 8006832:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
	m->xnodcf=3.5*m->deep_arg.betao2*xhdot1*m->c1;
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	4b1d      	ldr	r3, [pc, #116]	@ (80068b8 <sdp4_init+0xec8>)
 8006842:	f7f9 fee9 	bl	8000618 <__aeabi_dmul>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4610      	mov	r0, r2
 800684c:	4619      	mov	r1, r3
 800684e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006852:	f7f9 fee1 	bl	8000618 <__aeabi_dmul>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4610      	mov	r0, r2
 800685c:	4619      	mov	r1, r3
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006864:	f7f9 fed8 	bl	8000618 <__aeabi_dmul>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	6a39      	ldr	r1, [r7, #32]
 800686e:	e025      	b.n	80068bc <sdp4_init+0xecc>
 8006870:	00000000 	.word	0x00000000
 8006874:	40612000 	.word	0x40612000
 8006878:	00000000 	.word	0x00000000
 800687c:	4078b000 	.word	0x4078b000
 8006880:	3fe00000 	.word	0x3fe00000
 8006884:	3fb00000 	.word	0x3fb00000
 8006888:	40538000 	.word	0x40538000
 800688c:	402a0000 	.word	0x402a0000
 8006890:	40140000 	.word	0x40140000
 8006894:	3ff00000 	.word	0x3ff00000
 8006898:	bfe00000 	.word	0xbfe00000
 800689c:	405c8000 	.word	0x405c8000
 80068a0:	401c0000 	.word	0x401c0000
 80068a4:	40420000 	.word	0x40420000
 80068a8:	40080000 	.word	0x40080000
 80068ac:	40488000 	.word	0x40488000
 80068b0:	40330000 	.word	0x40330000
 80068b4:	40100000 	.word	0x40100000
 80068b8:	400c0000 	.word	0x400c0000
 80068bc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	m->t2cof=1.5*m->c1;
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	4b41      	ldr	r3, [pc, #260]	@ (80069d0 <sdp4_init+0xfe0>)
 80068cc:	f7f9 fea4 	bl	8000618 <__aeabi_dmul>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	6a39      	ldr	r1, [r7, #32]
 80068d6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	m->xlcof=0.125*a3ovk2*m->deep_arg.sinio*(3+5*m->deep_arg.cosio)/(1+m->deep_arg.cosio);
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80068e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80068e6:	f7f9 fe97 	bl	8000618 <__aeabi_dmul>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4610      	mov	r0, r2
 80068f0:	4619      	mov	r1, r3
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80068f8:	f7f9 fe8e 	bl	8000618 <__aeabi_dmul>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4614      	mov	r4, r2
 8006902:	461d      	mov	r5, r3
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	4b31      	ldr	r3, [pc, #196]	@ (80069d4 <sdp4_init+0xfe4>)
 8006910:	f7f9 fe82 	bl	8000618 <__aeabi_dmul>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4610      	mov	r0, r2
 800691a:	4619      	mov	r1, r3
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	4b2d      	ldr	r3, [pc, #180]	@ (80069d8 <sdp4_init+0xfe8>)
 8006922:	f7f9 fcc3 	bl	80002ac <__adddf3>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4620      	mov	r0, r4
 800692c:	4629      	mov	r1, r5
 800692e:	f7f9 fe73 	bl	8000618 <__aeabi_dmul>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4614      	mov	r4, r2
 8006938:	461d      	mov	r5, r3
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	4b25      	ldr	r3, [pc, #148]	@ (80069dc <sdp4_init+0xfec>)
 8006946:	f7f9 fcb1 	bl	80002ac <__adddf3>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4620      	mov	r0, r4
 8006950:	4629      	mov	r1, r5
 8006952:	f7f9 ff8b 	bl	800086c <__aeabi_ddiv>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	6a39      	ldr	r1, [r7, #32]
 800695c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	m->aycof=0.25*a3ovk2*m->deep_arg.sinio;
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	4b1e      	ldr	r3, [pc, #120]	@ (80069e0 <sdp4_init+0xff0>)
 8006966:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800696a:	f7f9 fe55 	bl	8000618 <__aeabi_dmul>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4610      	mov	r0, r2
 8006974:	4619      	mov	r1, r3
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800697c:	f7f9 fe4c 	bl	8000618 <__aeabi_dmul>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	6a39      	ldr	r1, [r7, #32]
 8006986:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	m->x7thm1=7*m->deep_arg.theta2-1;
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	4b13      	ldr	r3, [pc, #76]	@ (80069e4 <sdp4_init+0xff4>)
 8006996:	f7f9 fe3f 	bl	8000618 <__aeabi_dmul>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4610      	mov	r0, r2
 80069a0:	4619      	mov	r1, r3
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	4b0d      	ldr	r3, [pc, #52]	@ (80069dc <sdp4_init+0xfec>)
 80069a8:	f7f9 fc7e 	bl	80002a8 <__aeabi_dsub>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	6a39      	ldr	r1, [r7, #32]
 80069b2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

	/* initialize Deep() */
	sdp4_deep_initialize(tle, m, &(m->deep_arg));
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	3358      	adds	r3, #88	@ 0x58
 80069ba:	461a      	mov	r2, r3
 80069bc:	6a39      	ldr	r1, [r7, #32]
 80069be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80069c0:	f001 fa02 	bl	8007dc8 <sdp4_deep_initialize>
}
 80069c4:	bf00      	nop
 80069c6:	37e8      	adds	r7, #232	@ 0xe8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ce:	bf00      	nop
 80069d0:	3ff80000 	.word	0x3ff80000
 80069d4:	40140000 	.word	0x40140000
 80069d8:	40080000 	.word	0x40080000
 80069dc:	3ff00000 	.word	0x3ff00000
 80069e0:	3fd00000 	.word	0x3fd00000
 80069e4:	401c0000 	.word	0x401c0000

080069e8 <sdp4_predict>:

void sdp4_predict(const struct _sdp4 *m, double tsince, struct model_output *output)
{
 80069e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80069f6:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80069fa:	6018      	str	r0, [r3, #0]
 80069fc:	463b      	mov	r3, r7
 80069fe:	ed83 0b00 	vstr	d0, [r3]
 8006a02:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006a06:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8006a0a:	6019      	str	r1, [r3, #0]
	temp2, temp3, temp4, temp5, temp6;
	double xnodek, xinck;

	/* Initialize dynamic part of deep_arg */
	deep_arg_dynamic_t deep_dyn;
	deep_arg_dynamic_init(m, &deep_dyn);
 8006a0c:	f107 0210 	add.w	r2, r7, #16
 8006a10:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006a14:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006a18:	4611      	mov	r1, r2
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	f005 fa78 	bl	800bf10 <deep_arg_dynamic_init>

	/* Update for secular gravity and atmospheric drag */
	xmdf=m->xmo+m->deep_arg.xmdot*tsince;
 8006a20:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006a24:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	e9d3 abb4 	ldrd	sl, fp, [r3, #720]	@ 0x2d0
 8006a2e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006a32:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	@ 0xa0
 8006a3c:	463b      	mov	r3, r7
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f7f9 fde9 	bl	8000618 <__aeabi_dmul>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4650      	mov	r0, sl
 8006a4c:	4659      	mov	r1, fp
 8006a4e:	f7f9 fc2d 	bl	80002ac <__adddf3>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
	deep_dyn.omgadf=m->omegao+m->deep_arg.omgdot*tsince;
 8006a5a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006a5e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	e9d3 abb2 	ldrd	sl, fp, [r3, #712]	@ 0x2c8
 8006a68:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006a6c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 8006a76:	463b      	mov	r3, r7
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	f7f9 fdcc 	bl	8000618 <__aeabi_dmul>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4650      	mov	r0, sl
 8006a86:	4659      	mov	r1, fp
 8006a88:	f7f9 fc10 	bl	80002ac <__adddf3>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8006a94:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8006a98:	e9c1 2302 	strd	r2, r3, [r1, #8]
	xnoddf=m->xnodeo+m->deep_arg.xnodot*tsince;
 8006a9c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006aa0:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	e9d3 abb0 	ldrd	sl, fp, [r3, #704]	@ 0x2c0
 8006aaa:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006aae:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 8006ab8:	463b      	mov	r3, r7
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	f7f9 fdab 	bl	8000618 <__aeabi_dmul>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4650      	mov	r0, sl
 8006ac8:	4659      	mov	r1, fp
 8006aca:	f7f9 fbef 	bl	80002ac <__adddf3>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
	tsq=tsince*tsince;
 8006ad6:	463b      	mov	r3, r7
 8006ad8:	4619      	mov	r1, r3
 8006ada:	e9d1 2300 	ldrd	r2, r3, [r1]
 8006ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae2:	f7f9 fd99 	bl	8000618 <__aeabi_dmul>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	e9c7 2398 	strd	r2, r3, [r7, #608]	@ 0x260
	deep_dyn.xnode=xnoddf+m->xnodcf*tsq;
 8006aee:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006af2:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8006afc:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	@ 0x260
 8006b00:	f7f9 fd8a 	bl	8000618 <__aeabi_dmul>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8006b10:	f7f9 fbcc 	bl	80002ac <__adddf3>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8006b1c:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8006b20:	e9c1 2304 	strd	r2, r3, [r1, #16]
	tempa=1-m->c1*tsince;
 8006b24:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006b28:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006b32:	463b      	mov	r3, r7
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f7f9 fd6e 	bl	8000618 <__aeabi_dmul>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	f04f 0000 	mov.w	r0, #0
 8006b44:	49c4      	ldr	r1, [pc, #784]	@ (8006e58 <sdp4_predict+0x470>)
 8006b46:	f7f9 fbaf 	bl	80002a8 <__aeabi_dsub>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
	tempe=m->bstar*m->c4*tsince;
 8006b52:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006b56:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	e9d3 01bc 	ldrd	r0, r1, [r3, #752]	@ 0x2f0
 8006b60:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006b64:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006b6e:	f7f9 fd53 	bl	8000618 <__aeabi_dmul>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4639      	mov	r1, r7
 8006b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b7c:	f7f9 fd4c 	bl	8000618 <__aeabi_dmul>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	e9c7 2394 	strd	r2, r3, [r7, #592]	@ 0x250
	templ=m->t2cof*tsq;
 8006b88:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006b8c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006b96:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 8006b9a:	f7f9 fd3d 	bl	8000618 <__aeabi_dmul>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	e9c7 2392 	strd	r2, r3, [r7, #584]	@ 0x248
	deep_dyn.xn=m->deep_arg.xnodp;
 8006ba6:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006baa:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8006bb4:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8006bb8:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8006bbc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	/* Update for deep-space secular effects */
	deep_dyn.xll=xmdf;
 8006bc0:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006bc4:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 8006bc8:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	@ 0x270
 8006bcc:	e9c1 2300 	strd	r2, r3, [r1]
	deep_dyn.t=tsince;
 8006bd0:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006bd4:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 8006bd8:	463b      	mov	r3, r7
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	sdp4_deep(m, DPSecular, &m->deep_arg, &deep_dyn);
 8006be2:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006be6:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8006bf0:	f107 0310 	add.w	r3, r7, #16
 8006bf4:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8006bf8:	f5a1 7021 	sub.w	r0, r1, #644	@ 0x284
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	6800      	ldr	r0, [r0, #0]
 8006c00:	f005 f9b6 	bl	800bf70 <sdp4_deep>

	xmdf=deep_dyn.xll;
 8006c04:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006c08:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
	a=pow(XKE/deep_dyn.xn,TWO_THIRD)*tempa*tempa;
 8006c14:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006c18:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006c1c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006c20:	a187      	add	r1, pc, #540	@ (adr r1, 8006e40 <sdp4_predict+0x458>)
 8006c22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c26:	f7f9 fe21 	bl	800086c <__aeabi_ddiv>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	ec43 2b17 	vmov	d7, r2, r3
 8006c32:	ed9f 1b85 	vldr	d1, [pc, #532]	@ 8006e48 <sdp4_predict+0x460>
 8006c36:	eeb0 0a47 	vmov.f32	s0, s14
 8006c3a:	eef0 0a67 	vmov.f32	s1, s15
 8006c3e:	f01b fcc5 	bl	80225cc <pow>
 8006c42:	ec51 0b10 	vmov	r0, r1, d0
 8006c46:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 8006c4a:	f7f9 fce5 	bl	8000618 <__aeabi_dmul>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8006c56:	f7f9 fcdf 	bl	8000618 <__aeabi_dmul>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	e9c7 2390 	strd	r2, r3, [r7, #576]	@ 0x240
	deep_dyn.em=deep_dyn.em-tempe;
 8006c62:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006c66:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006c6a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006c6e:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 8006c72:	f7f9 fb19 	bl	80002a8 <__aeabi_dsub>
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8006c7e:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8006c82:	e9c1 2306 	strd	r2, r3, [r1, #24]
	xmam=xmdf+m->deep_arg.xnodp*templ;
 8006c86:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006c8a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	@ 0xb8
 8006c94:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	@ 0x248
 8006c98:	f7f9 fcbe 	bl	8000618 <__aeabi_dmul>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 8006ca4:	f7f9 fb02 	bl	80002ac <__adddf3>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238

	/* Update for deep-space periodic effects */
	deep_dyn.xll=xmam;
 8006cb0:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006cb4:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 8006cb8:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8006cbc:	e9c1 2300 	strd	r2, r3, [r1]

	sdp4_deep(m, DPPeriodic,&m->deep_arg, &deep_dyn);
 8006cc0:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006cc4:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8006cce:	f107 0310 	add.w	r3, r7, #16
 8006cd2:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8006cd6:	f5a1 7021 	sub.w	r0, r1, #644	@ 0x284
 8006cda:	2102      	movs	r1, #2
 8006cdc:	6800      	ldr	r0, [r0, #0]
 8006cde:	f005 f947 	bl	800bf70 <sdp4_deep>

	xmam=deep_dyn.xll;
 8006ce2:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006ce6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
	xl=xmam+deep_dyn.omgadf+deep_dyn.xnode;
 8006cf2:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006cf6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006cfa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006cfe:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8006d02:	f7f9 fad3 	bl	80002ac <__adddf3>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006d12:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006d16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006d1a:	f7f9 fac7 	bl	80002ac <__adddf3>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
	beta=sqrt(1-deep_dyn.em*deep_dyn.em);
 8006d26:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006d2a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006d2e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006d32:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006d36:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006d3a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006d3e:	f7f9 fc6b 	bl	8000618 <__aeabi_dmul>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	f04f 0000 	mov.w	r0, #0
 8006d4a:	4943      	ldr	r1, [pc, #268]	@ (8006e58 <sdp4_predict+0x470>)
 8006d4c:	f7f9 faac 	bl	80002a8 <__aeabi_dsub>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	ec43 2b17 	vmov	d7, r2, r3
 8006d58:	eeb0 0a47 	vmov.f32	s0, s14
 8006d5c:	eef0 0a67 	vmov.f32	s1, s15
 8006d60:	f01b fca4 	bl	80226ac <sqrt>
 8006d64:	ed87 0b8a 	vstr	d0, [r7, #552]	@ 0x228
	deep_dyn.xn=XKE/pow(a,1.5);
 8006d68:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 8006e50 <sdp4_predict+0x468>
 8006d6c:	ed97 0b90 	vldr	d0, [r7, #576]	@ 0x240
 8006d70:	f01b fc2c 	bl	80225cc <pow>
 8006d74:	ec53 2b10 	vmov	r2, r3, d0
 8006d78:	a131      	add	r1, pc, #196	@ (adr r1, 8006e40 <sdp4_predict+0x458>)
 8006d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d7e:	f7f9 fd75 	bl	800086c <__aeabi_ddiv>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8006d8a:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8006d8e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	/* Long period periodics */
	axn=deep_dyn.em*cos(deep_dyn.omgadf);
 8006d92:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006d96:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006d9a:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8006d9e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006da2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006da6:	ed93 7b02 	vldr	d7, [r3, #8]
 8006daa:	eeb0 0a47 	vmov.f32	s0, s14
 8006dae:	eef0 0a67 	vmov.f32	s1, s15
 8006db2:	f01b fe41 	bl	8022a38 <cos>
 8006db6:	ec53 2b10 	vmov	r2, r3, d0
 8006dba:	4650      	mov	r0, sl
 8006dbc:	4659      	mov	r1, fp
 8006dbe:	f7f9 fc2b 	bl	8000618 <__aeabi_dmul>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
	temp=1/(a*beta*beta);
 8006dca:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 8006dce:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8006dd2:	f7f9 fc21 	bl	8000618 <__aeabi_dmul>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4610      	mov	r0, r2
 8006ddc:	4619      	mov	r1, r3
 8006dde:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 8006de2:	f7f9 fc19 	bl	8000618 <__aeabi_dmul>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	f04f 0000 	mov.w	r0, #0
 8006dee:	491a      	ldr	r1, [pc, #104]	@ (8006e58 <sdp4_predict+0x470>)
 8006df0:	f7f9 fd3c 	bl	800086c <__aeabi_ddiv>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	xll=temp*m->xlcof*axn;
 8006dfc:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006e00:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8006e0a:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 8006e0e:	f7f9 fc03 	bl	8000618 <__aeabi_dmul>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8006e1a:	f7f9 fbfd 	bl	8000618 <__aeabi_dmul>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
	aynl=temp*m->aycof;
 8006e26:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006e2a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8006e34:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8006e38:	e010      	b.n	8006e5c <sdp4_predict+0x474>
 8006e3a:	bf00      	nop
 8006e3c:	f3af 8000 	nop.w
 8006e40:	d08dcacf 	.word	0xd08dcacf
 8006e44:	3fb309b5 	.word	0x3fb309b5
 8006e48:	55555555 	.word	0x55555555
 8006e4c:	3fe55555 	.word	0x3fe55555
 8006e50:	00000000 	.word	0x00000000
 8006e54:	3ff80000 	.word	0x3ff80000
 8006e58:	3ff00000 	.word	0x3ff00000
 8006e5c:	f7f9 fbdc 	bl	8000618 <__aeabi_dmul>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
	xlt=xl+xll;
 8006e68:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8006e6c:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8006e70:	f7f9 fa1c 	bl	80002ac <__adddf3>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
	ayn=deep_dyn.em*sin(deep_dyn.omgadf)+aynl;
 8006e7c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006e80:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006e84:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8006e88:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006e8c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006e90:	ed93 7b02 	vldr	d7, [r3, #8]
 8006e94:	eeb0 0a47 	vmov.f32	s0, s14
 8006e98:	eef0 0a67 	vmov.f32	s1, s15
 8006e9c:	f01b fe28 	bl	8022af0 <sin>
 8006ea0:	ec53 2b10 	vmov	r2, r3, d0
 8006ea4:	4650      	mov	r0, sl
 8006ea6:	4659      	mov	r1, fp
 8006ea8:	f7f9 fbb6 	bl	8000618 <__aeabi_dmul>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8006eb4:	f7f9 f9fa 	bl	80002ac <__adddf3>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8

	/* Solve Kepler's Equation */
	capu=FMod2p(xlt-deep_dyn.xnode);
 8006ec0:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006ec4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006ec8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006ecc:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8006ed0:	f7f9 f9ea 	bl	80002a8 <__aeabi_dsub>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	ec43 2b17 	vmov	d7, r2, r3
 8006edc:	eeb0 0a47 	vmov.f32	s0, s14
 8006ee0:	eef0 0a67 	vmov.f32	s1, s15
 8006ee4:	f00a fa88 	bl	80113f8 <FMod2p>
 8006ee8:	ed87 0b7c 	vstr	d0, [r7, #496]	@ 0x1f0
	temp2=capu;
 8006eec:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8006ef0:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
	i=0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c

	do
	{
		sinepw=sin(temp2);
 8006efa:	ed97 0ba0 	vldr	d0, [r7, #640]	@ 0x280
 8006efe:	f01b fdf7 	bl	8022af0 <sin>
 8006f02:	ed87 0b7a 	vstr	d0, [r7, #488]	@ 0x1e8
		cosepw=cos(temp2);
 8006f06:	ed97 0ba0 	vldr	d0, [r7, #640]	@ 0x280
 8006f0a:	f01b fd95 	bl	8022a38 <cos>
 8006f0e:	ed87 0b78 	vstr	d0, [r7, #480]	@ 0x1e0
		temp3=axn*sinepw;
 8006f12:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8006f16:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8006f1a:	f7f9 fb7d 	bl	8000618 <__aeabi_dmul>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
		temp4=ayn*cosepw;
 8006f26:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8006f2a:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 8006f2e:	f7f9 fb73 	bl	8000618 <__aeabi_dmul>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
		temp5=axn*cosepw;
 8006f3a:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8006f3e:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8006f42:	f7f9 fb69 	bl	8000618 <__aeabi_dmul>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
		temp6=ayn*sinepw;
 8006f4e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8006f52:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 8006f56:	f7f9 fb5f 	bl	8000618 <__aeabi_dmul>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
		epw=(capu-temp4+temp3-temp2)/(1-temp5-temp6)+temp2;
 8006f62:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8006f66:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8006f6a:	f7f9 f99d 	bl	80002a8 <__aeabi_dsub>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4610      	mov	r0, r2
 8006f74:	4619      	mov	r1, r3
 8006f76:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8006f7a:	f7f9 f997 	bl	80002ac <__adddf3>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4610      	mov	r0, r2
 8006f84:	4619      	mov	r1, r3
 8006f86:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 8006f8a:	f7f9 f98d 	bl	80002a8 <__aeabi_dsub>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4692      	mov	sl, r2
 8006f94:	469b      	mov	fp, r3
 8006f96:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8006f9a:	f04f 0000 	mov.w	r0, #0
 8006f9e:	4920      	ldr	r1, [pc, #128]	@ (8007020 <sdp4_predict+0x638>)
 8006fa0:	f7f9 f982 	bl	80002a8 <__aeabi_dsub>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4619      	mov	r1, r3
 8006fac:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8006fb0:	f7f9 f97a 	bl	80002a8 <__aeabi_dsub>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4650      	mov	r0, sl
 8006fba:	4659      	mov	r1, fp
 8006fbc:	f7f9 fc56 	bl	800086c <__aeabi_ddiv>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8006fc8:	f7f9 f970 	bl	80002ac <__adddf3>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8

		if (fabs(epw-temp2)<=E6A)
 8006fd4:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 8006fd8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8006fdc:	f7f9 f964 	bl	80002a8 <__aeabi_dsub>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4690      	mov	r8, r2
 8006fe6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8006fea:	a30b      	add	r3, pc, #44	@ (adr r3, 8007018 <sdp4_predict+0x630>)
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	f7f9 fd8c 	bl	8000b10 <__aeabi_dcmple>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d112      	bne.n	8007024 <sdp4_predict+0x63c>
			break;

		temp2=epw;
 8006ffe:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8007002:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280

	} while (i++<10);
 8007006:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8007010:	2b09      	cmp	r3, #9
 8007012:	f77f af72 	ble.w	8006efa <sdp4_predict+0x512>
 8007016:	e006      	b.n	8007026 <sdp4_predict+0x63e>
 8007018:	a0b5ed8d 	.word	0xa0b5ed8d
 800701c:	3eb0c6f7 	.word	0x3eb0c6f7
 8007020:	3ff00000 	.word	0x3ff00000
			break;
 8007024:	bf00      	nop

	/* Short period preliminary quantities */
	ecose=temp5+temp6;
 8007026:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 800702a:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 800702e:	f7f9 f93d 	bl	80002ac <__adddf3>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
	esine=temp3-temp4;
 800703a:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 800703e:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8007042:	f7f9 f931 	bl	80002a8 <__aeabi_dsub>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
	elsq=axn*axn+ayn*ayn;
 800704e:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 8007052:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8007056:	f7f9 fadf 	bl	8000618 <__aeabi_dmul>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4690      	mov	r8, r2
 8007060:	4699      	mov	r9, r3
 8007062:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8007066:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 800706a:	f7f9 fad5 	bl	8000618 <__aeabi_dmul>
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	4640      	mov	r0, r8
 8007074:	4649      	mov	r1, r9
 8007076:	f7f9 f919 	bl	80002ac <__adddf3>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
	temp=1-elsq;
 8007082:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8007086:	f04f 0000 	mov.w	r0, #0
 800708a:	49c5      	ldr	r1, [pc, #788]	@ (80073a0 <sdp4_predict+0x9b8>)
 800708c:	f7f9 f90c 	bl	80002a8 <__aeabi_dsub>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	pl=a*temp;
 8007098:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 800709c:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 80070a0:	f7f9 faba 	bl	8000618 <__aeabi_dmul>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
	r=a*(1-ecose);
 80070ac:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 80070b0:	f04f 0000 	mov.w	r0, #0
 80070b4:	49ba      	ldr	r1, [pc, #744]	@ (80073a0 <sdp4_predict+0x9b8>)
 80070b6:	f7f9 f8f7 	bl	80002a8 <__aeabi_dsub>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 80070c2:	460e      	mov	r6, r1
 80070c4:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 80070c8:	f7f9 faa6 	bl	8000618 <__aeabi_dmul>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	e9c6 2300 	strd	r2, r3, [r6]
	temp1=1/r;
 80070d4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80070d8:	461e      	mov	r6, r3
 80070da:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	49ae      	ldr	r1, [pc, #696]	@ (80073a0 <sdp4_predict+0x9b8>)
 80070e8:	f7f9 fbc0 	bl	800086c <__aeabi_ddiv>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	e946 2302 	strd	r2, r3, [r6, #-8]
	rdot=XKE*sqrt(a)*esine*temp1;
 80070f4:	ed97 0b90 	vldr	d0, [r7, #576]	@ 0x240
 80070f8:	f01b fad8 	bl	80226ac <sqrt>
 80070fc:	ec51 0b10 	vmov	r0, r1, d0
 8007100:	a3a3      	add	r3, pc, #652	@ (adr r3, 8007390 <sdp4_predict+0x9a8>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	f7f9 fa87 	bl	8000618 <__aeabi_dmul>
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	4610      	mov	r0, r2
 8007110:	4619      	mov	r1, r3
 8007112:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8007116:	f7f9 fa7f 	bl	8000618 <__aeabi_dmul>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8007122:	460e      	mov	r6, r1
 8007124:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 8007128:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800712c:	f7f9 fa74 	bl	8000618 <__aeabi_dmul>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	e9c6 2300 	strd	r2, r3, [r6]
	rfdot=XKE*sqrt(pl)*temp1;
 8007138:	ed97 0b66 	vldr	d0, [r7, #408]	@ 0x198
 800713c:	f01b fab6 	bl	80226ac <sqrt>
 8007140:	ec51 0b10 	vmov	r0, r1, d0
 8007144:	a392      	add	r3, pc, #584	@ (adr r3, 8007390 <sdp4_predict+0x9a8>)
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	f7f9 fa65 	bl	8000618 <__aeabi_dmul>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8007156:	460e      	mov	r6, r1
 8007158:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 800715c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8007160:	f7f9 fa5a 	bl	8000618 <__aeabi_dmul>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp2=a*temp1;
 800716c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8007170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007174:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8007178:	f7f9 fa4e 	bl	8000618 <__aeabi_dmul>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
	betal=sqrt(temp);
 8007184:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8007188:	461e      	mov	r6, r3
 800718a:	ed97 0b86 	vldr	d0, [r7, #536]	@ 0x218
 800718e:	f01b fa8d 	bl	80226ac <sqrt>
 8007192:	ed86 0b00 	vstr	d0, [r6]
	temp3=1/(1+betal);
 8007196:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800719a:	4619      	mov	r1, r3
 800719c:	f04f 0200 	mov.w	r2, #0
 80071a0:	4b7f      	ldr	r3, [pc, #508]	@ (80073a0 <sdp4_predict+0x9b8>)
 80071a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071a6:	f7f9 f881 	bl	80002ac <__adddf3>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	f04f 0000 	mov.w	r0, #0
 80071b2:	497b      	ldr	r1, [pc, #492]	@ (80073a0 <sdp4_predict+0x9b8>)
 80071b4:	f7f9 fb5a 	bl	800086c <__aeabi_ddiv>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
	cosu=temp2*(cosepw-axn+ayn*esine*temp3);
 80071c0:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 80071c4:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 80071c8:	f7f9 f86e 	bl	80002a8 <__aeabi_dsub>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4690      	mov	r8, r2
 80071d2:	4699      	mov	r9, r3
 80071d4:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 80071d8:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 80071dc:	f7f9 fa1c 	bl	8000618 <__aeabi_dmul>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4610      	mov	r0, r2
 80071e6:	4619      	mov	r1, r3
 80071e8:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 80071ec:	f7f9 fa14 	bl	8000618 <__aeabi_dmul>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4640      	mov	r0, r8
 80071f6:	4649      	mov	r1, r9
 80071f8:	f7f9 f858 	bl	80002ac <__adddf3>
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8007204:	460e      	mov	r6, r1
 8007206:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800720a:	f7f9 fa05 	bl	8000618 <__aeabi_dmul>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	e946 2302 	strd	r2, r3, [r6, #-8]
	sinu=temp2*(sinepw-ayn-axn*esine*temp3);
 8007216:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 800721a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800721e:	f7f9 f843 	bl	80002a8 <__aeabi_dsub>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4690      	mov	r8, r2
 8007228:	4699      	mov	r9, r3
 800722a:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 800722e:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8007232:	f7f9 f9f1 	bl	8000618 <__aeabi_dmul>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4610      	mov	r0, r2
 800723c:	4619      	mov	r1, r3
 800723e:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8007242:	f7f9 f9e9 	bl	8000618 <__aeabi_dmul>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	4640      	mov	r0, r8
 800724c:	4649      	mov	r1, r9
 800724e:	f7f9 f82b 	bl	80002a8 <__aeabi_dsub>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800725a:	460e      	mov	r6, r1
 800725c:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8007260:	f7f9 f9da 	bl	8000618 <__aeabi_dmul>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	e9c6 2300 	strd	r2, r3, [r6]
	u=atan2(sinu,cosu);
 800726c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007270:	461e      	mov	r6, r3
 8007272:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8007276:	461a      	mov	r2, r3
 8007278:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800727c:	ed12 1b02 	vldr	d1, [r2, #-8]
 8007280:	ed93 0b00 	vldr	d0, [r3]
 8007284:	f01b f8e8 	bl	8022458 <atan2>
 8007288:	ed06 0b02 	vstr	d0, [r6, #-8]
	sin2u=2*sinu*cosu;
 800728c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007290:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	f7f9 f808 	bl	80002ac <__adddf3>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80072a4:	460e      	mov	r6, r1
 80072a6:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 80072aa:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80072ae:	f7f9 f9b3 	bl	8000618 <__aeabi_dmul>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	e9c6 2300 	strd	r2, r3, [r6]
	cos2u=2*cosu*cosu-1;
 80072ba:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80072be:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	f7f8 fff1 	bl	80002ac <__adddf3>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4610      	mov	r0, r2
 80072d0:	4619      	mov	r1, r3
 80072d2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80072d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072da:	f7f9 f99d 	bl	8000618 <__aeabi_dmul>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4610      	mov	r0, r2
 80072e4:	4619      	mov	r1, r3
 80072e6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80072ea:	461e      	mov	r6, r3
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	4b2b      	ldr	r3, [pc, #172]	@ (80073a0 <sdp4_predict+0x9b8>)
 80072f2:	f7f8 ffd9 	bl	80002a8 <__aeabi_dsub>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp=1/pl;
 80072fe:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8007302:	f04f 0000 	mov.w	r0, #0
 8007306:	4926      	ldr	r1, [pc, #152]	@ (80073a0 <sdp4_predict+0x9b8>)
 8007308:	f7f9 fab0 	bl	800086c <__aeabi_ddiv>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	temp1=CK2*temp;
 8007314:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8007318:	461e      	mov	r6, r3
 800731a:	a31f      	add	r3, pc, #124	@ (adr r3, 8007398 <sdp4_predict+0x9b0>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8007324:	f7f9 f978 	bl	8000618 <__aeabi_dmul>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp2=temp1*temp;
 8007330:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8007334:	4619      	mov	r1, r3
 8007336:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 800733a:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800733e:	f7f9 f96b 	bl	8000618 <__aeabi_dmul>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280

	/* Update for short periodics */
	rk=r*(1-1.5*temp2*betal*m->x3thm1)+0.5*temp1*m->x1mth2*cos2u;
 800734a:	f04f 0200 	mov.w	r2, #0
 800734e:	4b15      	ldr	r3, [pc, #84]	@ (80073a4 <sdp4_predict+0x9bc>)
 8007350:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8007354:	f7f9 f960 	bl	8000618 <__aeabi_dmul>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4610      	mov	r0, r2
 800735e:	4619      	mov	r1, r3
 8007360:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f7f9 f956 	bl	8000618 <__aeabi_dmul>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4610      	mov	r0, r2
 8007372:	4619      	mov	r1, r3
 8007374:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007378:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007382:	f7f9 f949 	bl	8000618 <__aeabi_dmul>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	f04f 0000 	mov.w	r0, #0
 800738e:	e00b      	b.n	80073a8 <sdp4_predict+0x9c0>
 8007390:	d08dcacf 	.word	0xd08dcacf
 8007394:	3fb309b5 	.word	0x3fb309b5
 8007398:	dd20e5a5 	.word	0xdd20e5a5
 800739c:	3f41bcd1 	.word	0x3f41bcd1
 80073a0:	3ff00000 	.word	0x3ff00000
 80073a4:	3ff80000 	.word	0x3ff80000
 80073a8:	49d2      	ldr	r1, [pc, #840]	@ (80076f4 <sdp4_predict+0xd0c>)
 80073aa:	f7f8 ff7d 	bl	80002a8 <__aeabi_dsub>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4610      	mov	r0, r2
 80073b4:	4619      	mov	r1, r3
 80073b6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	f7f9 f92b 	bl	8000618 <__aeabi_dmul>
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	4690      	mov	r8, r2
 80073c8:	4699      	mov	r9, r3
 80073ca:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80073ce:	4619      	mov	r1, r3
 80073d0:	f04f 0200 	mov.w	r2, #0
 80073d4:	4bc8      	ldr	r3, [pc, #800]	@ (80076f8 <sdp4_predict+0xd10>)
 80073d6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80073da:	f7f9 f91d 	bl	8000618 <__aeabi_dmul>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4610      	mov	r0, r2
 80073e4:	4619      	mov	r1, r3
 80073e6:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80073ea:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073f4:	f7f9 f910 	bl	8000618 <__aeabi_dmul>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4610      	mov	r0, r2
 80073fe:	4619      	mov	r1, r3
 8007400:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007404:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007408:	f7f9 f906 	bl	8000618 <__aeabi_dmul>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8007414:	460e      	mov	r6, r1
 8007416:	4640      	mov	r0, r8
 8007418:	4649      	mov	r1, r9
 800741a:	f7f8 ff47 	bl	80002ac <__adddf3>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	e9c6 2300 	strd	r2, r3, [r6]
	uk=u-0.25*temp2*m->x7thm1*sin2u;
 8007426:	f04f 0200 	mov.w	r2, #0
 800742a:	4bb4      	ldr	r3, [pc, #720]	@ (80076fc <sdp4_predict+0xd14>)
 800742c:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8007430:	f7f9 f8f2 	bl	8000618 <__aeabi_dmul>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4610      	mov	r0, r2
 800743a:	4619      	mov	r1, r3
 800743c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007440:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800744a:	f7f9 f8e5 	bl	8000618 <__aeabi_dmul>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4610      	mov	r0, r2
 8007454:	4619      	mov	r1, r3
 8007456:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	f7f9 f8db 	bl	8000618 <__aeabi_dmul>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800746a:	460e      	mov	r6, r1
 800746c:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8007470:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8007474:	f7f8 ff18 	bl	80002a8 <__aeabi_dsub>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	e946 2302 	strd	r2, r3, [r6, #-8]
	xnodek=deep_dyn.xnode+1.5*temp2*m->deep_arg.cosio*sin2u;
 8007480:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007484:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007488:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	4b9b      	ldr	r3, [pc, #620]	@ (8007700 <sdp4_predict+0xd18>)
 8007492:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8007496:	f7f9 f8bf 	bl	8000618 <__aeabi_dmul>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4610      	mov	r0, r2
 80074a0:	4619      	mov	r1, r3
 80074a2:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80074a6:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80074b0:	f7f9 f8b2 	bl	8000618 <__aeabi_dmul>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4610      	mov	r0, r2
 80074ba:	4619      	mov	r1, r3
 80074bc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f7f9 f8a8 	bl	8000618 <__aeabi_dmul>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 80074d0:	460e      	mov	r6, r1
 80074d2:	4640      	mov	r0, r8
 80074d4:	4649      	mov	r1, r9
 80074d6:	f7f8 fee9 	bl	80002ac <__adddf3>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	e9c6 2300 	strd	r2, r3, [r6]
	xinck=deep_dyn.xinc+1.5*temp2*m->deep_arg.cosio*m->deep_arg.sinio*cos2u;
 80074e2:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80074e6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80074ea:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	4b83      	ldr	r3, [pc, #524]	@ (8007700 <sdp4_predict+0xd18>)
 80074f4:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 80074f8:	f7f9 f88e 	bl	8000618 <__aeabi_dmul>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4610      	mov	r0, r2
 8007502:	4619      	mov	r1, r3
 8007504:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007508:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8007512:	f7f9 f881 	bl	8000618 <__aeabi_dmul>
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	4610      	mov	r0, r2
 800751c:	4619      	mov	r1, r3
 800751e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007522:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800752c:	f7f9 f874 	bl	8000618 <__aeabi_dmul>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
 8007538:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800753c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007540:	f7f9 f86a 	bl	8000618 <__aeabi_dmul>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800754c:	460e      	mov	r6, r1
 800754e:	4640      	mov	r0, r8
 8007550:	4649      	mov	r1, r9
 8007552:	f7f8 feab 	bl	80002ac <__adddf3>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	e946 2302 	strd	r2, r3, [r6, #-8]
	rdotk=rdot-deep_dyn.xn*temp1*m->x1mth2*sin2u;
 800755e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007562:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007566:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800756a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800756e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007572:	f7f9 f851 	bl	8000618 <__aeabi_dmul>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4610      	mov	r0, r2
 800757c:	4619      	mov	r1, r3
 800757e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007582:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800758c:	f7f9 f844 	bl	8000618 <__aeabi_dmul>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4610      	mov	r0, r2
 8007596:	4619      	mov	r1, r3
 8007598:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f7f9 f83a 	bl	8000618 <__aeabi_dmul>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80075ac:	460e      	mov	r6, r1
 80075ae:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80075b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b6:	f7f8 fe77 	bl	80002a8 <__aeabi_dsub>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	e9c6 2300 	strd	r2, r3, [r6]
	rfdotk=rfdot+deep_dyn.xn*temp1*(m->x1mth2*cos2u+1.5*m->x3thm1);
 80075c2:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80075c6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80075ca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80075ce:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80075d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075d6:	f7f9 f81f 	bl	8000618 <__aeabi_dmul>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4690      	mov	r8, r2
 80075e0:	4699      	mov	r9, r3
 80075e2:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80075e6:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80075f0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80075f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075f8:	f7f9 f80e 	bl	8000618 <__aeabi_dmul>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4692      	mov	sl, r2
 8007602:	469b      	mov	fp, r3
 8007604:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007608:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	4b3a      	ldr	r3, [pc, #232]	@ (8007700 <sdp4_predict+0xd18>)
 8007618:	f7f8 fffe 	bl	8000618 <__aeabi_dmul>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4650      	mov	r0, sl
 8007622:	4659      	mov	r1, fp
 8007624:	f7f8 fe42 	bl	80002ac <__adddf3>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	4640      	mov	r0, r8
 800762e:	4649      	mov	r1, r9
 8007630:	f7f8 fff2 	bl	8000618 <__aeabi_dmul>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800763c:	460e      	mov	r6, r1
 800763e:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8007642:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8007646:	f7f8 fe31 	bl	80002ac <__adddf3>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	e946 2302 	strd	r2, r3, [r6, #-8]

	/* Orientation vectors */
	sinuk=sin(uk);
 8007652:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007656:	461e      	mov	r6, r3
 8007658:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800765c:	ed13 0b02 	vldr	d0, [r3, #-8]
 8007660:	f01b fa46 	bl	8022af0 <sin>
 8007664:	ed86 0b00 	vstr	d0, [r6]
	cosuk=cos(uk);
 8007668:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800766c:	461e      	mov	r6, r3
 800766e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007672:	ed13 0b02 	vldr	d0, [r3, #-8]
 8007676:	f01b f9df 	bl	8022a38 <cos>
 800767a:	ed06 0b02 	vstr	d0, [r6, #-8]
	sinik=sin(xinck);
 800767e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8007682:	461e      	mov	r6, r3
 8007684:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007688:	ed13 0b02 	vldr	d0, [r3, #-8]
 800768c:	f01b fa30 	bl	8022af0 <sin>
 8007690:	ed86 0b00 	vstr	d0, [r6]
	cosik=cos(xinck);
 8007694:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8007698:	461e      	mov	r6, r3
 800769a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800769e:	ed13 0b02 	vldr	d0, [r3, #-8]
 80076a2:	f01b f9c9 	bl	8022a38 <cos>
 80076a6:	ed06 0b02 	vstr	d0, [r6, #-8]
	sinnok=sin(xnodek);
 80076aa:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80076ae:	461e      	mov	r6, r3
 80076b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076b4:	ed93 0b00 	vldr	d0, [r3]
 80076b8:	f01b fa1a 	bl	8022af0 <sin>
 80076bc:	ed86 0b00 	vstr	d0, [r6]
	cosnok=cos(xnodek);
 80076c0:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80076c4:	461e      	mov	r6, r3
 80076c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076ca:	ed93 0b00 	vldr	d0, [r3]
 80076ce:	f01b f9b3 	bl	8022a38 <cos>
 80076d2:	ed06 0b02 	vstr	d0, [r6, #-8]
	xmx=-sinnok*cosik;
 80076d6:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80076da:	681c      	ldr	r4, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80076e2:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80076e6:	461e      	mov	r6, r3
 80076e8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80076ec:	4619      	mov	r1, r3
 80076ee:	4622      	mov	r2, r4
 80076f0:	462b      	mov	r3, r5
 80076f2:	e007      	b.n	8007704 <sdp4_predict+0xd1c>
 80076f4:	3ff00000 	.word	0x3ff00000
 80076f8:	3fe00000 	.word	0x3fe00000
 80076fc:	3fd00000 	.word	0x3fd00000
 8007700:	3ff80000 	.word	0x3ff80000
 8007704:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8007708:	f7f8 ff86 	bl	8000618 <__aeabi_dmul>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	e9c6 2300 	strd	r2, r3, [r6]
	xmy=cosnok*cosik;
 8007714:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8007718:	461c      	mov	r4, r3
 800771a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800771e:	4619      	mov	r1, r3
 8007720:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8007724:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007728:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800772c:	f7f8 ff74 	bl	8000618 <__aeabi_dmul>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	e944 2302 	strd	r2, r3, [r4, #-8]
	ux=xmx*sinuk+cosnok*cosuk;
 8007738:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800773c:	4619      	mov	r1, r3
 800773e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800774a:	f7f8 ff65 	bl	8000618 <__aeabi_dmul>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4614      	mov	r4, r2
 8007754:	461d      	mov	r5, r3
 8007756:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800775a:	4619      	mov	r1, r3
 800775c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007760:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007764:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8007768:	f7f8 ff56 	bl	8000618 <__aeabi_dmul>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8007774:	460e      	mov	r6, r1
 8007776:	4620      	mov	r0, r4
 8007778:	4629      	mov	r1, r5
 800777a:	f7f8 fd97 	bl	80002ac <__adddf3>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	e9c6 2300 	strd	r2, r3, [r6]
	uy=xmy*sinuk+sinnok*cosuk;
 8007786:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800778a:	4619      	mov	r1, r3
 800778c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8007798:	f7f8 ff3e 	bl	8000618 <__aeabi_dmul>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4614      	mov	r4, r2
 80077a2:	461d      	mov	r5, r3
 80077a4:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80077a8:	4619      	mov	r1, r3
 80077aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80077ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077b6:	f7f8 ff2f 	bl	8000618 <__aeabi_dmul>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 80077c2:	460e      	mov	r6, r1
 80077c4:	4620      	mov	r0, r4
 80077c6:	4629      	mov	r1, r5
 80077c8:	f7f8 fd70 	bl	80002ac <__adddf3>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	e946 2302 	strd	r2, r3, [r6, #-8]
	uz=sinik*sinuk;
 80077d4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80077d8:	461c      	mov	r4, r3
 80077da:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80077de:	4619      	mov	r1, r3
 80077e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ec:	f7f8 ff14 	bl	8000618 <__aeabi_dmul>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	e9c4 2300 	strd	r2, r3, [r4]
	vx=xmx*cosuk-cosnok*sinuk;
 80077f8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80077fc:	4619      	mov	r1, r3
 80077fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007802:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800780a:	f7f8 ff05 	bl	8000618 <__aeabi_dmul>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	4614      	mov	r4, r2
 8007814:	461d      	mov	r5, r3
 8007816:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800781a:	4619      	mov	r1, r3
 800781c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8007828:	f7f8 fef6 	bl	8000618 <__aeabi_dmul>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8007834:	460e      	mov	r6, r1
 8007836:	4620      	mov	r0, r4
 8007838:	4629      	mov	r1, r5
 800783a:	f7f8 fd35 	bl	80002a8 <__aeabi_dsub>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	e946 2302 	strd	r2, r3, [r6, #-8]
	vy=xmy*cosuk-sinnok*sinuk;
 8007846:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800784a:	4619      	mov	r1, r3
 800784c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007850:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007854:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8007858:	f7f8 fede 	bl	8000618 <__aeabi_dmul>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4614      	mov	r4, r2
 8007862:	461d      	mov	r5, r3
 8007864:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8007868:	4619      	mov	r1, r3
 800786a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007876:	f7f8 fecf 	bl	8000618 <__aeabi_dmul>
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8007882:	460e      	mov	r6, r1
 8007884:	4620      	mov	r0, r4
 8007886:	4629      	mov	r1, r5
 8007888:	f7f8 fd0e 	bl	80002a8 <__aeabi_dsub>
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	e9c6 2300 	strd	r2, r3, [r6]
	vz=sinik*cosuk;
 8007894:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8007898:	461c      	mov	r4, r3
 800789a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800789e:	4619      	mov	r1, r3
 80078a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80078a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ac:	f7f8 feb4 	bl	8000618 <__aeabi_dmul>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	e944 2302 	strd	r2, r3, [r4, #-8]

	/* Position and velocity */
	output->pos[0] = rk*ux;
 80078b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80078bc:	4619      	mov	r1, r3
 80078be:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ca:	f7f8 fea5 	bl	8000618 <__aeabi_dmul>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 80078d6:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 80078da:	6809      	ldr	r1, [r1, #0]
 80078dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	output->pos[1] = rk*uy;
 80078e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80078e4:	4619      	mov	r1, r3
 80078e6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80078ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078f2:	f7f8 fe91 	bl	8000618 <__aeabi_dmul>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 80078fe:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8007902:	6809      	ldr	r1, [r1, #0]
 8007904:	e9c1 2308 	strd	r2, r3, [r1, #32]
	output->pos[2] = rk*uz;
 8007908:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800790c:	4619      	mov	r1, r3
 800790e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800791a:	f7f8 fe7d 	bl	8000618 <__aeabi_dmul>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8007926:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 800792a:	6809      	ldr	r1, [r1, #0]
 800792c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	output->vel[0] = rdotk*ux+rfdotk*vx;
 8007930:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007934:	4619      	mov	r1, r3
 8007936:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007942:	f7f8 fe69 	bl	8000618 <__aeabi_dmul>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4614      	mov	r4, r2
 800794c:	461d      	mov	r5, r3
 800794e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007952:	4619      	mov	r1, r3
 8007954:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8007958:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800795c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8007960:	f7f8 fe5a 	bl	8000618 <__aeabi_dmul>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4620      	mov	r0, r4
 800796a:	4629      	mov	r1, r5
 800796c:	f7f8 fc9e 	bl	80002ac <__adddf3>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8007978:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 800797c:	6809      	ldr	r1, [r1, #0]
 800797e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	output->vel[1] = rdotk*uy+rfdotk*vy;
 8007982:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007986:	4619      	mov	r1, r3
 8007988:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800798c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007994:	f7f8 fe40 	bl	8000618 <__aeabi_dmul>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4614      	mov	r4, r2
 800799e:	461d      	mov	r5, r3
 80079a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80079a4:	4619      	mov	r1, r3
 80079a6:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80079b2:	f7f8 fe31 	bl	8000618 <__aeabi_dmul>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4620      	mov	r0, r4
 80079bc:	4629      	mov	r1, r5
 80079be:	f7f8 fc75 	bl	80002ac <__adddf3>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 80079ca:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 80079ce:	6809      	ldr	r1, [r1, #0]
 80079d0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	output->vel[2] = rdotk*uz+rfdotk*vz;
 80079d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80079d8:	4619      	mov	r1, r3
 80079da:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079e6:	f7f8 fe17 	bl	8000618 <__aeabi_dmul>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	4614      	mov	r4, r2
 80079f0:	461d      	mov	r5, r3
 80079f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80079f6:	4619      	mov	r1, r3
 80079f8:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80079fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a00:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8007a04:	f7f8 fe08 	bl	8000618 <__aeabi_dmul>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	4629      	mov	r1, r5
 8007a10:	f7f8 fc4c 	bl	80002ac <__adddf3>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8007a1c:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8007a20:	6809      	ldr	r1, [r1, #0]
 8007a22:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	/* Phase in radians */
	double phase=xlt-deep_dyn.xnode-deep_dyn.omgadf+TWO_PI;
 8007a26:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007a2a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007a2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007a32:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8007a36:	f7f8 fc37 	bl	80002a8 <__aeabi_dsub>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4610      	mov	r0, r2
 8007a40:	4619      	mov	r1, r3
 8007a42:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007a46:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007a4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007a4e:	f7f8 fc2b 	bl	80002a8 <__aeabi_dsub>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	4610      	mov	r0, r2
 8007a58:	4619      	mov	r1, r3
 8007a5a:	a32b      	add	r3, pc, #172	@ (adr r3, 8007b08 <sdp4_predict+0x1120>)
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	f7f8 fc24 	bl	80002ac <__adddf3>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278

	if (phase<0.0)
 8007a6c:	f04f 0200 	mov.w	r2, #0
 8007a70:	f04f 0300 	mov.w	r3, #0
 8007a74:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8007a78:	f7f9 f840 	bl	8000afc <__aeabi_dcmplt>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <sdp4_predict+0x10b0>
		phase+=TWO_PI;
 8007a82:	a321      	add	r3, pc, #132	@ (adr r3, 8007b08 <sdp4_predict+0x1120>)
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8007a8c:	f7f8 fc0e 	bl	80002ac <__adddf3>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278

	phase=FMod2p(phase);
 8007a98:	ed97 0b9e 	vldr	d0, [r7, #632]	@ 0x278
 8007a9c:	f009 fcac 	bl	80113f8 <FMod2p>
 8007aa0:	ed87 0b9e 	vstr	d0, [r7, #632]	@ 0x278
	output->phase = phase;
 8007aa4:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007aa8:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8007aac:	6819      	ldr	r1, [r3, #0]
 8007aae:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 8007ab2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	output->omgadf = deep_dyn.omgadf;
 8007ab6:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007aba:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007abe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007ac2:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8007ac6:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8007aca:	6809      	ldr	r1, [r1, #0]
 8007acc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	output->xnodek = xnodek;
 8007ad0:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007ad4:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8007ad8:	6819      	ldr	r1, [r3, #0]
 8007ada:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	output->xinck = xinck;
 8007ae6:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007aea:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8007aee:	6819      	ldr	r1, [r3, #0]
 8007af0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007af4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007af8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8007afc:	bf00      	nop
 8007afe:	f507 7725 	add.w	r7, r7, #660	@ 0x294
 8007b02:	46bd      	mov	sp, r7
 8007b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b08:	54442d18 	.word	0x54442d18
 8007b0c:	401921fb 	.word	0x401921fb

08007b10 <ThetaG>:
 * \param epoch TLE epoch
 * \param deep_arg Deep arg
 * \copyright GPLv2+
 **/
double ThetaG(double epoch, deep_arg_fixed_t *deep_arg)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b092      	sub	sp, #72	@ 0x48
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	ed87 0b02 	vstr	d0, [r7, #8]
 8007b1a:	6078      	str	r0, [r7, #4]
	double year, day, UT, jd, TU, GMST, ThetaG;

	/* Modification to support Y2K */
	/* Valid 1957 through 2056     */

	day=modf(epoch*1E-3,&year)*1E3;
 8007b1c:	a3a7      	add	r3, pc, #668	@ (adr r3, 8007dbc <ThetaG+0x2ac>)
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b26:	f7f8 fd77 	bl	8000618 <__aeabi_dmul>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	ec43 2b17 	vmov	d7, r2, r3
 8007b32:	f107 0318 	add.w	r3, r7, #24
 8007b36:	4618      	mov	r0, r3
 8007b38:	eeb0 0a47 	vmov.f32	s0, s14
 8007b3c:	eef0 0a67 	vmov.f32	s1, s15
 8007b40:	f017 fb60 	bl	801f204 <modf>
 8007b44:	ec51 0b10 	vmov	r0, r1, d0
 8007b48:	f04f 0200 	mov.w	r2, #0
 8007b4c:	4b98      	ldr	r3, [pc, #608]	@ (8007db0 <ThetaG+0x2a0>)
 8007b4e:	f7f8 fd63 	bl	8000618 <__aeabi_dmul>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (year<57)
 8007b5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b5e:	f04f 0200 	mov.w	r2, #0
 8007b62:	4b94      	ldr	r3, [pc, #592]	@ (8007db4 <ThetaG+0x2a4>)
 8007b64:	f7f8 ffca 	bl	8000afc <__aeabi_dcmplt>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <ThetaG+0x76>
		year+=2000;
 8007b6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	4b90      	ldr	r3, [pc, #576]	@ (8007db8 <ThetaG+0x2a8>)
 8007b78:	f7f8 fb98 	bl	80002ac <__adddf3>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8007b84:	e00a      	b.n	8007b9c <ThetaG+0x8c>
	else
		year+=1900;
 8007b86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b8a:	a36f      	add	r3, pc, #444	@ (adr r3, 8007d48 <ThetaG+0x238>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f7f8 fb8c 	bl	80002ac <__adddf3>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	e9c7 2306 	strd	r2, r3, [r7, #24]

	UT=modf(day,&day);
 8007b9c:	ed97 7b04 	vldr	d7, [r7, #16]
 8007ba0:	f107 0310 	add.w	r3, r7, #16
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	eeb0 0a47 	vmov.f32	s0, s14
 8007baa:	eef0 0a67 	vmov.f32	s1, s15
 8007bae:	f017 fb29 	bl	801f204 <modf>
 8007bb2:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	jd=Julian_Date_of_Year(year)+day;
 8007bb6:	ed97 7b06 	vldr	d7, [r7, #24]
 8007bba:	eeb0 0a47 	vmov.f32	s0, s14
 8007bbe:	eef0 0a67 	vmov.f32	s1, s15
 8007bc2:	f009 fc6d 	bl	80114a0 <Julian_Date_of_Year>
 8007bc6:	ec51 0b10 	vmov	r0, r1, d0
 8007bca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007bce:	f7f8 fb6d 	bl	80002ac <__adddf3>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	TU=(jd-2451545.0)/36525;
 8007bda:	a35d      	add	r3, pc, #372	@ (adr r3, 8007d50 <ThetaG+0x240>)
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007be4:	f7f8 fb60 	bl	80002a8 <__aeabi_dsub>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4610      	mov	r0, r2
 8007bee:	4619      	mov	r1, r3
 8007bf0:	a359      	add	r3, pc, #356	@ (adr r3, 8007d58 <ThetaG+0x248>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	f7f8 fe39 	bl	800086c <__aeabi_ddiv>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	GMST=24110.54841+TU*(8640184.812866+TU*(0.093104-TU*6.2E-6));
 8007c02:	a357      	add	r3, pc, #348	@ (adr r3, 8007d60 <ThetaG+0x250>)
 8007c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c08:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007c0c:	f7f8 fd04 	bl	8000618 <__aeabi_dmul>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	a154      	add	r1, pc, #336	@ (adr r1, 8007d68 <ThetaG+0x258>)
 8007c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c1a:	f7f8 fb45 	bl	80002a8 <__aeabi_dsub>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4610      	mov	r0, r2
 8007c24:	4619      	mov	r1, r3
 8007c26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007c2a:	f7f8 fcf5 	bl	8000618 <__aeabi_dmul>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	4610      	mov	r0, r2
 8007c34:	4619      	mov	r1, r3
 8007c36:	a34e      	add	r3, pc, #312	@ (adr r3, 8007d70 <ThetaG+0x260>)
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f7f8 fb36 	bl	80002ac <__adddf3>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4610      	mov	r0, r2
 8007c46:	4619      	mov	r1, r3
 8007c48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007c4c:	f7f8 fce4 	bl	8000618 <__aeabi_dmul>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	4610      	mov	r0, r2
 8007c56:	4619      	mov	r1, r3
 8007c58:	a347      	add	r3, pc, #284	@ (adr r3, 8007d78 <ThetaG+0x268>)
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	f7f8 fb25 	bl	80002ac <__adddf3>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	GMST=fmod(GMST+SECONDS_PER_DAY*EARTH_ROTATIONS_PER_SIDERIAL_DAY*UT,SECONDS_PER_DAY);
 8007c6a:	a345      	add	r3, pc, #276	@ (adr r3, 8007d80 <ThetaG+0x270>)
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8007c74:	f7f8 fcd0 	bl	8000618 <__aeabi_dmul>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4619      	mov	r1, r3
 8007c80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c84:	f7f8 fb12 	bl	80002ac <__adddf3>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	ec43 2b17 	vmov	d7, r2, r3
 8007c90:	ed9f 1b3d 	vldr	d1, [pc, #244]	@ 8007d88 <ThetaG+0x278>
 8007c94:	eeb0 0a47 	vmov.f32	s0, s14
 8007c98:	eef0 0a67 	vmov.f32	s1, s15
 8007c9c:	f01a fc28 	bl	80224f0 <fmod>
 8007ca0:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	ThetaG = 2*M_PI*GMST/SECONDS_PER_DAY;
 8007ca4:	a33a      	add	r3, pc, #232	@ (adr r3, 8007d90 <ThetaG+0x280>)
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007cae:	f7f8 fcb3 	bl	8000618 <__aeabi_dmul>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	4619      	mov	r1, r3
 8007cba:	a333      	add	r3, pc, #204	@ (adr r3, 8007d88 <ThetaG+0x278>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fdd4 	bl	800086c <__aeabi_ddiv>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	deep_arg->ds50=jd-2433281.5+UT;
 8007ccc:	a332      	add	r3, pc, #200	@ (adr r3, 8007d98 <ThetaG+0x288>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007cd6:	f7f8 fae7 	bl	80002a8 <__aeabi_dsub>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4610      	mov	r0, r2
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007ce6:	f7f8 fae1 	bl	80002ac <__adddf3>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	ThetaG=FMod2p(6.3003880987*deep_arg->ds50+1.72944494);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8007cfa:	a329      	add	r3, pc, #164	@ (adr r3, 8007da0 <ThetaG+0x290>)
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f7f8 fc8a 	bl	8000618 <__aeabi_dmul>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	a326      	add	r3, pc, #152	@ (adr r3, 8007da8 <ThetaG+0x298>)
 8007d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d12:	f7f8 facb 	bl	80002ac <__adddf3>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	ec43 2b17 	vmov	d7, r2, r3
 8007d1e:	eeb0 0a47 	vmov.f32	s0, s14
 8007d22:	eef0 0a67 	vmov.f32	s1, s15
 8007d26:	f009 fb67 	bl	80113f8 <FMod2p>
 8007d2a:	ed87 0b08 	vstr	d0, [r7, #32]

	return ThetaG;
 8007d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d32:	ec43 2b17 	vmov	d7, r2, r3
}
 8007d36:	eeb0 0a47 	vmov.f32	s0, s14
 8007d3a:	eef0 0a67 	vmov.f32	s1, s15
 8007d3e:	3748      	adds	r7, #72	@ 0x48
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	f3af 8000 	nop.w
 8007d48:	00000000 	.word	0x00000000
 8007d4c:	409db000 	.word	0x409db000
 8007d50:	80000000 	.word	0x80000000
 8007d54:	4142b42c 	.word	0x4142b42c
 8007d58:	00000000 	.word	0x00000000
 8007d5c:	40e1d5a0 	.word	0x40e1d5a0
 8007d60:	05e6c9ce 	.word	0x05e6c9ce
 8007d64:	3eda0133 	.word	0x3eda0133
 8007d68:	eb2074eb 	.word	0xeb2074eb
 8007d6c:	3fb7d5a9 	.word	0x3fb7d5a9
 8007d70:	1a02ff8f 	.word	0x1a02ff8f
 8007d74:	41607ad7 	.word	0x41607ad7
 8007d78:	192641b3 	.word	0x192641b3
 8007d7c:	40d78ba3 	.word	0x40d78ba3
 8007d80:	e2c87b73 	.word	0xe2c87b73
 8007d84:	40f526c8 	.word	0x40f526c8
 8007d88:	00000000 	.word	0x00000000
 8007d8c:	40f51800 	.word	0x40f51800
 8007d90:	54442d18 	.word	0x54442d18
 8007d94:	401921fb 	.word	0x401921fb
 8007d98:	c0000000 	.word	0xc0000000
 8007d9c:	41429080 	.word	0x41429080
 8007da0:	f01018b3 	.word	0xf01018b3
 8007da4:	40193398 	.word	0x40193398
 8007da8:	751885de 	.word	0x751885de
 8007dac:	3ffbabce 	.word	0x3ffbabce
 8007db0:	408f4000 	.word	0x408f4000
 8007db4:	404c8000 	.word	0x404c8000
 8007db8:	409f4000 	.word	0x409f4000
 8007dbc:	d2f1a9fc 	.word	0xd2f1a9fc
 8007dc0:	3f50624d 	.word	0x3f50624d
 8007dc4:	00000000 	.word	0x00000000

08007dc8 <sdp4_deep_initialize>:

void sdp4_deep_initialize(const predict_orbital_elements_t *tle, struct _sdp4 *m, deep_arg_fixed_t *deep_arg)
{
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	f5ad 7d59 	sub.w	sp, sp, #868	@ 0x364
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007dd6:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8007dda:	6018      	str	r0, [r3, #0]
 8007ddc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007de0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007de4:	6019      	str	r1, [r3, #0]
 8007de6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007dea:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007dee:	601a      	str	r2, [r3, #0]
	xno2, xnodce, xnoi, xpidot, z1, z11, z12, z13, z2,
	z21, z22, z23, z3, z31, z32, z33, ze, zn, zsing,
	zsinh, zsini, zcosg, zcosh, zcosi;

	/* Entrance for deep space initialization */
	m->thgr=ThetaG(m->epoch,deep_arg);
 8007df0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007df4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	ed93 7bbe 	vldr	d7, [r3, #760]	@ 0x2f8
 8007dfe:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007e02:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007e06:	6818      	ldr	r0, [r3, #0]
 8007e08:	eeb0 0a47 	vmov.f32	s0, s14
 8007e0c:	eef0 0a67 	vmov.f32	s1, s15
 8007e10:	f7ff fe7e 	bl	8007b10 <ThetaG>
 8007e14:	eeb0 7a40 	vmov.f32	s14, s0
 8007e18:	eef0 7a60 	vmov.f32	s15, s1
 8007e1c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007e20:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	ed83 7b32 	vstr	d7, [r3, #200]	@ 0xc8
	eq=m->eo;
 8007e2a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007e2e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 8007e38:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
	m->xnq=deep_arg->xnodp;
 8007e3c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007e40:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8007e4a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007e4e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	e9c3 0134 	strd	r0, r1, [r3, #208]	@ 0xd0
	aqnv=1/deep_arg->aodp;
 8007e58:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007e5c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e66:	f04f 0000 	mov.w	r0, #0
 8007e6a:	49cb      	ldr	r1, [pc, #812]	@ (8008198 <sdp4_deep_initialize+0x3d0>)
 8007e6c:	f7f8 fcfe 	bl	800086c <__aeabi_ddiv>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
	m->xqncl=m->xincl;
 8007e78:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007e7c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	e9d3 01b6 	ldrd	r0, r1, [r3, #728]	@ 0x2d8
 8007e86:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007e8a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	e9c3 0136 	strd	r0, r1, [r3, #216]	@ 0xd8
	xmao=m->xmo;
 8007e94:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007e98:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	@ 0x2d0
 8007ea2:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
	xpidot=deep_arg->omgdot+deep_arg->xnodot;
 8007ea6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007eaa:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8007eb4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007eb8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8007ec2:	f7f8 f9f3 	bl	80002ac <__adddf3>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	e9c7 23a8 	strd	r2, r3, [r7, #672]	@ 0x2a0
	sinq=sin(m->xnodeo);
 8007ece:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007ed2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	ed93 7bb0 	vldr	d7, [r3, #704]	@ 0x2c0
 8007edc:	eeb0 0a47 	vmov.f32	s0, s14
 8007ee0:	eef0 0a67 	vmov.f32	s1, s15
 8007ee4:	f01a fe04 	bl	8022af0 <sin>
 8007ee8:	ed87 0ba6 	vstr	d0, [r7, #664]	@ 0x298
	cosq=cos(m->xnodeo);
 8007eec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007ef0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	ed93 7bb0 	vldr	d7, [r3, #704]	@ 0x2c0
 8007efa:	eeb0 0a47 	vmov.f32	s0, s14
 8007efe:	eef0 0a67 	vmov.f32	s1, s15
 8007f02:	f01a fd99 	bl	8022a38 <cos>
 8007f06:	ed87 0ba4 	vstr	d0, [r7, #656]	@ 0x290
	m->omegaq=m->omegao;
 8007f0a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007f0e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	e9d3 01b2 	ldrd	r0, r1, [r3, #712]	@ 0x2c8
 8007f18:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007f1c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	e9c3 0138 	strd	r0, r1, [r3, #224]	@ 0xe0

	/* Initialize lunar solar terms */
	day=deep_arg->ds50+18261.5;  /* Days since 1900 Jan 0.5 */
 8007f26:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007f2a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8007f34:	a384      	add	r3, pc, #528	@ (adr r3, 8008148 <sdp4_deep_initialize+0x380>)
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	f7f8 f9b7 	bl	80002ac <__adddf3>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	e9c7 23a2 	strd	r2, r3, [r7, #648]	@ 0x288

	m->preep=day;
 8007f46:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007f4a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007f4e:	6819      	ldr	r1, [r3, #0]
 8007f50:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 8007f54:	e9c1 239e 	strd	r2, r3, [r1, #632]	@ 0x278
	xnodce=4.5236020-9.2422029E-4*day;
 8007f58:	a37d      	add	r3, pc, #500	@ (adr r3, 8008150 <sdp4_deep_initialize+0x388>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 8007f62:	f7f8 fb59 	bl	8000618 <__aeabi_dmul>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	a17b      	add	r1, pc, #492	@ (adr r1, 8008158 <sdp4_deep_initialize+0x390>)
 8007f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f70:	f7f8 f99a 	bl	80002a8 <__aeabi_dsub>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
	stem=sin(xnodce);
 8007f7c:	ed97 0ba0 	vldr	d0, [r7, #640]	@ 0x280
 8007f80:	f01a fdb6 	bl	8022af0 <sin>
 8007f84:	ed87 0b9e 	vstr	d0, [r7, #632]	@ 0x278
	ctem=cos(xnodce);
 8007f88:	ed97 0ba0 	vldr	d0, [r7, #640]	@ 0x280
 8007f8c:	f01a fd54 	bl	8022a38 <cos>
 8007f90:	ed87 0b9c 	vstr	d0, [r7, #624]	@ 0x270
	m->zcosil=0.91375164-0.03568096*ctem;
 8007f94:	a372      	add	r3, pc, #456	@ (adr r3, 8008160 <sdp4_deep_initialize+0x398>)
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 8007f9e:	f7f8 fb3b 	bl	8000618 <__aeabi_dmul>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	a170      	add	r1, pc, #448	@ (adr r1, 8008168 <sdp4_deep_initialize+0x3a0>)
 8007fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fac:	f7f8 f97c 	bl	80002a8 <__aeabi_dsub>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007fbc:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	e9c3 01ae 	strd	r0, r1, [r3, #696]	@ 0x2b8
	m->zsinil=sqrt(1-m->zcosil*m->zcosil);
 8007fc6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007fca:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	e9d3 01ae 	ldrd	r0, r1, [r3, #696]	@ 0x2b8
 8007fd4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007fd8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	@ 0x2b8
 8007fe2:	f7f8 fb19 	bl	8000618 <__aeabi_dmul>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	f04f 0000 	mov.w	r0, #0
 8007fee:	496a      	ldr	r1, [pc, #424]	@ (8008198 <sdp4_deep_initialize+0x3d0>)
 8007ff0:	f7f8 f95a 	bl	80002a8 <__aeabi_dsub>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	ec43 2b17 	vmov	d7, r2, r3
 8007ffc:	eeb0 0a47 	vmov.f32	s0, s14
 8008000:	eef0 0a67 	vmov.f32	s1, s15
 8008004:	f01a fb52 	bl	80226ac <sqrt>
 8008008:	eeb0 7a40 	vmov.f32	s14, s0
 800800c:	eef0 7a60 	vmov.f32	s15, s1
 8008010:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008014:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	ed83 7bac 	vstr	d7, [r3, #688]	@ 0x2b0
	m->zsinhl=0.089683511*stem/m->zsinil;
 800801e:	a354      	add	r3, pc, #336	@ (adr r3, 8008170 <sdp4_deep_initialize+0x3a8>)
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8008028:	f7f8 faf6 	bl	8000618 <__aeabi_dmul>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4610      	mov	r0, r2
 8008032:	4619      	mov	r1, r3
 8008034:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008038:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	@ 0x2b0
 8008042:	f7f8 fc13 	bl	800086c <__aeabi_ddiv>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4610      	mov	r0, r2
 800804c:	4619      	mov	r1, r3
 800804e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008052:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	e9c3 01a8 	strd	r0, r1, [r3, #672]	@ 0x2a0
	m->zcoshl=sqrt(1-m->zsinhl*m->zsinhl);
 800805c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008060:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	@ 0x2a0
 800806a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800806e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	@ 0x2a0
 8008078:	f7f8 face 	bl	8000618 <__aeabi_dmul>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	f04f 0000 	mov.w	r0, #0
 8008084:	4944      	ldr	r1, [pc, #272]	@ (8008198 <sdp4_deep_initialize+0x3d0>)
 8008086:	f7f8 f90f 	bl	80002a8 <__aeabi_dsub>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	ec43 2b17 	vmov	d7, r2, r3
 8008092:	eeb0 0a47 	vmov.f32	s0, s14
 8008096:	eef0 0a67 	vmov.f32	s1, s15
 800809a:	f01a fb07 	bl	80226ac <sqrt>
 800809e:	eeb0 7a40 	vmov.f32	s14, s0
 80080a2:	eef0 7a60 	vmov.f32	s15, s1
 80080a6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80080aa:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	ed83 7baa 	vstr	d7, [r3, #680]	@ 0x2a8
	c=4.7199672+0.22997150*day;
 80080b4:	a330      	add	r3, pc, #192	@ (adr r3, 8008178 <sdp4_deep_initialize+0x3b0>)
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 80080be:	f7f8 faab 	bl	8000618 <__aeabi_dmul>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4610      	mov	r0, r2
 80080c8:	4619      	mov	r1, r3
 80080ca:	a32d      	add	r3, pc, #180	@ (adr r3, 8008180 <sdp4_deep_initialize+0x3b8>)
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f7f8 f8ec 	bl	80002ac <__adddf3>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
	gam=5.8351514+0.0019443680*day;
 80080dc:	a32a      	add	r3, pc, #168	@ (adr r3, 8008188 <sdp4_deep_initialize+0x3c0>)
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 80080e6:	f7f8 fa97 	bl	8000618 <__aeabi_dmul>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4610      	mov	r0, r2
 80080f0:	4619      	mov	r1, r3
 80080f2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80080f6:	461c      	mov	r4, r3
 80080f8:	a325      	add	r3, pc, #148	@ (adr r3, 8008190 <sdp4_deep_initialize+0x3c8>)
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	f7f8 f8d5 	bl	80002ac <__adddf3>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	e9c4 2300 	strd	r2, r3, [r4]
	m->zmol=FMod2p(c-gam);
 800810a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8008116:	f7f8 f8c7 	bl	80002a8 <__aeabi_dsub>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	ec43 2b17 	vmov	d7, r2, r3
 8008122:	eeb0 0a47 	vmov.f32	s0, s14
 8008126:	eef0 0a67 	vmov.f32	s1, s15
 800812a:	f009 f965 	bl	80113f8 <FMod2p>
 800812e:	eeb0 7a40 	vmov.f32	s14, s0
 8008132:	eef0 7a60 	vmov.f32	s15, s1
 8008136:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800813a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	ed83 7b3a 	vstr	d7, [r3, #232]	@ 0xe8
 8008144:	e02a      	b.n	800819c <sdp4_deep_initialize+0x3d4>
 8008146:	bf00      	nop
 8008148:	00000000 	.word	0x00000000
 800814c:	40d1d560 	.word	0x40d1d560
 8008150:	f5bda204 	.word	0xf5bda204
 8008154:	3f4e48eb 	.word	0x3f4e48eb
 8008158:	1f687b14 	.word	0x1f687b14
 800815c:	4012182b 	.word	0x4012182b
 8008160:	58946bb2 	.word	0x58946bb2
 8008164:	3fa244c6 	.word	0x3fa244c6
 8008168:	144eec77 	.word	0x144eec77
 800816c:	3fed3d74 	.word	0x3fed3d74
 8008170:	a2bc46dc 	.word	0xa2bc46dc
 8008174:	3fb6f57f 	.word	0x3fb6f57f
 8008178:	c3c18b50 	.word	0xc3c18b50
 800817c:	3fcd6fb4 	.word	0x3fcd6fb4
 8008180:	14e8c551 	.word	0x14e8c551
 8008184:	4012e13f 	.word	0x4012e13f
 8008188:	3e2b3c77 	.word	0x3e2b3c77
 800818c:	3f5fdb45 	.word	0x3f5fdb45
 8008190:	edb8d59f 	.word	0xedb8d59f
 8008194:	40175731 	.word	0x40175731
 8008198:	3ff00000 	.word	0x3ff00000
	zx=0.39785416*stem/m->zsinil;
 800819c:	a389      	add	r3, pc, #548	@ (adr r3, 80083c4 <sdp4_deep_initialize+0x5fc>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 80081a6:	f7f8 fa37 	bl	8000618 <__aeabi_dmul>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4614      	mov	r4, r2
 80081b0:	461d      	mov	r5, r3
 80081b2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80081b6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	@ 0x2b0
 80081c0:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 80081c4:	460e      	mov	r6, r1
 80081c6:	4620      	mov	r0, r4
 80081c8:	4629      	mov	r1, r5
 80081ca:	f7f8 fb4f 	bl	800086c <__aeabi_ddiv>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	e946 2302 	strd	r2, r3, [r6, #-8]
	zy=m->zcoshl*ctem+0.91744867*m->zsinhl*stem;
 80081d6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80081da:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	@ 0x2a8
 80081e4:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	@ 0x270
 80081e8:	f7f8 fa16 	bl	8000618 <__aeabi_dmul>
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	4690      	mov	r8, r2
 80081f2:	4699      	mov	r9, r3
 80081f4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80081f8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	@ 0x2a0
 8008202:	a372      	add	r3, pc, #456	@ (adr r3, 80083cc <sdp4_deep_initialize+0x604>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 fa06 	bl	8000618 <__aeabi_dmul>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	4610      	mov	r0, r2
 8008212:	4619      	mov	r1, r3
 8008214:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 8008218:	f7f8 f9fe 	bl	8000618 <__aeabi_dmul>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4610      	mov	r0, r2
 8008222:	4619      	mov	r1, r3
 8008224:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008228:	461c      	mov	r4, r3
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4640      	mov	r0, r8
 8008230:	4649      	mov	r1, r9
 8008232:	f7f8 f83b 	bl	80002ac <__adddf3>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	e9c4 2300 	strd	r2, r3, [r4]
	zx=atan2(zx,zy);
 800823e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8008242:	461c      	mov	r4, r3
 8008244:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008248:	461a      	mov	r2, r3
 800824a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800824e:	ed92 1b00 	vldr	d1, [r2]
 8008252:	ed13 0b02 	vldr	d0, [r3, #-8]
 8008256:	f01a f8ff 	bl	8022458 <atan2>
 800825a:	ed04 0b02 	vstr	d0, [r4, #-8]
	zx=gam+zx-xnodce;
 800825e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8008262:	4619      	mov	r1, r3
 8008264:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8008268:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800826c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008270:	f7f8 f81c 	bl	80002ac <__adddf3>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4610      	mov	r0, r2
 800827a:	4619      	mov	r1, r3
 800827c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8008280:	461c      	mov	r4, r3
 8008282:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 8008286:	f7f8 f80f 	bl	80002a8 <__aeabi_dsub>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	e944 2302 	strd	r2, r3, [r4, #-8]
	m->zcosgl=cos(zx);
 8008292:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8008296:	ed13 0b02 	vldr	d0, [r3, #-8]
 800829a:	f01a fbcd 	bl	8022a38 <cos>
 800829e:	eeb0 7a40 	vmov.f32	s14, s0
 80082a2:	eef0 7a60 	vmov.f32	s15, s1
 80082a6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80082aa:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	ed83 7ba6 	vstr	d7, [r3, #664]	@ 0x298
	m->zsingl=sin(zx);
 80082b4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80082b8:	ed13 0b02 	vldr	d0, [r3, #-8]
 80082bc:	f01a fc18 	bl	8022af0 <sin>
 80082c0:	eeb0 7a40 	vmov.f32	s14, s0
 80082c4:	eef0 7a60 	vmov.f32	s15, s1
 80082c8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80082cc:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	ed83 7ba4 	vstr	d7, [r3, #656]	@ 0x290
	m->zmos=6.2565837+0.017201977*day;
 80082d6:	a33f      	add	r3, pc, #252	@ (adr r3, 80083d4 <sdp4_deep_initialize+0x60c>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 80082e0:	f7f8 f99a 	bl	8000618 <__aeabi_dmul>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4610      	mov	r0, r2
 80082ea:	4619      	mov	r1, r3
 80082ec:	a33b      	add	r3, pc, #236	@ (adr r3, 80083dc <sdp4_deep_initialize+0x614>)
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	f7f7 ffdb 	bl	80002ac <__adddf3>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4610      	mov	r0, r2
 80082fc:	4619      	mov	r1, r3
 80082fe:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008302:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	e9c3 013c 	strd	r0, r1, [r3, #240]	@ 0xf0
	m->zmos=FMod2p(m->zmos);
 800830c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008310:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	ed93 7b3c 	vldr	d7, [r3, #240]	@ 0xf0
 800831a:	eeb0 0a47 	vmov.f32	s0, s14
 800831e:	eef0 0a67 	vmov.f32	s1, s15
 8008322:	f009 f869 	bl	80113f8 <FMod2p>
 8008326:	eeb0 7a40 	vmov.f32	s14, s0
 800832a:	eef0 7a60 	vmov.f32	s15, s1
 800832e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008332:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	ed83 7b3c 	vstr	d7, [r3, #240]	@ 0xf0

	/* Do solar terms */
	zcosg=ZCOSGS;
 800833c:	a329      	add	r3, pc, #164	@ (adr r3, 80083e4 <sdp4_deep_initialize+0x61c>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	e9c7 23b4 	strd	r2, r3, [r7, #720]	@ 0x2d0
	zsing=ZSINGS;
 8008346:	a329      	add	r3, pc, #164	@ (adr r3, 80083ec <sdp4_deep_initialize+0x624>)
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	e9c7 23ba 	strd	r2, r3, [r7, #744]	@ 0x2e8
	zcosi=ZCOSIS;
 8008350:	a31e      	add	r3, pc, #120	@ (adr r3, 80083cc <sdp4_deep_initialize+0x604>)
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
	zsini=ZSINIS;
 800835a:	a31a      	add	r3, pc, #104	@ (adr r3, 80083c4 <sdp4_deep_initialize+0x5fc>)
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	e9c7 23b6 	strd	r2, r3, [r7, #728]	@ 0x2d8
	zcosh=cosq;
 8008364:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8008368:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
	zsinh= sinq;
 800836c:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 8008370:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
	cc=C1SS;
 8008374:	a31f      	add	r3, pc, #124	@ (adr r3, 80083f4 <sdp4_deep_initialize+0x62c>)
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
	zn=ZNS;
 800837e:	a31f      	add	r3, pc, #124	@ (adr r3, 80083fc <sdp4_deep_initialize+0x634>)
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
	ze=ZES;
 8008388:	a31e      	add	r3, pc, #120	@ (adr r3, 8008404 <sdp4_deep_initialize+0x63c>)
 800838a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838e:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
	/* zmo=m->zmos; */
	xnoi=1/m->xnq;
 8008392:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008396:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 80083a0:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80083a4:	460c      	mov	r4, r1
 80083a6:	f04f 0000 	mov.w	r0, #0
 80083aa:	4905      	ldr	r1, [pc, #20]	@ (80083c0 <sdp4_deep_initialize+0x5f8>)
 80083ac:	f7f8 fa5e 	bl	800086c <__aeabi_ddiv>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	e944 2302 	strd	r2, r3, [r4, #-8]
 80083b8:	e028      	b.n	800840c <sdp4_deep_initialize+0x644>
 80083ba:	bf00      	nop
 80083bc:	f3af 8000 	nop.w
 80083c0:	3ff00000 	.word	0x3ff00000
 80083c4:	4b71c367 	.word	0x4b71c367
 80083c8:	3fd97671 	.word	0x3fd97671
 80083cc:	502d140a 	.word	0x502d140a
 80083d0:	3fed5bbd 	.word	0x3fed5bbd
 80083d4:	2290f0f6 	.word	0x2290f0f6
 80083d8:	3f919d65 	.word	0x3f919d65
 80083dc:	e0a0bf28 	.word	0xe0a0bf28
 80083e0:	401906bd 	.word	0x401906bd
 80083e4:	6cce5f74 	.word	0x6cce5f74
 80083e8:	3fc8e857 	.word	0x3fc8e857
 80083ec:	0f0805b3 	.word	0x0f0805b3
 80083f0:	bfef6368 	.word	0xbfef6368
 80083f4:	94008e71 	.word	0x94008e71
 80083f8:	3ec90d6a 	.word	0x3ec90d6a
 80083fc:	fe8935de 	.word	0xfe8935de
 8008400:	3ee90d67 	.word	0x3ee90d67
 8008404:	78d4fdf4 	.word	0x78d4fdf4
 8008408:	3f9126e9 	.word	0x3f9126e9
	/* time, after Lunar terms are initialized        */

	for (;;)
	{
		/* Solar terms done again after Lunar terms are done */
		a1=zcosg*zcosh+zsing*zcosi*zsinh;
 800840c:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8008410:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 8008414:	f7f8 f900 	bl	8000618 <__aeabi_dmul>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4690      	mov	r8, r2
 800841e:	4699      	mov	r9, r3
 8008420:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8008424:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8008428:	f7f8 f8f6 	bl	8000618 <__aeabi_dmul>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	4610      	mov	r0, r2
 8008432:	4619      	mov	r1, r3
 8008434:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8008438:	f7f8 f8ee 	bl	8000618 <__aeabi_dmul>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4610      	mov	r0, r2
 8008442:	4619      	mov	r1, r3
 8008444:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008448:	461c      	mov	r4, r3
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4640      	mov	r0, r8
 8008450:	4649      	mov	r1, r9
 8008452:	f7f7 ff2b 	bl	80002ac <__adddf3>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	e9c4 2300 	strd	r2, r3, [r4]
		a3=-zsing*zcosh+zcosg*zcosi*zsinh;
 800845e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8008462:	643b      	str	r3, [r7, #64]	@ 0x40
 8008464:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8008468:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800846c:	647b      	str	r3, [r7, #68]	@ 0x44
 800846e:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8008472:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8008476:	f7f8 f8cf 	bl	8000618 <__aeabi_dmul>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4690      	mov	r8, r2
 8008480:	4699      	mov	r9, r3
 8008482:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8008486:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 800848a:	f7f8 f8c5 	bl	8000618 <__aeabi_dmul>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4610      	mov	r0, r2
 8008494:	4619      	mov	r1, r3
 8008496:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 800849a:	f7f8 f8bd 	bl	8000618 <__aeabi_dmul>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4610      	mov	r0, r2
 80084a4:	4619      	mov	r1, r3
 80084a6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80084aa:	461c      	mov	r4, r3
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4640      	mov	r0, r8
 80084b2:	4649      	mov	r1, r9
 80084b4:	f7f7 fefa 	bl	80002ac <__adddf3>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	e944 2302 	strd	r2, r3, [r4, #-8]
		a7=-zcosg*zsinh+zsing*zcosi*zcosh;
 80084c0:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 80084c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084c6:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 80084ca:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80084ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084d0:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 80084d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80084d8:	f7f8 f89e 	bl	8000618 <__aeabi_dmul>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4690      	mov	r8, r2
 80084e2:	4699      	mov	r9, r3
 80084e4:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 80084e8:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 80084ec:	f7f8 f894 	bl	8000618 <__aeabi_dmul>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4610      	mov	r0, r2
 80084f6:	4619      	mov	r1, r3
 80084f8:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 80084fc:	f7f8 f88c 	bl	8000618 <__aeabi_dmul>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4610      	mov	r0, r2
 8008506:	4619      	mov	r1, r3
 8008508:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800850c:	461c      	mov	r4, r3
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	4640      	mov	r0, r8
 8008514:	4649      	mov	r1, r9
 8008516:	f7f7 fec9 	bl	80002ac <__adddf3>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	e9c4 2300 	strd	r2, r3, [r4]
		a8=zsing*zsini;
 8008522:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8008526:	461c      	mov	r4, r3
 8008528:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 800852c:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8008530:	f7f8 f872 	bl	8000618 <__aeabi_dmul>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	e944 2302 	strd	r2, r3, [r4, #-8]
		a9=zsing*zsinh+zcosg*zcosi*zcosh;
 800853c:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8008540:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8008544:	f7f8 f868 	bl	8000618 <__aeabi_dmul>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4690      	mov	r8, r2
 800854e:	4699      	mov	r9, r3
 8008550:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8008554:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 8008558:	f7f8 f85e 	bl	8000618 <__aeabi_dmul>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4610      	mov	r0, r2
 8008562:	4619      	mov	r1, r3
 8008564:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8008568:	f7f8 f856 	bl	8000618 <__aeabi_dmul>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4610      	mov	r0, r2
 8008572:	4619      	mov	r1, r3
 8008574:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8008578:	461c      	mov	r4, r3
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	4640      	mov	r0, r8
 8008580:	4649      	mov	r1, r9
 8008582:	f7f7 fe93 	bl	80002ac <__adddf3>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	e9c4 2300 	strd	r2, r3, [r4]
		a10=zcosg*zsini;
 800858e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8008592:	461c      	mov	r4, r3
 8008594:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 8008598:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 800859c:	f7f8 f83c 	bl	8000618 <__aeabi_dmul>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	e944 2302 	strd	r2, r3, [r4, #-8]
		a2=deep_arg->cosio*a7+deep_arg->sinio*a8;
 80085a8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80085ac:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80085b6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	f7f8 f82b 	bl	8000618 <__aeabi_dmul>
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	4690      	mov	r8, r2
 80085c8:	4699      	mov	r9, r3
 80085ca:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80085ce:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80085d8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80085dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085e0:	f7f8 f81a 	bl	8000618 <__aeabi_dmul>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	4610      	mov	r0, r2
 80085ea:	4619      	mov	r1, r3
 80085ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80085f0:	461c      	mov	r4, r3
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4640      	mov	r0, r8
 80085f8:	4649      	mov	r1, r9
 80085fa:	f7f7 fe57 	bl	80002ac <__adddf3>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	e9c4 2300 	strd	r2, r3, [r4]
		a4=deep_arg->cosio*a9+deep_arg->sinio*a10;
 8008606:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800860a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008614:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8008618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861c:	f7f7 fffc 	bl	8000618 <__aeabi_dmul>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4690      	mov	r8, r2
 8008626:	4699      	mov	r9, r3
 8008628:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800862c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008636:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800863a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800863e:	f7f7 ffeb 	bl	8000618 <__aeabi_dmul>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	4610      	mov	r0, r2
 8008648:	4619      	mov	r1, r3
 800864a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800864e:	461c      	mov	r4, r3
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4640      	mov	r0, r8
 8008656:	4649      	mov	r1, r9
 8008658:	f7f7 fe28 	bl	80002ac <__adddf3>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	e944 2302 	strd	r2, r3, [r4, #-8]
		a5=-deep_arg->sinio*a7+deep_arg->cosio*a8;
 8008664:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008668:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008672:	633a      	str	r2, [r7, #48]	@ 0x30
 8008674:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008678:	637b      	str	r3, [r7, #52]	@ 0x34
 800867a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008682:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8008686:	f7f7 ffc7 	bl	8000618 <__aeabi_dmul>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4690      	mov	r8, r2
 8008690:	4699      	mov	r9, r3
 8008692:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008696:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80086a0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80086a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086a8:	f7f7 ffb6 	bl	8000618 <__aeabi_dmul>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	4610      	mov	r0, r2
 80086b2:	4619      	mov	r1, r3
 80086b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80086b8:	461c      	mov	r4, r3
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4640      	mov	r0, r8
 80086c0:	4649      	mov	r1, r9
 80086c2:	f7f7 fdf3 	bl	80002ac <__adddf3>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	e9c4 2300 	strd	r2, r3, [r4]
		a6=-deep_arg->sinio*a9+deep_arg->cosio*a10;
 80086ce:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80086d2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80086dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80086de:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80086e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80086f0:	f7f7 ff92 	bl	8000618 <__aeabi_dmul>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4690      	mov	r8, r2
 80086fa:	4699      	mov	r9, r3
 80086fc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008700:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800870a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800870e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008712:	f7f7 ff81 	bl	8000618 <__aeabi_dmul>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	4610      	mov	r0, r2
 800871c:	4619      	mov	r1, r3
 800871e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8008722:	461c      	mov	r4, r3
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4640      	mov	r0, r8
 800872a:	4649      	mov	r1, r9
 800872c:	f7f7 fdbe 	bl	80002ac <__adddf3>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	e944 2302 	strd	r2, r3, [r4, #-8]
		x1=a1*deep_arg->cosg+a2*deep_arg->sing;
 8008738:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800873c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008746:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	f7f7 ff63 	bl	8000618 <__aeabi_dmul>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4690      	mov	r8, r2
 8008758:	4699      	mov	r9, r3
 800875a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800875e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8008768:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	f7f7 ff52 	bl	8000618 <__aeabi_dmul>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4610      	mov	r0, r2
 800877a:	4619      	mov	r1, r3
 800877c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008780:	461c      	mov	r4, r3
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4640      	mov	r0, r8
 8008788:	4649      	mov	r1, r9
 800878a:	f7f7 fd8f 	bl	80002ac <__adddf3>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	e9c4 2300 	strd	r2, r3, [r4]
		x2=a3*deep_arg->cosg+a4*deep_arg->sing;
 8008796:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800879a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80087a4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80087a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087ac:	f7f7 ff34 	bl	8000618 <__aeabi_dmul>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4690      	mov	r8, r2
 80087b6:	4699      	mov	r9, r3
 80087b8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80087bc:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80087c6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80087ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087ce:	f7f7 ff23 	bl	8000618 <__aeabi_dmul>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4610      	mov	r0, r2
 80087d8:	4619      	mov	r1, r3
 80087da:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80087de:	461c      	mov	r4, r3
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4640      	mov	r0, r8
 80087e6:	4649      	mov	r1, r9
 80087e8:	f7f7 fd60 	bl	80002ac <__adddf3>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	e944 2302 	strd	r2, r3, [r4, #-8]
		x3=-a1*deep_arg->sing+a2*deep_arg->cosg;
 80087f4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	623a      	str	r2, [r7, #32]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008802:	627b      	str	r3, [r7, #36]	@ 0x24
 8008804:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008808:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8008812:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008816:	f7f7 feff 	bl	8000618 <__aeabi_dmul>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4690      	mov	r8, r2
 8008820:	4699      	mov	r9, r3
 8008822:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008826:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008830:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8008834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008838:	f7f7 feee 	bl	8000618 <__aeabi_dmul>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	4610      	mov	r0, r2
 8008842:	4619      	mov	r1, r3
 8008844:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008848:	461c      	mov	r4, r3
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	4640      	mov	r0, r8
 8008850:	4649      	mov	r1, r9
 8008852:	f7f7 fd2b 	bl	80002ac <__adddf3>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	e9c4 2300 	strd	r2, r3, [r4]
		x4=-a3*deep_arg->sing+a4*deep_arg->cosg;
 800885e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008862:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8008866:	61ba      	str	r2, [r7, #24]
 8008868:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800886c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008870:	61fb      	str	r3, [r7, #28]
 8008872:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008876:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8008880:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008884:	f7f7 fec8 	bl	8000618 <__aeabi_dmul>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	4690      	mov	r8, r2
 800888e:	4699      	mov	r9, r3
 8008890:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008894:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800889e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80088a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088a6:	f7f7 feb7 	bl	8000618 <__aeabi_dmul>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4610      	mov	r0, r2
 80088b0:	4619      	mov	r1, r3
 80088b2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80088b6:	461c      	mov	r4, r3
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4640      	mov	r0, r8
 80088be:	4649      	mov	r1, r9
 80088c0:	f7f7 fcf4 	bl	80002ac <__adddf3>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	e944 2302 	strd	r2, r3, [r4, #-8]
		x5=a5*deep_arg->sing;
 80088cc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80088d0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80088da:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80088de:	461d      	mov	r5, r3
 80088e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80088e4:	461c      	mov	r4, r3
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	e9d4 0100 	ldrd	r0, r1, [r4]
 80088ee:	f7f7 fe93 	bl	8000618 <__aeabi_dmul>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	e9c5 2300 	strd	r2, r3, [r5]
		x6=a6*deep_arg->sing;
 80088fa:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80088fe:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8008908:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800890c:	461d      	mov	r5, r3
 800890e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8008912:	461c      	mov	r4, r3
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 800891c:	f7f7 fe7c 	bl	8000618 <__aeabi_dmul>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	e945 2302 	strd	r2, r3, [r5, #-8]
		x7=a5*deep_arg->cosg;
 8008928:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800892c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008936:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800893a:	461d      	mov	r5, r3
 800893c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8008940:	461c      	mov	r4, r3
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	e9d4 0100 	ldrd	r0, r1, [r4]
 800894a:	f7f7 fe65 	bl	8000618 <__aeabi_dmul>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	e9c5 2300 	strd	r2, r3, [r5]
		x8=a6*deep_arg->cosg;
 8008956:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800895a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008964:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8008968:	461d      	mov	r5, r3
 800896a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800896e:	461c      	mov	r4, r3
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8008978:	f7f7 fe4e 	bl	8000618 <__aeabi_dmul>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	e945 2302 	strd	r2, r3, [r5, #-8]
		z31=12*x1*x1-3*x3*x3;
 8008984:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008988:	4619      	mov	r1, r3
 800898a:	f04f 0200 	mov.w	r2, #0
 800898e:	4bd1      	ldr	r3, [pc, #836]	@ (8008cd4 <sdp4_deep_initialize+0xf0c>)
 8008990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008994:	f7f7 fe40 	bl	8000618 <__aeabi_dmul>
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	4610      	mov	r0, r2
 800899e:	4619      	mov	r1, r3
 80089a0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80089a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a8:	f7f7 fe36 	bl	8000618 <__aeabi_dmul>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4690      	mov	r8, r2
 80089b2:	4699      	mov	r9, r3
 80089b4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80089b8:	4619      	mov	r1, r3
 80089ba:	f04f 0200 	mov.w	r2, #0
 80089be:	4bc6      	ldr	r3, [pc, #792]	@ (8008cd8 <sdp4_deep_initialize+0xf10>)
 80089c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089c4:	f7f7 fe28 	bl	8000618 <__aeabi_dmul>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4610      	mov	r0, r2
 80089ce:	4619      	mov	r1, r3
 80089d0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f7f7 fe1e 	bl	8000618 <__aeabi_dmul>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4610      	mov	r0, r2
 80089e2:	4619      	mov	r1, r3
 80089e4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80089e8:	461c      	mov	r4, r3
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4640      	mov	r0, r8
 80089f0:	4649      	mov	r1, r9
 80089f2:	f7f7 fc59 	bl	80002a8 <__aeabi_dsub>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	e9c4 2300 	strd	r2, r3, [r4]
		z32=24*x1*x2-6*x3*x4;
 80089fe:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008a02:	4619      	mov	r1, r3
 8008a04:	f04f 0200 	mov.w	r2, #0
 8008a08:	4bb4      	ldr	r3, [pc, #720]	@ (8008cdc <sdp4_deep_initialize+0xf14>)
 8008a0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a0e:	f7f7 fe03 	bl	8000618 <__aeabi_dmul>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4610      	mov	r0, r2
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008a1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a22:	f7f7 fdf9 	bl	8000618 <__aeabi_dmul>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	4690      	mov	r8, r2
 8008a2c:	4699      	mov	r9, r3
 8008a2e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008a32:	4619      	mov	r1, r3
 8008a34:	f04f 0200 	mov.w	r2, #0
 8008a38:	4ba9      	ldr	r3, [pc, #676]	@ (8008ce0 <sdp4_deep_initialize+0xf18>)
 8008a3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a3e:	f7f7 fdeb 	bl	8000618 <__aeabi_dmul>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4610      	mov	r0, r2
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008a4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a52:	f7f7 fde1 	bl	8000618 <__aeabi_dmul>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008a62:	461c      	mov	r4, r3
 8008a64:	4602      	mov	r2, r0
 8008a66:	460b      	mov	r3, r1
 8008a68:	4640      	mov	r0, r8
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	f7f7 fc1c 	bl	80002a8 <__aeabi_dsub>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	e944 2302 	strd	r2, r3, [r4, #-8]
		z33=12*x2*x2-3*x4*x4;
 8008a78:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	f04f 0200 	mov.w	r2, #0
 8008a82:	4b94      	ldr	r3, [pc, #592]	@ (8008cd4 <sdp4_deep_initialize+0xf0c>)
 8008a84:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008a88:	f7f7 fdc6 	bl	8000618 <__aeabi_dmul>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4610      	mov	r0, r2
 8008a92:	4619      	mov	r1, r3
 8008a94:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008a98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a9c:	f7f7 fdbc 	bl	8000618 <__aeabi_dmul>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4690      	mov	r8, r2
 8008aa6:	4699      	mov	r9, r3
 8008aa8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008aac:	4619      	mov	r1, r3
 8008aae:	f04f 0200 	mov.w	r2, #0
 8008ab2:	4b89      	ldr	r3, [pc, #548]	@ (8008cd8 <sdp4_deep_initialize+0xf10>)
 8008ab4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008ab8:	f7f7 fdae 	bl	8000618 <__aeabi_dmul>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008ac8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008acc:	f7f7 fda4 	bl	8000618 <__aeabi_dmul>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008adc:	461c      	mov	r4, r3
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	4649      	mov	r1, r9
 8008ae6:	f7f7 fbdf 	bl	80002a8 <__aeabi_dsub>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	e9c4 2300 	strd	r2, r3, [r4]
		z1=3*(a1*a1+a2*a2)+z31*deep_arg->eosq;
 8008af2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008af6:	4619      	mov	r1, r3
 8008af8:	e9d1 2300 	ldrd	r2, r3, [r1]
 8008afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b00:	f7f7 fd8a 	bl	8000618 <__aeabi_dmul>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	4614      	mov	r4, r2
 8008b0a:	461d      	mov	r5, r3
 8008b0c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8008b10:	4619      	mov	r1, r3
 8008b12:	e9d1 2300 	ldrd	r2, r3, [r1]
 8008b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b1a:	f7f7 fd7d 	bl	8000618 <__aeabi_dmul>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4620      	mov	r0, r4
 8008b24:	4629      	mov	r1, r5
 8008b26:	f7f7 fbc1 	bl	80002ac <__adddf3>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4610      	mov	r0, r2
 8008b30:	4619      	mov	r1, r3
 8008b32:	f04f 0200 	mov.w	r2, #0
 8008b36:	4b68      	ldr	r3, [pc, #416]	@ (8008cd8 <sdp4_deep_initialize+0xf10>)
 8008b38:	f7f7 fd6e 	bl	8000618 <__aeabi_dmul>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4690      	mov	r8, r2
 8008b42:	4699      	mov	r9, r3
 8008b44:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008b48:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b52:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	f7f7 fd5d 	bl	8000618 <__aeabi_dmul>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	460b      	mov	r3, r1
 8008b62:	4610      	mov	r0, r2
 8008b64:	4619      	mov	r1, r3
 8008b66:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008b6a:	461c      	mov	r4, r3
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4640      	mov	r0, r8
 8008b72:	4649      	mov	r1, r9
 8008b74:	f7f7 fb9a 	bl	80002ac <__adddf3>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	e944 2302 	strd	r2, r3, [r4, #-8]
		z2=6*(a1*a3+a2*a4)+z32*deep_arg->eosq;
 8008b80:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008b84:	4619      	mov	r1, r3
 8008b86:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008b8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b92:	f7f7 fd41 	bl	8000618 <__aeabi_dmul>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4614      	mov	r4, r2
 8008b9c:	461d      	mov	r5, r3
 8008b9e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8008ba8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bb0:	f7f7 fd32 	bl	8000618 <__aeabi_dmul>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4620      	mov	r0, r4
 8008bba:	4629      	mov	r1, r5
 8008bbc:	f7f7 fb76 	bl	80002ac <__adddf3>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	f04f 0200 	mov.w	r2, #0
 8008bcc:	4b44      	ldr	r3, [pc, #272]	@ (8008ce0 <sdp4_deep_initialize+0xf18>)
 8008bce:	f7f7 fd23 	bl	8000618 <__aeabi_dmul>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4690      	mov	r8, r2
 8008bd8:	4699      	mov	r9, r3
 8008bda:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008bde:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008be8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008bec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bf0:	f7f7 fd12 	bl	8000618 <__aeabi_dmul>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008c00:	461c      	mov	r4, r3
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4640      	mov	r0, r8
 8008c08:	4649      	mov	r1, r9
 8008c0a:	f7f7 fb4f 	bl	80002ac <__adddf3>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	e9c4 2300 	strd	r2, r3, [r4]
		z3=3*(a3*a3+a4*a4)+z33*deep_arg->eosq;
 8008c16:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 8008c20:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008c24:	f7f7 fcf8 	bl	8000618 <__aeabi_dmul>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4614      	mov	r4, r2
 8008c2e:	461d      	mov	r5, r3
 8008c30:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8008c34:	4619      	mov	r1, r3
 8008c36:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 8008c3a:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008c3e:	f7f7 fceb 	bl	8000618 <__aeabi_dmul>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4620      	mov	r0, r4
 8008c48:	4629      	mov	r1, r5
 8008c4a:	f7f7 fb2f 	bl	80002ac <__adddf3>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4610      	mov	r0, r2
 8008c54:	4619      	mov	r1, r3
 8008c56:	f04f 0200 	mov.w	r2, #0
 8008c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8008cd8 <sdp4_deep_initialize+0xf10>)
 8008c5c:	f7f7 fcdc 	bl	8000618 <__aeabi_dmul>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	4690      	mov	r8, r2
 8008c66:	4699      	mov	r9, r3
 8008c68:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008c6c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c76:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f7f7 fccb 	bl	8000618 <__aeabi_dmul>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4610      	mov	r0, r2
 8008c88:	4619      	mov	r1, r3
 8008c8a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008c8e:	461c      	mov	r4, r3
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4640      	mov	r0, r8
 8008c96:	4649      	mov	r1, r9
 8008c98:	f7f7 fb08 	bl	80002ac <__adddf3>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	e944 2302 	strd	r2, r3, [r4, #-8]
		z11=-6*a1*a5+deep_arg->eosq*(-24*x1*x7-6*x3*x5);
 8008ca4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008ca8:	4619      	mov	r1, r3
 8008caa:	f04f 0200 	mov.w	r2, #0
 8008cae:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce4 <sdp4_deep_initialize+0xf1c>)
 8008cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cb4:	f7f7 fcb0 	bl	8000618 <__aeabi_dmul>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8008cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc8:	f7f7 fca6 	bl	8000618 <__aeabi_dmul>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	e00a      	b.n	8008ce8 <sdp4_deep_initialize+0xf20>
 8008cd2:	bf00      	nop
 8008cd4:	40280000 	.word	0x40280000
 8008cd8:	40080000 	.word	0x40080000
 8008cdc:	40380000 	.word	0x40380000
 8008ce0:	40180000 	.word	0x40180000
 8008ce4:	c0180000 	.word	0xc0180000
 8008ce8:	4692      	mov	sl, r2
 8008cea:	469b      	mov	fp, r3
 8008cec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008cf0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cfa:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008cfe:	4619      	mov	r1, r3
 8008d00:	f04f 0200 	mov.w	r2, #0
 8008d04:	4bd2      	ldr	r3, [pc, #840]	@ (8009050 <sdp4_deep_initialize+0x1288>)
 8008d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d0a:	f7f7 fc85 	bl	8000618 <__aeabi_dmul>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4610      	mov	r0, r2
 8008d14:	4619      	mov	r1, r3
 8008d16:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	f7f7 fc7b 	bl	8000618 <__aeabi_dmul>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4614      	mov	r4, r2
 8008d28:	461d      	mov	r5, r3
 8008d2a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008d2e:	4619      	mov	r1, r3
 8008d30:	f04f 0200 	mov.w	r2, #0
 8008d34:	4bc7      	ldr	r3, [pc, #796]	@ (8009054 <sdp4_deep_initialize+0x128c>)
 8008d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d3a:	f7f7 fc6d 	bl	8000618 <__aeabi_dmul>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4610      	mov	r0, r2
 8008d44:	4619      	mov	r1, r3
 8008d46:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 fc63 	bl	8000618 <__aeabi_dmul>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4620      	mov	r0, r4
 8008d58:	4629      	mov	r1, r5
 8008d5a:	f7f7 faa5 	bl	80002a8 <__aeabi_dsub>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	4640      	mov	r0, r8
 8008d64:	4649      	mov	r1, r9
 8008d66:	f7f7 fc57 	bl	8000618 <__aeabi_dmul>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4610      	mov	r0, r2
 8008d70:	4619      	mov	r1, r3
 8008d72:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8008d76:	461c      	mov	r4, r3
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4650      	mov	r0, sl
 8008d7e:	4659      	mov	r1, fp
 8008d80:	f7f7 fa94 	bl	80002ac <__adddf3>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	e9c4 2300 	strd	r2, r3, [r4]
		z12=-6*(a1*a6+a3*a5)+deep_arg->eosq*(-24*(x2*x7+x1*x8)-6*(x3*x6+x4*x5));
 8008d8c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008d90:	4619      	mov	r1, r3
 8008d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8008d96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d9e:	f7f7 fc3b 	bl	8000618 <__aeabi_dmul>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4614      	mov	r4, r2
 8008da8:	461d      	mov	r5, r3
 8008daa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008dae:	4619      	mov	r1, r3
 8008db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008dbc:	f7f7 fc2c 	bl	8000618 <__aeabi_dmul>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	f7f7 fa70 	bl	80002ac <__adddf3>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	f04f 0200 	mov.w	r2, #0
 8008dd8:	4b9f      	ldr	r3, [pc, #636]	@ (8009058 <sdp4_deep_initialize+0x1290>)
 8008dda:	f7f7 fc1d 	bl	8000618 <__aeabi_dmul>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	e9c7 2300 	strd	r2, r3, [r7]
 8008de6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008dea:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8008df4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008df8:	4619      	mov	r1, r3
 8008dfa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008e06:	f7f7 fc07 	bl	8000618 <__aeabi_dmul>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4614      	mov	r4, r2
 8008e10:	461d      	mov	r5, r3
 8008e12:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008e16:	4619      	mov	r1, r3
 8008e18:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8008e1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e24:	f7f7 fbf8 	bl	8000618 <__aeabi_dmul>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f7f7 fa3c 	bl	80002ac <__adddf3>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	f04f 0200 	mov.w	r2, #0
 8008e40:	4b83      	ldr	r3, [pc, #524]	@ (8009050 <sdp4_deep_initialize+0x1288>)
 8008e42:	f7f7 fbe9 	bl	8000618 <__aeabi_dmul>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4690      	mov	r8, r2
 8008e4c:	4699      	mov	r9, r3
 8008e4e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008e52:	4619      	mov	r1, r3
 8008e54:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8008e58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e60:	f7f7 fbda 	bl	8000618 <__aeabi_dmul>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4614      	mov	r4, r2
 8008e6a:	461d      	mov	r5, r3
 8008e6c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008e70:	4619      	mov	r1, r3
 8008e72:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008e7e:	f7f7 fbcb 	bl	8000618 <__aeabi_dmul>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4620      	mov	r0, r4
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f7f7 fa0f 	bl	80002ac <__adddf3>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4610      	mov	r0, r2
 8008e94:	4619      	mov	r1, r3
 8008e96:	f04f 0200 	mov.w	r2, #0
 8008e9a:	4b6e      	ldr	r3, [pc, #440]	@ (8009054 <sdp4_deep_initialize+0x128c>)
 8008e9c:	f7f7 fbbc 	bl	8000618 <__aeabi_dmul>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4640      	mov	r0, r8
 8008ea6:	4649      	mov	r1, r9
 8008ea8:	f7f7 f9fe 	bl	80002a8 <__aeabi_dsub>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	4659      	mov	r1, fp
 8008eb4:	f7f7 fbb0 	bl	8000618 <__aeabi_dmul>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8008ec4:	461c      	mov	r4, r3
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ece:	f7f7 f9ed 	bl	80002ac <__adddf3>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	e944 2302 	strd	r2, r3, [r4, #-8]
		z13=-6*a3*a6+deep_arg->eosq*(-24*x2*x8-6*x4*x6);
 8008eda:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008ede:	4619      	mov	r1, r3
 8008ee0:	f04f 0200 	mov.w	r2, #0
 8008ee4:	4b5c      	ldr	r3, [pc, #368]	@ (8009058 <sdp4_deep_initialize+0x1290>)
 8008ee6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008eea:	f7f7 fb95 	bl	8000618 <__aeabi_dmul>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8008efa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008efe:	f7f7 fb8b 	bl	8000618 <__aeabi_dmul>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4692      	mov	sl, r2
 8008f08:	469b      	mov	fp, r3
 8008f0a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008f0e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f18:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	f04f 0200 	mov.w	r2, #0
 8008f22:	4b4b      	ldr	r3, [pc, #300]	@ (8009050 <sdp4_deep_initialize+0x1288>)
 8008f24:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008f28:	f7f7 fb76 	bl	8000618 <__aeabi_dmul>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4610      	mov	r0, r2
 8008f32:	4619      	mov	r1, r3
 8008f34:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8008f38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f3c:	f7f7 fb6c 	bl	8000618 <__aeabi_dmul>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4614      	mov	r4, r2
 8008f46:	461d      	mov	r5, r3
 8008f48:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	f04f 0200 	mov.w	r2, #0
 8008f52:	4b40      	ldr	r3, [pc, #256]	@ (8009054 <sdp4_deep_initialize+0x128c>)
 8008f54:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008f58:	f7f7 fb5e 	bl	8000618 <__aeabi_dmul>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4610      	mov	r0, r2
 8008f62:	4619      	mov	r1, r3
 8008f64:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8008f68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f6c:	f7f7 fb54 	bl	8000618 <__aeabi_dmul>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4620      	mov	r0, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	f7f7 f996 	bl	80002a8 <__aeabi_dsub>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4640      	mov	r0, r8
 8008f82:	4649      	mov	r1, r9
 8008f84:	f7f7 fb48 	bl	8000618 <__aeabi_dmul>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	4619      	mov	r1, r3
 8008f90:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8008f94:	461c      	mov	r4, r3
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4650      	mov	r0, sl
 8008f9c:	4659      	mov	r1, fp
 8008f9e:	f7f7 f985 	bl	80002ac <__adddf3>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	e9c4 2300 	strd	r2, r3, [r4]
		z21=6*a2*a5+deep_arg->eosq*(24*x1*x5-6*x3*x7);
 8008faa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8008fae:	4619      	mov	r1, r3
 8008fb0:	f04f 0200 	mov.w	r2, #0
 8008fb4:	4b27      	ldr	r3, [pc, #156]	@ (8009054 <sdp4_deep_initialize+0x128c>)
 8008fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fba:	f7f7 fb2d 	bl	8000618 <__aeabi_dmul>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	f7f7 fb23 	bl	8000618 <__aeabi_dmul>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4692      	mov	sl, r2
 8008fd8:	469b      	mov	fp, r3
 8008fda:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008fde:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fe8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008fec:	4619      	mov	r1, r3
 8008fee:	f04f 0200 	mov.w	r2, #0
 8008ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800905c <sdp4_deep_initialize+0x1294>)
 8008ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ff8:	f7f7 fb0e 	bl	8000618 <__aeabi_dmul>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	4610      	mov	r0, r2
 8009002:	4619      	mov	r1, r3
 8009004:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8009008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900c:	f7f7 fb04 	bl	8000618 <__aeabi_dmul>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4614      	mov	r4, r2
 8009016:	461d      	mov	r5, r3
 8009018:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800901c:	4619      	mov	r1, r3
 800901e:	f04f 0200 	mov.w	r2, #0
 8009022:	4b0c      	ldr	r3, [pc, #48]	@ (8009054 <sdp4_deep_initialize+0x128c>)
 8009024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009028:	f7f7 faf6 	bl	8000618 <__aeabi_dmul>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	4610      	mov	r0, r2
 8009032:	4619      	mov	r1, r3
 8009034:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	f7f7 faec 	bl	8000618 <__aeabi_dmul>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4620      	mov	r0, r4
 8009046:	4629      	mov	r1, r5
 8009048:	f7f7 f92e 	bl	80002a8 <__aeabi_dsub>
 800904c:	e008      	b.n	8009060 <sdp4_deep_initialize+0x1298>
 800904e:	bf00      	nop
 8009050:	c0380000 	.word	0xc0380000
 8009054:	40180000 	.word	0x40180000
 8009058:	c0180000 	.word	0xc0180000
 800905c:	40380000 	.word	0x40380000
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4640      	mov	r0, r8
 8009066:	4649      	mov	r1, r9
 8009068:	f7f7 fad6 	bl	8000618 <__aeabi_dmul>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4610      	mov	r0, r2
 8009072:	4619      	mov	r1, r3
 8009074:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8009078:	461c      	mov	r4, r3
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	4650      	mov	r0, sl
 8009080:	4659      	mov	r1, fp
 8009082:	f7f7 f913 	bl	80002ac <__adddf3>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	e944 2302 	strd	r2, r3, [r4, #-8]
		z22=6*(a4*a5+a2*a6)+deep_arg->eosq*(24*(x2*x5+x1*x6)-6*(x4*x7+x3*x8));
 800908e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009092:	4619      	mov	r1, r3
 8009094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80090a0:	f7f7 faba 	bl	8000618 <__aeabi_dmul>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4614      	mov	r4, r2
 80090aa:	461d      	mov	r5, r3
 80090ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80090b0:	4619      	mov	r1, r3
 80090b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80090b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090be:	f7f7 faab 	bl	8000618 <__aeabi_dmul>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4620      	mov	r0, r4
 80090c8:	4629      	mov	r1, r5
 80090ca:	f7f7 f8ef 	bl	80002ac <__adddf3>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	4610      	mov	r0, r2
 80090d4:	4619      	mov	r1, r3
 80090d6:	f04f 0200 	mov.w	r2, #0
 80090da:	4bcf      	ldr	r3, [pc, #828]	@ (8009418 <sdp4_deep_initialize+0x1650>)
 80090dc:	f7f7 fa9c 	bl	8000618 <__aeabi_dmul>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	e9c7 2300 	strd	r2, r3, [r7]
 80090e8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80090ec:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80090f6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80090fa:	4619      	mov	r1, r3
 80090fc:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009108:	f7f7 fa86 	bl	8000618 <__aeabi_dmul>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4614      	mov	r4, r2
 8009112:	461d      	mov	r5, r3
 8009114:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009118:	4619      	mov	r1, r3
 800911a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800911e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009126:	f7f7 fa77 	bl	8000618 <__aeabi_dmul>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4620      	mov	r0, r4
 8009130:	4629      	mov	r1, r5
 8009132:	f7f7 f8bb 	bl	80002ac <__adddf3>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4610      	mov	r0, r2
 800913c:	4619      	mov	r1, r3
 800913e:	f04f 0200 	mov.w	r2, #0
 8009142:	4bb6      	ldr	r3, [pc, #728]	@ (800941c <sdp4_deep_initialize+0x1654>)
 8009144:	f7f7 fa68 	bl	8000618 <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4690      	mov	r8, r2
 800914e:	4699      	mov	r9, r3
 8009150:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009154:	4619      	mov	r1, r3
 8009156:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009162:	f7f7 fa59 	bl	8000618 <__aeabi_dmul>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	4614      	mov	r4, r2
 800916c:	461d      	mov	r5, r3
 800916e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009172:	4619      	mov	r1, r3
 8009174:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8009178:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800917c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009180:	f7f7 fa4a 	bl	8000618 <__aeabi_dmul>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4620      	mov	r0, r4
 800918a:	4629      	mov	r1, r5
 800918c:	f7f7 f88e 	bl	80002ac <__adddf3>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4610      	mov	r0, r2
 8009196:	4619      	mov	r1, r3
 8009198:	f04f 0200 	mov.w	r2, #0
 800919c:	4b9e      	ldr	r3, [pc, #632]	@ (8009418 <sdp4_deep_initialize+0x1650>)
 800919e:	f7f7 fa3b 	bl	8000618 <__aeabi_dmul>
 80091a2:	4602      	mov	r2, r0
 80091a4:	460b      	mov	r3, r1
 80091a6:	4640      	mov	r0, r8
 80091a8:	4649      	mov	r1, r9
 80091aa:	f7f7 f87d 	bl	80002a8 <__aeabi_dsub>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4650      	mov	r0, sl
 80091b4:	4659      	mov	r1, fp
 80091b6:	f7f7 fa2f 	bl	8000618 <__aeabi_dmul>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	4610      	mov	r0, r2
 80091c0:	4619      	mov	r1, r3
 80091c2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80091c6:	461c      	mov	r4, r3
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091d0:	f7f7 f86c 	bl	80002ac <__adddf3>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	e9c4 2300 	strd	r2, r3, [r4]
		z23=6*a4*a6+deep_arg->eosq*(24*x2*x6-6*x4*x8);
 80091dc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80091e0:	4619      	mov	r1, r3
 80091e2:	f04f 0200 	mov.w	r2, #0
 80091e6:	4b8c      	ldr	r3, [pc, #560]	@ (8009418 <sdp4_deep_initialize+0x1650>)
 80091e8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80091ec:	f7f7 fa14 	bl	8000618 <__aeabi_dmul>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4610      	mov	r0, r2
 80091f6:	4619      	mov	r1, r3
 80091f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80091fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009200:	f7f7 fa0a 	bl	8000618 <__aeabi_dmul>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4692      	mov	sl, r2
 800920a:	469b      	mov	fp, r3
 800920c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009210:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	e9d3 8900 	ldrd	r8, r9, [r3]
 800921a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800921e:	4619      	mov	r1, r3
 8009220:	f04f 0200 	mov.w	r2, #0
 8009224:	4b7d      	ldr	r3, [pc, #500]	@ (800941c <sdp4_deep_initialize+0x1654>)
 8009226:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800922a:	f7f7 f9f5 	bl	8000618 <__aeabi_dmul>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	4610      	mov	r0, r2
 8009234:	4619      	mov	r1, r3
 8009236:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800923a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800923e:	f7f7 f9eb 	bl	8000618 <__aeabi_dmul>
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	4614      	mov	r4, r2
 8009248:	461d      	mov	r5, r3
 800924a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800924e:	4619      	mov	r1, r3
 8009250:	f04f 0200 	mov.w	r2, #0
 8009254:	4b70      	ldr	r3, [pc, #448]	@ (8009418 <sdp4_deep_initialize+0x1650>)
 8009256:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800925a:	f7f7 f9dd 	bl	8000618 <__aeabi_dmul>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4610      	mov	r0, r2
 8009264:	4619      	mov	r1, r3
 8009266:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800926a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800926e:	f7f7 f9d3 	bl	8000618 <__aeabi_dmul>
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	4620      	mov	r0, r4
 8009278:	4629      	mov	r1, r5
 800927a:	f7f7 f815 	bl	80002a8 <__aeabi_dsub>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	4640      	mov	r0, r8
 8009284:	4649      	mov	r1, r9
 8009286:	f7f7 f9c7 	bl	8000618 <__aeabi_dmul>
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	4610      	mov	r0, r2
 8009290:	4619      	mov	r1, r3
 8009292:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8009296:	461c      	mov	r4, r3
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4650      	mov	r0, sl
 800929e:	4659      	mov	r1, fp
 80092a0:	f7f7 f804 	bl	80002ac <__adddf3>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	e944 2302 	strd	r2, r3, [r4, #-8]
		z1=z1+z1+deep_arg->betao2*z31;
 80092ac:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80092b0:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	f7f6 fff8 	bl	80002ac <__adddf3>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4690      	mov	r8, r2
 80092c2:	4699      	mov	r9, r3
 80092c4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80092c8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80092d2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80092d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092da:	f7f7 f99d 	bl	8000618 <__aeabi_dmul>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4610      	mov	r0, r2
 80092e4:	4619      	mov	r1, r3
 80092e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80092ea:	461c      	mov	r4, r3
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	4640      	mov	r0, r8
 80092f2:	4649      	mov	r1, r9
 80092f4:	f7f6 ffda 	bl	80002ac <__adddf3>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	e944 2302 	strd	r2, r3, [r4, #-8]
		z2=z2+z2+deep_arg->betao2*z32;
 8009300:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8009304:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	f7f6 ffce 	bl	80002ac <__adddf3>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4690      	mov	r8, r2
 8009316:	4699      	mov	r9, r3
 8009318:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800931c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8009326:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800932a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800932e:	f7f7 f973 	bl	8000618 <__aeabi_dmul>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	4610      	mov	r0, r2
 8009338:	4619      	mov	r1, r3
 800933a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800933e:	461c      	mov	r4, r3
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	4640      	mov	r0, r8
 8009346:	4649      	mov	r1, r9
 8009348:	f7f6 ffb0 	bl	80002ac <__adddf3>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	e9c4 2300 	strd	r2, r3, [r4]
		z3=z3+z3+deep_arg->betao2*z33;
 8009354:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8009358:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	f7f6 ffa4 	bl	80002ac <__adddf3>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4690      	mov	r8, r2
 800936a:	4699      	mov	r9, r3
 800936c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009370:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800937a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009382:	f7f7 f949 	bl	8000618 <__aeabi_dmul>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4610      	mov	r0, r2
 800938c:	4619      	mov	r1, r3
 800938e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8009392:	461c      	mov	r4, r3
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	4640      	mov	r0, r8
 800939a:	4649      	mov	r1, r9
 800939c:	f7f6 ff86 	bl	80002ac <__adddf3>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	e944 2302 	strd	r2, r3, [r4, #-8]
		s3=cc*xnoi;
 80093a8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80093ac:	461c      	mov	r4, r3
 80093ae:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80093b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093b6:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 80093ba:	f7f7 f92d 	bl	8000618 <__aeabi_dmul>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	e9c4 2300 	strd	r2, r3, [r4]
		s2=-0.5*s3/deep_arg->betao;
 80093c6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80093ca:	4619      	mov	r1, r3
 80093cc:	f04f 0200 	mov.w	r2, #0
 80093d0:	4b13      	ldr	r3, [pc, #76]	@ (8009420 <sdp4_deep_initialize+0x1658>)
 80093d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093d6:	f7f7 f91f 	bl	8000618 <__aeabi_dmul>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4614      	mov	r4, r2
 80093e0:	461d      	mov	r5, r3
 80093e2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80093e6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80093f0:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80093f4:	460e      	mov	r6, r1
 80093f6:	4620      	mov	r0, r4
 80093f8:	4629      	mov	r1, r5
 80093fa:	f7f7 fa37 	bl	800086c <__aeabi_ddiv>
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
 8009402:	e946 2302 	strd	r2, r3, [r6, #-8]
		s4=s3*deep_arg->betao;
 8009406:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800940a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8009414:	e006      	b.n	8009424 <sdp4_deep_initialize+0x165c>
 8009416:	bf00      	nop
 8009418:	40180000 	.word	0x40180000
 800941c:	40380000 	.word	0x40380000
 8009420:	bfe00000 	.word	0xbfe00000
 8009424:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009428:	461d      	mov	r5, r3
 800942a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800942e:	461c      	mov	r4, r3
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009438:	f7f7 f8ee 	bl	8000618 <__aeabi_dmul>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	e9c5 2300 	strd	r2, r3, [r5]
		s1=-15*eq*s4;
 8009444:	f04f 0200 	mov.w	r2, #0
 8009448:	4bc8      	ldr	r3, [pc, #800]	@ (800976c <sdp4_deep_initialize+0x19a4>)
 800944a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800944e:	f7f7 f8e3 	bl	8000618 <__aeabi_dmul>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4614      	mov	r4, r2
 8009458:	461d      	mov	r5, r3
 800945a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800945e:	461e      	mov	r6, r3
 8009460:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009464:	4619      	mov	r1, r3
 8009466:	4622      	mov	r2, r4
 8009468:	462b      	mov	r3, r5
 800946a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800946e:	f7f7 f8d3 	bl	8000618 <__aeabi_dmul>
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	e946 2302 	strd	r2, r3, [r6, #-8]
		s5=x1*x3+x2*x4;
 800947a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800947e:	4619      	mov	r1, r3
 8009480:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800948c:	f7f7 f8c4 	bl	8000618 <__aeabi_dmul>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4690      	mov	r8, r2
 8009496:	4699      	mov	r9, r3
 8009498:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800949c:	4619      	mov	r1, r3
 800949e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80094a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094a6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80094aa:	f7f7 f8b5 	bl	8000618 <__aeabi_dmul>
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	4610      	mov	r0, r2
 80094b4:	4619      	mov	r1, r3
 80094b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80094ba:	461c      	mov	r4, r3
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	4640      	mov	r0, r8
 80094c2:	4649      	mov	r1, r9
 80094c4:	f7f6 fef2 	bl	80002ac <__adddf3>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	e9c4 2300 	strd	r2, r3, [r4]
		s6=x2*x3+x1*x4;
 80094d0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80094d4:	4619      	mov	r1, r3
 80094d6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80094da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094de:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80094e2:	f7f7 f899 	bl	8000618 <__aeabi_dmul>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4690      	mov	r8, r2
 80094ec:	4699      	mov	r9, r3
 80094ee:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80094f2:	4619      	mov	r1, r3
 80094f4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80094f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009500:	f7f7 f88a 	bl	8000618 <__aeabi_dmul>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	4610      	mov	r0, r2
 800950a:	4619      	mov	r1, r3
 800950c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009510:	461c      	mov	r4, r3
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	4640      	mov	r0, r8
 8009518:	4649      	mov	r1, r9
 800951a:	f7f6 fec7 	bl	80002ac <__adddf3>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	e944 2302 	strd	r2, r3, [r4, #-8]
		s7=x2*x4-x1*x3;
 8009526:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800952a:	4619      	mov	r1, r3
 800952c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009530:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009534:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009538:	f7f7 f86e 	bl	8000618 <__aeabi_dmul>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4690      	mov	r8, r2
 8009542:	4699      	mov	r9, r3
 8009544:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009548:	4619      	mov	r1, r3
 800954a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009556:	f7f7 f85f 	bl	8000618 <__aeabi_dmul>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	4610      	mov	r0, r2
 8009560:	4619      	mov	r1, r3
 8009562:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009566:	461c      	mov	r4, r3
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4640      	mov	r0, r8
 800956e:	4649      	mov	r1, r9
 8009570:	f7f6 fe9a 	bl	80002a8 <__aeabi_dsub>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	e9c4 2300 	strd	r2, r3, [r4]
		se=s1*zn*s5;
 800957c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009580:	4619      	mov	r1, r3
 8009582:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8009586:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800958a:	f7f7 f845 	bl	8000618 <__aeabi_dmul>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4614      	mov	r4, r2
 8009594:	461d      	mov	r5, r3
 8009596:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800959a:	461e      	mov	r6, r3
 800959c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80095a0:	4619      	mov	r1, r3
 80095a2:	4622      	mov	r2, r4
 80095a4:	462b      	mov	r3, r5
 80095a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095aa:	f7f7 f835 	bl	8000618 <__aeabi_dmul>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	e946 2302 	strd	r2, r3, [r6, #-8]
		si=s2*zn*(z11+z13);
 80095b6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80095ba:	4619      	mov	r1, r3
 80095bc:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 80095c0:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80095c4:	f7f7 f828 	bl	8000618 <__aeabi_dmul>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4690      	mov	r8, r2
 80095ce:	4699      	mov	r9, r3
 80095d0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80095d4:	4619      	mov	r1, r3
 80095d6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095e2:	f7f6 fe63 	bl	80002ac <__adddf3>
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	4610      	mov	r0, r2
 80095ec:	4619      	mov	r1, r3
 80095ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095f2:	461c      	mov	r4, r3
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4640      	mov	r0, r8
 80095fa:	4649      	mov	r1, r9
 80095fc:	f7f7 f80c 	bl	8000618 <__aeabi_dmul>
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	e9c4 2300 	strd	r2, r3, [r4]
		sl=-zn*s3*(z1+z3-14-6*deep_arg->eosq);
 8009608:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800960c:	613b      	str	r3, [r7, #16]
 800960e:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8009612:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8009616:	617b      	str	r3, [r7, #20]
 8009618:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009624:	f7f6 fff8 	bl	8000618 <__aeabi_dmul>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	4690      	mov	r8, r2
 800962e:	4699      	mov	r9, r3
 8009630:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009634:	4619      	mov	r1, r3
 8009636:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800963a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800963e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009642:	f7f6 fe33 	bl	80002ac <__adddf3>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	4610      	mov	r0, r2
 800964c:	4619      	mov	r1, r3
 800964e:	f04f 0200 	mov.w	r2, #0
 8009652:	4b47      	ldr	r3, [pc, #284]	@ (8009770 <sdp4_deep_initialize+0x19a8>)
 8009654:	f7f6 fe28 	bl	80002a8 <__aeabi_dsub>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4614      	mov	r4, r2
 800965e:	461d      	mov	r5, r3
 8009660:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009664:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800966e:	f04f 0200 	mov.w	r2, #0
 8009672:	4b40      	ldr	r3, [pc, #256]	@ (8009774 <sdp4_deep_initialize+0x19ac>)
 8009674:	f7f6 ffd0 	bl	8000618 <__aeabi_dmul>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4620      	mov	r0, r4
 800967e:	4629      	mov	r1, r5
 8009680:	f7f6 fe12 	bl	80002a8 <__aeabi_dsub>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	4610      	mov	r0, r2
 800968a:	4619      	mov	r1, r3
 800968c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009690:	461c      	mov	r4, r3
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	4640      	mov	r0, r8
 8009698:	4649      	mov	r1, r9
 800969a:	f7f6 ffbd 	bl	8000618 <__aeabi_dmul>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	e944 2302 	strd	r2, r3, [r4, #-8]
		sgh=s4*zn*(z31+z33-6);
 80096a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80096aa:	4619      	mov	r1, r3
 80096ac:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 80096b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096b4:	f7f6 ffb0 	bl	8000618 <__aeabi_dmul>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4690      	mov	r8, r2
 80096be:	4699      	mov	r9, r3
 80096c0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80096c4:	4619      	mov	r1, r3
 80096c6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80096ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096d2:	f7f6 fdeb 	bl	80002ac <__adddf3>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4610      	mov	r0, r2
 80096dc:	4619      	mov	r1, r3
 80096de:	f04f 0200 	mov.w	r2, #0
 80096e2:	4b24      	ldr	r3, [pc, #144]	@ (8009774 <sdp4_deep_initialize+0x19ac>)
 80096e4:	f7f6 fde0 	bl	80002a8 <__aeabi_dsub>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	4610      	mov	r0, r2
 80096ee:	4619      	mov	r1, r3
 80096f0:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80096f4:	461c      	mov	r4, r3
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4640      	mov	r0, r8
 80096fc:	4649      	mov	r1, r9
 80096fe:	f7f6 ff8b 	bl	8000618 <__aeabi_dmul>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	e9c4 2300 	strd	r2, r3, [r4]
		sh=-zn*s2*(z21+z23);
 800970a:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800970e:	60bb      	str	r3, [r7, #8]
 8009710:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8009714:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8009718:	60fb      	str	r3, [r7, #12]
 800971a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800971e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009722:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009726:	f7f6 ff77 	bl	8000618 <__aeabi_dmul>
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	4614      	mov	r4, r2
 8009730:	461d      	mov	r5, r3
 8009732:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8009736:	4619      	mov	r1, r3
 8009738:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800973c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009740:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009744:	f7f6 fdb2 	bl	80002ac <__adddf3>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4620      	mov	r0, r4
 800974e:	4629      	mov	r1, r5
 8009750:	f7f6 ff62 	bl	8000618 <__aeabi_dmul>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358

		if (m->xqncl<5.2359877E-2)
 800975c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009760:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	@ 0xd8
 800976a:	e005      	b.n	8009778 <sdp4_deep_initialize+0x19b0>
 800976c:	c02e0000 	.word	0xc02e0000
 8009770:	402c0000 	.word	0x402c0000
 8009774:	40180000 	.word	0x40180000
 8009778:	a3e8      	add	r3, pc, #928	@ (adr r3, 8009b1c <sdp4_deep_initialize+0x1d54>)
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	f7f7 f9bd 	bl	8000afc <__aeabi_dcmplt>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d005      	beq.n	8009794 <sdp4_deep_initialize+0x19cc>
			sh=0;
 8009788:	f04f 0200 	mov.w	r2, #0
 800978c:	f04f 0300 	mov.w	r3, #0
 8009790:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358

		m->ee2=2*s1*s6;
 8009794:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009798:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	f7f6 fd84 	bl	80002ac <__adddf3>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4610      	mov	r0, r2
 80097aa:	4619      	mov	r1, r3
 80097ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097b4:	f7f6 ff30 	bl	8000618 <__aeabi_dmul>
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	4610      	mov	r0, r2
 80097be:	4619      	mov	r1, r3
 80097c0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80097c4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	e9c3 013e 	strd	r0, r1, [r3, #248]	@ 0xf8
		m->e3=2*s1*s7;
 80097ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80097d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	f7f6 fd67 	bl	80002ac <__adddf3>
 80097de:	4602      	mov	r2, r0
 80097e0:	460b      	mov	r3, r1
 80097e2:	4610      	mov	r0, r2
 80097e4:	4619      	mov	r1, r3
 80097e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80097ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ee:	f7f6 ff13 	bl	8000618 <__aeabi_dmul>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4610      	mov	r0, r2
 80097f8:	4619      	mov	r1, r3
 80097fa:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80097fe:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	e9c3 0140 	strd	r0, r1, [r3, #256]	@ 0x100
		m->xi2=2*s2*z12;
 8009808:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800980c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	f7f6 fd4a 	bl	80002ac <__adddf3>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4610      	mov	r0, r2
 800981e:	4619      	mov	r1, r3
 8009820:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009824:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009828:	f7f6 fef6 	bl	8000618 <__aeabi_dmul>
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	4610      	mov	r0, r2
 8009832:	4619      	mov	r1, r3
 8009834:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009838:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	e9c3 0142 	strd	r0, r1, [r3, #264]	@ 0x108
		m->xi3=2*s2*(z13-z11);
 8009842:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8009846:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800984a:	4602      	mov	r2, r0
 800984c:	460b      	mov	r3, r1
 800984e:	f7f6 fd2d 	bl	80002ac <__adddf3>
 8009852:	4602      	mov	r2, r0
 8009854:	460b      	mov	r3, r1
 8009856:	4614      	mov	r4, r2
 8009858:	461d      	mov	r5, r3
 800985a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800985e:	4619      	mov	r1, r3
 8009860:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800986c:	f7f6 fd1c 	bl	80002a8 <__aeabi_dsub>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	4620      	mov	r0, r4
 8009876:	4629      	mov	r1, r5
 8009878:	f7f6 fece 	bl	8000618 <__aeabi_dmul>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4610      	mov	r0, r2
 8009882:	4619      	mov	r1, r3
 8009884:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009888:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	e9c3 015a 	strd	r0, r1, [r3, #360]	@ 0x168
		m->xl2=-2*s3*z2;
 8009892:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8009896:	4619      	mov	r1, r3
 8009898:	f04f 0200 	mov.w	r2, #0
 800989c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80098a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098a4:	f7f6 feb8 	bl	8000618 <__aeabi_dmul>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	4610      	mov	r0, r2
 80098ae:	4619      	mov	r1, r3
 80098b0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 feae 	bl	8000618 <__aeabi_dmul>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4610      	mov	r0, r2
 80098c2:	4619      	mov	r1, r3
 80098c4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80098c8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	e9c3 0144 	strd	r0, r1, [r3, #272]	@ 0x110
		m->xl3=-2*s3*(z3-z1);
 80098d2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80098d6:	4619      	mov	r1, r3
 80098d8:	f04f 0200 	mov.w	r2, #0
 80098dc:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80098e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e4:	f7f6 fe98 	bl	8000618 <__aeabi_dmul>
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	4614      	mov	r4, r2
 80098ee:	461d      	mov	r5, r3
 80098f0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80098f4:	4619      	mov	r1, r3
 80098f6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80098fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098fe:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009902:	f7f6 fcd1 	bl	80002a8 <__aeabi_dsub>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4620      	mov	r0, r4
 800990c:	4629      	mov	r1, r5
 800990e:	f7f6 fe83 	bl	8000618 <__aeabi_dmul>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4610      	mov	r0, r2
 8009918:	4619      	mov	r1, r3
 800991a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800991e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	e9c3 0146 	strd	r0, r1, [r3, #280]	@ 0x118
		m->xl4=-2*s3*(-21-9*deep_arg->eosq)*ze;
 8009928:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800992c:	4619      	mov	r1, r3
 800992e:	f04f 0200 	mov.w	r2, #0
 8009932:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8009936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800993a:	f7f6 fe6d 	bl	8000618 <__aeabi_dmul>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	4614      	mov	r4, r2
 8009944:	461d      	mov	r5, r3
 8009946:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800994a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009954:	f04f 0200 	mov.w	r2, #0
 8009958:	4b6d      	ldr	r3, [pc, #436]	@ (8009b10 <sdp4_deep_initialize+0x1d48>)
 800995a:	f7f6 fe5d 	bl	8000618 <__aeabi_dmul>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	f04f 0000 	mov.w	r0, #0
 8009966:	496b      	ldr	r1, [pc, #428]	@ (8009b14 <sdp4_deep_initialize+0x1d4c>)
 8009968:	f7f6 fc9e 	bl	80002a8 <__aeabi_dsub>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4620      	mov	r0, r4
 8009972:	4629      	mov	r1, r5
 8009974:	f7f6 fe50 	bl	8000618 <__aeabi_dmul>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4610      	mov	r0, r2
 800997e:	4619      	mov	r1, r3
 8009980:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8009984:	f7f6 fe48 	bl	8000618 <__aeabi_dmul>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	4610      	mov	r0, r2
 800998e:	4619      	mov	r1, r3
 8009990:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009994:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	e9c3 0148 	strd	r0, r1, [r3, #288]	@ 0x120
		m->xgh2=2*s4*z32;
 800999e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80099a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	f7f6 fc7f 	bl	80002ac <__adddf3>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4610      	mov	r0, r2
 80099b4:	4619      	mov	r1, r3
 80099b6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80099ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099be:	f7f6 fe2b 	bl	8000618 <__aeabi_dmul>
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	4610      	mov	r0, r2
 80099c8:	4619      	mov	r1, r3
 80099ca:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80099ce:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	e9c3 014a 	strd	r0, r1, [r3, #296]	@ 0x128
		m->xgh3=2*s4*(z33-z31);
 80099d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80099dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	f7f6 fc62 	bl	80002ac <__adddf3>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	4614      	mov	r4, r2
 80099ee:	461d      	mov	r5, r3
 80099f0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80099f4:	4619      	mov	r1, r3
 80099f6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a02:	f7f6 fc51 	bl	80002a8 <__aeabi_dsub>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	f7f6 fe03 	bl	8000618 <__aeabi_dmul>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	4610      	mov	r0, r2
 8009a18:	4619      	mov	r1, r3
 8009a1a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009a1e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	e9c3 014c 	strd	r0, r1, [r3, #304]	@ 0x130
		m->xgh4=-18*s4*ze;
 8009a28:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	f04f 0200 	mov.w	r2, #0
 8009a32:	4b39      	ldr	r3, [pc, #228]	@ (8009b18 <sdp4_deep_initialize+0x1d50>)
 8009a34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a38:	f7f6 fdee 	bl	8000618 <__aeabi_dmul>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	460b      	mov	r3, r1
 8009a40:	4610      	mov	r0, r2
 8009a42:	4619      	mov	r1, r3
 8009a44:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8009a48:	f7f6 fde6 	bl	8000618 <__aeabi_dmul>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4610      	mov	r0, r2
 8009a52:	4619      	mov	r1, r3
 8009a54:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009a58:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	e9c3 014e 	strd	r0, r1, [r3, #312]	@ 0x138
		m->xh2=-2*s2*z22;
 8009a62:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8009a66:	4619      	mov	r1, r3
 8009a68:	f04f 0200 	mov.w	r2, #0
 8009a6c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8009a70:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009a74:	f7f6 fdd0 	bl	8000618 <__aeabi_dmul>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	4619      	mov	r1, r3
 8009a80:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f7f6 fdc6 	bl	8000618 <__aeabi_dmul>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4610      	mov	r0, r2
 8009a92:	4619      	mov	r1, r3
 8009a94:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009a98:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	e9c3 0150 	strd	r0, r1, [r3, #320]	@ 0x140
		m->xh3=-2*s2*(z23-z21);
 8009aa2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	f04f 0200 	mov.w	r2, #0
 8009aac:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8009ab0:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009ab4:	f7f6 fdb0 	bl	8000618 <__aeabi_dmul>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	4614      	mov	r4, r2
 8009abe:	461d      	mov	r5, r3
 8009ac0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8009aca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ace:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009ad2:	f7f6 fbe9 	bl	80002a8 <__aeabi_dsub>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4620      	mov	r0, r4
 8009adc:	4629      	mov	r1, r5
 8009ade:	f7f6 fd9b 	bl	8000618 <__aeabi_dmul>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	4619      	mov	r1, r3
 8009aea:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009aee:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	e9c3 0152 	strd	r0, r1, [r3, #328]	@ 0x148

		//Skip lunar terms?
		if (m->lunarTermsDone) {
 8009af8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009afc:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f040 81a7 	bne.w	8009e58 <sdp4_deep_initialize+0x2090>
 8009b0a:	e00b      	b.n	8009b24 <sdp4_deep_initialize+0x1d5c>
 8009b0c:	f3af 8000 	nop.w
 8009b10:	40220000 	.word	0x40220000
 8009b14:	c0350000 	.word	0xc0350000
 8009b18:	c0320000 	.word	0xc0320000
 8009b1c:	eeacd7a0 	.word	0xeeacd7a0
 8009b20:	3faacee9 	.word	0x3faacee9
			break;
		}

		/* Do lunar terms */
		m->sse=se;
 8009b24:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009b28:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009b2c:	6819      	ldr	r1, [r3, #0]
 8009b2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009b32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b36:	e9c1 2354 	strd	r2, r3, [r1, #336]	@ 0x150
		m->ssi=si;
 8009b3a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009b3e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009b42:	6819      	ldr	r1, [r3, #0]
 8009b44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	e9c1 2356 	strd	r2, r3, [r1, #344]	@ 0x158
		m->ssl=sl;
 8009b50:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009b54:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009b58:	6819      	ldr	r1, [r3, #0]
 8009b5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b62:	e9c1 2374 	strd	r2, r3, [r1, #464]	@ 0x1d0
		m->ssh=sh/deep_arg->sinio;
 8009b66:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009b6a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009b74:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
 8009b78:	f7f6 fe78 	bl	800086c <__aeabi_ddiv>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4610      	mov	r0, r2
 8009b82:	4619      	mov	r1, r3
 8009b84:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009b88:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	e9c3 0176 	strd	r0, r1, [r3, #472]	@ 0x1d8
		m->ssg=sgh-deep_arg->cosio*m->ssh;
 8009b92:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009b96:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009ba0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009ba4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 8009bae:	f7f6 fd33 	bl	8000618 <__aeabi_dmul>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	4619      	mov	r1, r3
 8009bba:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8009bbe:	461c      	mov	r4, r3
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009bc8:	f7f6 fb6e 	bl	80002a8 <__aeabi_dsub>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	460b      	mov	r3, r1
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009bd8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	e9c3 0158 	strd	r0, r1, [r3, #352]	@ 0x160
		m->se2=m->ee2;
 8009be2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009be6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	@ 0xf8
 8009bf0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009bf4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	e9c3 015c 	strd	r0, r1, [r3, #368]	@ 0x170
		m->si2=m->xi2;
 8009bfe:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c02:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	@ 0x108
 8009c0c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c10:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	e9c3 015e 	strd	r0, r1, [r3, #376]	@ 0x178
		m->sl2=m->xl2;
 8009c1a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c1e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	@ 0x110
 8009c28:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c2c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	e9c3 0160 	strd	r0, r1, [r3, #384]	@ 0x180
		m->sgh2=m->xgh2;
 8009c36:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c3a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 8009c44:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c48:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	e9c3 0162 	strd	r0, r1, [r3, #392]	@ 0x188
		m->sh2=m->xh2;
 8009c52:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c56:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	@ 0x140
 8009c60:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c64:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	e9c3 0164 	strd	r0, r1, [r3, #400]	@ 0x190
		m->se3=m->e3;
 8009c6e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c72:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 8009c7c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c80:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	e9c3 0166 	strd	r0, r1, [r3, #408]	@ 0x198
		m->si3=m->xi3;
 8009c8a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c8e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	@ 0x168
 8009c98:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c9c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	e9c3 0168 	strd	r0, r1, [r3, #416]	@ 0x1a0
		m->sl3=m->xl3;
 8009ca6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009caa:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	@ 0x118
 8009cb4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009cb8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	e9c3 016a 	strd	r0, r1, [r3, #424]	@ 0x1a8
		m->sgh3=m->xgh3;
 8009cc2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009cc6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	@ 0x130
 8009cd0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009cd4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	e9c3 016c 	strd	r0, r1, [r3, #432]	@ 0x1b0
		m->sh3=m->xh3;
 8009cde:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009ce2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	@ 0x148
 8009cec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009cf0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	e9c3 016e 	strd	r0, r1, [r3, #440]	@ 0x1b8
		m->sl4=m->xl4;
 8009cfa:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009cfe:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	@ 0x120
 8009d08:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009d0c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	e9c3 0170 	strd	r0, r1, [r3, #448]	@ 0x1c0
		m->sgh4=m->xgh4;
 8009d16:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009d1a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	@ 0x138
 8009d24:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009d28:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	e9c3 0172 	strd	r0, r1, [r3, #456]	@ 0x1c8
		zcosg=m->zcosgl;
 8009d32:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009d36:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	@ 0x298
 8009d40:	e9c7 23b4 	strd	r2, r3, [r7, #720]	@ 0x2d0
		zsing=m->zsingl;
 8009d44:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009d48:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	@ 0x290
 8009d52:	e9c7 23ba 	strd	r2, r3, [r7, #744]	@ 0x2e8
		zcosi=m->zcosil;
 8009d56:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009d5a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	@ 0x2b8
 8009d64:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
		zsini=m->zsinil;
 8009d68:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009d6c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	@ 0x2b0
 8009d76:	e9c7 23b6 	strd	r2, r3, [r7, #728]	@ 0x2d8
		zcosh=m->zcoshl*cosq+m->zsinhl*sinq;
 8009d7a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009d7e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	@ 0x2a8
 8009d88:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8009d8c:	f7f6 fc44 	bl	8000618 <__aeabi_dmul>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	4614      	mov	r4, r2
 8009d96:	461d      	mov	r5, r3
 8009d98:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009d9c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	@ 0x2a0
 8009da6:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 8009daa:	f7f6 fc35 	bl	8000618 <__aeabi_dmul>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	4620      	mov	r0, r4
 8009db4:	4629      	mov	r1, r5
 8009db6:	f7f6 fa79 	bl	80002ac <__adddf3>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
		zsinh=sinq*m->zcoshl-cosq*m->zsinhl;
 8009dc2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009dc6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	@ 0x2a8
 8009dd0:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 8009dd4:	f7f6 fc20 	bl	8000618 <__aeabi_dmul>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4614      	mov	r4, r2
 8009dde:	461d      	mov	r5, r3
 8009de0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009de4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	@ 0x2a0
 8009dee:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8009df2:	f7f6 fc11 	bl	8000618 <__aeabi_dmul>
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	f7f6 fa53 	bl	80002a8 <__aeabi_dsub>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
		zn=ZNL;
 8009e0a:	a30d      	add	r3, pc, #52	@ (adr r3, 8009e40 <sdp4_deep_initialize+0x2078>)
 8009e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e10:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
		cc=C1L;
 8009e14:	a30c      	add	r3, pc, #48	@ (adr r3, 8009e48 <sdp4_deep_initialize+0x2080>)
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
		ze=ZEL;
 8009e1e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009e50 <sdp4_deep_initialize+0x2088>)
 8009e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e24:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
		/* zmo=m->zmol; */
		//Set lunarTermsDone flag:
		m->lunarTermsDone = true;
 8009e28:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009e2c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	2301      	movs	r3, #1
 8009e34:	6013      	str	r3, [r2, #0]
		a1=zcosg*zcosh+zsing*zcosi*zsinh;
 8009e36:	f7fe bae9 	b.w	800840c <sdp4_deep_initialize+0x644>
 8009e3a:	bf00      	nop
 8009e3c:	f3af 8000 	nop.w
 8009e40:	de6329c8 	.word	0xde6329c8
 8009e44:	3f24c16a 	.word	0x3f24c16a
 8009e48:	e793194b 	.word	0xe793194b
 8009e4c:	3ea0186c 	.word	0x3ea0186c
 8009e50:	5119ce07 	.word	0x5119ce07
 8009e54:	3fac1bda 	.word	0x3fac1bda
			break;
 8009e58:	bf00      	nop
	}

	m->sse=m->sse+se;
 8009e5a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009e5e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	@ 0x150
 8009e68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009e6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e70:	f7f6 fa1c 	bl	80002ac <__adddf3>
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 8009e7c:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 8009e80:	6809      	ldr	r1, [r1, #0]
 8009e82:	e9c1 2354 	strd	r2, r3, [r1, #336]	@ 0x150
	m->ssi=m->ssi+si;
 8009e86:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009e8a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	e9d3 0156 	ldrd	r0, r1, [r3, #344]	@ 0x158
 8009e94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f7f6 fa06 	bl	80002ac <__adddf3>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 8009ea8:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 8009eac:	6809      	ldr	r1, [r1, #0]
 8009eae:	e9c1 2356 	strd	r2, r3, [r1, #344]	@ 0x158
	m->ssl=m->ssl+sl;
 8009eb2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009eb6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	@ 0x1d0
 8009ec0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ec4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ec8:	f7f6 f9f0 	bl	80002ac <__adddf3>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 8009ed4:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 8009ed8:	6809      	ldr	r1, [r1, #0]
 8009eda:	e9c1 2374 	strd	r2, r3, [r1, #464]	@ 0x1d0
	m->ssg=m->ssg+sgh-deep_arg->cosio/deep_arg->sinio*sh;
 8009ede:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009ee2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	@ 0x160
 8009eec:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8009ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef4:	f7f6 f9da 	bl	80002ac <__adddf3>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	4614      	mov	r4, r2
 8009efe:	461d      	mov	r5, r3
 8009f00:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009f04:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009f0e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009f12:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009f1c:	f7f6 fca6 	bl	800086c <__aeabi_ddiv>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4610      	mov	r0, r2
 8009f26:	4619      	mov	r1, r3
 8009f28:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8009f2c:	f7f6 fb74 	bl	8000618 <__aeabi_dmul>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4620      	mov	r0, r4
 8009f36:	4629      	mov	r1, r5
 8009f38:	f7f6 f9b6 	bl	80002a8 <__aeabi_dsub>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 8009f44:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 8009f48:	6809      	ldr	r1, [r1, #0]
 8009f4a:	e9c1 2358 	strd	r2, r3, [r1, #352]	@ 0x160
	m->ssh=m->ssh+sh/deep_arg->sinio;
 8009f4e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009f52:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	e9d3 4576 	ldrd	r4, r5, [r3, #472]	@ 0x1d8
 8009f5c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009f60:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009f6a:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
 8009f6e:	f7f6 fc7d 	bl	800086c <__aeabi_ddiv>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4620      	mov	r0, r4
 8009f78:	4629      	mov	r1, r5
 8009f7a:	f7f6 f997 	bl	80002ac <__adddf3>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 8009f86:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 8009f8a:	6809      	ldr	r1, [r1, #0]
 8009f8c:	e9c1 2376 	strd	r2, r3, [r1, #472]	@ 0x1d8

	/* Geopotential resonance initialization for 12 hour orbits */
	m->resonanceFlag = 0;
 8009f90:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009f94:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	605a      	str	r2, [r3, #4]
	m->synchronousFlag = 0;
 8009f9e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009fa2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	609a      	str	r2, [r3, #8]

	if (!((m->xnq<0.0052359877) && (m->xnq>0.0034906585)))
 8009fac:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009fb0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 8009fba:	2301      	movs	r3, #1
 8009fbc:	461c      	mov	r4, r3
 8009fbe:	a3fd      	add	r3, pc, #1012	@ (adr r3, 800a3b4 <sdp4_deep_initialize+0x25ec>)
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	f7f6 fd9a 	bl	8000afc <__aeabi_dcmplt>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <sdp4_deep_initialize+0x220a>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	461c      	mov	r4, r3
 8009fd2:	b2e3      	uxtb	r3, r4
 8009fd4:	f083 0301 	eor.w	r3, r3, #1
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d119      	bne.n	800a012 <sdp4_deep_initialize+0x224a>
 8009fde:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009fe2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 8009fec:	2301      	movs	r3, #1
 8009fee:	461c      	mov	r4, r3
 8009ff0:	a3f2      	add	r3, pc, #968	@ (adr r3, 800a3bc <sdp4_deep_initialize+0x25f4>)
 8009ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff6:	f7f6 fd9f 	bl	8000b38 <__aeabi_dcmpgt>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d101      	bne.n	800a004 <sdp4_deep_initialize+0x223c>
 800a000:	2300      	movs	r3, #0
 800a002:	461c      	mov	r4, r3
 800a004:	b2e3      	uxtb	r3, r4
 800a006:	f083 0301 	eor.w	r3, r3, #1
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f001 845b 	beq.w	800b8c8 <sdp4_deep_initialize+0x3b00>
	{
		if ((m->xnq<0.00826) || (m->xnq>0.00924))
 800a012:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a016:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800a020:	a3e8      	add	r3, pc, #928	@ (adr r3, 800a3c4 <sdp4_deep_initialize+0x25fc>)
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	f7f6 fd69 	bl	8000afc <__aeabi_dcmplt>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f041 8740 	bne.w	800beb2 <sdp4_deep_initialize+0x40ea>
 800a032:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a036:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800a040:	a3e2      	add	r3, pc, #904	@ (adr r3, 800a3cc <sdp4_deep_initialize+0x2604>)
 800a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a046:	f7f6 fd77 	bl	8000b38 <__aeabi_dcmpgt>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f041 8730 	bne.w	800beb2 <sdp4_deep_initialize+0x40ea>
		    return;

		if (eq<0.5)
 800a052:	f04f 0200 	mov.w	r2, #0
 800a056:	4bd6      	ldr	r3, [pc, #856]	@ (800a3b0 <sdp4_deep_initialize+0x25e8>)
 800a058:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a05c:	f7f6 fd4e 	bl	8000afc <__aeabi_dcmplt>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	f041 8727 	bne.w	800beb6 <sdp4_deep_initialize+0x40ee>
		    return;

		m->resonanceFlag = 1;
 800a068:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a06c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2201      	movs	r2, #1
 800a074:	605a      	str	r2, [r3, #4]
		eoc=eq*deep_arg->eosq;
 800a076:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a07a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 800a088:	460c      	mov	r4, r1
 800a08a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a08e:	f7f6 fac3 	bl	8000618 <__aeabi_dmul>
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	e9c4 2300 	strd	r2, r3, [r4]
		g201=-0.306-(eq-0.64)*0.440;
 800a09a:	a399      	add	r3, pc, #612	@ (adr r3, 800a300 <sdp4_deep_initialize+0x2538>)
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a0a4:	f7f6 f900 	bl	80002a8 <__aeabi_dsub>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	a395      	add	r3, pc, #596	@ (adr r3, 800a308 <sdp4_deep_initialize+0x2540>)
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	f7f6 faaf 	bl	8000618 <__aeabi_dmul>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	a192      	add	r1, pc, #584	@ (adr r1, 800a310 <sdp4_deep_initialize+0x2548>)
 800a0c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ca:	f7f6 f8ed 	bl	80002a8 <__aeabi_dsub>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	e944 2302 	strd	r2, r3, [r4, #-8]

		if (eq<=0.65)
 800a0d6:	a390      	add	r3, pc, #576	@ (adr r3, 800a318 <sdp4_deep_initialize+0x2550>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a0e0:	f7f6 fd16 	bl	8000b10 <__aeabi_dcmple>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f000 81d2 	beq.w	800a490 <sdp4_deep_initialize+0x26c8>
		{
			g211=3.616-13.247*eq+16.290*deep_arg->eosq;
 800a0ec:	a38c      	add	r3, pc, #560	@ (adr r3, 800a320 <sdp4_deep_initialize+0x2558>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a0f6:	f7f6 fa8f 	bl	8000618 <__aeabi_dmul>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	a18a      	add	r1, pc, #552	@ (adr r1, 800a328 <sdp4_deep_initialize+0x2560>)
 800a100:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a104:	f7f6 f8d0 	bl	80002a8 <__aeabi_dsub>
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	4614      	mov	r4, r2
 800a10e:	461d      	mov	r5, r3
 800a110:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a114:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a11e:	a384      	add	r3, pc, #528	@ (adr r3, 800a330 <sdp4_deep_initialize+0x2568>)
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	f7f6 fa78 	bl	8000618 <__aeabi_dmul>
 800a128:	4602      	mov	r2, r0
 800a12a:	460b      	mov	r3, r1
 800a12c:	4620      	mov	r0, r4
 800a12e:	4629      	mov	r1, r5
 800a130:	f7f6 f8bc 	bl	80002ac <__adddf3>
 800a134:	4602      	mov	r2, r0
 800a136:	460b      	mov	r3, r1
 800a138:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
			g310=-19.302+117.390*eq-228.419*deep_arg->eosq+156.591*eoc;
 800a13c:	a37e      	add	r3, pc, #504	@ (adr r3, 800a338 <sdp4_deep_initialize+0x2570>)
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a146:	f7f6 fa67 	bl	8000618 <__aeabi_dmul>
 800a14a:	4602      	mov	r2, r0
 800a14c:	460b      	mov	r3, r1
 800a14e:	4610      	mov	r0, r2
 800a150:	4619      	mov	r1, r3
 800a152:	a37b      	add	r3, pc, #492	@ (adr r3, 800a340 <sdp4_deep_initialize+0x2578>)
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	f7f6 f8a6 	bl	80002a8 <__aeabi_dsub>
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	4614      	mov	r4, r2
 800a162:	461d      	mov	r5, r3
 800a164:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a168:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a172:	a375      	add	r3, pc, #468	@ (adr r3, 800a348 <sdp4_deep_initialize+0x2580>)
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	f7f6 fa4e 	bl	8000618 <__aeabi_dmul>
 800a17c:	4602      	mov	r2, r0
 800a17e:	460b      	mov	r3, r1
 800a180:	4620      	mov	r0, r4
 800a182:	4629      	mov	r1, r5
 800a184:	f7f6 f890 	bl	80002a8 <__aeabi_dsub>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4614      	mov	r4, r2
 800a18e:	461d      	mov	r5, r3
 800a190:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a194:	4619      	mov	r1, r3
 800a196:	a36e      	add	r3, pc, #440	@ (adr r3, 800a350 <sdp4_deep_initialize+0x2588>)
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1a0:	f7f6 fa3a 	bl	8000618 <__aeabi_dmul>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	f7f6 f87e 	bl	80002ac <__adddf3>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
			g322=-18.9068+109.7927*eq-214.6334*deep_arg->eosq+146.5816*eoc;
 800a1b8:	a367      	add	r3, pc, #412	@ (adr r3, 800a358 <sdp4_deep_initialize+0x2590>)
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a1c2:	f7f6 fa29 	bl	8000618 <__aeabi_dmul>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	a364      	add	r3, pc, #400	@ (adr r3, 800a360 <sdp4_deep_initialize+0x2598>)
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	f7f6 f868 	bl	80002a8 <__aeabi_dsub>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4614      	mov	r4, r2
 800a1de:	461d      	mov	r5, r3
 800a1e0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a1e4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1ee:	a35e      	add	r3, pc, #376	@ (adr r3, 800a368 <sdp4_deep_initialize+0x25a0>)
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	f7f6 fa10 	bl	8000618 <__aeabi_dmul>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	4629      	mov	r1, r5
 800a200:	f7f6 f852 	bl	80002a8 <__aeabi_dsub>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4614      	mov	r4, r2
 800a20a:	461d      	mov	r5, r3
 800a20c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a210:	4619      	mov	r1, r3
 800a212:	a357      	add	r3, pc, #348	@ (adr r3, 800a370 <sdp4_deep_initialize+0x25a8>)
 800a214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a21c:	f7f6 f9fc 	bl	8000618 <__aeabi_dmul>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4620      	mov	r0, r4
 800a226:	4629      	mov	r1, r5
 800a228:	f7f6 f840 	bl	80002ac <__adddf3>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	e9c7 23cc 	strd	r2, r3, [r7, #816]	@ 0x330
			g410=-41.122+242.694*eq-471.094*deep_arg->eosq+313.953*eoc;
 800a234:	a350      	add	r3, pc, #320	@ (adr r3, 800a378 <sdp4_deep_initialize+0x25b0>)
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a23e:	f7f6 f9eb 	bl	8000618 <__aeabi_dmul>
 800a242:	4602      	mov	r2, r0
 800a244:	460b      	mov	r3, r1
 800a246:	4610      	mov	r0, r2
 800a248:	4619      	mov	r1, r3
 800a24a:	a34d      	add	r3, pc, #308	@ (adr r3, 800a380 <sdp4_deep_initialize+0x25b8>)
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f7f6 f82a 	bl	80002a8 <__aeabi_dsub>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4614      	mov	r4, r2
 800a25a:	461d      	mov	r5, r3
 800a25c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a260:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a26a:	a347      	add	r3, pc, #284	@ (adr r3, 800a388 <sdp4_deep_initialize+0x25c0>)
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	f7f6 f9d2 	bl	8000618 <__aeabi_dmul>
 800a274:	4602      	mov	r2, r0
 800a276:	460b      	mov	r3, r1
 800a278:	4620      	mov	r0, r4
 800a27a:	4629      	mov	r1, r5
 800a27c:	f7f6 f814 	bl	80002a8 <__aeabi_dsub>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4614      	mov	r4, r2
 800a286:	461d      	mov	r5, r3
 800a288:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a28c:	4619      	mov	r1, r3
 800a28e:	a340      	add	r3, pc, #256	@ (adr r3, 800a390 <sdp4_deep_initialize+0x25c8>)
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a298:	f7f6 f9be 	bl	8000618 <__aeabi_dmul>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	f7f6 f802 	bl	80002ac <__adddf3>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	e9c7 23ca 	strd	r2, r3, [r7, #808]	@ 0x328
			g422=-146.407+841.880*eq-1629.014*deep_arg->eosq+1083.435 * eoc;
 800a2b0:	a339      	add	r3, pc, #228	@ (adr r3, 800a398 <sdp4_deep_initialize+0x25d0>)
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a2ba:	f7f6 f9ad 	bl	8000618 <__aeabi_dmul>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	a336      	add	r3, pc, #216	@ (adr r3, 800a3a0 <sdp4_deep_initialize+0x25d8>)
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f7f5 ffec 	bl	80002a8 <__aeabi_dsub>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4614      	mov	r4, r2
 800a2d6:	461d      	mov	r5, r3
 800a2d8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a2dc:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2e6:	a330      	add	r3, pc, #192	@ (adr r3, 800a3a8 <sdp4_deep_initialize+0x25e0>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	f7f6 f994 	bl	8000618 <__aeabi_dmul>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	e06c      	b.n	800a3d4 <sdp4_deep_initialize+0x260c>
 800a2fa:	bf00      	nop
 800a2fc:	f3af 8000 	nop.w
 800a300:	47ae147b 	.word	0x47ae147b
 800a304:	3fe47ae1 	.word	0x3fe47ae1
 800a308:	c28f5c29 	.word	0xc28f5c29
 800a30c:	3fdc28f5 	.word	0x3fdc28f5
 800a310:	0624dd2f 	.word	0x0624dd2f
 800a314:	bfd39581 	.word	0xbfd39581
 800a318:	cccccccd 	.word	0xcccccccd
 800a31c:	3fe4cccc 	.word	0x3fe4cccc
 800a320:	c8b43958 	.word	0xc8b43958
 800a324:	402a7e76 	.word	0x402a7e76
 800a328:	6872b021 	.word	0x6872b021
 800a32c:	400ced91 	.word	0x400ced91
 800a330:	70a3d70a 	.word	0x70a3d70a
 800a334:	40304a3d 	.word	0x40304a3d
 800a338:	c28f5c29 	.word	0xc28f5c29
 800a33c:	405d58f5 	.word	0x405d58f5
 800a340:	df3b645a 	.word	0xdf3b645a
 800a344:	40334d4f 	.word	0x40334d4f
 800a348:	72b020c5 	.word	0x72b020c5
 800a34c:	406c8d68 	.word	0x406c8d68
 800a350:	78d4fdf4 	.word	0x78d4fdf4
 800a354:	406392e9 	.word	0x406392e9
 800a358:	98c7e282 	.word	0x98c7e282
 800a35c:	405b72bb 	.word	0x405b72bb
 800a360:	0b780347 	.word	0x0b780347
 800a364:	4032e824 	.word	0x4032e824
 800a368:	d013a92a 	.word	0xd013a92a
 800a36c:	406ad444 	.word	0x406ad444
 800a370:	779a6b51 	.word	0x779a6b51
 800a374:	4062529c 	.word	0x4062529c
 800a378:	3f7ced91 	.word	0x3f7ced91
 800a37c:	406e5635 	.word	0x406e5635
 800a380:	b22d0e56 	.word	0xb22d0e56
 800a384:	40448f9d 	.word	0x40448f9d
 800a388:	0624dd2f 	.word	0x0624dd2f
 800a38c:	407d7181 	.word	0x407d7181
 800a390:	7ced9168 	.word	0x7ced9168
 800a394:	40739f3f 	.word	0x40739f3f
 800a398:	3d70a3d7 	.word	0x3d70a3d7
 800a39c:	408a4f0a 	.word	0x408a4f0a
 800a3a0:	24dd2f1b 	.word	0x24dd2f1b
 800a3a4:	40624d06 	.word	0x40624d06
 800a3a8:	56041893 	.word	0x56041893
 800a3ac:	4099740e 	.word	0x4099740e
 800a3b0:	3fe00000 	.word	0x3fe00000
 800a3b4:	bef0ac80 	.word	0xbef0ac80
 800a3b8:	3f757254 	.word	0x3f757254
 800a3bc:	032b0b4f 	.word	0x032b0b4f
 800a3c0:	3f6c9871 	.word	0x3f6c9871
 800a3c4:	6eeb7026 	.word	0x6eeb7026
 800a3c8:	3f80ea9e 	.word	0x3f80ea9e
 800a3cc:	ce8533b1 	.word	0xce8533b1
 800a3d0:	3f82ec6b 	.word	0x3f82ec6b
 800a3d4:	f7f5 ff68 	bl	80002a8 <__aeabi_dsub>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4614      	mov	r4, r2
 800a3de:	461d      	mov	r5, r3
 800a3e0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	f20f 53a0 	addw	r3, pc, #1440	@ 0x5a0
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3f2:	f7f6 f911 	bl	8000618 <__aeabi_dmul>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	f7f5 ff55 	bl	80002ac <__adddf3>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320
			g520=-532.114+3017.977*eq-5740*deep_arg->eosq+3708.276*eoc;
 800a40a:	f20f 5384 	addw	r3, pc, #1412	@ 0x584
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a416:	f7f6 f8ff 	bl	8000618 <__aeabi_dmul>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4610      	mov	r0, r2
 800a420:	4619      	mov	r1, r3
 800a422:	f20f 5374 	addw	r3, pc, #1396	@ 0x574
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	f7f5 ff3d 	bl	80002a8 <__aeabi_dsub>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	4614      	mov	r4, r2
 800a434:	461d      	mov	r5, r3
 800a436:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a43a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a444:	f20f 5358 	addw	r3, pc, #1368	@ 0x558
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	f7f6 f8e4 	bl	8000618 <__aeabi_dmul>
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	4620      	mov	r0, r4
 800a456:	4629      	mov	r1, r5
 800a458:	f7f5 ff26 	bl	80002a8 <__aeabi_dsub>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	4614      	mov	r4, r2
 800a462:	461d      	mov	r5, r3
 800a464:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a468:	4619      	mov	r1, r3
 800a46a:	f20f 533c 	addw	r3, pc, #1340	@ 0x53c
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a476:	f7f6 f8cf 	bl	8000618 <__aeabi_dmul>
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	4620      	mov	r0, r4
 800a480:	4629      	mov	r1, r5
 800a482:	f7f5 ff13 	bl	80002ac <__adddf3>
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	e9c7 23c6 	strd	r2, r3, [r7, #792]	@ 0x318
 800a48e:	e1b2      	b.n	800a7f6 <sdp4_deep_initialize+0x2a2e>
		}

		else
		{
			g211=-72.099+331.819*eq-508.738*deep_arg->eosq+266.724*eoc;
 800a490:	f20f 531c 	addw	r3, pc, #1308	@ 0x51c
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a49c:	f7f6 f8bc 	bl	8000618 <__aeabi_dmul>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	f20f 530c 	addw	r3, pc, #1292	@ 0x50c
 800a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b0:	f7f5 fefa 	bl	80002a8 <__aeabi_dsub>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4614      	mov	r4, r2
 800a4ba:	461d      	mov	r5, r3
 800a4bc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a4c0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a4ca:	f20f 43f4 	addw	r3, pc, #1268	@ 0x4f4
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	f7f6 f8a1 	bl	8000618 <__aeabi_dmul>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4620      	mov	r0, r4
 800a4dc:	4629      	mov	r1, r5
 800a4de:	f7f5 fee3 	bl	80002a8 <__aeabi_dsub>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	4614      	mov	r4, r2
 800a4e8:	461d      	mov	r5, r3
 800a4ea:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	f20f 43d4 	addw	r3, pc, #1236	@ 0x4d4
 800a4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4fc:	f7f6 f88c 	bl	8000618 <__aeabi_dmul>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4620      	mov	r0, r4
 800a506:	4629      	mov	r1, r5
 800a508:	f7f5 fed0 	bl	80002ac <__adddf3>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
			g310=-346.844+1582.851*eq-2415.925*deep_arg->eosq+1246.113*eoc;
 800a514:	f20f 43b8 	addw	r3, pc, #1208	@ 0x4b8
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a520:	f7f6 f87a 	bl	8000618 <__aeabi_dmul>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4610      	mov	r0, r2
 800a52a:	4619      	mov	r1, r3
 800a52c:	f20f 43a8 	addw	r3, pc, #1192	@ 0x4a8
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f7f5 feb8 	bl	80002a8 <__aeabi_dsub>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	4614      	mov	r4, r2
 800a53e:	461d      	mov	r5, r3
 800a540:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a544:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a54e:	f20f 4390 	addw	r3, pc, #1168	@ 0x490
 800a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a556:	f7f6 f85f 	bl	8000618 <__aeabi_dmul>
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	4620      	mov	r0, r4
 800a560:	4629      	mov	r1, r5
 800a562:	f7f5 fea1 	bl	80002a8 <__aeabi_dsub>
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	4614      	mov	r4, r2
 800a56c:	461d      	mov	r5, r3
 800a56e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a572:	4619      	mov	r1, r3
 800a574:	f20f 4370 	addw	r3, pc, #1136	@ 0x470
 800a578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a580:	f7f6 f84a 	bl	8000618 <__aeabi_dmul>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4620      	mov	r0, r4
 800a58a:	4629      	mov	r1, r5
 800a58c:	f7f5 fe8e 	bl	80002ac <__adddf3>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
			g322=-342.585+1554.908*eq-2366.899*deep_arg->eosq+1215.972*eoc;
 800a598:	f20f 4354 	addw	r3, pc, #1108	@ 0x454
 800a59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a5a4:	f7f6 f838 	bl	8000618 <__aeabi_dmul>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	f20f 4344 	addw	r3, pc, #1092	@ 0x444
 800a5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b8:	f7f5 fe76 	bl	80002a8 <__aeabi_dsub>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4614      	mov	r4, r2
 800a5c2:	461d      	mov	r5, r3
 800a5c4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a5c8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5d2:	f20f 432c 	addw	r3, pc, #1068	@ 0x42c
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	f7f6 f81d 	bl	8000618 <__aeabi_dmul>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	f7f5 fe5f 	bl	80002a8 <__aeabi_dsub>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	4614      	mov	r4, r2
 800a5f0:	461d      	mov	r5, r3
 800a5f2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	f20f 430c 	addw	r3, pc, #1036	@ 0x40c
 800a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a600:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a604:	f7f6 f808 	bl	8000618 <__aeabi_dmul>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4620      	mov	r0, r4
 800a60e:	4629      	mov	r1, r5
 800a610:	f7f5 fe4c 	bl	80002ac <__adddf3>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	e9c7 23cc 	strd	r2, r3, [r7, #816]	@ 0x330
			g410=-1052.797+4758.686*eq-7193.992*deep_arg->eosq+3651.957*eoc;
 800a61c:	a3fc      	add	r3, pc, #1008	@ (adr r3, 800aa10 <sdp4_deep_initialize+0x2c48>)
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a626:	f7f5 fff7 	bl	8000618 <__aeabi_dmul>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	4610      	mov	r0, r2
 800a630:	4619      	mov	r1, r3
 800a632:	a3f9      	add	r3, pc, #996	@ (adr r3, 800aa18 <sdp4_deep_initialize+0x2c50>)
 800a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a638:	f7f5 fe36 	bl	80002a8 <__aeabi_dsub>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	4614      	mov	r4, r2
 800a642:	461d      	mov	r5, r3
 800a644:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a648:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a652:	a3f3      	add	r3, pc, #972	@ (adr r3, 800aa20 <sdp4_deep_initialize+0x2c58>)
 800a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a658:	f7f5 ffde 	bl	8000618 <__aeabi_dmul>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	4620      	mov	r0, r4
 800a662:	4629      	mov	r1, r5
 800a664:	f7f5 fe20 	bl	80002a8 <__aeabi_dsub>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4614      	mov	r4, r2
 800a66e:	461d      	mov	r5, r3
 800a670:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a674:	4619      	mov	r1, r3
 800a676:	a3ec      	add	r3, pc, #944	@ (adr r3, 800aa28 <sdp4_deep_initialize+0x2c60>)
 800a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a680:	f7f5 ffca 	bl	8000618 <__aeabi_dmul>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4620      	mov	r0, r4
 800a68a:	4629      	mov	r1, r5
 800a68c:	f7f5 fe0e 	bl	80002ac <__adddf3>
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	e9c7 23ca 	strd	r2, r3, [r7, #808]	@ 0x328
			g422=-3581.69+16178.11*eq-24462.77*deep_arg->eosq+12422.52*eoc;
 800a698:	a3e5      	add	r3, pc, #916	@ (adr r3, 800aa30 <sdp4_deep_initialize+0x2c68>)
 800a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69e:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a6a2:	f7f5 ffb9 	bl	8000618 <__aeabi_dmul>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	a3e2      	add	r3, pc, #904	@ (adr r3, 800aa38 <sdp4_deep_initialize+0x2c70>)
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	f7f5 fdf8 	bl	80002a8 <__aeabi_dsub>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4614      	mov	r4, r2
 800a6be:	461d      	mov	r5, r3
 800a6c0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a6c4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6ce:	a3dc      	add	r3, pc, #880	@ (adr r3, 800aa40 <sdp4_deep_initialize+0x2c78>)
 800a6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d4:	f7f5 ffa0 	bl	8000618 <__aeabi_dmul>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4620      	mov	r0, r4
 800a6de:	4629      	mov	r1, r5
 800a6e0:	f7f5 fde2 	bl	80002a8 <__aeabi_dsub>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	4614      	mov	r4, r2
 800a6ea:	461d      	mov	r5, r3
 800a6ec:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	a3d5      	add	r3, pc, #852	@ (adr r3, 800aa48 <sdp4_deep_initialize+0x2c80>)
 800a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6fc:	f7f5 ff8c 	bl	8000618 <__aeabi_dmul>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	4620      	mov	r0, r4
 800a706:	4629      	mov	r1, r5
 800a708:	f7f5 fdd0 	bl	80002ac <__adddf3>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320

			if (eq<=0.715)
 800a714:	a3ce      	add	r3, pc, #824	@ (adr r3, 800aa50 <sdp4_deep_initialize+0x2c88>)
 800a716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a71e:	f7f6 f9f7 	bl	8000b10 <__aeabi_dcmple>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d028      	beq.n	800a77a <sdp4_deep_initialize+0x29b2>
				g520=1464.74-4664.75*eq+3763.64*deep_arg->eosq;
 800a728:	a3cb      	add	r3, pc, #812	@ (adr r3, 800aa58 <sdp4_deep_initialize+0x2c90>)
 800a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72e:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a732:	f7f5 ff71 	bl	8000618 <__aeabi_dmul>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	a1c9      	add	r1, pc, #804	@ (adr r1, 800aa60 <sdp4_deep_initialize+0x2c98>)
 800a73c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a740:	f7f5 fdb2 	bl	80002a8 <__aeabi_dsub>
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	4614      	mov	r4, r2
 800a74a:	461d      	mov	r5, r3
 800a74c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a750:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a75a:	a3c3      	add	r3, pc, #780	@ (adr r3, 800aa68 <sdp4_deep_initialize+0x2ca0>)
 800a75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a760:	f7f5 ff5a 	bl	8000618 <__aeabi_dmul>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4620      	mov	r0, r4
 800a76a:	4629      	mov	r1, r5
 800a76c:	f7f5 fd9e 	bl	80002ac <__adddf3>
 800a770:	4602      	mov	r2, r0
 800a772:	460b      	mov	r3, r1
 800a774:	e9c7 23c6 	strd	r2, r3, [r7, #792]	@ 0x318
 800a778:	e03d      	b.n	800a7f6 <sdp4_deep_initialize+0x2a2e>

			else
				g520=-5149.66+29936.92*eq-54087.36*deep_arg->eosq+31324.56*eoc;
 800a77a:	a3bd      	add	r3, pc, #756	@ (adr r3, 800aa70 <sdp4_deep_initialize+0x2ca8>)
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a784:	f7f5 ff48 	bl	8000618 <__aeabi_dmul>
 800a788:	4602      	mov	r2, r0
 800a78a:	460b      	mov	r3, r1
 800a78c:	4610      	mov	r0, r2
 800a78e:	4619      	mov	r1, r3
 800a790:	a3b9      	add	r3, pc, #740	@ (adr r3, 800aa78 <sdp4_deep_initialize+0x2cb0>)
 800a792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a796:	f7f5 fd87 	bl	80002a8 <__aeabi_dsub>
 800a79a:	4602      	mov	r2, r0
 800a79c:	460b      	mov	r3, r1
 800a79e:	4614      	mov	r4, r2
 800a7a0:	461d      	mov	r5, r3
 800a7a2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a7a6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7b0:	a3b3      	add	r3, pc, #716	@ (adr r3, 800aa80 <sdp4_deep_initialize+0x2cb8>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	f7f5 ff2f 	bl	8000618 <__aeabi_dmul>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4620      	mov	r0, r4
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	f7f5 fd71 	bl	80002a8 <__aeabi_dsub>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	4614      	mov	r4, r2
 800a7cc:	461d      	mov	r5, r3
 800a7ce:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	a3ac      	add	r3, pc, #688	@ (adr r3, 800aa88 <sdp4_deep_initialize+0x2cc0>)
 800a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7de:	f7f5 ff1b 	bl	8000618 <__aeabi_dmul>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	f7f5 fd5f 	bl	80002ac <__adddf3>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	e9c7 23c6 	strd	r2, r3, [r7, #792]	@ 0x318
		}

		if (eq<0.7)
 800a7f6:	a3a6      	add	r3, pc, #664	@ (adr r3, 800aa90 <sdp4_deep_initialize+0x2cc8>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a800:	f7f6 f97c 	bl	8000afc <__aeabi_dcmplt>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 8176 	beq.w	800aaf8 <sdp4_deep_initialize+0x2d30>
		{
			g533=-919.2277+4988.61*eq-9064.77*deep_arg->eosq+5542.21*eoc;
 800a80c:	a3a2      	add	r3, pc, #648	@ (adr r3, 800aa98 <sdp4_deep_initialize+0x2cd0>)
 800a80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a812:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a816:	f7f5 feff 	bl	8000618 <__aeabi_dmul>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	4610      	mov	r0, r2
 800a820:	4619      	mov	r1, r3
 800a822:	a39f      	add	r3, pc, #636	@ (adr r3, 800aaa0 <sdp4_deep_initialize+0x2cd8>)
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	f7f5 fd3e 	bl	80002a8 <__aeabi_dsub>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	4614      	mov	r4, r2
 800a832:	461d      	mov	r5, r3
 800a834:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a838:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a842:	a399      	add	r3, pc, #612	@ (adr r3, 800aaa8 <sdp4_deep_initialize+0x2ce0>)
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	f7f5 fee6 	bl	8000618 <__aeabi_dmul>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4620      	mov	r0, r4
 800a852:	4629      	mov	r1, r5
 800a854:	f7f5 fd28 	bl	80002a8 <__aeabi_dsub>
 800a858:	4602      	mov	r2, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	4614      	mov	r4, r2
 800a85e:	461d      	mov	r5, r3
 800a860:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a864:	4619      	mov	r1, r3
 800a866:	a392      	add	r3, pc, #584	@ (adr r3, 800aab0 <sdp4_deep_initialize+0x2ce8>)
 800a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a870:	f7f5 fed2 	bl	8000618 <__aeabi_dmul>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4620      	mov	r0, r4
 800a87a:	4629      	mov	r1, r5
 800a87c:	f7f5 fd16 	bl	80002ac <__adddf3>
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	e9c7 23c0 	strd	r2, r3, [r7, #768]	@ 0x300
			g521=-822.71072+4568.6173*eq-8491.4146*deep_arg->eosq+5337.524*eoc;
 800a888:	a38b      	add	r3, pc, #556	@ (adr r3, 800aab8 <sdp4_deep_initialize+0x2cf0>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a892:	f7f5 fec1 	bl	8000618 <__aeabi_dmul>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	4610      	mov	r0, r2
 800a89c:	4619      	mov	r1, r3
 800a89e:	a388      	add	r3, pc, #544	@ (adr r3, 800aac0 <sdp4_deep_initialize+0x2cf8>)
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	f7f5 fd00 	bl	80002a8 <__aeabi_dsub>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4614      	mov	r4, r2
 800a8ae:	461d      	mov	r5, r3
 800a8b0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a8b4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8be:	a382      	add	r3, pc, #520	@ (adr r3, 800aac8 <sdp4_deep_initialize+0x2d00>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fea8 	bl	8000618 <__aeabi_dmul>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	f7f5 fcea 	bl	80002a8 <__aeabi_dsub>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	4614      	mov	r4, r2
 800a8da:	461d      	mov	r5, r3
 800a8dc:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	a37b      	add	r3, pc, #492	@ (adr r3, 800aad0 <sdp4_deep_initialize+0x2d08>)
 800a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8ec:	f7f5 fe94 	bl	8000618 <__aeabi_dmul>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	f7f5 fcd8 	bl	80002ac <__adddf3>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	e9c7 23c4 	strd	r2, r3, [r7, #784]	@ 0x310
			g532=-853.666+4690.25*eq-8624.77*deep_arg->eosq+5341.4*eoc;
 800a904:	a374      	add	r3, pc, #464	@ (adr r3, 800aad8 <sdp4_deep_initialize+0x2d10>)
 800a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a90e:	f7f5 fe83 	bl	8000618 <__aeabi_dmul>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	4610      	mov	r0, r2
 800a918:	4619      	mov	r1, r3
 800a91a:	a371      	add	r3, pc, #452	@ (adr r3, 800aae0 <sdp4_deep_initialize+0x2d18>)
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	f7f5 fcc2 	bl	80002a8 <__aeabi_dsub>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	4614      	mov	r4, r2
 800a92a:	461d      	mov	r5, r3
 800a92c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a930:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a93a:	a36b      	add	r3, pc, #428	@ (adr r3, 800aae8 <sdp4_deep_initialize+0x2d20>)
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	f7f5 fe6a 	bl	8000618 <__aeabi_dmul>
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	4620      	mov	r0, r4
 800a94a:	4629      	mov	r1, r5
 800a94c:	f7f5 fcac 	bl	80002a8 <__aeabi_dsub>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4614      	mov	r4, r2
 800a956:	461d      	mov	r5, r3
 800a958:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a95c:	4619      	mov	r1, r3
 800a95e:	a364      	add	r3, pc, #400	@ (adr r3, 800aaf0 <sdp4_deep_initialize+0x2d28>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a968:	f7f5 fe56 	bl	8000618 <__aeabi_dmul>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4620      	mov	r0, r4
 800a972:	4629      	mov	r1, r5
 800a974:	f7f5 fc9a 	bl	80002ac <__adddf3>
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	e9c7 23c2 	strd	r2, r3, [r7, #776]	@ 0x308
 800a980:	e180      	b.n	800ac84 <sdp4_deep_initialize+0x2ebc>
 800a982:	bf00      	nop
 800a984:	f3af 8000 	nop.w
 800a988:	70a3d70a 	.word	0x70a3d70a
 800a98c:	4090edbd 	.word	0x4090edbd
 800a990:	39581062 	.word	0x39581062
 800a994:	40a793f4 	.word	0x40a793f4
 800a998:	78d4fdf4 	.word	0x78d4fdf4
 800a99c:	4080a0e9 	.word	0x4080a0e9
 800a9a0:	00000000 	.word	0x00000000
 800a9a4:	40b66c00 	.word	0x40b66c00
 800a9a8:	4fdf3b64 	.word	0x4fdf3b64
 800a9ac:	40acf88d 	.word	0x40acf88d
 800a9b0:	9fbe76c9 	.word	0x9fbe76c9
 800a9b4:	4074bd1a 	.word	0x4074bd1a
 800a9b8:	04189375 	.word	0x04189375
 800a9bc:	40520656 	.word	0x40520656
 800a9c0:	d916872b 	.word	0xd916872b
 800a9c4:	407fcbce 	.word	0x407fcbce
 800a9c8:	810624dd 	.word	0x810624dd
 800a9cc:	4070ab95 	.word	0x4070ab95
 800a9d0:	6c8b4396 	.word	0x6c8b4396
 800a9d4:	4098bb67 	.word	0x4098bb67
 800a9d8:	0624dd2f 	.word	0x0624dd2f
 800a9dc:	4075ad81 	.word	0x4075ad81
 800a9e0:	9999999a 	.word	0x9999999a
 800a9e4:	40a2dfd9 	.word	0x40a2dfd9
 800a9e8:	b645a1cb 	.word	0xb645a1cb
 800a9ec:	40937873 	.word	0x40937873
 800a9f0:	cac08312 	.word	0xcac08312
 800a9f4:	40984ba1 	.word	0x40984ba1
 800a9f8:	28f5c28f 	.word	0x28f5c28f
 800a9fc:	4075695c 	.word	0x4075695c
 800aa00:	49ba5e35 	.word	0x49ba5e35
 800aa04:	40a27dcc 	.word	0x40a27dcc
 800aa08:	53f7ced9 	.word	0x53f7ced9
 800aa0c:	4092ffe3 	.word	0x4092ffe3
 800aa10:	9db22d0e 	.word	0x9db22d0e
 800aa14:	40b296af 	.word	0x40b296af
 800aa18:	20c49ba6 	.word	0x20c49ba6
 800aa1c:	40907330 	.word	0x40907330
 800aa20:	f3b645a2 	.word	0xf3b645a2
 800aa24:	40bc19fd 	.word	0x40bc19fd
 800aa28:	fbe76c8b 	.word	0xfbe76c8b
 800aa2c:	40ac87e9 	.word	0x40ac87e9
 800aa30:	147ae148 	.word	0x147ae148
 800aa34:	40cf990e 	.word	0x40cf990e
 800aa38:	47ae147b 	.word	0x47ae147b
 800aa3c:	40abfb61 	.word	0x40abfb61
 800aa40:	47ae147b 	.word	0x47ae147b
 800aa44:	40d7e3b1 	.word	0x40d7e3b1
 800aa48:	8f5c28f6 	.word	0x8f5c28f6
 800aa4c:	40c84342 	.word	0x40c84342
 800aa50:	ae147ae1 	.word	0xae147ae1
 800aa54:	3fe6e147 	.word	0x3fe6e147
 800aa58:	00000000 	.word	0x00000000
 800aa5c:	40b238c0 	.word	0x40b238c0
 800aa60:	c28f5c29 	.word	0xc28f5c29
 800aa64:	4096e2f5 	.word	0x4096e2f5
 800aa68:	ae147ae1 	.word	0xae147ae1
 800aa6c:	40ad6747 	.word	0x40ad6747
 800aa70:	e147ae14 	.word	0xe147ae14
 800aa74:	40dd3c3a 	.word	0x40dd3c3a
 800aa78:	f5c28f5c 	.word	0xf5c28f5c
 800aa7c:	40b41da8 	.word	0x40b41da8
 800aa80:	851eb852 	.word	0x851eb852
 800aa84:	40ea68eb 	.word	0x40ea68eb
 800aa88:	d70a3d71 	.word	0xd70a3d71
 800aa8c:	40de9723 	.word	0x40de9723
 800aa90:	66666666 	.word	0x66666666
 800aa94:	3fe66666 	.word	0x3fe66666
 800aa98:	28f5c28f 	.word	0x28f5c28f
 800aa9c:	40b37c9c 	.word	0x40b37c9c
 800aaa0:	5460aa65 	.word	0x5460aa65
 800aaa4:	408cb9d2 	.word	0x408cb9d2
 800aaa8:	8f5c28f6 	.word	0x8f5c28f6
 800aaac:	40c1b462 	.word	0x40c1b462
 800aab0:	c28f5c29 	.word	0xc28f5c29
 800aab4:	40b5a635 	.word	0x40b5a635
 800aab8:	075f6fd2 	.word	0x075f6fd2
 800aabc:	40b1d89e 	.word	0x40b1d89e
 800aac0:	8df7a4e8 	.word	0x8df7a4e8
 800aac4:	4089b5af 	.word	0x4089b5af
 800aac8:	119ce076 	.word	0x119ce076
 800aacc:	40c095b5 	.word	0x40c095b5
 800aad0:	24dd2f1b 	.word	0x24dd2f1b
 800aad4:	40b4d986 	.word	0x40b4d986
 800aad8:	00000000 	.word	0x00000000
 800aadc:	40b25240 	.word	0x40b25240
 800aae0:	f7ced917 	.word	0xf7ced917
 800aae4:	408aad53 	.word	0x408aad53
 800aae8:	8f5c28f6 	.word	0x8f5c28f6
 800aaec:	40c0d862 	.word	0x40c0d862
 800aaf0:	66666666 	.word	0x66666666
 800aaf4:	40b4dd66 	.word	0x40b4dd66
		}

		else
		{
			g533=-37995.78+161616.52*eq-229838.2*deep_arg->eosq+109377.94*eoc;
 800aaf8:	f20f 534c 	addw	r3, pc, #1356	@ 0x54c
 800aafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab00:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800ab04:	f7f5 fd88 	bl	8000618 <__aeabi_dmul>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	4619      	mov	r1, r3
 800ab10:	f20f 533c 	addw	r3, pc, #1340	@ 0x53c
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f7f5 fbc6 	bl	80002a8 <__aeabi_dsub>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4614      	mov	r4, r2
 800ab22:	461d      	mov	r5, r3
 800ab24:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ab28:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab32:	f20f 5324 	addw	r3, pc, #1316	@ 0x524
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	f7f5 fd6d 	bl	8000618 <__aeabi_dmul>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4620      	mov	r0, r4
 800ab44:	4629      	mov	r1, r5
 800ab46:	f7f5 fbaf 	bl	80002a8 <__aeabi_dsub>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	4614      	mov	r4, r2
 800ab50:	461d      	mov	r5, r3
 800ab52:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800ab56:	4619      	mov	r1, r3
 800ab58:	f20f 5304 	addw	r3, pc, #1284	@ 0x504
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab64:	f7f5 fd58 	bl	8000618 <__aeabi_dmul>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f7f5 fb9c 	bl	80002ac <__adddf3>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	e9c7 23c0 	strd	r2, r3, [r7, #768]	@ 0x300
			g521 =-51752.104+218913.95*eq-309468.16*deep_arg->eosq+146349.42*eoc;
 800ab7c:	f20f 43e8 	addw	r3, pc, #1256	@ 0x4e8
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800ab88:	f7f5 fd46 	bl	8000618 <__aeabi_dmul>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4610      	mov	r0, r2
 800ab92:	4619      	mov	r1, r3
 800ab94:	f20f 43d8 	addw	r3, pc, #1240	@ 0x4d8
 800ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9c:	f7f5 fb84 	bl	80002a8 <__aeabi_dsub>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	4614      	mov	r4, r2
 800aba6:	461d      	mov	r5, r3
 800aba8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800abac:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abb6:	f20f 43c0 	addw	r3, pc, #1216	@ 0x4c0
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	f7f5 fd2b 	bl	8000618 <__aeabi_dmul>
 800abc2:	4602      	mov	r2, r0
 800abc4:	460b      	mov	r3, r1
 800abc6:	4620      	mov	r0, r4
 800abc8:	4629      	mov	r1, r5
 800abca:	f7f5 fb6d 	bl	80002a8 <__aeabi_dsub>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4614      	mov	r4, r2
 800abd4:	461d      	mov	r5, r3
 800abd6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800abda:	4619      	mov	r1, r3
 800abdc:	f20f 43a0 	addw	r3, pc, #1184	@ 0x4a0
 800abe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abe8:	f7f5 fd16 	bl	8000618 <__aeabi_dmul>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4620      	mov	r0, r4
 800abf2:	4629      	mov	r1, r5
 800abf4:	f7f5 fb5a 	bl	80002ac <__adddf3>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	e9c7 23c4 	strd	r2, r3, [r7, #784]	@ 0x310
			g532 =-40023.88+170470.89*eq-242699.48*deep_arg->eosq+115605.82*eoc;
 800ac00:	f20f 4384 	addw	r3, pc, #1156	@ 0x484
 800ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac08:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800ac0c:	f7f5 fd04 	bl	8000618 <__aeabi_dmul>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	4610      	mov	r0, r2
 800ac16:	4619      	mov	r1, r3
 800ac18:	f20f 4374 	addw	r3, pc, #1140	@ 0x474
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	f7f5 fb42 	bl	80002a8 <__aeabi_dsub>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4614      	mov	r4, r2
 800ac2a:	461d      	mov	r5, r3
 800ac2c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ac30:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac3a:	f20f 435c 	addw	r3, pc, #1116	@ 0x45c
 800ac3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac42:	f7f5 fce9 	bl	8000618 <__aeabi_dmul>
 800ac46:	4602      	mov	r2, r0
 800ac48:	460b      	mov	r3, r1
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	f7f5 fb2b 	bl	80002a8 <__aeabi_dsub>
 800ac52:	4602      	mov	r2, r0
 800ac54:	460b      	mov	r3, r1
 800ac56:	4614      	mov	r4, r2
 800ac58:	461d      	mov	r5, r3
 800ac5a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800ac5e:	4619      	mov	r1, r3
 800ac60:	f20f 433c 	addw	r3, pc, #1084	@ 0x43c
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac6c:	f7f5 fcd4 	bl	8000618 <__aeabi_dmul>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	4620      	mov	r0, r4
 800ac76:	4629      	mov	r1, r5
 800ac78:	f7f5 fb18 	bl	80002ac <__adddf3>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	460b      	mov	r3, r1
 800ac80:	e9c7 23c2 	strd	r2, r3, [r7, #776]	@ 0x308
		}

		sini2=deep_arg->sinio*deep_arg->sinio;
 800ac84:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ac88:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ac92:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ac96:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800aca0:	f107 04c0 	add.w	r4, r7, #192	@ 0xc0
 800aca4:	f7f5 fcb8 	bl	8000618 <__aeabi_dmul>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	e9c4 2300 	strd	r2, r3, [r4]
		f220=0.75*(1+2*deep_arg->cosio+deep_arg->theta2);
 800acb0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800acb4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	f7f5 faf3 	bl	80002ac <__adddf3>
 800acc6:	4602      	mov	r2, r0
 800acc8:	460b      	mov	r3, r1
 800acca:	4610      	mov	r0, r2
 800accc:	4619      	mov	r1, r3
 800acce:	f04f 0200 	mov.w	r2, #0
 800acd2:	4bd3      	ldr	r3, [pc, #844]	@ (800b020 <sdp4_deep_initialize+0x3258>)
 800acd4:	f7f5 faea 	bl	80002ac <__adddf3>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	4610      	mov	r0, r2
 800acde:	4619      	mov	r1, r3
 800ace0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ace4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800acee:	f7f5 fadd 	bl	80002ac <__adddf3>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	4610      	mov	r0, r2
 800acf8:	4619      	mov	r1, r3
 800acfa:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800acfe:	461c      	mov	r4, r3
 800ad00:	f04f 0200 	mov.w	r2, #0
 800ad04:	4bc7      	ldr	r3, [pc, #796]	@ (800b024 <sdp4_deep_initialize+0x325c>)
 800ad06:	f7f5 fc87 	bl	8000618 <__aeabi_dmul>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	e944 2302 	strd	r2, r3, [r4, #-8]
		f221=1.5*sini2;
 800ad12:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800ad16:	461c      	mov	r4, r3
 800ad18:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	f04f 0200 	mov.w	r2, #0
 800ad22:	4bc1      	ldr	r3, [pc, #772]	@ (800b028 <sdp4_deep_initialize+0x3260>)
 800ad24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad28:	f7f5 fc76 	bl	8000618 <__aeabi_dmul>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	e944 2302 	strd	r2, r3, [r4, #-8]
		f321=1.875*deep_arg->sinio*(1-2*deep_arg->cosio-3*deep_arg->theta2);
 800ad34:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad38:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ad42:	f04f 0200 	mov.w	r2, #0
 800ad46:	4bb9      	ldr	r3, [pc, #740]	@ (800b02c <sdp4_deep_initialize+0x3264>)
 800ad48:	f7f5 fc66 	bl	8000618 <__aeabi_dmul>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4614      	mov	r4, r2
 800ad52:	461d      	mov	r5, r3
 800ad54:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad58:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	f7f5 faa1 	bl	80002ac <__adddf3>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	f04f 0000 	mov.w	r0, #0
 800ad72:	49ab      	ldr	r1, [pc, #684]	@ (800b020 <sdp4_deep_initialize+0x3258>)
 800ad74:	f7f5 fa98 	bl	80002a8 <__aeabi_dsub>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	4690      	mov	r8, r2
 800ad7e:	4699      	mov	r9, r3
 800ad80:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad84:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800ad8e:	f04f 0200 	mov.w	r2, #0
 800ad92:	4ba7      	ldr	r3, [pc, #668]	@ (800b030 <sdp4_deep_initialize+0x3268>)
 800ad94:	f7f5 fc40 	bl	8000618 <__aeabi_dmul>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4640      	mov	r0, r8
 800ad9e:	4649      	mov	r1, r9
 800ada0:	f7f5 fa82 	bl	80002a8 <__aeabi_dsub>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 800adac:	460e      	mov	r6, r1
 800adae:	4620      	mov	r0, r4
 800adb0:	4629      	mov	r1, r5
 800adb2:	f7f5 fc31 	bl	8000618 <__aeabi_dmul>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	e9c6 2300 	strd	r2, r3, [r6]
		f322=-1.875*deep_arg->sinio*(1+2*deep_arg->cosio-3*deep_arg->theta2);
 800adbe:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800adc2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800adcc:	f04f 0200 	mov.w	r2, #0
 800add0:	4b98      	ldr	r3, [pc, #608]	@ (800b034 <sdp4_deep_initialize+0x326c>)
 800add2:	f7f5 fc21 	bl	8000618 <__aeabi_dmul>
 800add6:	4602      	mov	r2, r0
 800add8:	460b      	mov	r3, r1
 800adda:	4614      	mov	r4, r2
 800addc:	461d      	mov	r5, r3
 800adde:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ade2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	f7f5 fa5c 	bl	80002ac <__adddf3>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	4610      	mov	r0, r2
 800adfa:	4619      	mov	r1, r3
 800adfc:	f04f 0200 	mov.w	r2, #0
 800ae00:	4b87      	ldr	r3, [pc, #540]	@ (800b020 <sdp4_deep_initialize+0x3258>)
 800ae02:	f7f5 fa53 	bl	80002ac <__adddf3>
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	4690      	mov	r8, r2
 800ae0c:	4699      	mov	r9, r3
 800ae0e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ae12:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800ae1c:	f04f 0200 	mov.w	r2, #0
 800ae20:	4b83      	ldr	r3, [pc, #524]	@ (800b030 <sdp4_deep_initialize+0x3268>)
 800ae22:	f7f5 fbf9 	bl	8000618 <__aeabi_dmul>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4640      	mov	r0, r8
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	f7f5 fa3b 	bl	80002a8 <__aeabi_dsub>
 800ae32:	4602      	mov	r2, r0
 800ae34:	460b      	mov	r3, r1
 800ae36:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 800ae3a:	460e      	mov	r6, r1
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	4629      	mov	r1, r5
 800ae40:	f7f5 fbea 	bl	8000618 <__aeabi_dmul>
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	e946 2302 	strd	r2, r3, [r6, #-8]
		f441=35*sini2*f220;
 800ae4c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800ae50:	4619      	mov	r1, r3
 800ae52:	f04f 0200 	mov.w	r2, #0
 800ae56:	4b78      	ldr	r3, [pc, #480]	@ (800b038 <sdp4_deep_initialize+0x3270>)
 800ae58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae5c:	f7f5 fbdc 	bl	8000618 <__aeabi_dmul>
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800ae68:	460c      	mov	r4, r1
 800ae6a:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800ae6e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ae72:	f7f5 fbd1 	bl	8000618 <__aeabi_dmul>
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	e9c4 2300 	strd	r2, r3, [r4]
		f442=39.3750*sini2*sini2;
 800ae7e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800ae82:	4619      	mov	r1, r3
 800ae84:	a35e      	add	r3, pc, #376	@ (adr r3, 800b000 <sdp4_deep_initialize+0x3238>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae8e:	f7f5 fbc3 	bl	8000618 <__aeabi_dmul>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 800aea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea4:	f7f5 fbb8 	bl	8000618 <__aeabi_dmul>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	e944 2302 	strd	r2, r3, [r4, #-8]
		f522=9.84375*deep_arg->sinio*(sini2*(1-2*deep_arg->cosio-5*deep_arg->theta2)+0.33333333*(-2+4*deep_arg->cosio+6*deep_arg->theta2));
 800aeb0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800aeb4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800aebe:	a352      	add	r3, pc, #328	@ (adr r3, 800b008 <sdp4_deep_initialize+0x3240>)
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	f7f5 fba8 	bl	8000618 <__aeabi_dmul>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	4614      	mov	r4, r2
 800aece:	461d      	mov	r5, r3
 800aed0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800aed4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	f7f5 f9e3 	bl	80002ac <__adddf3>
 800aee6:	4602      	mov	r2, r0
 800aee8:	460b      	mov	r3, r1
 800aeea:	f04f 0000 	mov.w	r0, #0
 800aeee:	494c      	ldr	r1, [pc, #304]	@ (800b020 <sdp4_deep_initialize+0x3258>)
 800aef0:	f7f5 f9da 	bl	80002a8 <__aeabi_dsub>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	4690      	mov	r8, r2
 800aefa:	4699      	mov	r9, r3
 800aefc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800af00:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800af0a:	f04f 0200 	mov.w	r2, #0
 800af0e:	4b4b      	ldr	r3, [pc, #300]	@ (800b03c <sdp4_deep_initialize+0x3274>)
 800af10:	f7f5 fb82 	bl	8000618 <__aeabi_dmul>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	4640      	mov	r0, r8
 800af1a:	4649      	mov	r1, r9
 800af1c:	f7f5 f9c4 	bl	80002a8 <__aeabi_dsub>
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	4610      	mov	r0, r2
 800af26:	4619      	mov	r1, r3
 800af28:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	f7f5 fb72 	bl	8000618 <__aeabi_dmul>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	4690      	mov	r8, r2
 800af3a:	4699      	mov	r9, r3
 800af3c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800af40:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800af4a:	f04f 0200 	mov.w	r2, #0
 800af4e:	4b3c      	ldr	r3, [pc, #240]	@ (800b040 <sdp4_deep_initialize+0x3278>)
 800af50:	f7f5 fb62 	bl	8000618 <__aeabi_dmul>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	4610      	mov	r0, r2
 800af5a:	4619      	mov	r1, r3
 800af5c:	f04f 0200 	mov.w	r2, #0
 800af60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800af64:	f7f5 f9a0 	bl	80002a8 <__aeabi_dsub>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4692      	mov	sl, r2
 800af6e:	469b      	mov	fp, r3
 800af70:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800af74:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800af7e:	f04f 0200 	mov.w	r2, #0
 800af82:	4b30      	ldr	r3, [pc, #192]	@ (800b044 <sdp4_deep_initialize+0x327c>)
 800af84:	f7f5 fb48 	bl	8000618 <__aeabi_dmul>
 800af88:	4602      	mov	r2, r0
 800af8a:	460b      	mov	r3, r1
 800af8c:	4650      	mov	r0, sl
 800af8e:	4659      	mov	r1, fp
 800af90:	f7f5 f98c 	bl	80002ac <__adddf3>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	4610      	mov	r0, r2
 800af9a:	4619      	mov	r1, r3
 800af9c:	a31c      	add	r3, pc, #112	@ (adr r3, 800b010 <sdp4_deep_initialize+0x3248>)
 800af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa2:	f7f5 fb39 	bl	8000618 <__aeabi_dmul>
 800afa6:	4602      	mov	r2, r0
 800afa8:	460b      	mov	r3, r1
 800afaa:	4640      	mov	r0, r8
 800afac:	4649      	mov	r1, r9
 800afae:	f7f5 f97d 	bl	80002ac <__adddf3>
 800afb2:	4602      	mov	r2, r0
 800afb4:	460b      	mov	r3, r1
 800afb6:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800afba:	460e      	mov	r6, r1
 800afbc:	4620      	mov	r0, r4
 800afbe:	4629      	mov	r1, r5
 800afc0:	f7f5 fb2a 	bl	8000618 <__aeabi_dmul>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	e9c6 2300 	strd	r2, r3, [r6]
		f523=deep_arg->sinio*(4.92187512*sini2*(-2-4*deep_arg->cosio+10*deep_arg->theta2)+6.56250012*(1+2*deep_arg->cosio-3*deep_arg->theta2));
 800afcc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800afd0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800afda:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800afde:	4619      	mov	r1, r3
 800afe0:	a30d      	add	r3, pc, #52	@ (adr r3, 800b018 <sdp4_deep_initialize+0x3250>)
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afea:	f7f5 fb15 	bl	8000618 <__aeabi_dmul>
 800afee:	4602      	mov	r2, r0
 800aff0:	460b      	mov	r3, r1
 800aff2:	4690      	mov	r8, r2
 800aff4:	4699      	mov	r9, r3
 800aff6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800affa:	e055      	b.n	800b0a8 <sdp4_deep_initialize+0x32e0>
 800affc:	f3af 8000 	nop.w
 800b000:	00000000 	.word	0x00000000
 800b004:	4043b000 	.word	0x4043b000
 800b008:	00000000 	.word	0x00000000
 800b00c:	4023b000 	.word	0x4023b000
 800b010:	51c112da 	.word	0x51c112da
 800b014:	3fd55555 	.word	0x3fd55555
 800b018:	080d9595 	.word	0x080d9595
 800b01c:	4013b000 	.word	0x4013b000
 800b020:	3ff00000 	.word	0x3ff00000
 800b024:	3fe80000 	.word	0x3fe80000
 800b028:	3ff80000 	.word	0x3ff80000
 800b02c:	3ffe0000 	.word	0x3ffe0000
 800b030:	40080000 	.word	0x40080000
 800b034:	bffe0000 	.word	0xbffe0000
 800b038:	40418000 	.word	0x40418000
 800b03c:	40140000 	.word	0x40140000
 800b040:	40100000 	.word	0x40100000
 800b044:	40180000 	.word	0x40180000
 800b048:	28f5c28f 	.word	0x28f5c28f
 800b04c:	4103ba84 	.word	0x4103ba84
 800b050:	f5c28f5c 	.word	0xf5c28f5c
 800b054:	40e28d78 	.word	0x40e28d78
 800b058:	9999999a 	.word	0x9999999a
 800b05c:	410c0e71 	.word	0x410c0e71
 800b060:	0a3d70a4 	.word	0x0a3d70a4
 800b064:	40fab41f 	.word	0x40fab41f
 800b068:	9999999a 	.word	0x9999999a
 800b06c:	410ab90f 	.word	0x410ab90f
 800b070:	53f7ced9 	.word	0x53f7ced9
 800b074:	40e94503 	.word	0x40e94503
 800b078:	a3d70a3d 	.word	0xa3d70a3d
 800b07c:	4112e370 	.word	0x4112e370
 800b080:	5c28f5c3 	.word	0x5c28f5c3
 800b084:	4101dd6b 	.word	0x4101dd6b
 800b088:	1eb851ec 	.word	0x1eb851ec
 800b08c:	4104cf37 	.word	0x4104cf37
 800b090:	28f5c28f 	.word	0x28f5c28f
 800b094:	40e38afc 	.word	0x40e38afc
 800b098:	d70a3d71 	.word	0xd70a3d71
 800b09c:	410da05b 	.word	0x410da05b
 800b0a0:	1eb851ec 	.word	0x1eb851ec
 800b0a4:	40fc395d 	.word	0x40fc395d
 800b0a8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b0b2:	f04f 0200 	mov.w	r2, #0
 800b0b6:	4bd2      	ldr	r3, [pc, #840]	@ (800b400 <sdp4_deep_initialize+0x3638>)
 800b0b8:	f7f5 faae 	bl	8000618 <__aeabi_dmul>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	f04f 0000 	mov.w	r0, #0
 800b0c4:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800b0c8:	f7f5 f8ee 	bl	80002a8 <__aeabi_dsub>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	4692      	mov	sl, r2
 800b0d2:	469b      	mov	fp, r3
 800b0d4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b0d8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800b0e2:	f04f 0200 	mov.w	r2, #0
 800b0e6:	4bc7      	ldr	r3, [pc, #796]	@ (800b404 <sdp4_deep_initialize+0x363c>)
 800b0e8:	f7f5 fa96 	bl	8000618 <__aeabi_dmul>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	4650      	mov	r0, sl
 800b0f2:	4659      	mov	r1, fp
 800b0f4:	f7f5 f8da 	bl	80002ac <__adddf3>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4640      	mov	r0, r8
 800b0fe:	4649      	mov	r1, r9
 800b100:	f7f5 fa8a 	bl	8000618 <__aeabi_dmul>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4690      	mov	r8, r2
 800b10a:	4699      	mov	r9, r3
 800b10c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b110:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	f7f5 f8c5 	bl	80002ac <__adddf3>
 800b122:	4602      	mov	r2, r0
 800b124:	460b      	mov	r3, r1
 800b126:	4610      	mov	r0, r2
 800b128:	4619      	mov	r1, r3
 800b12a:	f04f 0200 	mov.w	r2, #0
 800b12e:	4bb6      	ldr	r3, [pc, #728]	@ (800b408 <sdp4_deep_initialize+0x3640>)
 800b130:	f7f5 f8bc 	bl	80002ac <__adddf3>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	4692      	mov	sl, r2
 800b13a:	469b      	mov	fp, r3
 800b13c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b140:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800b14a:	f04f 0200 	mov.w	r2, #0
 800b14e:	4baf      	ldr	r3, [pc, #700]	@ (800b40c <sdp4_deep_initialize+0x3644>)
 800b150:	f7f5 fa62 	bl	8000618 <__aeabi_dmul>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4650      	mov	r0, sl
 800b15a:	4659      	mov	r1, fp
 800b15c:	f7f5 f8a4 	bl	80002a8 <__aeabi_dsub>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	4610      	mov	r0, r2
 800b166:	4619      	mov	r1, r3
 800b168:	a3a1      	add	r3, pc, #644	@ (adr r3, 800b3f0 <sdp4_deep_initialize+0x3628>)
 800b16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16e:	f7f5 fa53 	bl	8000618 <__aeabi_dmul>
 800b172:	4602      	mov	r2, r0
 800b174:	460b      	mov	r3, r1
 800b176:	4640      	mov	r0, r8
 800b178:	4649      	mov	r1, r9
 800b17a:	f7f5 f897 	bl	80002ac <__adddf3>
 800b17e:	4602      	mov	r2, r0
 800b180:	460b      	mov	r3, r1
 800b182:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800b186:	460e      	mov	r6, r1
 800b188:	4620      	mov	r0, r4
 800b18a:	4629      	mov	r1, r5
 800b18c:	f7f5 fa44 	bl	8000618 <__aeabi_dmul>
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	e946 2302 	strd	r2, r3, [r6, #-8]
		f542=29.53125*deep_arg->sinio*(2-8*deep_arg->cosio+deep_arg->theta2*(-12+8*deep_arg->cosio+10*deep_arg->theta2));
 800b198:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b19c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b1a6:	a394      	add	r3, pc, #592	@ (adr r3, 800b3f8 <sdp4_deep_initialize+0x3630>)
 800b1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ac:	f7f5 fa34 	bl	8000618 <__aeabi_dmul>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4690      	mov	r8, r2
 800b1b6:	4699      	mov	r9, r3
 800b1b8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b1bc:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b1c6:	f04f 0200 	mov.w	r2, #0
 800b1ca:	4b91      	ldr	r3, [pc, #580]	@ (800b410 <sdp4_deep_initialize+0x3648>)
 800b1cc:	f7f5 fa24 	bl	8000618 <__aeabi_dmul>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	f04f 0000 	mov.w	r0, #0
 800b1d8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b1dc:	f7f5 f864 	bl	80002a8 <__aeabi_dsub>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4692      	mov	sl, r2
 800b1e6:	469b      	mov	fp, r3
 800b1e8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b1ec:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800b1f6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b1fa:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b204:	f04f 0200 	mov.w	r2, #0
 800b208:	4b81      	ldr	r3, [pc, #516]	@ (800b410 <sdp4_deep_initialize+0x3648>)
 800b20a:	f7f5 fa05 	bl	8000618 <__aeabi_dmul>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	4610      	mov	r0, r2
 800b214:	4619      	mov	r1, r3
 800b216:	f04f 0200 	mov.w	r2, #0
 800b21a:	4b7e      	ldr	r3, [pc, #504]	@ (800b414 <sdp4_deep_initialize+0x364c>)
 800b21c:	f7f5 f844 	bl	80002a8 <__aeabi_dsub>
 800b220:	4602      	mov	r2, r0
 800b222:	460b      	mov	r3, r1
 800b224:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800b228:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b22c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800b236:	f04f 0200 	mov.w	r2, #0
 800b23a:	4b72      	ldr	r3, [pc, #456]	@ (800b404 <sdp4_deep_initialize+0x363c>)
 800b23c:	f7f5 f9ec 	bl	8000618 <__aeabi_dmul>
 800b240:	4602      	mov	r2, r0
 800b242:	460b      	mov	r3, r1
 800b244:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800b248:	f7f5 f830 	bl	80002ac <__adddf3>
 800b24c:	4602      	mov	r2, r0
 800b24e:	460b      	mov	r3, r1
 800b250:	4620      	mov	r0, r4
 800b252:	4629      	mov	r1, r5
 800b254:	f7f5 f9e0 	bl	8000618 <__aeabi_dmul>
 800b258:	4602      	mov	r2, r0
 800b25a:	460b      	mov	r3, r1
 800b25c:	4650      	mov	r0, sl
 800b25e:	4659      	mov	r1, fp
 800b260:	f7f5 f824 	bl	80002ac <__adddf3>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800b26c:	460c      	mov	r4, r1
 800b26e:	4640      	mov	r0, r8
 800b270:	4649      	mov	r1, r9
 800b272:	f7f5 f9d1 	bl	8000618 <__aeabi_dmul>
 800b276:	4602      	mov	r2, r0
 800b278:	460b      	mov	r3, r1
 800b27a:	e9c4 2300 	strd	r2, r3, [r4]
		f543=29.53125*deep_arg->sinio*(-2-8*deep_arg->cosio+deep_arg->theta2*(12+8*deep_arg->cosio-10*deep_arg->theta2));
 800b27e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b282:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b28c:	a35a      	add	r3, pc, #360	@ (adr r3, 800b3f8 <sdp4_deep_initialize+0x3630>)
 800b28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b292:	f7f5 f9c1 	bl	8000618 <__aeabi_dmul>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	4690      	mov	r8, r2
 800b29c:	4699      	mov	r9, r3
 800b29e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b2a2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b2ac:	f04f 0200 	mov.w	r2, #0
 800b2b0:	4b57      	ldr	r3, [pc, #348]	@ (800b410 <sdp4_deep_initialize+0x3648>)
 800b2b2:	f7f5 f9b1 	bl	8000618 <__aeabi_dmul>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	f04f 0000 	mov.w	r0, #0
 800b2be:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800b2c2:	f7f4 fff1 	bl	80002a8 <__aeabi_dsub>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	4692      	mov	sl, r2
 800b2cc:	469b      	mov	fp, r3
 800b2ce:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b2d2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800b2dc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b2e0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b2ea:	f04f 0200 	mov.w	r2, #0
 800b2ee:	4b48      	ldr	r3, [pc, #288]	@ (800b410 <sdp4_deep_initialize+0x3648>)
 800b2f0:	f7f5 f992 	bl	8000618 <__aeabi_dmul>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	f04f 0200 	mov.w	r2, #0
 800b300:	4b44      	ldr	r3, [pc, #272]	@ (800b414 <sdp4_deep_initialize+0x364c>)
 800b302:	f7f4 ffd3 	bl	80002ac <__adddf3>
 800b306:	4602      	mov	r2, r0
 800b308:	460b      	mov	r3, r1
 800b30a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800b30e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b312:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800b31c:	f04f 0200 	mov.w	r2, #0
 800b320:	4b38      	ldr	r3, [pc, #224]	@ (800b404 <sdp4_deep_initialize+0x363c>)
 800b322:	f7f5 f979 	bl	8000618 <__aeabi_dmul>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800b32e:	f7f4 ffbb 	bl	80002a8 <__aeabi_dsub>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4620      	mov	r0, r4
 800b338:	4629      	mov	r1, r5
 800b33a:	f7f5 f96d 	bl	8000618 <__aeabi_dmul>
 800b33e:	4602      	mov	r2, r0
 800b340:	460b      	mov	r3, r1
 800b342:	4650      	mov	r0, sl
 800b344:	4659      	mov	r1, fp
 800b346:	f7f4 ffb1 	bl	80002ac <__adddf3>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800b352:	460c      	mov	r4, r1
 800b354:	4640      	mov	r0, r8
 800b356:	4649      	mov	r1, r9
 800b358:	f7f5 f95e 	bl	8000618 <__aeabi_dmul>
 800b35c:	4602      	mov	r2, r0
 800b35e:	460b      	mov	r3, r1
 800b360:	e944 2302 	strd	r2, r3, [r4, #-8]
		xno2=m->xnq*m->xnq;
 800b364:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b368:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800b372:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b376:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800b380:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800b384:	f7f5 f948 	bl	8000618 <__aeabi_dmul>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	e9c4 2300 	strd	r2, r3, [r4]
		ainv2=aqnv*aqnv;
 800b390:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800b394:	461c      	mov	r4, r3
 800b396:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800b39a:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 800b39e:	f7f5 f93b 	bl	8000618 <__aeabi_dmul>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	e944 2302 	strd	r2, r3, [r4, #-8]
		temp1=3*xno2*ainv2;
 800b3aa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	f04f 0200 	mov.w	r2, #0
 800b3b4:	4b15      	ldr	r3, [pc, #84]	@ (800b40c <sdp4_deep_initialize+0x3644>)
 800b3b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3ba:	f7f5 f92d 	bl	8000618 <__aeabi_dmul>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800b3cc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b3d0:	f7f5 f922 	bl	8000618 <__aeabi_dmul>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	e9c4 2300 	strd	r2, r3, [r4]
		temp=temp1*ROOT22;
 800b3dc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b3e0:	461c      	mov	r4, r3
 800b3e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	e016      	b.n	800b418 <sdp4_deep_initialize+0x3650>
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	080d9595 	.word	0x080d9595
 800b3f4:	401a4000 	.word	0x401a4000
 800b3f8:	00000000 	.word	0x00000000
 800b3fc:	403d8800 	.word	0x403d8800
 800b400:	40100000 	.word	0x40100000
 800b404:	40240000 	.word	0x40240000
 800b408:	3ff00000 	.word	0x3ff00000
 800b40c:	40080000 	.word	0x40080000
 800b410:	40200000 	.word	0x40200000
 800b414:	40280000 	.word	0x40280000
 800b418:	f20f 437c 	addw	r3, pc, #1148	@ 0x47c
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b424:	f7f5 f8f8 	bl	8000618 <__aeabi_dmul>
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d2201=temp*f220*g201;
 800b430:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b434:	4619      	mov	r1, r3
 800b436:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800b43a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b43e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b442:	f7f5 f8e9 	bl	8000618 <__aeabi_dmul>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	4610      	mov	r0, r2
 800b44c:	4619      	mov	r1, r3
 800b44e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b452:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b456:	f7f5 f8df 	bl	8000618 <__aeabi_dmul>
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b462:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b466:	6809      	ldr	r1, [r1, #0]
 800b468:	e9c1 23a0 	strd	r2, r3, [r1, #640]	@ 0x280
		m->d2211=temp*f221*g211;
 800b46c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b470:	4619      	mov	r1, r3
 800b472:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800b476:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b47a:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b47e:	f7f5 f8cb 	bl	8000618 <__aeabi_dmul>
 800b482:	4602      	mov	r2, r0
 800b484:	460b      	mov	r3, r1
 800b486:	4610      	mov	r0, r2
 800b488:	4619      	mov	r1, r3
 800b48a:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 800b48e:	f7f5 f8c3 	bl	8000618 <__aeabi_dmul>
 800b492:	4602      	mov	r2, r0
 800b494:	460b      	mov	r3, r1
 800b496:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b49a:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b49e:	6809      	ldr	r1, [r1, #0]
 800b4a0:	e9c1 23a2 	strd	r2, r3, [r1, #648]	@ 0x288
		temp1=temp1*aqnv;
 800b4a4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b4a8:	461c      	mov	r4, r3
 800b4aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800b4b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4b8:	f7f5 f8ae 	bl	8000618 <__aeabi_dmul>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	e9c4 2300 	strd	r2, r3, [r4]
		temp=temp1*ROOT32;
 800b4c4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b4c8:	461c      	mov	r4, r3
 800b4ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	a3f3      	add	r3, pc, #972	@ (adr r3, 800b8a0 <sdp4_deep_initialize+0x3ad8>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4da:	f7f5 f89d 	bl	8000618 <__aeabi_dmul>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d3210=temp*f321*g310;
 800b4e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b4f8:	f7f5 f88e 	bl	8000618 <__aeabi_dmul>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	4610      	mov	r0, r2
 800b502:	4619      	mov	r1, r3
 800b504:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 800b508:	f7f5 f886 	bl	8000618 <__aeabi_dmul>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b514:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b518:	6809      	ldr	r1, [r1, #0]
 800b51a:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
		m->d3222=temp*f322*g322;
 800b51e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b522:	4619      	mov	r1, r3
 800b524:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800b528:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b52c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b530:	f7f5 f872 	bl	8000618 <__aeabi_dmul>
 800b534:	4602      	mov	r2, r0
 800b536:	460b      	mov	r3, r1
 800b538:	4610      	mov	r0, r2
 800b53a:	4619      	mov	r1, r3
 800b53c:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	@ 0x330
 800b540:	f7f5 f86a 	bl	8000618 <__aeabi_dmul>
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b54c:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b550:	6809      	ldr	r1, [r1, #0]
 800b552:	e9c1 237a 	strd	r2, r3, [r1, #488]	@ 0x1e8
		temp1=temp1*aqnv;
 800b556:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b55a:	461c      	mov	r4, r3
 800b55c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b560:	4619      	mov	r1, r3
 800b562:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800b566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b56a:	f7f5 f855 	bl	8000618 <__aeabi_dmul>
 800b56e:	4602      	mov	r2, r0
 800b570:	460b      	mov	r3, r1
 800b572:	e9c4 2300 	strd	r2, r3, [r4]
		temp=2*temp1*ROOT44;
 800b576:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b57a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	f7f4 fe93 	bl	80002ac <__adddf3>
 800b586:	4602      	mov	r2, r0
 800b588:	460b      	mov	r3, r1
 800b58a:	4610      	mov	r0, r2
 800b58c:	4619      	mov	r1, r3
 800b58e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b592:	461c      	mov	r4, r3
 800b594:	a3c4      	add	r3, pc, #784	@ (adr r3, 800b8a8 <sdp4_deep_initialize+0x3ae0>)
 800b596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59a:	f7f5 f83d 	bl	8000618 <__aeabi_dmul>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d4410=temp*f441*g410;
 800b5a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b5b8:	f7f5 f82e 	bl	8000618 <__aeabi_dmul>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4610      	mov	r0, r2
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	@ 0x328
 800b5c8:	f7f5 f826 	bl	8000618 <__aeabi_dmul>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b5d4:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b5d8:	6809      	ldr	r1, [r1, #0]
 800b5da:	e9c1 237c 	strd	r2, r3, [r1, #496]	@ 0x1f0
		m->d4422=temp*f442*g422;
 800b5de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800b5e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5ec:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b5f0:	f7f5 f812 	bl	8000618 <__aeabi_dmul>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	@ 0x320
 800b600:	f7f5 f80a 	bl	8000618 <__aeabi_dmul>
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b60c:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b610:	6809      	ldr	r1, [r1, #0]
 800b612:	e9c1 237e 	strd	r2, r3, [r1, #504]	@ 0x1f8
		temp1=temp1*aqnv;
 800b616:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b61a:	461c      	mov	r4, r3
 800b61c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b620:	4619      	mov	r1, r3
 800b622:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800b626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b62a:	f7f4 fff5 	bl	8000618 <__aeabi_dmul>
 800b62e:	4602      	mov	r2, r0
 800b630:	460b      	mov	r3, r1
 800b632:	e9c4 2300 	strd	r2, r3, [r4]
		temp=temp1*ROOT52;
 800b636:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b63a:	461c      	mov	r4, r3
 800b63c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b640:	4619      	mov	r1, r3
 800b642:	a39b      	add	r3, pc, #620	@ (adr r3, 800b8b0 <sdp4_deep_initialize+0x3ae8>)
 800b644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b64c:	f7f4 ffe4 	bl	8000618 <__aeabi_dmul>
 800b650:	4602      	mov	r2, r0
 800b652:	460b      	mov	r3, r1
 800b654:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d5220=temp*f522*g520;
 800b658:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b65c:	4619      	mov	r1, r3
 800b65e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800b662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b666:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b66a:	f7f4 ffd5 	bl	8000618 <__aeabi_dmul>
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	4610      	mov	r0, r2
 800b674:	4619      	mov	r1, r3
 800b676:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	@ 0x318
 800b67a:	f7f4 ffcd 	bl	8000618 <__aeabi_dmul>
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b686:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b68a:	6809      	ldr	r1, [r1, #0]
 800b68c:	e9c1 2380 	strd	r2, r3, [r1, #512]	@ 0x200
		m->d5232=temp*f523*g532;
 800b690:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b694:	4619      	mov	r1, r3
 800b696:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800b69a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b69e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b6a2:	f7f4 ffb9 	bl	8000618 <__aeabi_dmul>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	@ 0x308
 800b6b2:	f7f4 ffb1 	bl	8000618 <__aeabi_dmul>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b6be:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b6c2:	6809      	ldr	r1, [r1, #0]
 800b6c4:	e9c1 2382 	strd	r2, r3, [r1, #520]	@ 0x208
		temp=2*temp1*ROOT54;
 800b6c8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b6cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	f7f4 fdea 	bl	80002ac <__adddf3>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4610      	mov	r0, r2
 800b6de:	4619      	mov	r1, r3
 800b6e0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b6e4:	461c      	mov	r4, r3
 800b6e6:	a374      	add	r3, pc, #464	@ (adr r3, 800b8b8 <sdp4_deep_initialize+0x3af0>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	f7f4 ff94 	bl	8000618 <__aeabi_dmul>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d5421=temp*f542*g521;
 800b6f8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b706:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b70a:	f7f4 ff85 	bl	8000618 <__aeabi_dmul>
 800b70e:	4602      	mov	r2, r0
 800b710:	460b      	mov	r3, r1
 800b712:	4610      	mov	r0, r2
 800b714:	4619      	mov	r1, r3
 800b716:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	@ 0x310
 800b71a:	f7f4 ff7d 	bl	8000618 <__aeabi_dmul>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b726:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b72a:	6809      	ldr	r1, [r1, #0]
 800b72c:	e9c1 2384 	strd	r2, r3, [r1, #528]	@ 0x210
		m->d5433=temp*f543*g533;
 800b730:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b734:	4619      	mov	r1, r3
 800b736:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800b73a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b73e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b742:	f7f4 ff69 	bl	8000618 <__aeabi_dmul>
 800b746:	4602      	mov	r2, r0
 800b748:	460b      	mov	r3, r1
 800b74a:	4610      	mov	r0, r2
 800b74c:	4619      	mov	r1, r3
 800b74e:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	@ 0x300
 800b752:	f7f4 ff61 	bl	8000618 <__aeabi_dmul>
 800b756:	4602      	mov	r2, r0
 800b758:	460b      	mov	r3, r1
 800b75a:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b75e:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b762:	6809      	ldr	r1, [r1, #0]
 800b764:	e9c1 2386 	strd	r2, r3, [r1, #536]	@ 0x218
		m->xlamo=xmao+m->xnodeo+m->xnodeo-m->thgr-m->thgr;
 800b768:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b76c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	@ 0x2c0
 800b776:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 800b77a:	f7f4 fd97 	bl	80002ac <__adddf3>
 800b77e:	4602      	mov	r2, r0
 800b780:	460b      	mov	r3, r1
 800b782:	4610      	mov	r0, r2
 800b784:	4619      	mov	r1, r3
 800b786:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b78a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	@ 0x2c0
 800b794:	f7f4 fd8a 	bl	80002ac <__adddf3>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	4610      	mov	r0, r2
 800b79e:	4619      	mov	r1, r3
 800b7a0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b7a4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 800b7ae:	f7f4 fd7b 	bl	80002a8 <__aeabi_dsub>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	4610      	mov	r0, r2
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b7be:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 800b7c8:	f7f4 fd6e 	bl	80002a8 <__aeabi_dsub>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b7d4:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b7d8:	6809      	ldr	r1, [r1, #0]
 800b7da:	e9c1 2394 	strd	r2, r3, [r1, #592]	@ 0x250
		bfact=deep_arg->xmdot+deep_arg->xnodot+deep_arg->xnodot-THDT-THDT;
 800b7de:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b7e2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800b7ec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b7f0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800b7fa:	f7f4 fd57 	bl	80002ac <__adddf3>
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	4610      	mov	r0, r2
 800b804:	4619      	mov	r1, r3
 800b806:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b80a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800b814:	f7f4 fd4a 	bl	80002ac <__adddf3>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	4610      	mov	r0, r2
 800b81e:	4619      	mov	r1, r3
 800b820:	a327      	add	r3, pc, #156	@ (adr r3, 800b8c0 <sdp4_deep_initialize+0x3af8>)
 800b822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b826:	f7f4 fd3f 	bl	80002a8 <__aeabi_dsub>
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	4610      	mov	r0, r2
 800b830:	4619      	mov	r1, r3
 800b832:	a323      	add	r3, pc, #140	@ (adr r3, 800b8c0 <sdp4_deep_initialize+0x3af8>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f7f4 fd36 	bl	80002a8 <__aeabi_dsub>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
		bfact=bfact+m->ssl+m->ssh+m->ssh;
 800b844:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b848:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	@ 0x1d0
 800b852:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 800b856:	f7f4 fd29 	bl	80002ac <__adddf3>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	4610      	mov	r0, r2
 800b860:	4619      	mov	r1, r3
 800b862:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b866:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 800b870:	f7f4 fd1c 	bl	80002ac <__adddf3>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	4610      	mov	r0, r2
 800b87a:	4619      	mov	r1, r3
 800b87c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b880:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 800b88a:	f7f4 fd0f 	bl	80002ac <__adddf3>
 800b88e:	4602      	mov	r2, r0
 800b890:	460b      	mov	r3, r1
 800b892:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
 800b896:	e2d9      	b.n	800be4c <sdp4_deep_initialize+0x4084>
 800b898:	e8fbe45d 	.word	0xe8fbe45d
 800b89c:	3ebe046a 	.word	0x3ebe046a
 800b8a0:	5d4afd1b 	.word	0x5d4afd1b
 800b8a4:	3e991834 	.word	0x3e991834
 800b8a8:	f68be0bd 	.word	0xf68be0bd
 800b8ac:	3e3fa077 	.word	0x3e3fa077
 800b8b0:	6f6ae289 	.word	0x6f6ae289
 800b8b4:	3e7eadb3 	.word	0x3e7eadb3
 800b8b8:	c74bf4b7 	.word	0xc74bf4b7
 800b8bc:	3e22b259 	.word	0x3e22b259
 800b8c0:	5b2195a5 	.word	0x5b2195a5
 800b8c4:	3f71ebcd 	.word	0x3f71ebcd
	}

	else
	{
		m->resonanceFlag = 1;
 800b8c8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b8cc:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	605a      	str	r2, [r3, #4]
		m->synchronousFlag = 1;
 800b8d6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b8da:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	609a      	str	r2, [r3, #8]

		/* Synchronous resonance terms initialization */
		g200=1+deep_arg->eosq*(-2.5+0.8125*deep_arg->eosq);
 800b8e4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b8e8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b8f2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b8f6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b900:	f04f 0200 	mov.w	r2, #0
 800b904:	4bce      	ldr	r3, [pc, #824]	@ (800bc40 <sdp4_deep_initialize+0x3e78>)
 800b906:	f7f4 fe87 	bl	8000618 <__aeabi_dmul>
 800b90a:	4602      	mov	r2, r0
 800b90c:	460b      	mov	r3, r1
 800b90e:	4610      	mov	r0, r2
 800b910:	4619      	mov	r1, r3
 800b912:	f04f 0200 	mov.w	r2, #0
 800b916:	4bcb      	ldr	r3, [pc, #812]	@ (800bc44 <sdp4_deep_initialize+0x3e7c>)
 800b918:	f7f4 fcc6 	bl	80002a8 <__aeabi_dsub>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4620      	mov	r0, r4
 800b922:	4629      	mov	r1, r5
 800b924:	f7f4 fe78 	bl	8000618 <__aeabi_dmul>
 800b928:	4602      	mov	r2, r0
 800b92a:	460b      	mov	r3, r1
 800b92c:	4610      	mov	r0, r2
 800b92e:	4619      	mov	r1, r3
 800b930:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800b934:	461c      	mov	r4, r3
 800b936:	f04f 0200 	mov.w	r2, #0
 800b93a:	4bc3      	ldr	r3, [pc, #780]	@ (800bc48 <sdp4_deep_initialize+0x3e80>)
 800b93c:	f7f4 fcb6 	bl	80002ac <__adddf3>
 800b940:	4602      	mov	r2, r0
 800b942:	460b      	mov	r3, r1
 800b944:	e944 2302 	strd	r2, r3, [r4, #-8]
		g310=1+2*deep_arg->eosq;
 800b948:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b94c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b956:	4602      	mov	r2, r0
 800b958:	460b      	mov	r3, r1
 800b95a:	f7f4 fca7 	bl	80002ac <__adddf3>
 800b95e:	4602      	mov	r2, r0
 800b960:	460b      	mov	r3, r1
 800b962:	4610      	mov	r0, r2
 800b964:	4619      	mov	r1, r3
 800b966:	f04f 0200 	mov.w	r2, #0
 800b96a:	4bb7      	ldr	r3, [pc, #732]	@ (800bc48 <sdp4_deep_initialize+0x3e80>)
 800b96c:	f7f4 fc9e 	bl	80002ac <__adddf3>
 800b970:	4602      	mov	r2, r0
 800b972:	460b      	mov	r3, r1
 800b974:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
		g300=1+deep_arg->eosq*(-6+6.60937*deep_arg->eosq);
 800b978:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b97c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b986:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b98a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b994:	a3a6      	add	r3, pc, #664	@ (adr r3, 800bc30 <sdp4_deep_initialize+0x3e68>)
 800b996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99a:	f7f4 fe3d 	bl	8000618 <__aeabi_dmul>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4610      	mov	r0, r2
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	f04f 0200 	mov.w	r2, #0
 800b9aa:	4ba8      	ldr	r3, [pc, #672]	@ (800bc4c <sdp4_deep_initialize+0x3e84>)
 800b9ac:	f7f4 fc7c 	bl	80002a8 <__aeabi_dsub>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7f4 fe2e 	bl	8000618 <__aeabi_dmul>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800b9c8:	461c      	mov	r4, r3
 800b9ca:	f04f 0200 	mov.w	r2, #0
 800b9ce:	4b9e      	ldr	r3, [pc, #632]	@ (800bc48 <sdp4_deep_initialize+0x3e80>)
 800b9d0:	f7f4 fc6c 	bl	80002ac <__adddf3>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	e9c4 2300 	strd	r2, r3, [r4]
		f220=0.75*(1+deep_arg->cosio)*(1+deep_arg->cosio);
 800b9dc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b9e0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b9ea:	f04f 0200 	mov.w	r2, #0
 800b9ee:	4b96      	ldr	r3, [pc, #600]	@ (800bc48 <sdp4_deep_initialize+0x3e80>)
 800b9f0:	f7f4 fc5c 	bl	80002ac <__adddf3>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4610      	mov	r0, r2
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	f04f 0200 	mov.w	r2, #0
 800ba00:	4b93      	ldr	r3, [pc, #588]	@ (800bc50 <sdp4_deep_initialize+0x3e88>)
 800ba02:	f7f4 fe09 	bl	8000618 <__aeabi_dmul>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4614      	mov	r4, r2
 800ba0c:	461d      	mov	r5, r3
 800ba0e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ba12:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ba1c:	f04f 0200 	mov.w	r2, #0
 800ba20:	4b89      	ldr	r3, [pc, #548]	@ (800bc48 <sdp4_deep_initialize+0x3e80>)
 800ba22:	f7f4 fc43 	bl	80002ac <__adddf3>
 800ba26:	4602      	mov	r2, r0
 800ba28:	460b      	mov	r3, r1
 800ba2a:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800ba2e:	460e      	mov	r6, r1
 800ba30:	4620      	mov	r0, r4
 800ba32:	4629      	mov	r1, r5
 800ba34:	f7f4 fdf0 	bl	8000618 <__aeabi_dmul>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	e946 2302 	strd	r2, r3, [r6, #-8]
		f311=0.9375*deep_arg->sinio*deep_arg->sinio*(1+3*deep_arg->cosio)-0.75*(1+deep_arg->cosio);
 800ba40:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ba44:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ba4e:	f04f 0200 	mov.w	r2, #0
 800ba52:	4b80      	ldr	r3, [pc, #512]	@ (800bc54 <sdp4_deep_initialize+0x3e8c>)
 800ba54:	f7f4 fde0 	bl	8000618 <__aeabi_dmul>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	4619      	mov	r1, r3
 800ba60:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ba64:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ba6e:	f7f4 fdd3 	bl	8000618 <__aeabi_dmul>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4614      	mov	r4, r2
 800ba78:	461d      	mov	r5, r3
 800ba7a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ba7e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ba88:	f04f 0200 	mov.w	r2, #0
 800ba8c:	4b72      	ldr	r3, [pc, #456]	@ (800bc58 <sdp4_deep_initialize+0x3e90>)
 800ba8e:	f7f4 fdc3 	bl	8000618 <__aeabi_dmul>
 800ba92:	4602      	mov	r2, r0
 800ba94:	460b      	mov	r3, r1
 800ba96:	4610      	mov	r0, r2
 800ba98:	4619      	mov	r1, r3
 800ba9a:	f04f 0200 	mov.w	r2, #0
 800ba9e:	4b6a      	ldr	r3, [pc, #424]	@ (800bc48 <sdp4_deep_initialize+0x3e80>)
 800baa0:	f7f4 fc04 	bl	80002ac <__adddf3>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4620      	mov	r0, r4
 800baaa:	4629      	mov	r1, r5
 800baac:	f7f4 fdb4 	bl	8000618 <__aeabi_dmul>
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	4614      	mov	r4, r2
 800bab6:	461d      	mov	r5, r3
 800bab8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800babc:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bac6:	f04f 0200 	mov.w	r2, #0
 800baca:	4b5f      	ldr	r3, [pc, #380]	@ (800bc48 <sdp4_deep_initialize+0x3e80>)
 800bacc:	f7f4 fbee 	bl	80002ac <__adddf3>
 800bad0:	4602      	mov	r2, r0
 800bad2:	460b      	mov	r3, r1
 800bad4:	4610      	mov	r0, r2
 800bad6:	4619      	mov	r1, r3
 800bad8:	f04f 0200 	mov.w	r2, #0
 800badc:	4b5c      	ldr	r3, [pc, #368]	@ (800bc50 <sdp4_deep_initialize+0x3e88>)
 800bade:	f7f4 fd9b 	bl	8000618 <__aeabi_dmul>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800baea:	460e      	mov	r6, r1
 800baec:	4620      	mov	r0, r4
 800baee:	4629      	mov	r1, r5
 800baf0:	f7f4 fbda 	bl	80002a8 <__aeabi_dsub>
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	e9c6 2300 	strd	r2, r3, [r6]
		f330=1+deep_arg->cosio;
 800bafc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bb00:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bb0a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800bb0e:	461c      	mov	r4, r3
 800bb10:	f04f 0200 	mov.w	r2, #0
 800bb14:	4b4c      	ldr	r3, [pc, #304]	@ (800bc48 <sdp4_deep_initialize+0x3e80>)
 800bb16:	f7f4 fbc9 	bl	80002ac <__adddf3>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	e944 2302 	strd	r2, r3, [r4, #-8]
		f330=1.875*f330*f330*f330;
 800bb22:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800bb26:	4619      	mov	r1, r3
 800bb28:	f04f 0200 	mov.w	r2, #0
 800bb2c:	4b4b      	ldr	r3, [pc, #300]	@ (800bc5c <sdp4_deep_initialize+0x3e94>)
 800bb2e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800bb32:	f7f4 fd71 	bl	8000618 <__aeabi_dmul>
 800bb36:	4602      	mov	r2, r0
 800bb38:	460b      	mov	r3, r1
 800bb3a:	4610      	mov	r0, r2
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800bb42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb46:	f7f4 fd67 	bl	8000618 <__aeabi_dmul>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800bb52:	460c      	mov	r4, r1
 800bb54:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800bb58:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800bb5c:	f7f4 fd5c 	bl	8000618 <__aeabi_dmul>
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->del1=3*m->xnq*m->xnq*aqnv*aqnv;
 800bb68:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bb6c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800bb76:	f04f 0200 	mov.w	r2, #0
 800bb7a:	4b37      	ldr	r3, [pc, #220]	@ (800bc58 <sdp4_deep_initialize+0x3e90>)
 800bb7c:	f7f4 fd4c 	bl	8000618 <__aeabi_dmul>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4610      	mov	r0, r2
 800bb86:	4619      	mov	r1, r3
 800bb88:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bb8c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800bb96:	f7f4 fd3f 	bl	8000618 <__aeabi_dmul>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	4610      	mov	r0, r2
 800bba0:	4619      	mov	r1, r3
 800bba2:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800bba6:	f7f4 fd37 	bl	8000618 <__aeabi_dmul>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	460b      	mov	r3, r1
 800bbae:	4610      	mov	r0, r2
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800bbb6:	f7f4 fd2f 	bl	8000618 <__aeabi_dmul>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800bbc2:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800bbc6:	6809      	ldr	r1, [r1, #0]
 800bbc8:	e9c1 2388 	strd	r2, r3, [r1, #544]	@ 0x220
		m->del2=2*m->del1*f220*g200*Q22;
 800bbcc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bbd0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	e9d3 0188 	ldrd	r0, r1, [r3, #544]	@ 0x220
 800bbda:	4602      	mov	r2, r0
 800bbdc:	460b      	mov	r3, r1
 800bbde:	f7f4 fb65 	bl	80002ac <__adddf3>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	4619      	mov	r1, r3
 800bbea:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800bbee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbf2:	f7f4 fd11 	bl	8000618 <__aeabi_dmul>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	4610      	mov	r0, r2
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800bc02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc06:	f7f4 fd07 	bl	8000618 <__aeabi_dmul>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4610      	mov	r0, r2
 800bc10:	4619      	mov	r1, r3
 800bc12:	a309      	add	r3, pc, #36	@ (adr r3, 800bc38 <sdp4_deep_initialize+0x3e70>)
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	f7f4 fcfe 	bl	8000618 <__aeabi_dmul>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	460b      	mov	r3, r1
 800bc20:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800bc24:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800bc28:	6809      	ldr	r1, [r1, #0]
 800bc2a:	e9c1 238a 	strd	r2, r3, [r1, #552]	@ 0x228
 800bc2e:	e017      	b.n	800bc60 <sdp4_deep_initialize+0x3e98>
 800bc30:	b074a772 	.word	0xb074a772
 800bc34:	401a6ffe 	.word	0x401a6ffe
 800bc38:	e8fbe45d 	.word	0xe8fbe45d
 800bc3c:	3ebe046a 	.word	0x3ebe046a
 800bc40:	3fea0000 	.word	0x3fea0000
 800bc44:	40040000 	.word	0x40040000
 800bc48:	3ff00000 	.word	0x3ff00000
 800bc4c:	40180000 	.word	0x40180000
 800bc50:	3fe80000 	.word	0x3fe80000
 800bc54:	3fee0000 	.word	0x3fee0000
 800bc58:	40080000 	.word	0x40080000
 800bc5c:	3ffe0000 	.word	0x3ffe0000
		m->del3=3*m->del1*f330*g300*Q33*aqnv;
 800bc60:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bc64:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	e9d3 0188 	ldrd	r0, r1, [r3, #544]	@ 0x220
 800bc6e:	f04f 0200 	mov.w	r2, #0
 800bc72:	4ba3      	ldr	r3, [pc, #652]	@ (800bf00 <sdp4_deep_initialize+0x4138>)
 800bc74:	f7f4 fcd0 	bl	8000618 <__aeabi_dmul>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4610      	mov	r0, r2
 800bc7e:	4619      	mov	r1, r3
 800bc80:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800bc84:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc88:	f7f4 fcc6 	bl	8000618 <__aeabi_dmul>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	4610      	mov	r0, r2
 800bc92:	4619      	mov	r1, r3
 800bc94:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800bc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9c:	f7f4 fcbc 	bl	8000618 <__aeabi_dmul>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	4610      	mov	r0, r2
 800bca6:	4619      	mov	r1, r3
 800bca8:	a387      	add	r3, pc, #540	@ (adr r3, 800bec8 <sdp4_deep_initialize+0x4100>)
 800bcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcae:	f7f4 fcb3 	bl	8000618 <__aeabi_dmul>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	4619      	mov	r1, r3
 800bcba:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800bcbe:	f7f4 fcab 	bl	8000618 <__aeabi_dmul>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800bcca:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800bcce:	6809      	ldr	r1, [r1, #0]
 800bcd0:	e9c1 238c 	strd	r2, r3, [r1, #560]	@ 0x230
		m->del1=m->del1*f311*g310*Q31*aqnv;
 800bcd4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bcd8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	e9d3 0188 	ldrd	r0, r1, [r3, #544]	@ 0x220
 800bce2:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 fc95 	bl	8000618 <__aeabi_dmul>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4610      	mov	r0, r2
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 800bcfa:	f7f4 fc8d 	bl	8000618 <__aeabi_dmul>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	460b      	mov	r3, r1
 800bd02:	4610      	mov	r0, r2
 800bd04:	4619      	mov	r1, r3
 800bd06:	a372      	add	r3, pc, #456	@ (adr r3, 800bed0 <sdp4_deep_initialize+0x4108>)
 800bd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0c:	f7f4 fc84 	bl	8000618 <__aeabi_dmul>
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	4610      	mov	r0, r2
 800bd16:	4619      	mov	r1, r3
 800bd18:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800bd1c:	f7f4 fc7c 	bl	8000618 <__aeabi_dmul>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800bd28:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800bd2c:	6809      	ldr	r1, [r1, #0]
 800bd2e:	e9c1 2388 	strd	r2, r3, [r1, #544]	@ 0x220
		m->fasx2=0.13130908;
 800bd32:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bd36:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800bd3a:	6819      	ldr	r1, [r3, #0]
 800bd3c:	a366      	add	r3, pc, #408	@ (adr r3, 800bed8 <sdp4_deep_initialize+0x4110>)
 800bd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd42:	e9c1 238e 	strd	r2, r3, [r1, #568]	@ 0x238
		m->fasx4=2.8843198;
 800bd46:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bd4a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800bd4e:	6819      	ldr	r1, [r3, #0]
 800bd50:	a363      	add	r3, pc, #396	@ (adr r3, 800bee0 <sdp4_deep_initialize+0x4118>)
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	e9c1 2390 	strd	r2, r3, [r1, #576]	@ 0x240
		m->fasx6=0.37448087;
 800bd5a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bd5e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800bd62:	6819      	ldr	r1, [r3, #0]
 800bd64:	a360      	add	r3, pc, #384	@ (adr r3, 800bee8 <sdp4_deep_initialize+0x4120>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	e9c1 2392 	strd	r2, r3, [r1, #584]	@ 0x248
		m->xlamo=xmao+m->xnodeo+m->omegao-m->thgr;
 800bd6e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bd72:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	@ 0x2c0
 800bd7c:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 800bd80:	f7f4 fa94 	bl	80002ac <__adddf3>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	4610      	mov	r0, r2
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bd90:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	@ 0x2c8
 800bd9a:	f7f4 fa87 	bl	80002ac <__adddf3>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	460b      	mov	r3, r1
 800bda2:	4610      	mov	r0, r2
 800bda4:	4619      	mov	r1, r3
 800bda6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bdaa:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 800bdb4:	f7f4 fa78 	bl	80002a8 <__aeabi_dsub>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800bdc0:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800bdc4:	6809      	ldr	r1, [r1, #0]
 800bdc6:	e9c1 2394 	strd	r2, r3, [r1, #592]	@ 0x250
		bfact=deep_arg->xmdot+xpidot-THDT;
 800bdca:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bdce:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800bdd8:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	@ 0x2a0
 800bddc:	f7f4 fa66 	bl	80002ac <__adddf3>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	4610      	mov	r0, r2
 800bde6:	4619      	mov	r1, r3
 800bde8:	a341      	add	r3, pc, #260	@ (adr r3, 800bef0 <sdp4_deep_initialize+0x4128>)
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	f7f4 fa5b 	bl	80002a8 <__aeabi_dsub>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
		bfact=bfact+m->ssl+m->ssg+m->ssh;
 800bdfa:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bdfe:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	@ 0x1d0
 800be08:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 800be0c:	f7f4 fa4e 	bl	80002ac <__adddf3>
 800be10:	4602      	mov	r2, r0
 800be12:	460b      	mov	r3, r1
 800be14:	4610      	mov	r0, r2
 800be16:	4619      	mov	r1, r3
 800be18:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800be1c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	@ 0x160
 800be26:	f7f4 fa41 	bl	80002ac <__adddf3>
 800be2a:	4602      	mov	r2, r0
 800be2c:	460b      	mov	r3, r1
 800be2e:	4610      	mov	r0, r2
 800be30:	4619      	mov	r1, r3
 800be32:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800be36:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 800be40:	f7f4 fa34 	bl	80002ac <__adddf3>
 800be44:	4602      	mov	r2, r0
 800be46:	460b      	mov	r3, r1
 800be48:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
	}

	m->xfact=bfact-m->xnq;
 800be4c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800be50:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800be5a:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	@ 0x350
 800be5e:	f7f4 fa23 	bl	80002a8 <__aeabi_dsub>
 800be62:	4602      	mov	r2, r0
 800be64:	460b      	mov	r3, r1
 800be66:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800be6a:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800be6e:	6809      	ldr	r1, [r1, #0]
 800be70:	e9c1 2396 	strd	r2, r3, [r1, #600]	@ 0x258

	/* Initialize integrator */
	m->stepp=720;
 800be74:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800be78:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800be7c:	6819      	ldr	r1, [r3, #0]
 800be7e:	f04f 0200 	mov.w	r2, #0
 800be82:	4b20      	ldr	r3, [pc, #128]	@ (800bf04 <sdp4_deep_initialize+0x413c>)
 800be84:	e9c1 2398 	strd	r2, r3, [r1, #608]	@ 0x260
	m->stepn=-720;
 800be88:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800be8c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800be90:	6819      	ldr	r1, [r3, #0]
 800be92:	f04f 0200 	mov.w	r2, #0
 800be96:	4b1c      	ldr	r3, [pc, #112]	@ (800bf08 <sdp4_deep_initialize+0x4140>)
 800be98:	e9c1 239a 	strd	r2, r3, [r1, #616]	@ 0x268
	m->step2=259200;
 800be9c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bea0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800bea4:	6819      	ldr	r1, [r3, #0]
 800bea6:	a314      	add	r3, pc, #80	@ (adr r3, 800bef8 <sdp4_deep_initialize+0x4130>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	e9c1 239c 	strd	r2, r3, [r1, #624]	@ 0x270

	return;
 800beb0:	e002      	b.n	800beb8 <sdp4_deep_initialize+0x40f0>
		    return;
 800beb2:	bf00      	nop
 800beb4:	e000      	b.n	800beb8 <sdp4_deep_initialize+0x40f0>
		    return;
 800beb6:	bf00      	nop
}
 800beb8:	f507 7759 	add.w	r7, r7, #868	@ 0x364
 800bebc:	46bd      	mov	sp, r7
 800bebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec2:	bf00      	nop
 800bec4:	f3af 8000 	nop.w
 800bec8:	fa8d3300 	.word	0xfa8d3300
 800becc:	3e8db168 	.word	0x3e8db168
 800bed0:	192cb6b5 	.word	0x192cb6b5
 800bed4:	3ec200a9 	.word	0x3ec200a9
 800bed8:	662248d5 	.word	0x662248d5
 800bedc:	3fc0cebc 	.word	0x3fc0cebc
 800bee0:	4261a460 	.word	0x4261a460
 800bee4:	40071316 	.word	0x40071316
 800bee8:	9c682b0d 	.word	0x9c682b0d
 800beec:	3fd7f77e 	.word	0x3fd7f77e
 800bef0:	5b2195a5 	.word	0x5b2195a5
 800bef4:	3f71ebcd 	.word	0x3f71ebcd
 800bef8:	00000000 	.word	0x00000000
 800befc:	410fa400 	.word	0x410fa400
 800bf00:	40080000 	.word	0x40080000
 800bf04:	40868000 	.word	0x40868000
 800bf08:	c0868000 	.word	0xc0868000
 800bf0c:	00000000 	.word	0x00000000

0800bf10 <deep_arg_dynamic_init>:

void deep_arg_dynamic_init(const struct _sdp4 *m, deep_arg_dynamic_t *deep_dyn){
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
	deep_dyn->savtsn=1E20;
 800bf1a:	6839      	ldr	r1, [r7, #0]
 800bf1c:	a312      	add	r3, pc, #72	@ (adr r3, 800bf68 <deep_arg_dynamic_init+0x58>)
 800bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf22:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	deep_dyn->loopFlag = 0;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	deep_dyn->epochRestartFlag = 0;
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	deep_dyn->xli=m->xlamo;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	@ 0x250
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	deep_dyn->xni=m->xnq;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	deep_dyn->atime=0;
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	f04f 0200 	mov.w	r2, #0
 800bf54:	f04f 0300 	mov.w	r3, #0
 800bf58:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
}
 800bf5c:	bf00      	nop
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	78b58c40 	.word	0x78b58c40
 800bf6c:	4415af1d 	.word	0x4415af1d

0800bf70 <sdp4_deep>:

void sdp4_deep(const struct _sdp4 *m, int ientry, const deep_arg_fixed_t * deep_arg, deep_arg_dynamic_t *deep_dyn)
{
 800bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	b0d7      	sub	sp, #348	@ 0x15c
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	f507 74ac 	add.w	r4, r7, #344	@ 0x158
 800bf7c:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800bf80:	6020      	str	r0, [r4, #0]
 800bf82:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 800bf86:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 800bf8a:	6001      	str	r1, [r0, #0]
 800bf8c:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800bf90:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800bf94:	600a      	str	r2, [r1, #0]
 800bf96:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800bf9a:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800bf9e:	6013      	str	r3, [r2, #0]
	double alfdp,
	sinis, sinok, sil, betdp, dalf, cosis, cosok, dbet, dls, f2,
	f3, xnoh, pgh, ph, sel, ses, xls, sinzf, sis, sll, sls, temp,
	x2li, x2omi, xl, xldot, xnddt,
	xndot, xomi, zf, zm,
	delt=0, ft=0;
 800bfa0:	f04f 0200 	mov.w	r2, #0
 800bfa4:	f04f 0300 	mov.w	r3, #0
 800bfa8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 800bfac:	f04f 0200 	mov.w	r2, #0
 800bfb0:	f04f 0300 	mov.w	r3, #0
 800bfb4:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138


	switch (ientry)
 800bfb8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bfbc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d009      	beq.n	800bfda <sdp4_deep+0x6a>
 800bfc6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bfca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	f001 8203 	beq.w	800d3dc <sdp4_deep+0x146c>
 800bfd6:	f001 bfef 	b.w	800dfb8 <sdp4_deep+0x2048>
	{

		case DPSecular:  /* Entrance for deep space secular effects */

		deep_dyn->xll=deep_dyn->xll+m->ssl*deep_dyn->t;
 800bfda:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bfde:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800bfe8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bfec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	@ 0x1d0
 800bff6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bffa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800c004:	f7f4 fb08 	bl	8000618 <__aeabi_dmul>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	4620      	mov	r0, r4
 800c00e:	4629      	mov	r1, r5
 800c010:	f7f4 f94c 	bl	80002ac <__adddf3>
 800c014:	4602      	mov	r2, r0
 800c016:	460b      	mov	r3, r1
 800c018:	4610      	mov	r0, r2
 800c01a:	4619      	mov	r1, r3
 800c01c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c020:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	e9c3 0100 	strd	r0, r1, [r3]
		deep_dyn->omgadf=deep_dyn->omgadf+m->ssg*deep_dyn->t;
 800c02a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c02e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800c038:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c03c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	@ 0x160
 800c046:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c04a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800c054:	f7f4 fae0 	bl	8000618 <__aeabi_dmul>
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	4620      	mov	r0, r4
 800c05e:	4629      	mov	r1, r5
 800c060:	f7f4 f924 	bl	80002ac <__adddf3>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	4610      	mov	r0, r2
 800c06a:	4619      	mov	r1, r3
 800c06c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c070:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	e9c3 0102 	strd	r0, r1, [r3, #8]
		deep_dyn->xnode=deep_dyn->xnode+m->ssh*deep_dyn->t;
 800c07a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c07e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800c088:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c08c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	e9d3 0176 	ldrd	r0, r1, [r3, #472]	@ 0x1d8
 800c096:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c09a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800c0a4:	f7f4 fab8 	bl	8000618 <__aeabi_dmul>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	f7f4 f8fc 	bl	80002ac <__adddf3>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c0c0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	e9c3 0104 	strd	r0, r1, [r3, #16]
		deep_dyn->em=m->eo+m->sse*deep_dyn->t;
 800c0ca:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c0ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	e9d3 45b8 	ldrd	r4, r5, [r3, #736]	@ 0x2e0
 800c0d8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c0dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	@ 0x150
 800c0e6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c0ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800c0f4:	f7f4 fa90 	bl	8000618 <__aeabi_dmul>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	4629      	mov	r1, r5
 800c100:	f7f4 f8d4 	bl	80002ac <__adddf3>
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	4610      	mov	r0, r2
 800c10a:	4619      	mov	r1, r3
 800c10c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c110:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	e9c3 0106 	strd	r0, r1, [r3, #24]
		deep_dyn->xinc=m->xincl+m->ssi*deep_dyn->t;
 800c11a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c11e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	e9d3 45b6 	ldrd	r4, r5, [r3, #728]	@ 0x2d8
 800c128:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c12c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	e9d3 0156 	ldrd	r0, r1, [r3, #344]	@ 0x158
 800c136:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c13a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800c144:	f7f4 fa68 	bl	8000618 <__aeabi_dmul>
 800c148:	4602      	mov	r2, r0
 800c14a:	460b      	mov	r3, r1
 800c14c:	4620      	mov	r0, r4
 800c14e:	4629      	mov	r1, r5
 800c150:	f7f4 f8ac 	bl	80002ac <__adddf3>
 800c154:	4602      	mov	r2, r0
 800c156:	460b      	mov	r3, r1
 800c158:	4610      	mov	r0, r2
 800c15a:	4619      	mov	r1, r3
 800c15c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c160:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	e9c3 0108 	strd	r0, r1, [r3, #32]

		if (deep_dyn->xinc<0)
 800c16a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c16e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800c178:	f04f 0200 	mov.w	r2, #0
 800c17c:	f04f 0300 	mov.w	r3, #0
 800c180:	f7f4 fcbc 	bl	8000afc <__aeabi_dcmplt>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d03f      	beq.n	800c20a <sdp4_deep+0x29a>
		{
			deep_dyn->xinc=-deep_dyn->xinc;
 800c18a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c18e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c198:	633a      	str	r2, [r7, #48]	@ 0x30
 800c19a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800c19e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1a0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c1a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800c1ae:	ed83 7b08 	vstr	d7, [r3, #32]
			deep_dyn->xnode=deep_dyn->xnode+PI;
 800c1b2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c1b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c1c0:	f20f 6310 	addw	r3, pc, #1552	@ 0x610
 800c1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c8:	f7f4 f870 	bl	80002ac <__adddf3>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800c1d4:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800c1d8:	6809      	ldr	r1, [r1, #0]
 800c1da:	e9c1 2304 	strd	r2, r3, [r1, #16]
			deep_dyn->omgadf=deep_dyn->omgadf-PI;
 800c1de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c1e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800c1ec:	f20f 53e4 	addw	r3, pc, #1508	@ 0x5e4
 800c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f4:	f7f4 f858 	bl	80002a8 <__aeabi_dsub>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800c200:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800c204:	6809      	ldr	r1, [r1, #0]
 800c206:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		if (!m->resonanceFlag) {
 800c20a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c20e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	f001 86cd 	beq.w	800dfb6 <sdp4_deep+0x2046>
			return;
		}

		do
		{
			if ((deep_dyn->atime==0) || ((deep_dyn->t>=0) && (deep_dyn->atime<0)) || ((deep_dyn->t<0) && (deep_dyn->atime>=0)))
 800c21c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c220:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800c22a:	f04f 0200 	mov.w	r2, #0
 800c22e:	f04f 0300 	mov.w	r3, #0
 800c232:	f7f4 fc59 	bl	8000ae8 <__aeabi_dcmpeq>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d13f      	bne.n	800c2bc <sdp4_deep+0x34c>
 800c23c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c240:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c24a:	f04f 0200 	mov.w	r2, #0
 800c24e:	f04f 0300 	mov.w	r3, #0
 800c252:	f7f4 fc67 	bl	8000b24 <__aeabi_dcmpge>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00f      	beq.n	800c27c <sdp4_deep+0x30c>
 800c25c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c260:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800c26a:	f04f 0200 	mov.w	r2, #0
 800c26e:	f04f 0300 	mov.w	r3, #0
 800c272:	f7f4 fc43 	bl	8000afc <__aeabi_dcmplt>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d11f      	bne.n	800c2bc <sdp4_deep+0x34c>
 800c27c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c280:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c28a:	f04f 0200 	mov.w	r2, #0
 800c28e:	f04f 0300 	mov.w	r3, #0
 800c292:	f7f4 fc33 	bl	8000afc <__aeabi_dcmplt>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d05a      	beq.n	800c352 <sdp4_deep+0x3e2>
 800c29c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c2a0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800c2aa:	f04f 0200 	mov.w	r2, #0
 800c2ae:	f04f 0300 	mov.w	r3, #0
 800c2b2:	f7f4 fc37 	bl	8000b24 <__aeabi_dcmpge>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d04a      	beq.n	800c352 <sdp4_deep+0x3e2>
			{
				/* Epoch restart */

				if (deep_dyn->t>=0)
 800c2bc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c2c0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c2ca:	f04f 0200 	mov.w	r2, #0
 800c2ce:	f04f 0300 	mov.w	r3, #0
 800c2d2:	f7f4 fc27 	bl	8000b24 <__aeabi_dcmpge>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d009      	beq.n	800c2f0 <sdp4_deep+0x380>
					delt=m->stepp;
 800c2dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c2e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	@ 0x260
 800c2ea:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 800c2ee:	e008      	b.n	800c302 <sdp4_deep+0x392>
				else
					delt=m->stepn;
 800c2f0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c2f4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	@ 0x268
 800c2fe:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

				deep_dyn->atime=0;
 800c302:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c306:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c30a:	6819      	ldr	r1, [r3, #0]
 800c30c:	f04f 0200 	mov.w	r2, #0
 800c310:	f04f 0300 	mov.w	r3, #0
 800c314:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
				deep_dyn->xni=m->xnq;
 800c318:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c31c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800c326:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800c32a:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800c32e:	6809      	ldr	r1, [r1, #0]
 800c330:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				deep_dyn->xli=m->xlamo;
 800c334:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c338:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	@ 0x250
 800c342:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800c346:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800c34a:	6809      	ldr	r1, [r1, #0]
 800c34c:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
 800c350:	e041      	b.n	800c3d6 <sdp4_deep+0x466>
			}

			else
			{
				if (fabs(deep_dyn->t)>=fabs(deep_dyn->atime))
 800c352:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c356:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800c360:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c362:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c368:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c36c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800c376:	623a      	str	r2, [r7, #32]
 800c378:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c37c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c37e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c382:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800c386:	f7f4 fbcd 	bl	8000b24 <__aeabi_dcmpge>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d022      	beq.n	800c3d6 <sdp4_deep+0x466>
				{
					if (deep_dyn->t>0)
 800c390:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c394:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c39e:	f04f 0200 	mov.w	r2, #0
 800c3a2:	f04f 0300 	mov.w	r3, #0
 800c3a6:	f7f4 fbc7 	bl	8000b38 <__aeabi_dcmpgt>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d009      	beq.n	800c3c4 <sdp4_deep+0x454>
						delt=m->stepp;
 800c3b0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c3b4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	@ 0x260
 800c3be:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 800c3c2:	e008      	b.n	800c3d6 <sdp4_deep+0x466>
					else
						delt=m->stepn;
 800c3c4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c3c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	@ 0x268
 800c3d2:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
				}
			}

			do
			{
				if (fabs(deep_dyn->t-deep_dyn->atime)>=m->stepp)
 800c3d6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c3da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c3e4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c3e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800c3f2:	f7f3 ff59 	bl	80002a8 <__aeabi_dsub>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	61ba      	str	r2, [r7, #24]
 800c3fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c400:	61fb      	str	r3, [r7, #28]
 800c402:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c406:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	@ 0x260
 800c410:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c414:	f7f4 fb86 	bl	8000b24 <__aeabi_dcmpge>
 800c418:	4603      	mov	r3, r0
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d010      	beq.n	800c440 <sdp4_deep+0x4d0>
				{
					deep_dyn->loopFlag = 1;
 800c41e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c422:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2201      	movs	r2, #1
 800c42a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
					deep_dyn->epochRestartFlag = 0;
 800c42e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c432:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2200      	movs	r2, #0
 800c43a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800c43e:	e01b      	b.n	800c478 <sdp4_deep+0x508>
				}

				else
				{
					ft=deep_dyn->t-deep_dyn->atime;
 800c440:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c444:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c44e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c452:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800c45c:	f7f3 ff24 	bl	80002a8 <__aeabi_dsub>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
					deep_dyn->loopFlag = 0;
 800c468:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c46c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2200      	movs	r2, #0
 800c474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
				}

				if (fabs(deep_dyn->t)<fabs(deep_dyn->atime))
 800c478:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c47c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800c486:	613a      	str	r2, [r7, #16]
 800c488:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c48c:	617b      	str	r3, [r7, #20]
 800c48e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c492:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800c49c:	60ba      	str	r2, [r7, #8]
 800c49e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4a2:	60fb      	str	r3, [r7, #12]
 800c4a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c4a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c4ac:	f7f4 fb26 	bl	8000afc <__aeabi_dcmplt>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d032      	beq.n	800c51c <sdp4_deep+0x5ac>
				{
					if (deep_dyn->t>=0)
 800c4b6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c4ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c4c4:	f04f 0200 	mov.w	r2, #0
 800c4c8:	f04f 0300 	mov.w	r3, #0
 800c4cc:	f7f4 fb2a 	bl	8000b24 <__aeabi_dcmpge>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d009      	beq.n	800c4ea <sdp4_deep+0x57a>
						delt=m->stepn;
 800c4d6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c4da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	@ 0x268
 800c4e4:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 800c4e8:	e008      	b.n	800c4fc <sdp4_deep+0x58c>
					else
						delt=m->stepp;
 800c4ea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c4ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	@ 0x260
 800c4f8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

					deep_dyn->loopFlag = 1;
 800c4fc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c500:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2201      	movs	r2, #1
 800c508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
					deep_dyn->epochRestartFlag = 1;
 800c50c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c510:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2201      	movs	r2, #1
 800c518:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
				}

				/* Dot terms calculated */
				if (m->synchronousFlag) {
 800c51c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c520:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f000 8157 	beq.w	800c7dc <sdp4_deep+0x86c>
					xndot=m->del1*sin(deep_dyn->xli-m->fasx2)+m->del2*sin(2*(deep_dyn->xli-m->fasx4))+m->del3*sin(3*(deep_dyn->xli-m->fasx6));
 800c52e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c532:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	e9d3 4588 	ldrd	r4, r5, [r3, #544]	@ 0x220
 800c53c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c540:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c54a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c54e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	e9d3 238e 	ldrd	r2, r3, [r3, #568]	@ 0x238
 800c558:	f7f3 fea6 	bl	80002a8 <__aeabi_dsub>
 800c55c:	4602      	mov	r2, r0
 800c55e:	460b      	mov	r3, r1
 800c560:	ec43 2b17 	vmov	d7, r2, r3
 800c564:	eeb0 0a47 	vmov.f32	s0, s14
 800c568:	eef0 0a67 	vmov.f32	s1, s15
 800c56c:	f016 fac0 	bl	8022af0 <sin>
 800c570:	ec53 2b10 	vmov	r2, r3, d0
 800c574:	4620      	mov	r0, r4
 800c576:	4629      	mov	r1, r5
 800c578:	f7f4 f84e 	bl	8000618 <__aeabi_dmul>
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	4690      	mov	r8, r2
 800c582:	4699      	mov	r9, r3
 800c584:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c588:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	e9d3 458a 	ldrd	r4, r5, [r3, #552]	@ 0x228
 800c592:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c596:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c5a0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c5a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	@ 0x240
 800c5ae:	f7f3 fe7b 	bl	80002a8 <__aeabi_dsub>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4610      	mov	r0, r2
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	460b      	mov	r3, r1
 800c5be:	f7f3 fe75 	bl	80002ac <__adddf3>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	ec43 2b17 	vmov	d7, r2, r3
 800c5ca:	eeb0 0a47 	vmov.f32	s0, s14
 800c5ce:	eef0 0a67 	vmov.f32	s1, s15
 800c5d2:	f016 fa8d 	bl	8022af0 <sin>
 800c5d6:	ec53 2b10 	vmov	r2, r3, d0
 800c5da:	4620      	mov	r0, r4
 800c5dc:	4629      	mov	r1, r5
 800c5de:	f7f4 f81b 	bl	8000618 <__aeabi_dmul>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4640      	mov	r0, r8
 800c5e8:	4649      	mov	r1, r9
 800c5ea:	f7f3 fe5f 	bl	80002ac <__adddf3>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	4690      	mov	r8, r2
 800c5f4:	4699      	mov	r9, r3
 800c5f6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c5fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	e9d3 458c 	ldrd	r4, r5, [r3, #560]	@ 0x230
 800c604:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c608:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c612:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c616:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 800c620:	f7f3 fe42 	bl	80002a8 <__aeabi_dsub>
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	4610      	mov	r0, r2
 800c62a:	4619      	mov	r1, r3
 800c62c:	f04f 0200 	mov.w	r2, #0
 800c630:	4b67      	ldr	r3, [pc, #412]	@ (800c7d0 <sdp4_deep+0x860>)
 800c632:	f7f3 fff1 	bl	8000618 <__aeabi_dmul>
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	ec43 2b17 	vmov	d7, r2, r3
 800c63e:	eeb0 0a47 	vmov.f32	s0, s14
 800c642:	eef0 0a67 	vmov.f32	s1, s15
 800c646:	f016 fa53 	bl	8022af0 <sin>
 800c64a:	ec53 2b10 	vmov	r2, r3, d0
 800c64e:	4620      	mov	r0, r4
 800c650:	4629      	mov	r1, r5
 800c652:	f7f3 ffe1 	bl	8000618 <__aeabi_dmul>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	4640      	mov	r0, r8
 800c65c:	4649      	mov	r1, r9
 800c65e:	f7f3 fe25 	bl	80002ac <__adddf3>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
					xnddt=m->del1*cos(deep_dyn->xli-m->fasx2)+2*m->del2*cos(2*(deep_dyn->xli-m->fasx4))+3*m->del3*cos(3*(deep_dyn->xli-m->fasx6));
 800c66a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c66e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	e9d3 4588 	ldrd	r4, r5, [r3, #544]	@ 0x220
 800c678:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c67c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c686:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c68a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	e9d3 238e 	ldrd	r2, r3, [r3, #568]	@ 0x238
 800c694:	f7f3 fe08 	bl	80002a8 <__aeabi_dsub>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	ec43 2b17 	vmov	d7, r2, r3
 800c6a0:	eeb0 0a47 	vmov.f32	s0, s14
 800c6a4:	eef0 0a67 	vmov.f32	s1, s15
 800c6a8:	f016 f9c6 	bl	8022a38 <cos>
 800c6ac:	ec53 2b10 	vmov	r2, r3, d0
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	4629      	mov	r1, r5
 800c6b4:	f7f3 ffb0 	bl	8000618 <__aeabi_dmul>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	4690      	mov	r8, r2
 800c6be:	4699      	mov	r9, r3
 800c6c0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c6c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	e9d3 018a 	ldrd	r0, r1, [r3, #552]	@ 0x228
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	f7f3 fdeb 	bl	80002ac <__adddf3>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	460b      	mov	r3, r1
 800c6da:	4614      	mov	r4, r2
 800c6dc:	461d      	mov	r5, r3
 800c6de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c6e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c6ec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c6f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	@ 0x240
 800c6fa:	f7f3 fdd5 	bl	80002a8 <__aeabi_dsub>
 800c6fe:	4602      	mov	r2, r0
 800c700:	460b      	mov	r3, r1
 800c702:	4610      	mov	r0, r2
 800c704:	4619      	mov	r1, r3
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	f7f3 fdcf 	bl	80002ac <__adddf3>
 800c70e:	4602      	mov	r2, r0
 800c710:	460b      	mov	r3, r1
 800c712:	ec43 2b17 	vmov	d7, r2, r3
 800c716:	eeb0 0a47 	vmov.f32	s0, s14
 800c71a:	eef0 0a67 	vmov.f32	s1, s15
 800c71e:	f016 f98b 	bl	8022a38 <cos>
 800c722:	ec53 2b10 	vmov	r2, r3, d0
 800c726:	4620      	mov	r0, r4
 800c728:	4629      	mov	r1, r5
 800c72a:	f7f3 ff75 	bl	8000618 <__aeabi_dmul>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4640      	mov	r0, r8
 800c734:	4649      	mov	r1, r9
 800c736:	f7f3 fdb9 	bl	80002ac <__adddf3>
 800c73a:	4602      	mov	r2, r0
 800c73c:	460b      	mov	r3, r1
 800c73e:	4690      	mov	r8, r2
 800c740:	4699      	mov	r9, r3
 800c742:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c746:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	@ 0x230
 800c750:	f04f 0200 	mov.w	r2, #0
 800c754:	4b1e      	ldr	r3, [pc, #120]	@ (800c7d0 <sdp4_deep+0x860>)
 800c756:	f7f3 ff5f 	bl	8000618 <__aeabi_dmul>
 800c75a:	4602      	mov	r2, r0
 800c75c:	460b      	mov	r3, r1
 800c75e:	4614      	mov	r4, r2
 800c760:	461d      	mov	r5, r3
 800c762:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c766:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c770:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c774:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 800c77e:	f7f3 fd93 	bl	80002a8 <__aeabi_dsub>
 800c782:	4602      	mov	r2, r0
 800c784:	460b      	mov	r3, r1
 800c786:	4610      	mov	r0, r2
 800c788:	4619      	mov	r1, r3
 800c78a:	f04f 0200 	mov.w	r2, #0
 800c78e:	4b10      	ldr	r3, [pc, #64]	@ (800c7d0 <sdp4_deep+0x860>)
 800c790:	f7f3 ff42 	bl	8000618 <__aeabi_dmul>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	ec43 2b17 	vmov	d7, r2, r3
 800c79c:	eeb0 0a47 	vmov.f32	s0, s14
 800c7a0:	eef0 0a67 	vmov.f32	s1, s15
 800c7a4:	f016 f948 	bl	8022a38 <cos>
 800c7a8:	ec53 2b10 	vmov	r2, r3, d0
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	f7f3 ff32 	bl	8000618 <__aeabi_dmul>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	4640      	mov	r0, r8
 800c7ba:	4649      	mov	r1, r9
 800c7bc:	f7f3 fd76 	bl	80002ac <__adddf3>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 800c7c8:	f000 bc2e 	b.w	800d028 <sdp4_deep+0x10b8>
 800c7cc:	f3af 8000 	nop.w
 800c7d0:	40080000 	.word	0x40080000
 800c7d4:	54442d18 	.word	0x54442d18
 800c7d8:	400921fb 	.word	0x400921fb
				}

				else
				{
					xomi=m->omegaq+deep_arg->omgdot*deep_dyn->atime;
 800c7dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c7e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	@ 0xe0
 800c7ea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c7ee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800c7f8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c7fc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800c806:	f7f3 ff07 	bl	8000618 <__aeabi_dmul>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	4620      	mov	r0, r4
 800c810:	4629      	mov	r1, r5
 800c812:	f7f3 fd4b 	bl	80002ac <__adddf3>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
					x2omi=xomi+xomi;
 800c81e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	f7f3 fd41 	bl	80002ac <__adddf3>
 800c82a:	4602      	mov	r2, r0
 800c82c:	460b      	mov	r3, r1
 800c82e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
					x2li=deep_dyn->xli+deep_dyn->xli;
 800c832:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c836:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c840:	4602      	mov	r2, r0
 800c842:	460b      	mov	r3, r1
 800c844:	f7f3 fd32 	bl	80002ac <__adddf3>
 800c848:	4602      	mov	r2, r0
 800c84a:	460b      	mov	r3, r1
 800c84c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
					xndot=m->d2201*sin(x2omi+deep_dyn->xli-G22)+m->d2211*sin(deep_dyn->xli-G22)+m->d3210*sin(xomi+deep_dyn->xli-G32)+m->d3222*sin(-xomi+deep_dyn->xli-G32)+m->d4410*sin(x2omi+x2li-G44)+m->d4422*sin(x2li-G44)+m->d5220*sin(xomi+deep_dyn->xli-G52)+m->d5232*sin(-xomi+deep_dyn->xli-G52)+m->d5421*sin(xomi+x2li-G54)+m->d5433*sin(-xomi+x2li-G54);
 800c850:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c854:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	e9d3 45a0 	ldrd	r4, r5, [r3, #640]	@ 0x280
 800c85e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c862:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c86c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800c870:	f7f3 fd1c 	bl	80002ac <__adddf3>
 800c874:	4602      	mov	r2, r0
 800c876:	460b      	mov	r3, r1
 800c878:	4610      	mov	r0, r2
 800c87a:	4619      	mov	r1, r3
 800c87c:	f60f 3334 	addw	r3, pc, #2868	@ 0xb34
 800c880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c884:	f7f3 fd10 	bl	80002a8 <__aeabi_dsub>
 800c888:	4602      	mov	r2, r0
 800c88a:	460b      	mov	r3, r1
 800c88c:	ec43 2b17 	vmov	d7, r2, r3
 800c890:	eeb0 0a47 	vmov.f32	s0, s14
 800c894:	eef0 0a67 	vmov.f32	s1, s15
 800c898:	f016 f92a 	bl	8022af0 <sin>
 800c89c:	ec53 2b10 	vmov	r2, r3, d0
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	f7f3 feb8 	bl	8000618 <__aeabi_dmul>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	4690      	mov	r8, r2
 800c8ae:	4699      	mov	r9, r3
 800c8b0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c8b4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	e9d3 45a2 	ldrd	r4, r5, [r3, #648]	@ 0x288
 800c8be:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c8c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c8cc:	f60f 23e4 	addw	r3, pc, #2788	@ 0xae4
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	f7f3 fce8 	bl	80002a8 <__aeabi_dsub>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	ec43 2b17 	vmov	d7, r2, r3
 800c8e0:	eeb0 0a47 	vmov.f32	s0, s14
 800c8e4:	eef0 0a67 	vmov.f32	s1, s15
 800c8e8:	f016 f902 	bl	8022af0 <sin>
 800c8ec:	ec53 2b10 	vmov	r2, r3, d0
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	f7f3 fe90 	bl	8000618 <__aeabi_dmul>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4640      	mov	r0, r8
 800c8fe:	4649      	mov	r1, r9
 800c900:	f7f3 fcd4 	bl	80002ac <__adddf3>
 800c904:	4602      	mov	r2, r0
 800c906:	460b      	mov	r3, r1
 800c908:	4690      	mov	r8, r2
 800c90a:	4699      	mov	r9, r3
 800c90c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c910:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	e9d3 4578 	ldrd	r4, r5, [r3, #480]	@ 0x1e0
 800c91a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c91e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c928:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c92c:	f7f3 fcbe 	bl	80002ac <__adddf3>
 800c930:	4602      	mov	r2, r0
 800c932:	460b      	mov	r3, r1
 800c934:	4610      	mov	r0, r2
 800c936:	4619      	mov	r1, r3
 800c938:	f60f 2380 	addw	r3, pc, #2688	@ 0xa80
 800c93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c940:	f7f3 fcb2 	bl	80002a8 <__aeabi_dsub>
 800c944:	4602      	mov	r2, r0
 800c946:	460b      	mov	r3, r1
 800c948:	ec43 2b17 	vmov	d7, r2, r3
 800c94c:	eeb0 0a47 	vmov.f32	s0, s14
 800c950:	eef0 0a67 	vmov.f32	s1, s15
 800c954:	f016 f8cc 	bl	8022af0 <sin>
 800c958:	ec53 2b10 	vmov	r2, r3, d0
 800c95c:	4620      	mov	r0, r4
 800c95e:	4629      	mov	r1, r5
 800c960:	f7f3 fe5a 	bl	8000618 <__aeabi_dmul>
 800c964:	4602      	mov	r2, r0
 800c966:	460b      	mov	r3, r1
 800c968:	4640      	mov	r0, r8
 800c96a:	4649      	mov	r1, r9
 800c96c:	f7f3 fc9e 	bl	80002ac <__adddf3>
 800c970:	4602      	mov	r2, r0
 800c972:	460b      	mov	r3, r1
 800c974:	4690      	mov	r8, r2
 800c976:	4699      	mov	r9, r3
 800c978:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c97c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	e9d3 457a 	ldrd	r4, r5, [r3, #488]	@ 0x1e8
 800c986:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c98a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c994:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c998:	f7f3 fc86 	bl	80002a8 <__aeabi_dsub>
 800c99c:	4602      	mov	r2, r0
 800c99e:	460b      	mov	r3, r1
 800c9a0:	4610      	mov	r0, r2
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	f60f 2314 	addw	r3, pc, #2580	@ 0xa14
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	f7f3 fc7c 	bl	80002a8 <__aeabi_dsub>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	ec43 2b17 	vmov	d7, r2, r3
 800c9b8:	eeb0 0a47 	vmov.f32	s0, s14
 800c9bc:	eef0 0a67 	vmov.f32	s1, s15
 800c9c0:	f016 f896 	bl	8022af0 <sin>
 800c9c4:	ec53 2b10 	vmov	r2, r3, d0
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	f7f3 fe24 	bl	8000618 <__aeabi_dmul>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	4640      	mov	r0, r8
 800c9d6:	4649      	mov	r1, r9
 800c9d8:	f7f3 fc68 	bl	80002ac <__adddf3>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	4690      	mov	r8, r2
 800c9e2:	4699      	mov	r9, r3
 800c9e4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c9e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	e9d3 457c 	ldrd	r4, r5, [r3, #496]	@ 0x1f0
 800c9f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800c9f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c9fa:	f7f3 fc57 	bl	80002ac <__adddf3>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	460b      	mov	r3, r1
 800ca02:	4610      	mov	r0, r2
 800ca04:	4619      	mov	r1, r3
 800ca06:	f60f 13bc 	addw	r3, pc, #2492	@ 0x9bc
 800ca0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0e:	f7f3 fc4b 	bl	80002a8 <__aeabi_dsub>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	ec43 2b17 	vmov	d7, r2, r3
 800ca1a:	eeb0 0a47 	vmov.f32	s0, s14
 800ca1e:	eef0 0a67 	vmov.f32	s1, s15
 800ca22:	f016 f865 	bl	8022af0 <sin>
 800ca26:	ec53 2b10 	vmov	r2, r3, d0
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	f7f3 fdf3 	bl	8000618 <__aeabi_dmul>
 800ca32:	4602      	mov	r2, r0
 800ca34:	460b      	mov	r3, r1
 800ca36:	4640      	mov	r0, r8
 800ca38:	4649      	mov	r1, r9
 800ca3a:	f7f3 fc37 	bl	80002ac <__adddf3>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	4690      	mov	r8, r2
 800ca44:	4699      	mov	r9, r3
 800ca46:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ca4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	e9d3 457e 	ldrd	r4, r5, [r3, #504]	@ 0x1f8
 800ca54:	f60f 136c 	addw	r3, pc, #2412	@ 0x96c
 800ca58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800ca60:	f7f3 fc22 	bl	80002a8 <__aeabi_dsub>
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	ec43 2b17 	vmov	d7, r2, r3
 800ca6c:	eeb0 0a47 	vmov.f32	s0, s14
 800ca70:	eef0 0a67 	vmov.f32	s1, s15
 800ca74:	f016 f83c 	bl	8022af0 <sin>
 800ca78:	ec53 2b10 	vmov	r2, r3, d0
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	4629      	mov	r1, r5
 800ca80:	f7f3 fdca 	bl	8000618 <__aeabi_dmul>
 800ca84:	4602      	mov	r2, r0
 800ca86:	460b      	mov	r3, r1
 800ca88:	4640      	mov	r0, r8
 800ca8a:	4649      	mov	r1, r9
 800ca8c:	f7f3 fc0e 	bl	80002ac <__adddf3>
 800ca90:	4602      	mov	r2, r0
 800ca92:	460b      	mov	r3, r1
 800ca94:	4690      	mov	r8, r2
 800ca96:	4699      	mov	r9, r3
 800ca98:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ca9c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	e9d3 4580 	ldrd	r4, r5, [r3, #512]	@ 0x200
 800caa6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800caaa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800cab4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800cab8:	f7f3 fbf8 	bl	80002ac <__adddf3>
 800cabc:	4602      	mov	r2, r0
 800cabe:	460b      	mov	r3, r1
 800cac0:	4610      	mov	r0, r2
 800cac2:	4619      	mov	r1, r3
 800cac4:	f60f 1304 	addw	r3, pc, #2308	@ 0x904
 800cac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cacc:	f7f3 fbec 	bl	80002a8 <__aeabi_dsub>
 800cad0:	4602      	mov	r2, r0
 800cad2:	460b      	mov	r3, r1
 800cad4:	ec43 2b17 	vmov	d7, r2, r3
 800cad8:	eeb0 0a47 	vmov.f32	s0, s14
 800cadc:	eef0 0a67 	vmov.f32	s1, s15
 800cae0:	f016 f806 	bl	8022af0 <sin>
 800cae4:	ec53 2b10 	vmov	r2, r3, d0
 800cae8:	4620      	mov	r0, r4
 800caea:	4629      	mov	r1, r5
 800caec:	f7f3 fd94 	bl	8000618 <__aeabi_dmul>
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	4640      	mov	r0, r8
 800caf6:	4649      	mov	r1, r9
 800caf8:	f7f3 fbd8 	bl	80002ac <__adddf3>
 800cafc:	4602      	mov	r2, r0
 800cafe:	460b      	mov	r3, r1
 800cb00:	4690      	mov	r8, r2
 800cb02:	4699      	mov	r9, r3
 800cb04:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cb08:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	e9d3 4582 	ldrd	r4, r5, [r3, #520]	@ 0x208
 800cb12:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cb16:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800cb20:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800cb24:	f7f3 fbc0 	bl	80002a8 <__aeabi_dsub>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	4610      	mov	r0, r2
 800cb2e:	4619      	mov	r1, r3
 800cb30:	f60f 0398 	addw	r3, pc, #2200	@ 0x898
 800cb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb38:	f7f3 fbb6 	bl	80002a8 <__aeabi_dsub>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	460b      	mov	r3, r1
 800cb40:	ec43 2b17 	vmov	d7, r2, r3
 800cb44:	eeb0 0a47 	vmov.f32	s0, s14
 800cb48:	eef0 0a67 	vmov.f32	s1, s15
 800cb4c:	f015 ffd0 	bl	8022af0 <sin>
 800cb50:	ec53 2b10 	vmov	r2, r3, d0
 800cb54:	4620      	mov	r0, r4
 800cb56:	4629      	mov	r1, r5
 800cb58:	f7f3 fd5e 	bl	8000618 <__aeabi_dmul>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4640      	mov	r0, r8
 800cb62:	4649      	mov	r1, r9
 800cb64:	f7f3 fba2 	bl	80002ac <__adddf3>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	4690      	mov	r8, r2
 800cb6e:	4699      	mov	r9, r3
 800cb70:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cb74:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	e9d3 4584 	ldrd	r4, r5, [r3, #528]	@ 0x210
 800cb7e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800cb82:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800cb86:	f7f3 fb91 	bl	80002ac <__adddf3>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	4610      	mov	r0, r2
 800cb90:	4619      	mov	r1, r3
 800cb92:	f60f 0340 	addw	r3, pc, #2112	@ 0x840
 800cb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9a:	f7f3 fb85 	bl	80002a8 <__aeabi_dsub>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	460b      	mov	r3, r1
 800cba2:	ec43 2b17 	vmov	d7, r2, r3
 800cba6:	eeb0 0a47 	vmov.f32	s0, s14
 800cbaa:	eef0 0a67 	vmov.f32	s1, s15
 800cbae:	f015 ff9f 	bl	8022af0 <sin>
 800cbb2:	ec53 2b10 	vmov	r2, r3, d0
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	4629      	mov	r1, r5
 800cbba:	f7f3 fd2d 	bl	8000618 <__aeabi_dmul>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	4640      	mov	r0, r8
 800cbc4:	4649      	mov	r1, r9
 800cbc6:	f7f3 fb71 	bl	80002ac <__adddf3>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	460b      	mov	r3, r1
 800cbce:	4690      	mov	r8, r2
 800cbd0:	4699      	mov	r9, r3
 800cbd2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cbd6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	e9d3 4586 	ldrd	r4, r5, [r3, #536]	@ 0x218
 800cbe0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800cbe4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800cbe8:	f7f3 fb5e 	bl	80002a8 <__aeabi_dsub>
 800cbec:	4602      	mov	r2, r0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	4610      	mov	r0, r2
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	f20f 73dc 	addw	r3, pc, #2012	@ 0x7dc
 800cbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfc:	f7f3 fb54 	bl	80002a8 <__aeabi_dsub>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	ec43 2b17 	vmov	d7, r2, r3
 800cc08:	eeb0 0a47 	vmov.f32	s0, s14
 800cc0c:	eef0 0a67 	vmov.f32	s1, s15
 800cc10:	f015 ff6e 	bl	8022af0 <sin>
 800cc14:	ec53 2b10 	vmov	r2, r3, d0
 800cc18:	4620      	mov	r0, r4
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	f7f3 fcfc 	bl	8000618 <__aeabi_dmul>
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	4640      	mov	r0, r8
 800cc26:	4649      	mov	r1, r9
 800cc28:	f7f3 fb40 	bl	80002ac <__adddf3>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	460b      	mov	r3, r1
 800cc30:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
					xnddt=m->d2201*cos(x2omi+deep_dyn->xli-G22)+m->d2211*cos(deep_dyn->xli-G22)+m->d3210*cos(xomi+deep_dyn->xli-G32)+m->d3222*cos(-xomi+deep_dyn->xli-G32)+m->d5220*cos(xomi+deep_dyn->xli-G52)+m->d5232*cos(-xomi+deep_dyn->xli-G52)+2*(m->d4410*cos(x2omi+x2li-G44)+m->d4422*cos(x2li-G44)+m->d5421*cos(xomi+x2li-G54)+m->d5433*cos(-xomi+x2li-G54));
 800cc34:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cc38:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	e9d3 45a0 	ldrd	r4, r5, [r3, #640]	@ 0x280
 800cc42:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cc46:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800cc50:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800cc54:	f7f3 fb2a 	bl	80002ac <__adddf3>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	4619      	mov	r1, r3
 800cc60:	f20f 7350 	addw	r3, pc, #1872	@ 0x750
 800cc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc68:	f7f3 fb1e 	bl	80002a8 <__aeabi_dsub>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	ec43 2b17 	vmov	d7, r2, r3
 800cc74:	eeb0 0a47 	vmov.f32	s0, s14
 800cc78:	eef0 0a67 	vmov.f32	s1, s15
 800cc7c:	f015 fedc 	bl	8022a38 <cos>
 800cc80:	ec53 2b10 	vmov	r2, r3, d0
 800cc84:	4620      	mov	r0, r4
 800cc86:	4629      	mov	r1, r5
 800cc88:	f7f3 fcc6 	bl	8000618 <__aeabi_dmul>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	4690      	mov	r8, r2
 800cc92:	4699      	mov	r9, r3
 800cc94:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cc98:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	e9d3 45a2 	ldrd	r4, r5, [r3, #648]	@ 0x288
 800cca2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cca6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800ccb0:	f20f 7300 	addw	r3, pc, #1792	@ 0x700
 800ccb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb8:	f7f3 faf6 	bl	80002a8 <__aeabi_dsub>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	ec43 2b17 	vmov	d7, r2, r3
 800ccc4:	eeb0 0a47 	vmov.f32	s0, s14
 800ccc8:	eef0 0a67 	vmov.f32	s1, s15
 800cccc:	f015 feb4 	bl	8022a38 <cos>
 800ccd0:	ec53 2b10 	vmov	r2, r3, d0
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	4629      	mov	r1, r5
 800ccd8:	f7f3 fc9e 	bl	8000618 <__aeabi_dmul>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	460b      	mov	r3, r1
 800cce0:	4640      	mov	r0, r8
 800cce2:	4649      	mov	r1, r9
 800cce4:	f7f3 fae2 	bl	80002ac <__adddf3>
 800cce8:	4602      	mov	r2, r0
 800ccea:	460b      	mov	r3, r1
 800ccec:	4690      	mov	r8, r2
 800ccee:	4699      	mov	r9, r3
 800ccf0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ccf4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	e9d3 4578 	ldrd	r4, r5, [r3, #480]	@ 0x1e0
 800ccfe:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cd02:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800cd0c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800cd10:	f7f3 facc 	bl	80002ac <__adddf3>
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	4610      	mov	r0, r2
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	f20f 639c 	addw	r3, pc, #1692	@ 0x69c
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	f7f3 fac0 	bl	80002a8 <__aeabi_dsub>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	ec43 2b17 	vmov	d7, r2, r3
 800cd30:	eeb0 0a47 	vmov.f32	s0, s14
 800cd34:	eef0 0a67 	vmov.f32	s1, s15
 800cd38:	f015 fe7e 	bl	8022a38 <cos>
 800cd3c:	ec53 2b10 	vmov	r2, r3, d0
 800cd40:	4620      	mov	r0, r4
 800cd42:	4629      	mov	r1, r5
 800cd44:	f7f3 fc68 	bl	8000618 <__aeabi_dmul>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	4649      	mov	r1, r9
 800cd50:	f7f3 faac 	bl	80002ac <__adddf3>
 800cd54:	4602      	mov	r2, r0
 800cd56:	460b      	mov	r3, r1
 800cd58:	4690      	mov	r8, r2
 800cd5a:	4699      	mov	r9, r3
 800cd5c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cd60:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	e9d3 457a 	ldrd	r4, r5, [r3, #488]	@ 0x1e8
 800cd6a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cd6e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800cd78:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800cd7c:	f7f3 fa94 	bl	80002a8 <__aeabi_dsub>
 800cd80:	4602      	mov	r2, r0
 800cd82:	460b      	mov	r3, r1
 800cd84:	4610      	mov	r0, r2
 800cd86:	4619      	mov	r1, r3
 800cd88:	f20f 6330 	addw	r3, pc, #1584	@ 0x630
 800cd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd90:	f7f3 fa8a 	bl	80002a8 <__aeabi_dsub>
 800cd94:	4602      	mov	r2, r0
 800cd96:	460b      	mov	r3, r1
 800cd98:	ec43 2b17 	vmov	d7, r2, r3
 800cd9c:	eeb0 0a47 	vmov.f32	s0, s14
 800cda0:	eef0 0a67 	vmov.f32	s1, s15
 800cda4:	f015 fe48 	bl	8022a38 <cos>
 800cda8:	ec53 2b10 	vmov	r2, r3, d0
 800cdac:	4620      	mov	r0, r4
 800cdae:	4629      	mov	r1, r5
 800cdb0:	f7f3 fc32 	bl	8000618 <__aeabi_dmul>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	4640      	mov	r0, r8
 800cdba:	4649      	mov	r1, r9
 800cdbc:	f7f3 fa76 	bl	80002ac <__adddf3>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	4690      	mov	r8, r2
 800cdc6:	4699      	mov	r9, r3
 800cdc8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cdcc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	e9d3 4580 	ldrd	r4, r5, [r3, #512]	@ 0x200
 800cdd6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cdda:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800cde4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800cde8:	f7f3 fa60 	bl	80002ac <__adddf3>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	f20f 53d4 	addw	r3, pc, #1492	@ 0x5d4
 800cdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfc:	f7f3 fa54 	bl	80002a8 <__aeabi_dsub>
 800ce00:	4602      	mov	r2, r0
 800ce02:	460b      	mov	r3, r1
 800ce04:	ec43 2b17 	vmov	d7, r2, r3
 800ce08:	eeb0 0a47 	vmov.f32	s0, s14
 800ce0c:	eef0 0a67 	vmov.f32	s1, s15
 800ce10:	f015 fe12 	bl	8022a38 <cos>
 800ce14:	ec53 2b10 	vmov	r2, r3, d0
 800ce18:	4620      	mov	r0, r4
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	f7f3 fbfc 	bl	8000618 <__aeabi_dmul>
 800ce20:	4602      	mov	r2, r0
 800ce22:	460b      	mov	r3, r1
 800ce24:	4640      	mov	r0, r8
 800ce26:	4649      	mov	r1, r9
 800ce28:	f7f3 fa40 	bl	80002ac <__adddf3>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	460b      	mov	r3, r1
 800ce30:	4690      	mov	r8, r2
 800ce32:	4699      	mov	r9, r3
 800ce34:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ce38:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	e9d3 4582 	ldrd	r4, r5, [r3, #520]	@ 0x208
 800ce42:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ce46:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800ce50:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800ce54:	f7f3 fa28 	bl	80002a8 <__aeabi_dsub>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	4619      	mov	r1, r3
 800ce60:	f20f 5368 	addw	r3, pc, #1384	@ 0x568
 800ce64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce68:	f7f3 fa1e 	bl	80002a8 <__aeabi_dsub>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	460b      	mov	r3, r1
 800ce70:	ec43 2b17 	vmov	d7, r2, r3
 800ce74:	eeb0 0a47 	vmov.f32	s0, s14
 800ce78:	eef0 0a67 	vmov.f32	s1, s15
 800ce7c:	f015 fddc 	bl	8022a38 <cos>
 800ce80:	ec53 2b10 	vmov	r2, r3, d0
 800ce84:	4620      	mov	r0, r4
 800ce86:	4629      	mov	r1, r5
 800ce88:	f7f3 fbc6 	bl	8000618 <__aeabi_dmul>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	460b      	mov	r3, r1
 800ce90:	4640      	mov	r0, r8
 800ce92:	4649      	mov	r1, r9
 800ce94:	f7f3 fa0a 	bl	80002ac <__adddf3>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	4692      	mov	sl, r2
 800ce9e:	469b      	mov	fp, r3
 800cea0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cea4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	e9d3 457c 	ldrd	r4, r5, [r3, #496]	@ 0x1f0
 800ceae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800ceb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ceb6:	f7f3 f9f9 	bl	80002ac <__adddf3>
 800ceba:	4602      	mov	r2, r0
 800cebc:	460b      	mov	r3, r1
 800cebe:	4610      	mov	r0, r2
 800cec0:	4619      	mov	r1, r3
 800cec2:	f20f 5300 	addw	r3, pc, #1280	@ 0x500
 800cec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceca:	f7f3 f9ed 	bl	80002a8 <__aeabi_dsub>
 800cece:	4602      	mov	r2, r0
 800ced0:	460b      	mov	r3, r1
 800ced2:	ec43 2b17 	vmov	d7, r2, r3
 800ced6:	eeb0 0a47 	vmov.f32	s0, s14
 800ceda:	eef0 0a67 	vmov.f32	s1, s15
 800cede:	f015 fdab 	bl	8022a38 <cos>
 800cee2:	ec53 2b10 	vmov	r2, r3, d0
 800cee6:	4620      	mov	r0, r4
 800cee8:	4629      	mov	r1, r5
 800ceea:	f7f3 fb95 	bl	8000618 <__aeabi_dmul>
 800ceee:	4602      	mov	r2, r0
 800cef0:	460b      	mov	r3, r1
 800cef2:	4690      	mov	r8, r2
 800cef4:	4699      	mov	r9, r3
 800cef6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cefa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	e9d3 457e 	ldrd	r4, r5, [r3, #504]	@ 0x1f8
 800cf04:	f20f 43bc 	addw	r3, pc, #1212	@ 0x4bc
 800cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800cf10:	f7f3 f9ca 	bl	80002a8 <__aeabi_dsub>
 800cf14:	4602      	mov	r2, r0
 800cf16:	460b      	mov	r3, r1
 800cf18:	ec43 2b17 	vmov	d7, r2, r3
 800cf1c:	eeb0 0a47 	vmov.f32	s0, s14
 800cf20:	eef0 0a67 	vmov.f32	s1, s15
 800cf24:	f015 fd88 	bl	8022a38 <cos>
 800cf28:	ec53 2b10 	vmov	r2, r3, d0
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	4629      	mov	r1, r5
 800cf30:	f7f3 fb72 	bl	8000618 <__aeabi_dmul>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	4640      	mov	r0, r8
 800cf3a:	4649      	mov	r1, r9
 800cf3c:	f7f3 f9b6 	bl	80002ac <__adddf3>
 800cf40:	4602      	mov	r2, r0
 800cf42:	460b      	mov	r3, r1
 800cf44:	4690      	mov	r8, r2
 800cf46:	4699      	mov	r9, r3
 800cf48:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cf4c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	e9d3 4584 	ldrd	r4, r5, [r3, #528]	@ 0x210
 800cf56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800cf5a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800cf5e:	f7f3 f9a5 	bl	80002ac <__adddf3>
 800cf62:	4602      	mov	r2, r0
 800cf64:	460b      	mov	r3, r1
 800cf66:	4610      	mov	r0, r2
 800cf68:	4619      	mov	r1, r3
 800cf6a:	f20f 4368 	addw	r3, pc, #1128	@ 0x468
 800cf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf72:	f7f3 f999 	bl	80002a8 <__aeabi_dsub>
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	ec43 2b17 	vmov	d7, r2, r3
 800cf7e:	eeb0 0a47 	vmov.f32	s0, s14
 800cf82:	eef0 0a67 	vmov.f32	s1, s15
 800cf86:	f015 fd57 	bl	8022a38 <cos>
 800cf8a:	ec53 2b10 	vmov	r2, r3, d0
 800cf8e:	4620      	mov	r0, r4
 800cf90:	4629      	mov	r1, r5
 800cf92:	f7f3 fb41 	bl	8000618 <__aeabi_dmul>
 800cf96:	4602      	mov	r2, r0
 800cf98:	460b      	mov	r3, r1
 800cf9a:	4640      	mov	r0, r8
 800cf9c:	4649      	mov	r1, r9
 800cf9e:	f7f3 f985 	bl	80002ac <__adddf3>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	4690      	mov	r8, r2
 800cfa8:	4699      	mov	r9, r3
 800cfaa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cfae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	e9d3 4586 	ldrd	r4, r5, [r3, #536]	@ 0x218
 800cfb8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800cfbc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800cfc0:	f7f3 f972 	bl	80002a8 <__aeabi_dsub>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	4610      	mov	r0, r2
 800cfca:	4619      	mov	r1, r3
 800cfcc:	f20f 4304 	addw	r3, pc, #1028	@ 0x404
 800cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd4:	f7f3 f968 	bl	80002a8 <__aeabi_dsub>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	460b      	mov	r3, r1
 800cfdc:	ec43 2b17 	vmov	d7, r2, r3
 800cfe0:	eeb0 0a47 	vmov.f32	s0, s14
 800cfe4:	eef0 0a67 	vmov.f32	s1, s15
 800cfe8:	f015 fd26 	bl	8022a38 <cos>
 800cfec:	ec53 2b10 	vmov	r2, r3, d0
 800cff0:	4620      	mov	r0, r4
 800cff2:	4629      	mov	r1, r5
 800cff4:	f7f3 fb10 	bl	8000618 <__aeabi_dmul>
 800cff8:	4602      	mov	r2, r0
 800cffa:	460b      	mov	r3, r1
 800cffc:	4640      	mov	r0, r8
 800cffe:	4649      	mov	r1, r9
 800d000:	f7f3 f954 	bl	80002ac <__adddf3>
 800d004:	4602      	mov	r2, r0
 800d006:	460b      	mov	r3, r1
 800d008:	4610      	mov	r0, r2
 800d00a:	4619      	mov	r1, r3
 800d00c:	4602      	mov	r2, r0
 800d00e:	460b      	mov	r3, r1
 800d010:	f7f3 f94c 	bl	80002ac <__adddf3>
 800d014:	4602      	mov	r2, r0
 800d016:	460b      	mov	r3, r1
 800d018:	4650      	mov	r0, sl
 800d01a:	4659      	mov	r1, fp
 800d01c:	f7f3 f946 	bl	80002ac <__adddf3>
 800d020:	4602      	mov	r2, r0
 800d022:	460b      	mov	r3, r1
 800d024:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
				}

				xldot=deep_dyn->xni+m->xfact;
 800d028:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d02c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 800d036:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d03a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	@ 0x258
 800d044:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800d048:	460e      	mov	r6, r1
 800d04a:	4620      	mov	r0, r4
 800d04c:	4629      	mov	r1, r5
 800d04e:	f7f3 f92d 	bl	80002ac <__adddf3>
 800d052:	4602      	mov	r2, r0
 800d054:	460b      	mov	r3, r1
 800d056:	e9c6 2300 	strd	r2, r3, [r6]
				xnddt=xnddt*xldot;
 800d05a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d062:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 800d066:	f7f3 fad7 	bl	8000618 <__aeabi_dmul>
 800d06a:	4602      	mov	r2, r0
 800d06c:	460b      	mov	r3, r1
 800d06e:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150

				if (deep_dyn->loopFlag) {
 800d072:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d076:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d080:	2b00      	cmp	r3, #0
 800d082:	d078      	beq.n	800d176 <sdp4_deep+0x1206>
					deep_dyn->xli=deep_dyn->xli+xldot*delt+xndot*m->step2;
 800d084:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d088:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	@ 0x80
 800d092:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d096:	4619      	mov	r1, r3
 800d098:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800d09c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0a0:	f7f3 faba 	bl	8000618 <__aeabi_dmul>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	4629      	mov	r1, r5
 800d0ac:	f7f3 f8fe 	bl	80002ac <__adddf3>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	4614      	mov	r4, r2
 800d0b6:	461d      	mov	r5, r3
 800d0b8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d0bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	@ 0x270
 800d0c6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800d0ca:	f7f3 faa5 	bl	8000618 <__aeabi_dmul>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	4629      	mov	r1, r5
 800d0d6:	f7f3 f8e9 	bl	80002ac <__adddf3>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	460b      	mov	r3, r1
 800d0de:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d0e2:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d0e6:	6809      	ldr	r1, [r1, #0]
 800d0e8:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
					deep_dyn->xni=deep_dyn->xni+xndot*delt+xnddt*m->step2;
 800d0ec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d0f0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 800d0fa:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800d0fe:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800d102:	f7f3 fa89 	bl	8000618 <__aeabi_dmul>
 800d106:	4602      	mov	r2, r0
 800d108:	460b      	mov	r3, r1
 800d10a:	4620      	mov	r0, r4
 800d10c:	4629      	mov	r1, r5
 800d10e:	f7f3 f8cd 	bl	80002ac <__adddf3>
 800d112:	4602      	mov	r2, r0
 800d114:	460b      	mov	r3, r1
 800d116:	4614      	mov	r4, r2
 800d118:	461d      	mov	r5, r3
 800d11a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d11e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	@ 0x270
 800d128:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800d12c:	f7f3 fa74 	bl	8000618 <__aeabi_dmul>
 800d130:	4602      	mov	r2, r0
 800d132:	460b      	mov	r3, r1
 800d134:	4620      	mov	r0, r4
 800d136:	4629      	mov	r1, r5
 800d138:	f7f3 f8b8 	bl	80002ac <__adddf3>
 800d13c:	4602      	mov	r2, r0
 800d13e:	460b      	mov	r3, r1
 800d140:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d144:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d148:	6809      	ldr	r1, [r1, #0]
 800d14a:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
					deep_dyn->atime=deep_dyn->atime+delt;
 800d14e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d152:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800d15c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800d160:	f7f3 f8a4 	bl	80002ac <__adddf3>
 800d164:	4602      	mov	r2, r0
 800d166:	460b      	mov	r3, r1
 800d168:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d16c:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d170:	6809      	ldr	r1, [r1, #0]
 800d172:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
				}
			} while (deep_dyn->loopFlag && !deep_dyn->epochRestartFlag);
 800d176:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d17a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d184:	2b00      	cmp	r3, #0
 800d186:	d009      	beq.n	800d19c <sdp4_deep+0x122c>
 800d188:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d18c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d196:	2b00      	cmp	r3, #0
 800d198:	f43f a91d 	beq.w	800c3d6 <sdp4_deep+0x466>
		} while (deep_dyn->loopFlag && deep_dyn->epochRestartFlag);
 800d19c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d1a0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d009      	beq.n	800d1c2 <sdp4_deep+0x1252>
 800d1ae:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d1b2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f47f a82d 	bne.w	800c21c <sdp4_deep+0x2ac>

		deep_dyn->xn=deep_dyn->xni+xndot*ft+xnddt*ft*ft*0.5;
 800d1c2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d1c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 800d1d0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800d1d4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800d1d8:	f7f3 fa1e 	bl	8000618 <__aeabi_dmul>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	460b      	mov	r3, r1
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	f7f3 f862 	bl	80002ac <__adddf3>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	4614      	mov	r4, r2
 800d1ee:	461d      	mov	r5, r3
 800d1f0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800d1f4:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 800d1f8:	f7f3 fa0e 	bl	8000618 <__aeabi_dmul>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	4610      	mov	r0, r2
 800d202:	4619      	mov	r1, r3
 800d204:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800d208:	f7f3 fa06 	bl	8000618 <__aeabi_dmul>
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	4610      	mov	r0, r2
 800d212:	4619      	mov	r1, r3
 800d214:	f04f 0200 	mov.w	r2, #0
 800d218:	4b65      	ldr	r3, [pc, #404]	@ (800d3b0 <sdp4_deep+0x1440>)
 800d21a:	f7f3 f9fd 	bl	8000618 <__aeabi_dmul>
 800d21e:	4602      	mov	r2, r0
 800d220:	460b      	mov	r3, r1
 800d222:	4620      	mov	r0, r4
 800d224:	4629      	mov	r1, r5
 800d226:	f7f3 f841 	bl	80002ac <__adddf3>
 800d22a:	4602      	mov	r2, r0
 800d22c:	460b      	mov	r3, r1
 800d22e:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d232:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d236:	6809      	ldr	r1, [r1, #0]
 800d238:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		xl=deep_dyn->xli+xldot*ft+xndot*ft*ft*0.5;
 800d23c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d240:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	@ 0x80
 800d24a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d24e:	4619      	mov	r1, r3
 800d250:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800d254:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d258:	f7f3 f9de 	bl	8000618 <__aeabi_dmul>
 800d25c:	4602      	mov	r2, r0
 800d25e:	460b      	mov	r3, r1
 800d260:	4620      	mov	r0, r4
 800d262:	4629      	mov	r1, r5
 800d264:	f7f3 f822 	bl	80002ac <__adddf3>
 800d268:	4602      	mov	r2, r0
 800d26a:	460b      	mov	r3, r1
 800d26c:	4614      	mov	r4, r2
 800d26e:	461d      	mov	r5, r3
 800d270:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800d274:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800d278:	f7f3 f9ce 	bl	8000618 <__aeabi_dmul>
 800d27c:	4602      	mov	r2, r0
 800d27e:	460b      	mov	r3, r1
 800d280:	4610      	mov	r0, r2
 800d282:	4619      	mov	r1, r3
 800d284:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800d288:	f7f3 f9c6 	bl	8000618 <__aeabi_dmul>
 800d28c:	4602      	mov	r2, r0
 800d28e:	460b      	mov	r3, r1
 800d290:	4610      	mov	r0, r2
 800d292:	4619      	mov	r1, r3
 800d294:	f04f 0200 	mov.w	r2, #0
 800d298:	4b45      	ldr	r3, [pc, #276]	@ (800d3b0 <sdp4_deep+0x1440>)
 800d29a:	f7f3 f9bd 	bl	8000618 <__aeabi_dmul>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800d2a6:	460e      	mov	r6, r1
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	f7f2 fffe 	bl	80002ac <__adddf3>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	e946 2302 	strd	r2, r3, [r6, #-8]
		temp=-deep_dyn->xnode+m->thgr+deep_dyn->t*THDT;
 800d2b8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d2bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 800d2c6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d2ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d2d4:	f7f2 ffe8 	bl	80002a8 <__aeabi_dsub>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	460b      	mov	r3, r1
 800d2dc:	4614      	mov	r4, r2
 800d2de:	461d      	mov	r5, r3
 800d2e0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d2e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800d2ee:	a32e      	add	r3, pc, #184	@ (adr r3, 800d3a8 <sdp4_deep+0x1438>)
 800d2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f4:	f7f3 f990 	bl	8000618 <__aeabi_dmul>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800d300:	460e      	mov	r6, r1
 800d302:	4620      	mov	r0, r4
 800d304:	4629      	mov	r1, r5
 800d306:	f7f2 ffd1 	bl	80002ac <__adddf3>
 800d30a:	4602      	mov	r2, r0
 800d30c:	460b      	mov	r3, r1
 800d30e:	e9c6 2300 	strd	r2, r3, [r6]

		if (!m->synchronousFlag) {
 800d312:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d316:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d11f      	bne.n	800d362 <sdp4_deep+0x13f2>
			deep_dyn->xll=xl+temp+temp;
 800d322:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d326:	4619      	mov	r1, r3
 800d328:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800d32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d330:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800d334:	f7f2 ffba 	bl	80002ac <__adddf3>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	4610      	mov	r0, r2
 800d33e:	4619      	mov	r1, r3
 800d340:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800d344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d348:	f7f2 ffb0 	bl	80002ac <__adddf3>
 800d34c:	4602      	mov	r2, r0
 800d34e:	460b      	mov	r3, r1
 800d350:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d354:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d358:	6809      	ldr	r1, [r1, #0]
 800d35a:	e9c1 2300 	strd	r2, r3, [r1]
		}else{
			deep_dyn->xll=xl-deep_dyn->omgadf+temp;
		}

		return;
 800d35e:	f000 be2b 	b.w	800dfb8 <sdp4_deep+0x2048>
			deep_dyn->xll=xl-deep_dyn->omgadf+temp;
 800d362:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d366:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d370:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800d374:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800d378:	f7f2 ff96 	bl	80002a8 <__aeabi_dsub>
 800d37c:	4602      	mov	r2, r0
 800d37e:	460b      	mov	r3, r1
 800d380:	4610      	mov	r0, r2
 800d382:	4619      	mov	r1, r3
 800d384:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38c:	f7f2 ff8e 	bl	80002ac <__adddf3>
 800d390:	4602      	mov	r2, r0
 800d392:	460b      	mov	r3, r1
 800d394:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d398:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d39c:	6809      	ldr	r1, [r1, #0]
 800d39e:	e9c1 2300 	strd	r2, r3, [r1]
		return;
 800d3a2:	f000 be09 	b.w	800dfb8 <sdp4_deep+0x2048>
 800d3a6:	bf00      	nop
 800d3a8:	5b2195a5 	.word	0x5b2195a5
 800d3ac:	3f71ebcd 	.word	0x3f71ebcd
 800d3b0:	3fe00000 	.word	0x3fe00000
 800d3b4:	4261a460 	.word	0x4261a460
 800d3b8:	40171316 	.word	0x40171316
 800d3bc:	65b088f4 	.word	0x65b088f4
 800d3c0:	3fee7a22 	.word	0x3fee7a22
 800d3c4:	744c0237 	.word	0x744c0237
 800d3c8:	3ffcd2f1 	.word	0x3ffcd2f1
 800d3cc:	4388ebcc 	.word	0x4388ebcc
 800d3d0:	3ff0d036 	.word	0x3ff0d036
 800d3d4:	4bb50a38 	.word	0x4bb50a38
 800d3d8:	4011a4c0 	.word	0x4011a4c0

		case DPPeriodic:	 /* Entrance for lunar-solar periodics */
		sinis=sin(deep_dyn->xinc);
 800d3dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d3e0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	ed93 7b08 	vldr	d7, [r3, #32]
 800d3ea:	eeb0 0a47 	vmov.f32	s0, s14
 800d3ee:	eef0 0a67 	vmov.f32	s1, s15
 800d3f2:	f015 fb7d 	bl	8022af0 <sin>
 800d3f6:	ed87 0b4c 	vstr	d0, [r7, #304]	@ 0x130
		cosis=cos(deep_dyn->xinc);
 800d3fa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d3fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	ed93 7b08 	vldr	d7, [r3, #32]
 800d408:	eeb0 0a47 	vmov.f32	s0, s14
 800d40c:	eef0 0a67 	vmov.f32	s1, s15
 800d410:	f015 fb12 	bl	8022a38 <cos>
 800d414:	ed87 0b4a 	vstr	d0, [r7, #296]	@ 0x128

		if (fabs(deep_dyn->savtsn-deep_dyn->t)>=30)
 800d418:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d41c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800d426:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d42a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800d434:	f7f2 ff38 	bl	80002a8 <__aeabi_dsub>
 800d438:	4602      	mov	r2, r0
 800d43a:	460b      	mov	r3, r1
 800d43c:	4692      	mov	sl, r2
 800d43e:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800d442:	f04f 0200 	mov.w	r2, #0
 800d446:	4bc2      	ldr	r3, [pc, #776]	@ (800d750 <sdp4_deep+0x17e0>)
 800d448:	4650      	mov	r0, sl
 800d44a:	4659      	mov	r1, fp
 800d44c:	f7f3 fb6a 	bl	8000b24 <__aeabi_dcmpge>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	f000 830a 	beq.w	800da6c <sdp4_deep+0x1afc>
		{
			deep_dyn->savtsn=deep_dyn->t;
 800d458:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d45c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800d466:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d46a:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d46e:	6809      	ldr	r1, [r1, #0]
 800d470:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
			zm=m->zmos+ZNS*deep_dyn->t;
 800d474:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d478:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	e9d3 453c 	ldrd	r4, r5, [r3, #240]	@ 0xf0
 800d482:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d486:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800d490:	a3ab      	add	r3, pc, #684	@ (adr r3, 800d740 <sdp4_deep+0x17d0>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f3 f8bf 	bl	8000618 <__aeabi_dmul>
 800d49a:	4602      	mov	r2, r0
 800d49c:	460b      	mov	r3, r1
 800d49e:	4620      	mov	r0, r4
 800d4a0:	4629      	mov	r1, r5
 800d4a2:	f7f2 ff03 	bl	80002ac <__adddf3>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
			zf=zm+2*ZES*sin(zm);
 800d4ae:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 800d4b2:	f015 fb1d 	bl	8022af0 <sin>
 800d4b6:	ec51 0b10 	vmov	r0, r1, d0
 800d4ba:	a3a3      	add	r3, pc, #652	@ (adr r3, 800d748 <sdp4_deep+0x17d8>)
 800d4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c0:	f7f3 f8aa 	bl	8000618 <__aeabi_dmul>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800d4cc:	f7f2 feee 	bl	80002ac <__adddf3>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	460b      	mov	r3, r1
 800d4d4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			sinzf=sin(zf);
 800d4d8:	ed97 0b46 	vldr	d0, [r7, #280]	@ 0x118
 800d4dc:	f015 fb08 	bl	8022af0 <sin>
 800d4e0:	ed87 0b44 	vstr	d0, [r7, #272]	@ 0x110
			f2=0.5*sinzf*sinzf-0.25;
 800d4e4:	f04f 0200 	mov.w	r2, #0
 800d4e8:	4b9a      	ldr	r3, [pc, #616]	@ (800d754 <sdp4_deep+0x17e4>)
 800d4ea:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800d4ee:	f7f3 f893 	bl	8000618 <__aeabi_dmul>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800d4fe:	f7f3 f88b 	bl	8000618 <__aeabi_dmul>
 800d502:	4602      	mov	r2, r0
 800d504:	460b      	mov	r3, r1
 800d506:	4610      	mov	r0, r2
 800d508:	4619      	mov	r1, r3
 800d50a:	f04f 0200 	mov.w	r2, #0
 800d50e:	4b92      	ldr	r3, [pc, #584]	@ (800d758 <sdp4_deep+0x17e8>)
 800d510:	f7f2 feca 	bl	80002a8 <__aeabi_dsub>
 800d514:	4602      	mov	r2, r0
 800d516:	460b      	mov	r3, r1
 800d518:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
			f3=-0.5*sinzf*cos(zf);
 800d51c:	f04f 0200 	mov.w	r2, #0
 800d520:	4b8e      	ldr	r3, [pc, #568]	@ (800d75c <sdp4_deep+0x17ec>)
 800d522:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800d526:	f7f3 f877 	bl	8000618 <__aeabi_dmul>
 800d52a:	4602      	mov	r2, r0
 800d52c:	460b      	mov	r3, r1
 800d52e:	4614      	mov	r4, r2
 800d530:	461d      	mov	r5, r3
 800d532:	ed97 0b46 	vldr	d0, [r7, #280]	@ 0x118
 800d536:	f015 fa7f 	bl	8022a38 <cos>
 800d53a:	ec53 2b10 	vmov	r2, r3, d0
 800d53e:	4620      	mov	r0, r4
 800d540:	4629      	mov	r1, r5
 800d542:	f7f3 f869 	bl	8000618 <__aeabi_dmul>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
			ses=m->se2*f2+m->se3*f3;
 800d54e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d552:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	e9d3 015c 	ldrd	r0, r1, [r3, #368]	@ 0x170
 800d55c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800d560:	f7f3 f85a 	bl	8000618 <__aeabi_dmul>
 800d564:	4602      	mov	r2, r0
 800d566:	460b      	mov	r3, r1
 800d568:	4614      	mov	r4, r2
 800d56a:	461d      	mov	r5, r3
 800d56c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d570:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	e9d3 0166 	ldrd	r0, r1, [r3, #408]	@ 0x198
 800d57a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800d57e:	f7f3 f84b 	bl	8000618 <__aeabi_dmul>
 800d582:	4602      	mov	r2, r0
 800d584:	460b      	mov	r3, r1
 800d586:	4620      	mov	r0, r4
 800d588:	4629      	mov	r1, r5
 800d58a:	f7f2 fe8f 	bl	80002ac <__adddf3>
 800d58e:	4602      	mov	r2, r0
 800d590:	460b      	mov	r3, r1
 800d592:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
			sis=m->si2*f2+m->si3*f3;
 800d596:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d59a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	e9d3 015e 	ldrd	r0, r1, [r3, #376]	@ 0x178
 800d5a4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800d5a8:	f7f3 f836 	bl	8000618 <__aeabi_dmul>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	4614      	mov	r4, r2
 800d5b2:	461d      	mov	r5, r3
 800d5b4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d5b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	@ 0x1a0
 800d5c2:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800d5c6:	f7f3 f827 	bl	8000618 <__aeabi_dmul>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	f7f2 fe6b 	bl	80002ac <__adddf3>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	460b      	mov	r3, r1
 800d5da:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
			sls=m->sl2*f2+m->sl3*f3+m->sl4*sinzf;
 800d5de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d5e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	@ 0x180
 800d5ec:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800d5f0:	f7f3 f812 	bl	8000618 <__aeabi_dmul>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	4614      	mov	r4, r2
 800d5fa:	461d      	mov	r5, r3
 800d5fc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d600:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	e9d3 016a 	ldrd	r0, r1, [r3, #424]	@ 0x1a8
 800d60a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800d60e:	f7f3 f803 	bl	8000618 <__aeabi_dmul>
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	4620      	mov	r0, r4
 800d618:	4629      	mov	r1, r5
 800d61a:	f7f2 fe47 	bl	80002ac <__adddf3>
 800d61e:	4602      	mov	r2, r0
 800d620:	460b      	mov	r3, r1
 800d622:	4614      	mov	r4, r2
 800d624:	461d      	mov	r5, r3
 800d626:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d62a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	e9d3 0170 	ldrd	r0, r1, [r3, #448]	@ 0x1c0
 800d634:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800d638:	f7f2 ffee 	bl	8000618 <__aeabi_dmul>
 800d63c:	4602      	mov	r2, r0
 800d63e:	460b      	mov	r3, r1
 800d640:	4620      	mov	r0, r4
 800d642:	4629      	mov	r1, r5
 800d644:	f7f2 fe32 	bl	80002ac <__adddf3>
 800d648:	4602      	mov	r2, r0
 800d64a:	460b      	mov	r3, r1
 800d64c:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
			deep_dyn->sghs=m->sgh2*f2+m->sgh3*f3+m->sgh4*sinzf;
 800d650:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d654:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	e9d3 0162 	ldrd	r0, r1, [r3, #392]	@ 0x188
 800d65e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800d662:	f7f2 ffd9 	bl	8000618 <__aeabi_dmul>
 800d666:	4602      	mov	r2, r0
 800d668:	460b      	mov	r3, r1
 800d66a:	4614      	mov	r4, r2
 800d66c:	461d      	mov	r5, r3
 800d66e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d672:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	@ 0x1b0
 800d67c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800d680:	f7f2 ffca 	bl	8000618 <__aeabi_dmul>
 800d684:	4602      	mov	r2, r0
 800d686:	460b      	mov	r3, r1
 800d688:	4620      	mov	r0, r4
 800d68a:	4629      	mov	r1, r5
 800d68c:	f7f2 fe0e 	bl	80002ac <__adddf3>
 800d690:	4602      	mov	r2, r0
 800d692:	460b      	mov	r3, r1
 800d694:	4614      	mov	r4, r2
 800d696:	461d      	mov	r5, r3
 800d698:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d69c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	@ 0x1c8
 800d6a6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800d6aa:	f7f2 ffb5 	bl	8000618 <__aeabi_dmul>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	f7f2 fdf9 	bl	80002ac <__adddf3>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	460b      	mov	r3, r1
 800d6be:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d6c2:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d6c6:	6809      	ldr	r1, [r1, #0]
 800d6c8:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
			deep_dyn->shs=m->sh2*f2+m->sh3*f3;
 800d6cc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d6d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	e9d3 0164 	ldrd	r0, r1, [r3, #400]	@ 0x190
 800d6da:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800d6de:	f7f2 ff9b 	bl	8000618 <__aeabi_dmul>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	4614      	mov	r4, r2
 800d6e8:	461d      	mov	r5, r3
 800d6ea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d6ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	@ 0x1b8
 800d6f8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800d6fc:	f7f2 ff8c 	bl	8000618 <__aeabi_dmul>
 800d700:	4602      	mov	r2, r0
 800d702:	460b      	mov	r3, r1
 800d704:	4620      	mov	r0, r4
 800d706:	4629      	mov	r1, r5
 800d708:	f7f2 fdd0 	bl	80002ac <__adddf3>
 800d70c:	4602      	mov	r2, r0
 800d70e:	460b      	mov	r3, r1
 800d710:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d714:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d718:	6809      	ldr	r1, [r1, #0]
 800d71a:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
			zm=m->zmol+ZNL*deep_dyn->t;
 800d71e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d722:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	@ 0xe8
 800d72c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d730:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800d73a:	e011      	b.n	800d760 <sdp4_deep+0x17f0>
 800d73c:	f3af 8000 	nop.w
 800d740:	fe8935de 	.word	0xfe8935de
 800d744:	3ee90d67 	.word	0x3ee90d67
 800d748:	78d4fdf4 	.word	0x78d4fdf4
 800d74c:	3fa126e9 	.word	0x3fa126e9
 800d750:	403e0000 	.word	0x403e0000
 800d754:	3fe00000 	.word	0x3fe00000
 800d758:	3fd00000 	.word	0x3fd00000
 800d75c:	bfe00000 	.word	0xbfe00000
 800d760:	a3be      	add	r3, pc, #760	@ (adr r3, 800da5c <sdp4_deep+0x1aec>)
 800d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d766:	f7f2 ff57 	bl	8000618 <__aeabi_dmul>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	4620      	mov	r0, r4
 800d770:	4629      	mov	r1, r5
 800d772:	f7f2 fd9b 	bl	80002ac <__adddf3>
 800d776:	4602      	mov	r2, r0
 800d778:	460b      	mov	r3, r1
 800d77a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
			zf=zm+2*ZEL*sin(zm);
 800d77e:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 800d782:	f015 f9b5 	bl	8022af0 <sin>
 800d786:	ec51 0b10 	vmov	r0, r1, d0
 800d78a:	a3b6      	add	r3, pc, #728	@ (adr r3, 800da64 <sdp4_deep+0x1af4>)
 800d78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d790:	f7f2 ff42 	bl	8000618 <__aeabi_dmul>
 800d794:	4602      	mov	r2, r0
 800d796:	460b      	mov	r3, r1
 800d798:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800d79c:	f7f2 fd86 	bl	80002ac <__adddf3>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			sinzf=sin(zf);
 800d7a8:	ed97 0b46 	vldr	d0, [r7, #280]	@ 0x118
 800d7ac:	f015 f9a0 	bl	8022af0 <sin>
 800d7b0:	ed87 0b44 	vstr	d0, [r7, #272]	@ 0x110
			f2=0.5*sinzf*sinzf-0.25;
 800d7b4:	f04f 0200 	mov.w	r2, #0
 800d7b8:	4ba5      	ldr	r3, [pc, #660]	@ (800da50 <sdp4_deep+0x1ae0>)
 800d7ba:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800d7be:	f7f2 ff2b 	bl	8000618 <__aeabi_dmul>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	4610      	mov	r0, r2
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800d7ce:	f7f2 ff23 	bl	8000618 <__aeabi_dmul>
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	4610      	mov	r0, r2
 800d7d8:	4619      	mov	r1, r3
 800d7da:	f04f 0200 	mov.w	r2, #0
 800d7de:	4b9d      	ldr	r3, [pc, #628]	@ (800da54 <sdp4_deep+0x1ae4>)
 800d7e0:	f7f2 fd62 	bl	80002a8 <__aeabi_dsub>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
			f3=-0.5*sinzf*cos(zf);
 800d7ec:	f04f 0200 	mov.w	r2, #0
 800d7f0:	4b99      	ldr	r3, [pc, #612]	@ (800da58 <sdp4_deep+0x1ae8>)
 800d7f2:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800d7f6:	f7f2 ff0f 	bl	8000618 <__aeabi_dmul>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	4614      	mov	r4, r2
 800d800:	461d      	mov	r5, r3
 800d802:	ed97 0b46 	vldr	d0, [r7, #280]	@ 0x118
 800d806:	f015 f917 	bl	8022a38 <cos>
 800d80a:	ec53 2b10 	vmov	r2, r3, d0
 800d80e:	4620      	mov	r0, r4
 800d810:	4629      	mov	r1, r5
 800d812:	f7f2 ff01 	bl	8000618 <__aeabi_dmul>
 800d816:	4602      	mov	r2, r0
 800d818:	460b      	mov	r3, r1
 800d81a:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
			sel=m->ee2*f2+m->e3*f3;
 800d81e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d822:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	@ 0xf8
 800d82c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800d830:	f7f2 fef2 	bl	8000618 <__aeabi_dmul>
 800d834:	4602      	mov	r2, r0
 800d836:	460b      	mov	r3, r1
 800d838:	4614      	mov	r4, r2
 800d83a:	461d      	mov	r5, r3
 800d83c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d840:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800d84a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800d84e:	f7f2 fee3 	bl	8000618 <__aeabi_dmul>
 800d852:	4602      	mov	r2, r0
 800d854:	460b      	mov	r3, r1
 800d856:	4620      	mov	r0, r4
 800d858:	4629      	mov	r1, r5
 800d85a:	f7f2 fd27 	bl	80002ac <__adddf3>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
			sil=m->xi2*f2+m->xi3*f3;
 800d866:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d86a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	@ 0x108
 800d874:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800d878:	f7f2 fece 	bl	8000618 <__aeabi_dmul>
 800d87c:	4602      	mov	r2, r0
 800d87e:	460b      	mov	r3, r1
 800d880:	4614      	mov	r4, r2
 800d882:	461d      	mov	r5, r3
 800d884:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d888:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	@ 0x168
 800d892:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800d896:	f7f2 febf 	bl	8000618 <__aeabi_dmul>
 800d89a:	4602      	mov	r2, r0
 800d89c:	460b      	mov	r3, r1
 800d89e:	4620      	mov	r0, r4
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	f7f2 fd03 	bl	80002ac <__adddf3>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
			sll=m->xl2*f2+m->xl3*f3+m->xl4*sinzf;
 800d8ae:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d8b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	@ 0x110
 800d8bc:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800d8c0:	f7f2 feaa 	bl	8000618 <__aeabi_dmul>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	4614      	mov	r4, r2
 800d8ca:	461d      	mov	r5, r3
 800d8cc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d8d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	@ 0x118
 800d8da:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800d8de:	f7f2 fe9b 	bl	8000618 <__aeabi_dmul>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	4629      	mov	r1, r5
 800d8ea:	f7f2 fcdf 	bl	80002ac <__adddf3>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4614      	mov	r4, r2
 800d8f4:	461d      	mov	r5, r3
 800d8f6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d8fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	@ 0x120
 800d904:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800d908:	f7f2 fe86 	bl	8000618 <__aeabi_dmul>
 800d90c:	4602      	mov	r2, r0
 800d90e:	460b      	mov	r3, r1
 800d910:	4620      	mov	r0, r4
 800d912:	4629      	mov	r1, r5
 800d914:	f7f2 fcca 	bl	80002ac <__adddf3>
 800d918:	4602      	mov	r2, r0
 800d91a:	460b      	mov	r3, r1
 800d91c:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
			deep_dyn->sghl=m->xgh2*f2+m->xgh3*f3+m->xgh4*sinzf;
 800d920:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d924:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 800d92e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800d932:	f7f2 fe71 	bl	8000618 <__aeabi_dmul>
 800d936:	4602      	mov	r2, r0
 800d938:	460b      	mov	r3, r1
 800d93a:	4614      	mov	r4, r2
 800d93c:	461d      	mov	r5, r3
 800d93e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d942:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	@ 0x130
 800d94c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800d950:	f7f2 fe62 	bl	8000618 <__aeabi_dmul>
 800d954:	4602      	mov	r2, r0
 800d956:	460b      	mov	r3, r1
 800d958:	4620      	mov	r0, r4
 800d95a:	4629      	mov	r1, r5
 800d95c:	f7f2 fca6 	bl	80002ac <__adddf3>
 800d960:	4602      	mov	r2, r0
 800d962:	460b      	mov	r3, r1
 800d964:	4614      	mov	r4, r2
 800d966:	461d      	mov	r5, r3
 800d968:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d96c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	@ 0x138
 800d976:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800d97a:	f7f2 fe4d 	bl	8000618 <__aeabi_dmul>
 800d97e:	4602      	mov	r2, r0
 800d980:	460b      	mov	r3, r1
 800d982:	4620      	mov	r0, r4
 800d984:	4629      	mov	r1, r5
 800d986:	f7f2 fc91 	bl	80002ac <__adddf3>
 800d98a:	4602      	mov	r2, r0
 800d98c:	460b      	mov	r3, r1
 800d98e:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d992:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d996:	6809      	ldr	r1, [r1, #0]
 800d998:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
			deep_dyn->sh1=m->xh2*f2+m->xh3*f3;
 800d99c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d9a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	@ 0x140
 800d9aa:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800d9ae:	f7f2 fe33 	bl	8000618 <__aeabi_dmul>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	4614      	mov	r4, r2
 800d9b8:	461d      	mov	r5, r3
 800d9ba:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d9be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	@ 0x148
 800d9c8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800d9cc:	f7f2 fe24 	bl	8000618 <__aeabi_dmul>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	4629      	mov	r1, r5
 800d9d8:	f7f2 fc68 	bl	80002ac <__adddf3>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	460b      	mov	r3, r1
 800d9e0:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d9e4:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d9e8:	6809      	ldr	r1, [r1, #0]
 800d9ea:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
			deep_dyn->pe=ses+sel;
 800d9ee:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800d9f2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800d9f6:	f7f2 fc59 	bl	80002ac <__adddf3>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800da02:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800da06:	6809      	ldr	r1, [r1, #0]
 800da08:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
			deep_dyn->pinc=sis+sil;
 800da0c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800da10:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800da14:	f7f2 fc4a 	bl	80002ac <__adddf3>
 800da18:	4602      	mov	r2, r0
 800da1a:	460b      	mov	r3, r1
 800da1c:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800da20:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800da24:	6809      	ldr	r1, [r1, #0]
 800da26:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
			deep_dyn->pl=sls+sll;
 800da2a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800da2e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 800da32:	f7f2 fc3b 	bl	80002ac <__adddf3>
 800da36:	4602      	mov	r2, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800da3e:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800da42:	6809      	ldr	r1, [r1, #0]
 800da44:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 800da48:	e010      	b.n	800da6c <sdp4_deep+0x1afc>
 800da4a:	bf00      	nop
 800da4c:	f3af 8000 	nop.w
 800da50:	3fe00000 	.word	0x3fe00000
 800da54:	3fd00000 	.word	0x3fd00000
 800da58:	bfe00000 	.word	0xbfe00000
 800da5c:	de6329c8 	.word	0xde6329c8
 800da60:	3f24c16a 	.word	0x3f24c16a
 800da64:	5119ce07 	.word	0x5119ce07
 800da68:	3fbc1bda 	.word	0x3fbc1bda
		}

		pgh=deep_dyn->sghs+deep_dyn->sghl;
 800da6c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800da70:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 800da7a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800da7e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800da88:	f7f2 fc10 	bl	80002ac <__adddf3>
 800da8c:	4602      	mov	r2, r0
 800da8e:	460b      	mov	r3, r1
 800da90:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
		ph=deep_dyn->shs+deep_dyn->sh1;
 800da94:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800da98:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800daa2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800daa6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800dab0:	f7f2 fbfc 	bl	80002ac <__adddf3>
 800dab4:	4602      	mov	r2, r0
 800dab6:	460b      	mov	r3, r1
 800dab8:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
		deep_dyn->xinc=deep_dyn->xinc+deep_dyn->pinc;
 800dabc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dac0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800daca:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dace:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800dad8:	f7f2 fbe8 	bl	80002ac <__adddf3>
 800dadc:	4602      	mov	r2, r0
 800dade:	460b      	mov	r3, r1
 800dae0:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800dae4:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800dae8:	6809      	ldr	r1, [r1, #0]
 800daea:	e9c1 2308 	strd	r2, r3, [r1, #32]
		deep_dyn->em=deep_dyn->em+deep_dyn->pe;
 800daee:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800daf2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800dafc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800db00:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800db0a:	f7f2 fbcf 	bl	80002ac <__adddf3>
 800db0e:	4602      	mov	r2, r0
 800db10:	460b      	mov	r3, r1
 800db12:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800db16:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800db1a:	6809      	ldr	r1, [r1, #0]
 800db1c:	e9c1 2306 	strd	r2, r3, [r1, #24]

		if (m->xqncl>=0.2)
 800db20:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800db24:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	@ 0xd8
 800db2e:	f20f 4398 	addw	r3, pc, #1176	@ 0x498
 800db32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db36:	f7f2 fff5 	bl	8000b24 <__aeabi_dcmpge>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d065      	beq.n	800dc0c <sdp4_deep+0x1c9c>
		{
			/* Apply periodics directly */
			ph=ph/deep_arg->sinio;
 800db40:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800db44:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800db4e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800db52:	f7f2 fe8b 	bl	800086c <__aeabi_ddiv>
 800db56:	4602      	mov	r2, r0
 800db58:	460b      	mov	r3, r1
 800db5a:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
			pgh=pgh-deep_arg->cosio*ph;
 800db5e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800db62:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800db6c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800db70:	f7f2 fd52 	bl	8000618 <__aeabi_dmul>
 800db74:	4602      	mov	r2, r0
 800db76:	460b      	mov	r3, r1
 800db78:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800db7c:	f7f2 fb94 	bl	80002a8 <__aeabi_dsub>
 800db80:	4602      	mov	r2, r0
 800db82:	460b      	mov	r3, r1
 800db84:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
			deep_dyn->omgadf=deep_dyn->omgadf+pgh;
 800db88:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800db8c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800db96:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800db9a:	f7f2 fb87 	bl	80002ac <__adddf3>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800dba6:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800dbaa:	6809      	ldr	r1, [r1, #0]
 800dbac:	e9c1 2302 	strd	r2, r3, [r1, #8]
			deep_dyn->xnode=deep_dyn->xnode+ph;
 800dbb0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dbb4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800dbbe:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800dbc2:	f7f2 fb73 	bl	80002ac <__adddf3>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	460b      	mov	r3, r1
 800dbca:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800dbce:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800dbd2:	6809      	ldr	r1, [r1, #0]
 800dbd4:	e9c1 2304 	strd	r2, r3, [r1, #16]
			deep_dyn->xll=deep_dyn->xll+deep_dyn->pl;
 800dbd8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dbdc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dbe6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dbea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dbf4:	f7f2 fb5a 	bl	80002ac <__adddf3>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800dc00:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800dc04:	6809      	ldr	r1, [r1, #0]
 800dc06:	e9c1 2300 	strd	r2, r3, [r1]
			}

			deep_dyn->xll=deep_dyn->xll+deep_dyn->pl;
			deep_dyn->omgadf=xls-deep_dyn->xll-cos(deep_dyn->xinc)*deep_dyn->xnode;
		}
		return;
 800dc0a:	e1d5      	b.n	800dfb8 <sdp4_deep+0x2048>
			sinok=sin(deep_dyn->xnode);
 800dc0c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dc10:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	ed93 7b04 	vldr	d7, [r3, #16]
 800dc1a:	eeb0 0a47 	vmov.f32	s0, s14
 800dc1e:	eef0 0a67 	vmov.f32	s1, s15
 800dc22:	f014 ff65 	bl	8022af0 <sin>
 800dc26:	ed87 0b2e 	vstr	d0, [r7, #184]	@ 0xb8
			cosok=cos(deep_dyn->xnode);
 800dc2a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dc2e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	ed93 7b04 	vldr	d7, [r3, #16]
 800dc38:	eeb0 0a47 	vmov.f32	s0, s14
 800dc3c:	eef0 0a67 	vmov.f32	s1, s15
 800dc40:	f014 fefa 	bl	8022a38 <cos>
 800dc44:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
			alfdp=sinis*sinok;
 800dc48:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800dc4c:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 800dc50:	f7f2 fce2 	bl	8000618 <__aeabi_dmul>
 800dc54:	4602      	mov	r2, r0
 800dc56:	460b      	mov	r3, r1
 800dc58:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
			betdp=sinis*cosok;
 800dc5c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800dc60:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 800dc64:	f7f2 fcd8 	bl	8000618 <__aeabi_dmul>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	460b      	mov	r3, r1
 800dc6c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
			dalf=ph*cosok+deep_dyn->pinc*cosis*sinok;
 800dc70:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800dc74:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800dc78:	f7f2 fcce 	bl	8000618 <__aeabi_dmul>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	460b      	mov	r3, r1
 800dc80:	4614      	mov	r4, r2
 800dc82:	461d      	mov	r5, r3
 800dc84:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dc88:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800dc92:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800dc96:	f7f2 fcbf 	bl	8000618 <__aeabi_dmul>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	4610      	mov	r0, r2
 800dca0:	4619      	mov	r1, r3
 800dca2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800dca6:	f7f2 fcb7 	bl	8000618 <__aeabi_dmul>
 800dcaa:	4602      	mov	r2, r0
 800dcac:	460b      	mov	r3, r1
 800dcae:	4620      	mov	r0, r4
 800dcb0:	4629      	mov	r1, r5
 800dcb2:	f7f2 fafb 	bl	80002ac <__adddf3>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	460b      	mov	r3, r1
 800dcba:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
			dbet=-ph*sinok+deep_dyn->pinc*cosis*cosok;
 800dcbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800dcc2:	603b      	str	r3, [r7, #0]
 800dcc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dcc8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800dccc:	607b      	str	r3, [r7, #4]
 800dcce:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800dcd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dcd6:	f7f2 fc9f 	bl	8000618 <__aeabi_dmul>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	460b      	mov	r3, r1
 800dcde:	4614      	mov	r4, r2
 800dce0:	461d      	mov	r5, r3
 800dce2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dce6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800dcf0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800dcf4:	f7f2 fc90 	bl	8000618 <__aeabi_dmul>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	4610      	mov	r0, r2
 800dcfe:	4619      	mov	r1, r3
 800dd00:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800dd04:	f7f2 fc88 	bl	8000618 <__aeabi_dmul>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	4629      	mov	r1, r5
 800dd10:	f7f2 facc 	bl	80002ac <__adddf3>
 800dd14:	4602      	mov	r2, r0
 800dd16:	460b      	mov	r3, r1
 800dd18:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
			alfdp=alfdp+dalf;
 800dd1c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800dd20:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800dd24:	f7f2 fac2 	bl	80002ac <__adddf3>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
			betdp=betdp+dbet;
 800dd30:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800dd34:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800dd38:	f7f2 fab8 	bl	80002ac <__adddf3>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	460b      	mov	r3, r1
 800dd40:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
			deep_dyn->xnode=FMod2p(deep_dyn->xnode);
 800dd44:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dd48:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	ed93 7b04 	vldr	d7, [r3, #16]
 800dd52:	eeb0 0a47 	vmov.f32	s0, s14
 800dd56:	eef0 0a67 	vmov.f32	s1, s15
 800dd5a:	f003 fb4d 	bl	80113f8 <FMod2p>
 800dd5e:	eeb0 7a40 	vmov.f32	s14, s0
 800dd62:	eef0 7a60 	vmov.f32	s15, s1
 800dd66:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dd6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	ed83 7b04 	vstr	d7, [r3, #16]
			xls=deep_dyn->xll+deep_dyn->omgadf+cosis*deep_dyn->xnode;
 800dd74:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dd78:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd82:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dd86:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800dd90:	f7f2 fa8c 	bl	80002ac <__adddf3>
 800dd94:	4602      	mov	r2, r0
 800dd96:	460b      	mov	r3, r1
 800dd98:	4614      	mov	r4, r2
 800dd9a:	461d      	mov	r5, r3
 800dd9c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dda0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ddaa:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800ddae:	f7f2 fc33 	bl	8000618 <__aeabi_dmul>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	4629      	mov	r1, r5
 800ddba:	f7f2 fa77 	bl	80002ac <__adddf3>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
			dls=deep_dyn->pl+pgh-deep_dyn->pinc*deep_dyn->xnode*sinis;
 800ddc6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ddca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ddd4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800ddd8:	f7f2 fa68 	bl	80002ac <__adddf3>
 800dddc:	4602      	mov	r2, r0
 800ddde:	460b      	mov	r3, r1
 800dde0:	4614      	mov	r4, r2
 800dde2:	461d      	mov	r5, r3
 800dde4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dde8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800ddf2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ddf6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800de00:	f7f2 fc0a 	bl	8000618 <__aeabi_dmul>
 800de04:	4602      	mov	r2, r0
 800de06:	460b      	mov	r3, r1
 800de08:	4610      	mov	r0, r2
 800de0a:	4619      	mov	r1, r3
 800de0c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800de10:	f7f2 fc02 	bl	8000618 <__aeabi_dmul>
 800de14:	4602      	mov	r2, r0
 800de16:	460b      	mov	r3, r1
 800de18:	4620      	mov	r0, r4
 800de1a:	4629      	mov	r1, r5
 800de1c:	f7f2 fa44 	bl	80002a8 <__aeabi_dsub>
 800de20:	4602      	mov	r2, r0
 800de22:	460b      	mov	r3, r1
 800de24:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			xls=xls+dls;
 800de28:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800de2c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800de30:	f7f2 fa3c 	bl	80002ac <__adddf3>
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
			xnoh=deep_dyn->xnode;
 800de3c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800de40:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800de4a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
			deep_dyn->xnode=atan2(alfdp,betdp);
 800de4e:	ed97 1b28 	vldr	d1, [r7, #160]	@ 0xa0
 800de52:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 800de56:	f014 faff 	bl	8022458 <atan2>
 800de5a:	eeb0 7a40 	vmov.f32	s14, s0
 800de5e:	eef0 7a60 	vmov.f32	s15, s1
 800de62:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800de66:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	ed83 7b04 	vstr	d7, [r3, #16]
			if (fabs(xnoh-deep_dyn->xnode)>PI)
 800de70:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800de74:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800de7e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800de82:	f7f2 fa11 	bl	80002a8 <__aeabi_dsub>
 800de86:	4602      	mov	r2, r0
 800de88:	460b      	mov	r3, r1
 800de8a:	4690      	mov	r8, r2
 800de8c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800de90:	a34f      	add	r3, pc, #316	@ (adr r3, 800dfd0 <sdp4_deep+0x2060>)
 800de92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de96:	4640      	mov	r0, r8
 800de98:	4649      	mov	r1, r9
 800de9a:	f7f2 fe4d 	bl	8000b38 <__aeabi_dcmpgt>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d038      	beq.n	800df16 <sdp4_deep+0x1fa6>
			      if (deep_dyn->xnode<xnoh)
 800dea4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dea8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800deb2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800deb6:	f7f2 fe3f 	bl	8000b38 <__aeabi_dcmpgt>
 800deba:	4603      	mov	r3, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d015      	beq.n	800deec <sdp4_deep+0x1f7c>
				  deep_dyn->xnode+=TWO_PI;
 800dec0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dec4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800dece:	a342      	add	r3, pc, #264	@ (adr r3, 800dfd8 <sdp4_deep+0x2068>)
 800ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded4:	f7f2 f9ea 	bl	80002ac <__adddf3>
 800ded8:	4602      	mov	r2, r0
 800deda:	460b      	mov	r3, r1
 800dedc:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800dee0:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800dee4:	6809      	ldr	r1, [r1, #0]
 800dee6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800deea:	e014      	b.n	800df16 <sdp4_deep+0x1fa6>
				  deep_dyn->xnode-=TWO_PI;
 800deec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800def0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800defa:	a337      	add	r3, pc, #220	@ (adr r3, 800dfd8 <sdp4_deep+0x2068>)
 800defc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df00:	f7f2 f9d2 	bl	80002a8 <__aeabi_dsub>
 800df04:	4602      	mov	r2, r0
 800df06:	460b      	mov	r3, r1
 800df08:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800df0c:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800df10:	6809      	ldr	r1, [r1, #0]
 800df12:	e9c1 2304 	strd	r2, r3, [r1, #16]
			deep_dyn->xll=deep_dyn->xll+deep_dyn->pl;
 800df16:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800df1a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df24:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800df28:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800df32:	f7f2 f9bb 	bl	80002ac <__adddf3>
 800df36:	4602      	mov	r2, r0
 800df38:	460b      	mov	r3, r1
 800df3a:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800df3e:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800df42:	6809      	ldr	r1, [r1, #0]
 800df44:	e9c1 2300 	strd	r2, r3, [r1]
			deep_dyn->omgadf=xls-deep_dyn->xll-cos(deep_dyn->xinc)*deep_dyn->xnode;
 800df48:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800df4c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df56:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800df5a:	f7f2 f9a5 	bl	80002a8 <__aeabi_dsub>
 800df5e:	4602      	mov	r2, r0
 800df60:	460b      	mov	r3, r1
 800df62:	4614      	mov	r4, r2
 800df64:	461d      	mov	r5, r3
 800df66:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800df6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	ed93 7b08 	vldr	d7, [r3, #32]
 800df74:	eeb0 0a47 	vmov.f32	s0, s14
 800df78:	eef0 0a67 	vmov.f32	s1, s15
 800df7c:	f014 fd5c 	bl	8022a38 <cos>
 800df80:	ec51 0b10 	vmov	r0, r1, d0
 800df84:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800df88:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800df92:	f7f2 fb41 	bl	8000618 <__aeabi_dmul>
 800df96:	4602      	mov	r2, r0
 800df98:	460b      	mov	r3, r1
 800df9a:	4620      	mov	r0, r4
 800df9c:	4629      	mov	r1, r5
 800df9e:	f7f2 f983 	bl	80002a8 <__aeabi_dsub>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800dfaa:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800dfae:	6809      	ldr	r1, [r1, #0]
 800dfb0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return;
 800dfb4:	e000      	b.n	800dfb8 <sdp4_deep+0x2048>
			return;
 800dfb6:	bf00      	nop
	}
}
 800dfb8:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc2:	bf00      	nop
 800dfc4:	f3af 8000 	nop.w
 800dfc8:	9999999a 	.word	0x9999999a
 800dfcc:	3fc99999 	.word	0x3fc99999
 800dfd0:	54442d18 	.word	0x54442d18
 800dfd4:	400921fb 	.word	0x400921fb
 800dfd8:	54442d18 	.word	0x54442d18
 800dfdc:	401921fb 	.word	0x401921fb

0800dfe0 <sgp4_init>:

#include "defs.h"
#include "unsorted.h"

void sgp4_init(const predict_orbital_elements_t *orbital_elements, struct _sgp4 *m)
{
 800dfe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dfe4:	b0c6      	sub	sp, #280	@ 0x118
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6278      	str	r0, [r7, #36]	@ 0x24
 800dfea:	6239      	str	r1, [r7, #32]
	m->simpleFlag = 0;
 800dfec:	6a3b      	ldr	r3, [r7, #32]
 800dfee:	2200      	movs	r2, #0
 800dff0:	601a      	str	r2, [r3, #0]

	//Calculate old TLE field values as used in the original sgp4
	double temp_tle = TWO_PI/MINUTES_PER_DAY/MINUTES_PER_DAY;
 800dff2:	a3cf      	add	r3, pc, #828	@ (adr r3, 800e330 <sgp4_init+0x350>)
 800dff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff8:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
	m->bstar = orbital_elements->bstar_drag_term / AE;
 800dffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dffe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800e002:	6a39      	ldr	r1, [r7, #32]
 800e004:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
	m->xincl = orbital_elements->inclination * M_PI / 180.0;
 800e008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e00a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e00e:	a3b8      	add	r3, pc, #736	@ (adr r3, 800e2f0 <sgp4_init+0x310>)
 800e010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e014:	f7f2 fb00 	bl	8000618 <__aeabi_dmul>
 800e018:	4602      	mov	r2, r0
 800e01a:	460b      	mov	r3, r1
 800e01c:	4610      	mov	r0, r2
 800e01e:	4619      	mov	r1, r3
 800e020:	f04f 0200 	mov.w	r2, #0
 800e024:	4bbe      	ldr	r3, [pc, #760]	@ (800e320 <sgp4_init+0x340>)
 800e026:	f7f2 fc21 	bl	800086c <__aeabi_ddiv>
 800e02a:	4602      	mov	r2, r0
 800e02c:	460b      	mov	r3, r1
 800e02e:	6a39      	ldr	r1, [r7, #32]
 800e030:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
	m->xnodeo = orbital_elements->right_ascension * M_PI / 180.0;
 800e034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e036:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800e03a:	a3ad      	add	r3, pc, #692	@ (adr r3, 800e2f0 <sgp4_init+0x310>)
 800e03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e040:	f7f2 faea 	bl	8000618 <__aeabi_dmul>
 800e044:	4602      	mov	r2, r0
 800e046:	460b      	mov	r3, r1
 800e048:	4610      	mov	r0, r2
 800e04a:	4619      	mov	r1, r3
 800e04c:	f04f 0200 	mov.w	r2, #0
 800e050:	4bb3      	ldr	r3, [pc, #716]	@ (800e320 <sgp4_init+0x340>)
 800e052:	f7f2 fc0b 	bl	800086c <__aeabi_ddiv>
 800e056:	4602      	mov	r2, r0
 800e058:	460b      	mov	r3, r1
 800e05a:	6a39      	ldr	r1, [r7, #32]
 800e05c:	e9c1 233e 	strd	r2, r3, [r1, #248]	@ 0xf8
	m->eo = orbital_elements->eccentricity;
 800e060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e062:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800e066:	6a39      	ldr	r1, [r7, #32]
 800e068:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
	m->omegao = orbital_elements->argument_of_perigee * M_PI / 180.0;
 800e06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e06e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e072:	a39f      	add	r3, pc, #636	@ (adr r3, 800e2f0 <sgp4_init+0x310>)
 800e074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e078:	f7f2 face 	bl	8000618 <__aeabi_dmul>
 800e07c:	4602      	mov	r2, r0
 800e07e:	460b      	mov	r3, r1
 800e080:	4610      	mov	r0, r2
 800e082:	4619      	mov	r1, r3
 800e084:	f04f 0200 	mov.w	r2, #0
 800e088:	4ba5      	ldr	r3, [pc, #660]	@ (800e320 <sgp4_init+0x340>)
 800e08a:	f7f2 fbef 	bl	800086c <__aeabi_ddiv>
 800e08e:	4602      	mov	r2, r0
 800e090:	460b      	mov	r3, r1
 800e092:	6a39      	ldr	r1, [r7, #32]
 800e094:	e9c1 2342 	strd	r2, r3, [r1, #264]	@ 0x108
	m->xmo = orbital_elements->mean_anomaly * M_PI / 180.0;
 800e098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e09a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800e09e:	a394      	add	r3, pc, #592	@ (adr r3, 800e2f0 <sgp4_init+0x310>)
 800e0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a4:	f7f2 fab8 	bl	8000618 <__aeabi_dmul>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	4610      	mov	r0, r2
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	f04f 0200 	mov.w	r2, #0
 800e0b4:	4b9a      	ldr	r3, [pc, #616]	@ (800e320 <sgp4_init+0x340>)
 800e0b6:	f7f2 fbd9 	bl	800086c <__aeabi_ddiv>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	460b      	mov	r3, r1
 800e0be:	6a39      	ldr	r1, [r7, #32]
 800e0c0:	e9c1 2344 	strd	r2, r3, [r1, #272]	@ 0x110
	m->xno = orbital_elements->mean_motion*temp_tle*MINUTES_PER_DAY;
 800e0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800e0ca:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800e0ce:	f7f2 faa3 	bl	8000618 <__aeabi_dmul>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	4610      	mov	r0, r2
 800e0d8:	4619      	mov	r1, r3
 800e0da:	f04f 0200 	mov.w	r2, #0
 800e0de:	4b91      	ldr	r3, [pc, #580]	@ (800e324 <sgp4_init+0x344>)
 800e0e0:	f7f2 fa9a 	bl	8000618 <__aeabi_dmul>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	6a39      	ldr	r1, [r7, #32]
 800e0ea:	e9c1 2346 	strd	r2, r3, [r1, #280]	@ 0x118
	temp3, theta2, theta4, tsi;

	/* Recover original mean motion (m->xnodp) and   */
	/* semimajor axis (m->aodp) from input elements. */

	a1=pow(XKE/m->xno,TWO_THIRD);
 800e0ee:	6a3b      	ldr	r3, [r7, #32]
 800e0f0:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
 800e0f4:	a180      	add	r1, pc, #512	@ (adr r1, 800e2f8 <sgp4_init+0x318>)
 800e0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0fa:	f7f2 fbb7 	bl	800086c <__aeabi_ddiv>
 800e0fe:	4602      	mov	r2, r0
 800e100:	460b      	mov	r3, r1
 800e102:	ec43 2b17 	vmov	d7, r2, r3
 800e106:	ed9f 1b7e 	vldr	d1, [pc, #504]	@ 800e300 <sgp4_init+0x320>
 800e10a:	eeb0 0a47 	vmov.f32	s0, s14
 800e10e:	eef0 0a67 	vmov.f32	s1, s15
 800e112:	f014 fa5b 	bl	80225cc <pow>
 800e116:	ed87 0b3e 	vstr	d0, [r7, #248]	@ 0xf8
	m->cosio=cos(m->xincl);
 800e11a:	6a3b      	ldr	r3, [r7, #32]
 800e11c:	ed93 7b3c 	vldr	d7, [r3, #240]	@ 0xf0
 800e120:	eeb0 0a47 	vmov.f32	s0, s14
 800e124:	eef0 0a67 	vmov.f32	s1, s15
 800e128:	f014 fc86 	bl	8022a38 <cos>
 800e12c:	eeb0 7a40 	vmov.f32	s14, s0
 800e130:	eef0 7a60 	vmov.f32	s15, s1
 800e134:	6a3b      	ldr	r3, [r7, #32]
 800e136:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
	theta2=m->cosio*m->cosio;
 800e13a:	6a3b      	ldr	r3, [r7, #32]
 800e13c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800e140:	6a3b      	ldr	r3, [r7, #32]
 800e142:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800e146:	f7f2 fa67 	bl	8000618 <__aeabi_dmul>
 800e14a:	4602      	mov	r2, r0
 800e14c:	460b      	mov	r3, r1
 800e14e:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	m->x3thm1=3*theta2-1.0;
 800e152:	f04f 0200 	mov.w	r2, #0
 800e156:	4b74      	ldr	r3, [pc, #464]	@ (800e328 <sgp4_init+0x348>)
 800e158:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800e15c:	f7f2 fa5c 	bl	8000618 <__aeabi_dmul>
 800e160:	4602      	mov	r2, r0
 800e162:	460b      	mov	r3, r1
 800e164:	4610      	mov	r0, r2
 800e166:	4619      	mov	r1, r3
 800e168:	f04f 0200 	mov.w	r2, #0
 800e16c:	4b6f      	ldr	r3, [pc, #444]	@ (800e32c <sgp4_init+0x34c>)
 800e16e:	f7f2 f89b 	bl	80002a8 <__aeabi_dsub>
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	6a39      	ldr	r1, [r7, #32]
 800e178:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
	eosq=m->eo*m->eo;
 800e17c:	6a3b      	ldr	r3, [r7, #32]
 800e17e:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800e182:	6a3b      	ldr	r3, [r7, #32]
 800e184:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800e188:	f7f2 fa46 	bl	8000618 <__aeabi_dmul>
 800e18c:	4602      	mov	r2, r0
 800e18e:	460b      	mov	r3, r1
 800e190:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
	betao2=1.0-eosq;
 800e194:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 800e198:	f04f 0000 	mov.w	r0, #0
 800e19c:	4963      	ldr	r1, [pc, #396]	@ (800e32c <sgp4_init+0x34c>)
 800e19e:	f7f2 f883 	bl	80002a8 <__aeabi_dsub>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
	betao=sqrt(betao2);
 800e1aa:	ed97 0b38 	vldr	d0, [r7, #224]	@ 0xe0
 800e1ae:	f014 fa7d 	bl	80226ac <sqrt>
 800e1b2:	ed87 0b36 	vstr	d0, [r7, #216]	@ 0xd8
	del1=1.5*CK2*m->x3thm1/(a1*a1*betao*betao2);
 800e1b6:	6a3b      	ldr	r3, [r7, #32]
 800e1b8:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 800e1bc:	a352      	add	r3, pc, #328	@ (adr r3, 800e308 <sgp4_init+0x328>)
 800e1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c2:	f7f2 fa29 	bl	8000618 <__aeabi_dmul>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	4614      	mov	r4, r2
 800e1cc:	461d      	mov	r5, r3
 800e1ce:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 800e1d2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800e1d6:	f7f2 fa1f 	bl	8000618 <__aeabi_dmul>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	460b      	mov	r3, r1
 800e1de:	4610      	mov	r0, r2
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800e1e6:	f7f2 fa17 	bl	8000618 <__aeabi_dmul>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	4610      	mov	r0, r2
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800e1f6:	f7f2 fa0f 	bl	8000618 <__aeabi_dmul>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	4620      	mov	r0, r4
 800e200:	4629      	mov	r1, r5
 800e202:	f7f2 fb33 	bl	800086c <__aeabi_ddiv>
 800e206:	4602      	mov	r2, r0
 800e208:	460b      	mov	r3, r1
 800e20a:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
	ao=a1*(1.0-del1*(0.5*TWO_THIRD+del1*(1.0+134.0/81.0*del1)));
 800e20e:	a340      	add	r3, pc, #256	@ (adr r3, 800e310 <sgp4_init+0x330>)
 800e210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e214:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800e218:	f7f2 f9fe 	bl	8000618 <__aeabi_dmul>
 800e21c:	4602      	mov	r2, r0
 800e21e:	460b      	mov	r3, r1
 800e220:	4610      	mov	r0, r2
 800e222:	4619      	mov	r1, r3
 800e224:	f04f 0200 	mov.w	r2, #0
 800e228:	4b40      	ldr	r3, [pc, #256]	@ (800e32c <sgp4_init+0x34c>)
 800e22a:	f7f2 f83f 	bl	80002ac <__adddf3>
 800e22e:	4602      	mov	r2, r0
 800e230:	460b      	mov	r3, r1
 800e232:	4610      	mov	r0, r2
 800e234:	4619      	mov	r1, r3
 800e236:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800e23a:	f7f2 f9ed 	bl	8000618 <__aeabi_dmul>
 800e23e:	4602      	mov	r2, r0
 800e240:	460b      	mov	r3, r1
 800e242:	4610      	mov	r0, r2
 800e244:	4619      	mov	r1, r3
 800e246:	a334      	add	r3, pc, #208	@ (adr r3, 800e318 <sgp4_init+0x338>)
 800e248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24c:	f7f2 f82e 	bl	80002ac <__adddf3>
 800e250:	4602      	mov	r2, r0
 800e252:	460b      	mov	r3, r1
 800e254:	4610      	mov	r0, r2
 800e256:	4619      	mov	r1, r3
 800e258:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800e25c:	f7f2 f9dc 	bl	8000618 <__aeabi_dmul>
 800e260:	4602      	mov	r2, r0
 800e262:	460b      	mov	r3, r1
 800e264:	f04f 0000 	mov.w	r0, #0
 800e268:	4930      	ldr	r1, [pc, #192]	@ (800e32c <sgp4_init+0x34c>)
 800e26a:	f7f2 f81d 	bl	80002a8 <__aeabi_dsub>
 800e26e:	4602      	mov	r2, r0
 800e270:	460b      	mov	r3, r1
 800e272:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800e276:	f7f2 f9cf 	bl	8000618 <__aeabi_dmul>
 800e27a:	4602      	mov	r2, r0
 800e27c:	460b      	mov	r3, r1
 800e27e:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
	delo=1.5*CK2*m->x3thm1/(ao*ao*betao*betao2);
 800e282:	6a3b      	ldr	r3, [r7, #32]
 800e284:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 800e288:	a31f      	add	r3, pc, #124	@ (adr r3, 800e308 <sgp4_init+0x328>)
 800e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28e:	f7f2 f9c3 	bl	8000618 <__aeabi_dmul>
 800e292:	4602      	mov	r2, r0
 800e294:	460b      	mov	r3, r1
 800e296:	4614      	mov	r4, r2
 800e298:	461d      	mov	r5, r3
 800e29a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800e29e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800e2a2:	f7f2 f9b9 	bl	8000618 <__aeabi_dmul>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	4610      	mov	r0, r2
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800e2b2:	f7f2 f9b1 	bl	8000618 <__aeabi_dmul>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	4610      	mov	r0, r2
 800e2bc:	4619      	mov	r1, r3
 800e2be:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800e2c2:	f7f2 f9a9 	bl	8000618 <__aeabi_dmul>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	4629      	mov	r1, r5
 800e2ce:	f7f2 facd 	bl	800086c <__aeabi_ddiv>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
	m->xnodp=m->xno/(1.0+delo);
 800e2da:	6a3b      	ldr	r3, [r7, #32]
 800e2dc:	e9d3 4546 	ldrd	r4, r5, [r3, #280]	@ 0x118
 800e2e0:	f04f 0200 	mov.w	r2, #0
 800e2e4:	4b11      	ldr	r3, [pc, #68]	@ (800e32c <sgp4_init+0x34c>)
 800e2e6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800e2ea:	f7f1 ffdf 	bl	80002ac <__adddf3>
 800e2ee:	e023      	b.n	800e338 <sgp4_init+0x358>
 800e2f0:	54442d18 	.word	0x54442d18
 800e2f4:	400921fb 	.word	0x400921fb
 800e2f8:	d08dcacf 	.word	0xd08dcacf
 800e2fc:	3fb309b5 	.word	0x3fb309b5
 800e300:	55555555 	.word	0x55555555
 800e304:	3fe55555 	.word	0x3fe55555
 800e308:	cbb15878 	.word	0xcbb15878
 800e30c:	3f4a9b3a 	.word	0x3f4a9b3a
 800e310:	48b0fcd7 	.word	0x48b0fcd7
 800e314:	3ffa7819 	.word	0x3ffa7819
 800e318:	55555555 	.word	0x55555555
 800e31c:	3fd55555 	.word	0x3fd55555
 800e320:	40668000 	.word	0x40668000
 800e324:	40968000 	.word	0x40968000
 800e328:	40080000 	.word	0x40080000
 800e32c:	3ff00000 	.word	0x3ff00000
 800e330:	1fbf7384 	.word	0x1fbf7384
 800e334:	3ec96b0f 	.word	0x3ec96b0f
 800e338:	4602      	mov	r2, r0
 800e33a:	460b      	mov	r3, r1
 800e33c:	4620      	mov	r0, r4
 800e33e:	4629      	mov	r1, r5
 800e340:	f7f2 fa94 	bl	800086c <__aeabi_ddiv>
 800e344:	4602      	mov	r2, r0
 800e346:	460b      	mov	r3, r1
 800e348:	6a39      	ldr	r1, [r7, #32]
 800e34a:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	m->aodp=ao/(1.0-delo);
 800e34e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800e352:	f04f 0000 	mov.w	r0, #0
 800e356:	4946      	ldr	r1, [pc, #280]	@ (800e470 <sgp4_init+0x490>)
 800e358:	f7f1 ffa6 	bl	80002a8 <__aeabi_dsub>
 800e35c:	4602      	mov	r2, r0
 800e35e:	460b      	mov	r3, r1
 800e360:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800e364:	f7f2 fa82 	bl	800086c <__aeabi_ddiv>
 800e368:	4602      	mov	r2, r0
 800e36a:	460b      	mov	r3, r1
 800e36c:	6a39      	ldr	r1, [r7, #32]
 800e36e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	/* flag is set and the equations are truncated to linear  */
	/* variation in sqrt a and quadratic variation in mean    */
	/* anomaly.  Also, the c3 term, the delta omega term, and */
	/* the delta m term are dropped.                          */

	if ((m->aodp*(1-m->eo)/AE)<(220/EARTH_RADIUS_KM_WGS84+AE))
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800e378:	6a3b      	ldr	r3, [r7, #32]
 800e37a:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800e37e:	f04f 0000 	mov.w	r0, #0
 800e382:	493b      	ldr	r1, [pc, #236]	@ (800e470 <sgp4_init+0x490>)
 800e384:	f7f1 ff90 	bl	80002a8 <__aeabi_dsub>
 800e388:	4602      	mov	r2, r0
 800e38a:	460b      	mov	r3, r1
 800e38c:	4620      	mov	r0, r4
 800e38e:	4629      	mov	r1, r5
 800e390:	f7f2 f942 	bl	8000618 <__aeabi_dmul>
 800e394:	4602      	mov	r2, r0
 800e396:	460b      	mov	r3, r1
 800e398:	4610      	mov	r0, r2
 800e39a:	4619      	mov	r1, r3
 800e39c:	a32c      	add	r3, pc, #176	@ (adr r3, 800e450 <sgp4_init+0x470>)
 800e39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a2:	f7f2 fbab 	bl	8000afc <__aeabi_dcmplt>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d003      	beq.n	800e3b4 <sgp4_init+0x3d4>
		m->simpleFlag = true;
 800e3ac:	6a3b      	ldr	r3, [r7, #32]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	601a      	str	r2, [r3, #0]
 800e3b2:	e002      	b.n	800e3ba <sgp4_init+0x3da>
	else
		m->simpleFlag = false;
 800e3b4:	6a3b      	ldr	r3, [r7, #32]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	601a      	str	r2, [r3, #0]

	/* For perigees below 156 km, the      */
	/* values of s and qoms2t are altered. */

	s4=S_DENSITY_PARAM;
 800e3ba:	a327      	add	r3, pc, #156	@ (adr r3, 800e458 <sgp4_init+0x478>)
 800e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c0:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	qoms24=QOMS2T;
 800e3c4:	a326      	add	r3, pc, #152	@ (adr r3, 800e460 <sgp4_init+0x480>)
 800e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ca:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	perigee=(m->aodp*(1-m->eo)-AE)*EARTH_RADIUS_KM_WGS84;
 800e3ce:	6a3b      	ldr	r3, [r7, #32]
 800e3d0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800e3d4:	6a3b      	ldr	r3, [r7, #32]
 800e3d6:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800e3da:	f04f 0000 	mov.w	r0, #0
 800e3de:	4924      	ldr	r1, [pc, #144]	@ (800e470 <sgp4_init+0x490>)
 800e3e0:	f7f1 ff62 	bl	80002a8 <__aeabi_dsub>
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	f7f2 f914 	bl	8000618 <__aeabi_dmul>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	4610      	mov	r0, r2
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	f04f 0200 	mov.w	r2, #0
 800e3fc:	4b1c      	ldr	r3, [pc, #112]	@ (800e470 <sgp4_init+0x490>)
 800e3fe:	f7f1 ff53 	bl	80002a8 <__aeabi_dsub>
 800e402:	4602      	mov	r2, r0
 800e404:	460b      	mov	r3, r1
 800e406:	4610      	mov	r0, r2
 800e408:	4619      	mov	r1, r3
 800e40a:	a317      	add	r3, pc, #92	@ (adr r3, 800e468 <sgp4_init+0x488>)
 800e40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e410:	f7f2 f902 	bl	8000618 <__aeabi_dmul>
 800e414:	4602      	mov	r2, r0
 800e416:	460b      	mov	r3, r1
 800e418:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

	if (perigee<156.0)
 800e41c:	f04f 0200 	mov.w	r2, #0
 800e420:	4b14      	ldr	r3, [pc, #80]	@ (800e474 <sgp4_init+0x494>)
 800e422:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800e426:	f7f2 fb69 	bl	8000afc <__aeabi_dcmplt>
 800e42a:	4603      	mov	r3, r0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d064      	beq.n	800e4fa <sgp4_init+0x51a>
	{
		if (perigee<=98.0)
 800e430:	f04f 0200 	mov.w	r2, #0
 800e434:	4b10      	ldr	r3, [pc, #64]	@ (800e478 <sgp4_init+0x498>)
 800e436:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800e43a:	f7f2 fb69 	bl	8000b10 <__aeabi_dcmple>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d01d      	beq.n	800e480 <sgp4_init+0x4a0>
		    s4=20;
 800e444:	f04f 0200 	mov.w	r2, #0
 800e448:	4b0c      	ldr	r3, [pc, #48]	@ (800e47c <sgp4_init+0x49c>)
 800e44a:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
 800e44e:	e022      	b.n	800e496 <sgp4_init+0x4b6>
 800e450:	5abfd69b 	.word	0x5abfd69b
 800e454:	3ff08d48 	.word	0x3ff08d48
 800e458:	0931012a 	.word	0x0931012a
 800e45c:	3ff03217 	.word	0x3ff03217
 800e460:	f9b8574f 	.word	0xf9b8574f
 800e464:	3e2026c6 	.word	0x3e2026c6
 800e468:	126e978d 	.word	0x126e978d
 800e46c:	40b8ea23 	.word	0x40b8ea23
 800e470:	3ff00000 	.word	0x3ff00000
 800e474:	40638000 	.word	0x40638000
 800e478:	40588000 	.word	0x40588000
 800e47c:	40340000 	.word	0x40340000
		else
		 s4=perigee-78.0;
 800e480:	f04f 0200 	mov.w	r2, #0
 800e484:	4bc0      	ldr	r3, [pc, #768]	@ (800e788 <sgp4_init+0x7a8>)
 800e486:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800e48a:	f7f1 ff0d 	bl	80002a8 <__aeabi_dsub>
 800e48e:	4602      	mov	r2, r0
 800e490:	460b      	mov	r3, r1
 800e492:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108

		qoms24=pow((120-s4)*AE/EARTH_RADIUS_KM_WGS84,4);
 800e496:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800e49a:	f04f 0000 	mov.w	r0, #0
 800e49e:	49bb      	ldr	r1, [pc, #748]	@ (800e78c <sgp4_init+0x7ac>)
 800e4a0:	f7f1 ff02 	bl	80002a8 <__aeabi_dsub>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	a3ae      	add	r3, pc, #696	@ (adr r3, 800e768 <sgp4_init+0x788>)
 800e4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b2:	f7f2 f9db 	bl	800086c <__aeabi_ddiv>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	ec43 2b17 	vmov	d7, r2, r3
 800e4be:	ed9f 1bac 	vldr	d1, [pc, #688]	@ 800e770 <sgp4_init+0x790>
 800e4c2:	eeb0 0a47 	vmov.f32	s0, s14
 800e4c6:	eef0 0a67 	vmov.f32	s1, s15
 800e4ca:	f014 f87f 	bl	80225cc <pow>
 800e4ce:	ed87 0b44 	vstr	d0, [r7, #272]	@ 0x110
		s4=s4/EARTH_RADIUS_KM_WGS84+AE;
 800e4d2:	a3a5      	add	r3, pc, #660	@ (adr r3, 800e768 <sgp4_init+0x788>)
 800e4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d8:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800e4dc:	f7f2 f9c6 	bl	800086c <__aeabi_ddiv>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4610      	mov	r0, r2
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	f04f 0200 	mov.w	r2, #0
 800e4ec:	4ba8      	ldr	r3, [pc, #672]	@ (800e790 <sgp4_init+0x7b0>)
 800e4ee:	f7f1 fedd 	bl	80002ac <__adddf3>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	}

	pinvsq=1/(m->aodp*m->aodp*betao2*betao2);
 800e4fa:	6a3b      	ldr	r3, [r7, #32]
 800e4fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800e500:	6a3b      	ldr	r3, [r7, #32]
 800e502:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e506:	f7f2 f887 	bl	8000618 <__aeabi_dmul>
 800e50a:	4602      	mov	r2, r0
 800e50c:	460b      	mov	r3, r1
 800e50e:	4610      	mov	r0, r2
 800e510:	4619      	mov	r1, r3
 800e512:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800e516:	f7f2 f87f 	bl	8000618 <__aeabi_dmul>
 800e51a:	4602      	mov	r2, r0
 800e51c:	460b      	mov	r3, r1
 800e51e:	4610      	mov	r0, r2
 800e520:	4619      	mov	r1, r3
 800e522:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800e526:	f7f2 f877 	bl	8000618 <__aeabi_dmul>
 800e52a:	4602      	mov	r2, r0
 800e52c:	460b      	mov	r3, r1
 800e52e:	f04f 0000 	mov.w	r0, #0
 800e532:	4997      	ldr	r1, [pc, #604]	@ (800e790 <sgp4_init+0x7b0>)
 800e534:	f7f2 f99a 	bl	800086c <__aeabi_ddiv>
 800e538:	4602      	mov	r2, r0
 800e53a:	460b      	mov	r3, r1
 800e53c:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	tsi=1/(m->aodp-s4);
 800e540:	6a3b      	ldr	r3, [r7, #32]
 800e542:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800e546:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800e54a:	f7f1 fead 	bl	80002a8 <__aeabi_dsub>
 800e54e:	4602      	mov	r2, r0
 800e550:	460b      	mov	r3, r1
 800e552:	f04f 0000 	mov.w	r0, #0
 800e556:	498e      	ldr	r1, [pc, #568]	@ (800e790 <sgp4_init+0x7b0>)
 800e558:	f7f2 f988 	bl	800086c <__aeabi_ddiv>
 800e55c:	4602      	mov	r2, r0
 800e55e:	460b      	mov	r3, r1
 800e560:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
	m->eta=m->aodp*m->eo*tsi;
 800e564:	6a3b      	ldr	r3, [r7, #32]
 800e566:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800e56a:	6a3b      	ldr	r3, [r7, #32]
 800e56c:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800e570:	f7f2 f852 	bl	8000618 <__aeabi_dmul>
 800e574:	4602      	mov	r2, r0
 800e576:	460b      	mov	r3, r1
 800e578:	4610      	mov	r0, r2
 800e57a:	4619      	mov	r1, r3
 800e57c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e580:	f7f2 f84a 	bl	8000618 <__aeabi_dmul>
 800e584:	4602      	mov	r2, r0
 800e586:	460b      	mov	r3, r1
 800e588:	6a39      	ldr	r1, [r7, #32]
 800e58a:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	etasq=m->eta*m->eta;
 800e58e:	6a3b      	ldr	r3, [r7, #32]
 800e590:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800e594:	6a3b      	ldr	r3, [r7, #32]
 800e596:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800e59a:	f7f2 f83d 	bl	8000618 <__aeabi_dmul>
 800e59e:	4602      	mov	r2, r0
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	eeta=m->eo*m->eta;
 800e5a6:	6a3b      	ldr	r3, [r7, #32]
 800e5a8:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800e5ac:	6a3b      	ldr	r3, [r7, #32]
 800e5ae:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800e5b2:	f7f2 f831 	bl	8000618 <__aeabi_dmul>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	psisq=fabs(1-etasq);
 800e5be:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800e5c2:	f04f 0000 	mov.w	r0, #0
 800e5c6:	4972      	ldr	r1, [pc, #456]	@ (800e790 <sgp4_init+0x7b0>)
 800e5c8:	f7f1 fe6e 	bl	80002a8 <__aeabi_dsub>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	460b      	mov	r3, r1
 800e5d0:	4611      	mov	r1, r2
 800e5d2:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800e5d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e5da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	coef=qoms24*pow(tsi,4);
 800e5de:	ed9f 1b64 	vldr	d1, [pc, #400]	@ 800e770 <sgp4_init+0x790>
 800e5e2:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 800e5e6:	f013 fff1 	bl	80225cc <pow>
 800e5ea:	ec53 2b10 	vmov	r2, r3, d0
 800e5ee:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800e5f2:	f7f2 f811 	bl	8000618 <__aeabi_dmul>
 800e5f6:	4602      	mov	r2, r0
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	coef1=coef/pow(psisq,3.5);
 800e5fe:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 800e778 <sgp4_init+0x798>
 800e602:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800e606:	f013 ffe1 	bl	80225cc <pow>
 800e60a:	ec53 2b10 	vmov	r2, r3, d0
 800e60e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800e612:	f7f2 f92b 	bl	800086c <__aeabi_ddiv>
 800e616:	4602      	mov	r2, r0
 800e618:	460b      	mov	r3, r1
 800e61a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	c2=coef1*m->xnodp*(m->aodp*(1+1.5*etasq+eeta*(4+etasq))+0.75*CK2*tsi/psisq*m->x3thm1*(8+3*etasq*(8+etasq)));
 800e61e:	6a3b      	ldr	r3, [r7, #32]
 800e620:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800e624:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800e628:	f7f1 fff6 	bl	8000618 <__aeabi_dmul>
 800e62c:	4602      	mov	r2, r0
 800e62e:	460b      	mov	r3, r1
 800e630:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800e63a:	f04f 0200 	mov.w	r2, #0
 800e63e:	4b55      	ldr	r3, [pc, #340]	@ (800e794 <sgp4_init+0x7b4>)
 800e640:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800e644:	f7f1 ffe8 	bl	8000618 <__aeabi_dmul>
 800e648:	4602      	mov	r2, r0
 800e64a:	460b      	mov	r3, r1
 800e64c:	4610      	mov	r0, r2
 800e64e:	4619      	mov	r1, r3
 800e650:	f04f 0200 	mov.w	r2, #0
 800e654:	4b4e      	ldr	r3, [pc, #312]	@ (800e790 <sgp4_init+0x7b0>)
 800e656:	f7f1 fe29 	bl	80002ac <__adddf3>
 800e65a:	4602      	mov	r2, r0
 800e65c:	460b      	mov	r3, r1
 800e65e:	4690      	mov	r8, r2
 800e660:	4699      	mov	r9, r3
 800e662:	f04f 0200 	mov.w	r2, #0
 800e666:	4b4c      	ldr	r3, [pc, #304]	@ (800e798 <sgp4_init+0x7b8>)
 800e668:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800e66c:	f7f1 fe1e 	bl	80002ac <__adddf3>
 800e670:	4602      	mov	r2, r0
 800e672:	460b      	mov	r3, r1
 800e674:	4610      	mov	r0, r2
 800e676:	4619      	mov	r1, r3
 800e678:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e67c:	f7f1 ffcc 	bl	8000618 <__aeabi_dmul>
 800e680:	4602      	mov	r2, r0
 800e682:	460b      	mov	r3, r1
 800e684:	4640      	mov	r0, r8
 800e686:	4649      	mov	r1, r9
 800e688:	f7f1 fe10 	bl	80002ac <__adddf3>
 800e68c:	4602      	mov	r2, r0
 800e68e:	460b      	mov	r3, r1
 800e690:	4620      	mov	r0, r4
 800e692:	4629      	mov	r1, r5
 800e694:	f7f1 ffc0 	bl	8000618 <__aeabi_dmul>
 800e698:	4602      	mov	r2, r0
 800e69a:	460b      	mov	r3, r1
 800e69c:	4690      	mov	r8, r2
 800e69e:	4699      	mov	r9, r3
 800e6a0:	a337      	add	r3, pc, #220	@ (adr r3, 800e780 <sgp4_init+0x7a0>)
 800e6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800e6aa:	f7f1 ffb5 	bl	8000618 <__aeabi_dmul>
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	4610      	mov	r0, r2
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800e6ba:	f7f2 f8d7 	bl	800086c <__aeabi_ddiv>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	4610      	mov	r0, r2
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	6a3b      	ldr	r3, [r7, #32]
 800e6c8:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 800e6cc:	f7f1 ffa4 	bl	8000618 <__aeabi_dmul>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	460b      	mov	r3, r1
 800e6d4:	4692      	mov	sl, r2
 800e6d6:	469b      	mov	fp, r3
 800e6d8:	f04f 0200 	mov.w	r2, #0
 800e6dc:	4b2f      	ldr	r3, [pc, #188]	@ (800e79c <sgp4_init+0x7bc>)
 800e6de:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800e6e2:	f7f1 ff99 	bl	8000618 <__aeabi_dmul>
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	4614      	mov	r4, r2
 800e6ec:	461d      	mov	r5, r3
 800e6ee:	f04f 0200 	mov.w	r2, #0
 800e6f2:	4b2b      	ldr	r3, [pc, #172]	@ (800e7a0 <sgp4_init+0x7c0>)
 800e6f4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800e6f8:	f7f1 fdd8 	bl	80002ac <__adddf3>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	4620      	mov	r0, r4
 800e702:	4629      	mov	r1, r5
 800e704:	f7f1 ff88 	bl	8000618 <__aeabi_dmul>
 800e708:	4602      	mov	r2, r0
 800e70a:	460b      	mov	r3, r1
 800e70c:	4610      	mov	r0, r2
 800e70e:	4619      	mov	r1, r3
 800e710:	f04f 0200 	mov.w	r2, #0
 800e714:	4b22      	ldr	r3, [pc, #136]	@ (800e7a0 <sgp4_init+0x7c0>)
 800e716:	f7f1 fdc9 	bl	80002ac <__adddf3>
 800e71a:	4602      	mov	r2, r0
 800e71c:	460b      	mov	r3, r1
 800e71e:	4650      	mov	r0, sl
 800e720:	4659      	mov	r1, fp
 800e722:	f7f1 ff79 	bl	8000618 <__aeabi_dmul>
 800e726:	4602      	mov	r2, r0
 800e728:	460b      	mov	r3, r1
 800e72a:	4640      	mov	r0, r8
 800e72c:	4649      	mov	r1, r9
 800e72e:	f7f1 fdbd 	bl	80002ac <__adddf3>
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e73a:	f7f1 ff6d 	bl	8000618 <__aeabi_dmul>
 800e73e:	4602      	mov	r2, r0
 800e740:	460b      	mov	r3, r1
 800e742:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	m->c1=m->bstar*c2;
 800e746:	6a3b      	ldr	r3, [r7, #32]
 800e748:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 800e74c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800e750:	f7f1 ff62 	bl	8000618 <__aeabi_dmul>
 800e754:	4602      	mov	r2, r0
 800e756:	460b      	mov	r3, r1
 800e758:	6a39      	ldr	r1, [r7, #32]
 800e75a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	m->sinio=sin(m->xincl);
 800e75e:	6a3b      	ldr	r3, [r7, #32]
 800e760:	ed93 7b3c 	vldr	d7, [r3, #240]	@ 0xf0
 800e764:	e01e      	b.n	800e7a4 <sgp4_init+0x7c4>
 800e766:	bf00      	nop
 800e768:	126e978d 	.word	0x126e978d
 800e76c:	40b8ea23 	.word	0x40b8ea23
 800e770:	00000000 	.word	0x00000000
 800e774:	40100000 	.word	0x40100000
 800e778:	00000000 	.word	0x00000000
 800e77c:	400c0000 	.word	0x400c0000
 800e780:	cbb15878 	.word	0xcbb15878
 800e784:	3f3a9b3a 	.word	0x3f3a9b3a
 800e788:	40538000 	.word	0x40538000
 800e78c:	405e0000 	.word	0x405e0000
 800e790:	3ff00000 	.word	0x3ff00000
 800e794:	3ff80000 	.word	0x3ff80000
 800e798:	40100000 	.word	0x40100000
 800e79c:	40080000 	.word	0x40080000
 800e7a0:	40200000 	.word	0x40200000
 800e7a4:	eeb0 0a47 	vmov.f32	s0, s14
 800e7a8:	eef0 0a67 	vmov.f32	s1, s15
 800e7ac:	f014 f9a0 	bl	8022af0 <sin>
 800e7b0:	eeb0 7a40 	vmov.f32	s14, s0
 800e7b4:	eef0 7a60 	vmov.f32	s15, s1
 800e7b8:	6a3b      	ldr	r3, [r7, #32]
 800e7ba:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
	a3ovk2=-J3_HARMONIC_WGS72/CK2*pow(AE,3);
 800e7be:	a3ea      	add	r3, pc, #936	@ (adr r3, 800eb68 <sgp4_init+0xb88>)
 800e7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	c3=coef*tsi*a3ovk2*m->xnodp*AE*m->sinio/m->eo;
 800e7c8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e7cc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800e7d0:	f7f1 ff22 	bl	8000618 <__aeabi_dmul>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	4610      	mov	r0, r2
 800e7da:	4619      	mov	r1, r3
 800e7dc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e7e0:	f7f1 ff1a 	bl	8000618 <__aeabi_dmul>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	4610      	mov	r0, r2
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	6a3b      	ldr	r3, [r7, #32]
 800e7ee:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800e7f2:	f7f1 ff11 	bl	8000618 <__aeabi_dmul>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	4610      	mov	r0, r2
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	6a3b      	ldr	r3, [r7, #32]
 800e800:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800e804:	f7f1 ff08 	bl	8000618 <__aeabi_dmul>
 800e808:	4602      	mov	r2, r0
 800e80a:	460b      	mov	r3, r1
 800e80c:	4610      	mov	r0, r2
 800e80e:	4619      	mov	r1, r3
 800e810:	6a3b      	ldr	r3, [r7, #32]
 800e812:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800e816:	f7f2 f829 	bl	800086c <__aeabi_ddiv>
 800e81a:	4602      	mov	r2, r0
 800e81c:	460b      	mov	r3, r1
 800e81e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	m->x1mth2=1-theta2;
 800e822:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800e826:	f04f 0000 	mov.w	r0, #0
 800e82a:	49c9      	ldr	r1, [pc, #804]	@ (800eb50 <sgp4_init+0xb70>)
 800e82c:	f7f1 fd3c 	bl	80002a8 <__aeabi_dsub>
 800e830:	4602      	mov	r2, r0
 800e832:	460b      	mov	r3, r1
 800e834:	6a39      	ldr	r1, [r7, #32]
 800e836:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8

	m->c4=2*m->xnodp*coef1*m->aodp*betao2*(m->eta*(2+0.5*etasq)+m->eo*(0.5+2*etasq)-2*CK2*tsi/(m->aodp*psisq)*(-3*m->x3thm1*(1-2*eeta+etasq*(1.5-0.5*eeta))+0.75*m->x1mth2*(2*etasq-eeta*(1+etasq))*cos(2*m->omegao)));
 800e83a:	6a3b      	ldr	r3, [r7, #32]
 800e83c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	f7f1 fd32 	bl	80002ac <__adddf3>
 800e848:	4602      	mov	r2, r0
 800e84a:	460b      	mov	r3, r1
 800e84c:	4610      	mov	r0, r2
 800e84e:	4619      	mov	r1, r3
 800e850:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800e854:	f7f1 fee0 	bl	8000618 <__aeabi_dmul>
 800e858:	4602      	mov	r2, r0
 800e85a:	460b      	mov	r3, r1
 800e85c:	4610      	mov	r0, r2
 800e85e:	4619      	mov	r1, r3
 800e860:	6a3b      	ldr	r3, [r7, #32]
 800e862:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e866:	f7f1 fed7 	bl	8000618 <__aeabi_dmul>
 800e86a:	4602      	mov	r2, r0
 800e86c:	460b      	mov	r3, r1
 800e86e:	4610      	mov	r0, r2
 800e870:	4619      	mov	r1, r3
 800e872:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800e876:	f7f1 fecf 	bl	8000618 <__aeabi_dmul>
 800e87a:	4602      	mov	r2, r0
 800e87c:	460b      	mov	r3, r1
 800e87e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800e882:	6a3b      	ldr	r3, [r7, #32]
 800e884:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	@ 0x60
 800e888:	f04f 0200 	mov.w	r2, #0
 800e88c:	4bb1      	ldr	r3, [pc, #708]	@ (800eb54 <sgp4_init+0xb74>)
 800e88e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800e892:	f7f1 fec1 	bl	8000618 <__aeabi_dmul>
 800e896:	4602      	mov	r2, r0
 800e898:	460b      	mov	r3, r1
 800e89a:	4610      	mov	r0, r2
 800e89c:	4619      	mov	r1, r3
 800e89e:	f04f 0200 	mov.w	r2, #0
 800e8a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e8a6:	f7f1 fd01 	bl	80002ac <__adddf3>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	4629      	mov	r1, r5
 800e8b2:	f7f1 feb1 	bl	8000618 <__aeabi_dmul>
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	4690      	mov	r8, r2
 800e8bc:	4699      	mov	r9, r3
 800e8be:	6a3b      	ldr	r3, [r7, #32]
 800e8c0:	e9d3 4540 	ldrd	r4, r5, [r3, #256]	@ 0x100
 800e8c4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	460b      	mov	r3, r1
 800e8cc:	f7f1 fcee 	bl	80002ac <__adddf3>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	4610      	mov	r0, r2
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	f04f 0200 	mov.w	r2, #0
 800e8dc:	4b9d      	ldr	r3, [pc, #628]	@ (800eb54 <sgp4_init+0xb74>)
 800e8de:	f7f1 fce5 	bl	80002ac <__adddf3>
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	f7f1 fe95 	bl	8000618 <__aeabi_dmul>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	4640      	mov	r0, r8
 800e8f4:	4649      	mov	r1, r9
 800e8f6:	f7f1 fcd9 	bl	80002ac <__adddf3>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800e902:	a391      	add	r3, pc, #580	@ (adr r3, 800eb48 <sgp4_init+0xb68>)
 800e904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e908:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800e90c:	f7f1 fe84 	bl	8000618 <__aeabi_dmul>
 800e910:	4602      	mov	r2, r0
 800e912:	460b      	mov	r3, r1
 800e914:	4614      	mov	r4, r2
 800e916:	461d      	mov	r5, r3
 800e918:	6a3b      	ldr	r3, [r7, #32]
 800e91a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800e91e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800e922:	f7f1 fe79 	bl	8000618 <__aeabi_dmul>
 800e926:	4602      	mov	r2, r0
 800e928:	460b      	mov	r3, r1
 800e92a:	4620      	mov	r0, r4
 800e92c:	4629      	mov	r1, r5
 800e92e:	f7f1 ff9d 	bl	800086c <__aeabi_ddiv>
 800e932:	4602      	mov	r2, r0
 800e934:	460b      	mov	r3, r1
 800e936:	e9c7 2300 	strd	r2, r3, [r7]
 800e93a:	6a3b      	ldr	r3, [r7, #32]
 800e93c:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 800e940:	f04f 0200 	mov.w	r2, #0
 800e944:	4b84      	ldr	r3, [pc, #528]	@ (800eb58 <sgp4_init+0xb78>)
 800e946:	f7f1 fe67 	bl	8000618 <__aeabi_dmul>
 800e94a:	4602      	mov	r2, r0
 800e94c:	460b      	mov	r3, r1
 800e94e:	4690      	mov	r8, r2
 800e950:	4699      	mov	r9, r3
 800e952:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e956:	4602      	mov	r2, r0
 800e958:	460b      	mov	r3, r1
 800e95a:	f7f1 fca7 	bl	80002ac <__adddf3>
 800e95e:	4602      	mov	r2, r0
 800e960:	460b      	mov	r3, r1
 800e962:	f04f 0000 	mov.w	r0, #0
 800e966:	497a      	ldr	r1, [pc, #488]	@ (800eb50 <sgp4_init+0xb70>)
 800e968:	f7f1 fc9e 	bl	80002a8 <__aeabi_dsub>
 800e96c:	4602      	mov	r2, r0
 800e96e:	460b      	mov	r3, r1
 800e970:	4614      	mov	r4, r2
 800e972:	461d      	mov	r5, r3
 800e974:	f04f 0200 	mov.w	r2, #0
 800e978:	4b76      	ldr	r3, [pc, #472]	@ (800eb54 <sgp4_init+0xb74>)
 800e97a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e97e:	f7f1 fe4b 	bl	8000618 <__aeabi_dmul>
 800e982:	4602      	mov	r2, r0
 800e984:	460b      	mov	r3, r1
 800e986:	f04f 0000 	mov.w	r0, #0
 800e98a:	4974      	ldr	r1, [pc, #464]	@ (800eb5c <sgp4_init+0xb7c>)
 800e98c:	f7f1 fc8c 	bl	80002a8 <__aeabi_dsub>
 800e990:	4602      	mov	r2, r0
 800e992:	460b      	mov	r3, r1
 800e994:	4610      	mov	r0, r2
 800e996:	4619      	mov	r1, r3
 800e998:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800e99c:	f7f1 fe3c 	bl	8000618 <__aeabi_dmul>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	f7f1 fc80 	bl	80002ac <__adddf3>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	4640      	mov	r0, r8
 800e9b2:	4649      	mov	r1, r9
 800e9b4:	f7f1 fe30 	bl	8000618 <__aeabi_dmul>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	4692      	mov	sl, r2
 800e9be:	469b      	mov	fp, r3
 800e9c0:	6a3b      	ldr	r3, [r7, #32]
 800e9c2:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 800e9c6:	f04f 0200 	mov.w	r2, #0
 800e9ca:	4b65      	ldr	r3, [pc, #404]	@ (800eb60 <sgp4_init+0xb80>)
 800e9cc:	f7f1 fe24 	bl	8000618 <__aeabi_dmul>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	4690      	mov	r8, r2
 800e9d6:	4699      	mov	r9, r3
 800e9d8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800e9dc:	4602      	mov	r2, r0
 800e9de:	460b      	mov	r3, r1
 800e9e0:	f7f1 fc64 	bl	80002ac <__adddf3>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	4614      	mov	r4, r2
 800e9ea:	461d      	mov	r5, r3
 800e9ec:	f04f 0200 	mov.w	r2, #0
 800e9f0:	4b57      	ldr	r3, [pc, #348]	@ (800eb50 <sgp4_init+0xb70>)
 800e9f2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800e9f6:	f7f1 fc59 	bl	80002ac <__adddf3>
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	4610      	mov	r0, r2
 800ea00:	4619      	mov	r1, r3
 800ea02:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800ea06:	f7f1 fe07 	bl	8000618 <__aeabi_dmul>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	460b      	mov	r3, r1
 800ea0e:	4620      	mov	r0, r4
 800ea10:	4629      	mov	r1, r5
 800ea12:	f7f1 fc49 	bl	80002a8 <__aeabi_dsub>
 800ea16:	4602      	mov	r2, r0
 800ea18:	460b      	mov	r3, r1
 800ea1a:	4640      	mov	r0, r8
 800ea1c:	4649      	mov	r1, r9
 800ea1e:	f7f1 fdfb 	bl	8000618 <__aeabi_dmul>
 800ea22:	4602      	mov	r2, r0
 800ea24:	460b      	mov	r3, r1
 800ea26:	4614      	mov	r4, r2
 800ea28:	461d      	mov	r5, r3
 800ea2a:	6a3b      	ldr	r3, [r7, #32]
 800ea2c:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	@ 0x108
 800ea30:	4602      	mov	r2, r0
 800ea32:	460b      	mov	r3, r1
 800ea34:	f7f1 fc3a 	bl	80002ac <__adddf3>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	ec43 2b17 	vmov	d7, r2, r3
 800ea40:	eeb0 0a47 	vmov.f32	s0, s14
 800ea44:	eef0 0a67 	vmov.f32	s1, s15
 800ea48:	f013 fff6 	bl	8022a38 <cos>
 800ea4c:	ec53 2b10 	vmov	r2, r3, d0
 800ea50:	4620      	mov	r0, r4
 800ea52:	4629      	mov	r1, r5
 800ea54:	f7f1 fde0 	bl	8000618 <__aeabi_dmul>
 800ea58:	4602      	mov	r2, r0
 800ea5a:	460b      	mov	r3, r1
 800ea5c:	4650      	mov	r0, sl
 800ea5e:	4659      	mov	r1, fp
 800ea60:	f7f1 fc24 	bl	80002ac <__adddf3>
 800ea64:	4602      	mov	r2, r0
 800ea66:	460b      	mov	r3, r1
 800ea68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ea6c:	f7f1 fdd4 	bl	8000618 <__aeabi_dmul>
 800ea70:	4602      	mov	r2, r0
 800ea72:	460b      	mov	r3, r1
 800ea74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ea78:	f7f1 fc16 	bl	80002a8 <__aeabi_dsub>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ea84:	f7f1 fdc8 	bl	8000618 <__aeabi_dmul>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	6a39      	ldr	r1, [r7, #32]
 800ea8e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	m->c5=2*coef1*m->aodp*betao2*(1+2.75*(etasq+eeta)+eeta*etasq);
 800ea92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ea96:	4602      	mov	r2, r0
 800ea98:	460b      	mov	r3, r1
 800ea9a:	f7f1 fc07 	bl	80002ac <__adddf3>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	6a3b      	ldr	r3, [r7, #32]
 800eaa8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800eaac:	f7f1 fdb4 	bl	8000618 <__aeabi_dmul>
 800eab0:	4602      	mov	r2, r0
 800eab2:	460b      	mov	r3, r1
 800eab4:	4610      	mov	r0, r2
 800eab6:	4619      	mov	r1, r3
 800eab8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800eabc:	f7f1 fdac 	bl	8000618 <__aeabi_dmul>
 800eac0:	4602      	mov	r2, r0
 800eac2:	460b      	mov	r3, r1
 800eac4:	4614      	mov	r4, r2
 800eac6:	461d      	mov	r5, r3
 800eac8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800eacc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800ead0:	f7f1 fbec 	bl	80002ac <__adddf3>
 800ead4:	4602      	mov	r2, r0
 800ead6:	460b      	mov	r3, r1
 800ead8:	4610      	mov	r0, r2
 800eada:	4619      	mov	r1, r3
 800eadc:	f04f 0200 	mov.w	r2, #0
 800eae0:	4b20      	ldr	r3, [pc, #128]	@ (800eb64 <sgp4_init+0xb84>)
 800eae2:	f7f1 fd99 	bl	8000618 <__aeabi_dmul>
 800eae6:	4602      	mov	r2, r0
 800eae8:	460b      	mov	r3, r1
 800eaea:	4610      	mov	r0, r2
 800eaec:	4619      	mov	r1, r3
 800eaee:	f04f 0200 	mov.w	r2, #0
 800eaf2:	4b17      	ldr	r3, [pc, #92]	@ (800eb50 <sgp4_init+0xb70>)
 800eaf4:	f7f1 fbda 	bl	80002ac <__adddf3>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	460b      	mov	r3, r1
 800eafc:	4690      	mov	r8, r2
 800eafe:	4699      	mov	r9, r3
 800eb00:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800eb04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800eb08:	f7f1 fd86 	bl	8000618 <__aeabi_dmul>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	460b      	mov	r3, r1
 800eb10:	4640      	mov	r0, r8
 800eb12:	4649      	mov	r1, r9
 800eb14:	f7f1 fbca 	bl	80002ac <__adddf3>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	460b      	mov	r3, r1
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	4629      	mov	r1, r5
 800eb20:	f7f1 fd7a 	bl	8000618 <__aeabi_dmul>
 800eb24:	4602      	mov	r2, r0
 800eb26:	460b      	mov	r3, r1
 800eb28:	6a39      	ldr	r1, [r7, #32]
 800eb2a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	theta4=theta2*theta2;
 800eb2e:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800eb32:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800eb36:	f7f1 fd6f 	bl	8000618 <__aeabi_dmul>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800eb42:	e015      	b.n	800eb70 <sgp4_init+0xb90>
 800eb44:	f3af 8000 	nop.w
 800eb48:	dd20e5a5 	.word	0xdd20e5a5
 800eb4c:	3f51bcd1 	.word	0x3f51bcd1
 800eb50:	3ff00000 	.word	0x3ff00000
 800eb54:	3fe00000 	.word	0x3fe00000
 800eb58:	c0080000 	.word	0xc0080000
 800eb5c:	3ff80000 	.word	0x3ff80000
 800eb60:	3fe80000 	.word	0x3fe80000
 800eb64:	40060000 	.word	0x40060000
 800eb68:	f3add061 	.word	0xf3add061
 800eb6c:	3f7335f7 	.word	0x3f7335f7
	temp1=3*CK2*pinvsq*m->xnodp;
 800eb70:	a3fd      	add	r3, pc, #1012	@ (adr r3, 800ef68 <sgp4_init+0xf88>)
 800eb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800eb7a:	f7f1 fd4d 	bl	8000618 <__aeabi_dmul>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	460b      	mov	r3, r1
 800eb82:	4610      	mov	r0, r2
 800eb84:	4619      	mov	r1, r3
 800eb86:	6a3b      	ldr	r3, [r7, #32]
 800eb88:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800eb8c:	f7f1 fd44 	bl	8000618 <__aeabi_dmul>
 800eb90:	4602      	mov	r2, r0
 800eb92:	460b      	mov	r3, r1
 800eb94:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	temp2=temp1*CK2*pinvsq;
 800eb98:	a3f5      	add	r3, pc, #980	@ (adr r3, 800ef70 <sgp4_init+0xf90>)
 800eb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800eba2:	f7f1 fd39 	bl	8000618 <__aeabi_dmul>
 800eba6:	4602      	mov	r2, r0
 800eba8:	460b      	mov	r3, r1
 800ebaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ebae:	f7f1 fd33 	bl	8000618 <__aeabi_dmul>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp3=1.25*CK4*pinvsq*pinvsq*m->xnodp;
 800ebba:	a3ef      	add	r3, pc, #956	@ (adr r3, 800ef78 <sgp4_init+0xf98>)
 800ebbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ebc4:	f7f1 fd28 	bl	8000618 <__aeabi_dmul>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	460b      	mov	r3, r1
 800ebcc:	4610      	mov	r0, r2
 800ebce:	4619      	mov	r1, r3
 800ebd0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800ebd4:	f7f1 fd20 	bl	8000618 <__aeabi_dmul>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	460b      	mov	r3, r1
 800ebdc:	4610      	mov	r0, r2
 800ebde:	4619      	mov	r1, r3
 800ebe0:	6a3b      	ldr	r3, [r7, #32]
 800ebe2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800ebe6:	f7f1 fd17 	bl	8000618 <__aeabi_dmul>
 800ebea:	4602      	mov	r2, r0
 800ebec:	460b      	mov	r3, r1
 800ebee:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	m->xmdot=m->xnodp+0.5*temp1*betao*m->x3thm1+0.0625*temp2*betao*(13-78*theta2+137*theta4);
 800ebf2:	6a3b      	ldr	r3, [r7, #32]
 800ebf4:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 800ebf8:	f04f 0200 	mov.w	r2, #0
 800ebfc:	4bcc      	ldr	r3, [pc, #816]	@ (800ef30 <sgp4_init+0xf50>)
 800ebfe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800ec02:	f7f1 fd09 	bl	8000618 <__aeabi_dmul>
 800ec06:	4602      	mov	r2, r0
 800ec08:	460b      	mov	r3, r1
 800ec0a:	4610      	mov	r0, r2
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800ec12:	f7f1 fd01 	bl	8000618 <__aeabi_dmul>
 800ec16:	4602      	mov	r2, r0
 800ec18:	460b      	mov	r3, r1
 800ec1a:	4610      	mov	r0, r2
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	6a3b      	ldr	r3, [r7, #32]
 800ec20:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 800ec24:	f7f1 fcf8 	bl	8000618 <__aeabi_dmul>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	460b      	mov	r3, r1
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	4629      	mov	r1, r5
 800ec30:	f7f1 fb3c 	bl	80002ac <__adddf3>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	4614      	mov	r4, r2
 800ec3a:	461d      	mov	r5, r3
 800ec3c:	f04f 0200 	mov.w	r2, #0
 800ec40:	4bbc      	ldr	r3, [pc, #752]	@ (800ef34 <sgp4_init+0xf54>)
 800ec42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800ec46:	f7f1 fce7 	bl	8000618 <__aeabi_dmul>
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	4610      	mov	r0, r2
 800ec50:	4619      	mov	r1, r3
 800ec52:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800ec56:	f7f1 fcdf 	bl	8000618 <__aeabi_dmul>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	4690      	mov	r8, r2
 800ec60:	4699      	mov	r9, r3
 800ec62:	f04f 0200 	mov.w	r2, #0
 800ec66:	4bb4      	ldr	r3, [pc, #720]	@ (800ef38 <sgp4_init+0xf58>)
 800ec68:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800ec6c:	f7f1 fcd4 	bl	8000618 <__aeabi_dmul>
 800ec70:	4602      	mov	r2, r0
 800ec72:	460b      	mov	r3, r1
 800ec74:	f04f 0000 	mov.w	r0, #0
 800ec78:	49b0      	ldr	r1, [pc, #704]	@ (800ef3c <sgp4_init+0xf5c>)
 800ec7a:	f7f1 fb15 	bl	80002a8 <__aeabi_dsub>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	460b      	mov	r3, r1
 800ec82:	4692      	mov	sl, r2
 800ec84:	469b      	mov	fp, r3
 800ec86:	a3a4      	add	r3, pc, #656	@ (adr r3, 800ef18 <sgp4_init+0xf38>)
 800ec88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800ec90:	f7f1 fcc2 	bl	8000618 <__aeabi_dmul>
 800ec94:	4602      	mov	r2, r0
 800ec96:	460b      	mov	r3, r1
 800ec98:	4650      	mov	r0, sl
 800ec9a:	4659      	mov	r1, fp
 800ec9c:	f7f1 fb06 	bl	80002ac <__adddf3>
 800eca0:	4602      	mov	r2, r0
 800eca2:	460b      	mov	r3, r1
 800eca4:	4640      	mov	r0, r8
 800eca6:	4649      	mov	r1, r9
 800eca8:	f7f1 fcb6 	bl	8000618 <__aeabi_dmul>
 800ecac:	4602      	mov	r2, r0
 800ecae:	460b      	mov	r3, r1
 800ecb0:	4620      	mov	r0, r4
 800ecb2:	4629      	mov	r1, r5
 800ecb4:	f7f1 fafa 	bl	80002ac <__adddf3>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	460b      	mov	r3, r1
 800ecbc:	6a39      	ldr	r1, [r7, #32]
 800ecbe:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
	x1m5th=1-5*theta2;
 800ecc2:	f04f 0200 	mov.w	r2, #0
 800ecc6:	4b9e      	ldr	r3, [pc, #632]	@ (800ef40 <sgp4_init+0xf60>)
 800ecc8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800eccc:	f7f1 fca4 	bl	8000618 <__aeabi_dmul>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	f04f 0000 	mov.w	r0, #0
 800ecd8:	499a      	ldr	r1, [pc, #616]	@ (800ef44 <sgp4_init+0xf64>)
 800ecda:	f7f1 fae5 	bl	80002a8 <__aeabi_dsub>
 800ecde:	4602      	mov	r2, r0
 800ece0:	460b      	mov	r3, r1
 800ece2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	m->omgdot=-0.5*temp1*x1m5th+0.0625*temp2*(7-114*theta2+395*theta4)+temp3*(3-36*theta2+49*theta4);
 800ece6:	f04f 0200 	mov.w	r2, #0
 800ecea:	4b97      	ldr	r3, [pc, #604]	@ (800ef48 <sgp4_init+0xf68>)
 800ecec:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800ecf0:	f7f1 fc92 	bl	8000618 <__aeabi_dmul>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	4610      	mov	r0, r2
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ed00:	f7f1 fc8a 	bl	8000618 <__aeabi_dmul>
 800ed04:	4602      	mov	r2, r0
 800ed06:	460b      	mov	r3, r1
 800ed08:	4614      	mov	r4, r2
 800ed0a:	461d      	mov	r5, r3
 800ed0c:	f04f 0200 	mov.w	r2, #0
 800ed10:	4b88      	ldr	r3, [pc, #544]	@ (800ef34 <sgp4_init+0xf54>)
 800ed12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800ed16:	f7f1 fc7f 	bl	8000618 <__aeabi_dmul>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	4690      	mov	r8, r2
 800ed20:	4699      	mov	r9, r3
 800ed22:	f04f 0200 	mov.w	r2, #0
 800ed26:	4b89      	ldr	r3, [pc, #548]	@ (800ef4c <sgp4_init+0xf6c>)
 800ed28:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800ed2c:	f7f1 fc74 	bl	8000618 <__aeabi_dmul>
 800ed30:	4602      	mov	r2, r0
 800ed32:	460b      	mov	r3, r1
 800ed34:	f04f 0000 	mov.w	r0, #0
 800ed38:	4985      	ldr	r1, [pc, #532]	@ (800ef50 <sgp4_init+0xf70>)
 800ed3a:	f7f1 fab5 	bl	80002a8 <__aeabi_dsub>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	460b      	mov	r3, r1
 800ed42:	4692      	mov	sl, r2
 800ed44:	469b      	mov	fp, r3
 800ed46:	a376      	add	r3, pc, #472	@ (adr r3, 800ef20 <sgp4_init+0xf40>)
 800ed48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800ed50:	f7f1 fc62 	bl	8000618 <__aeabi_dmul>
 800ed54:	4602      	mov	r2, r0
 800ed56:	460b      	mov	r3, r1
 800ed58:	4650      	mov	r0, sl
 800ed5a:	4659      	mov	r1, fp
 800ed5c:	f7f1 faa6 	bl	80002ac <__adddf3>
 800ed60:	4602      	mov	r2, r0
 800ed62:	460b      	mov	r3, r1
 800ed64:	4640      	mov	r0, r8
 800ed66:	4649      	mov	r1, r9
 800ed68:	f7f1 fc56 	bl	8000618 <__aeabi_dmul>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	460b      	mov	r3, r1
 800ed70:	4620      	mov	r0, r4
 800ed72:	4629      	mov	r1, r5
 800ed74:	f7f1 fa9a 	bl	80002ac <__adddf3>
 800ed78:	4602      	mov	r2, r0
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	4614      	mov	r4, r2
 800ed7e:	461d      	mov	r5, r3
 800ed80:	f04f 0200 	mov.w	r2, #0
 800ed84:	4b73      	ldr	r3, [pc, #460]	@ (800ef54 <sgp4_init+0xf74>)
 800ed86:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800ed8a:	f7f1 fc45 	bl	8000618 <__aeabi_dmul>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	460b      	mov	r3, r1
 800ed92:	f04f 0000 	mov.w	r0, #0
 800ed96:	4970      	ldr	r1, [pc, #448]	@ (800ef58 <sgp4_init+0xf78>)
 800ed98:	f7f1 fa86 	bl	80002a8 <__aeabi_dsub>
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	460b      	mov	r3, r1
 800eda0:	4690      	mov	r8, r2
 800eda2:	4699      	mov	r9, r3
 800eda4:	f04f 0200 	mov.w	r2, #0
 800eda8:	4b6c      	ldr	r3, [pc, #432]	@ (800ef5c <sgp4_init+0xf7c>)
 800edaa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800edae:	f7f1 fc33 	bl	8000618 <__aeabi_dmul>
 800edb2:	4602      	mov	r2, r0
 800edb4:	460b      	mov	r3, r1
 800edb6:	4640      	mov	r0, r8
 800edb8:	4649      	mov	r1, r9
 800edba:	f7f1 fa77 	bl	80002ac <__adddf3>
 800edbe:	4602      	mov	r2, r0
 800edc0:	460b      	mov	r3, r1
 800edc2:	4610      	mov	r0, r2
 800edc4:	4619      	mov	r1, r3
 800edc6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800edca:	f7f1 fc25 	bl	8000618 <__aeabi_dmul>
 800edce:	4602      	mov	r2, r0
 800edd0:	460b      	mov	r3, r1
 800edd2:	4620      	mov	r0, r4
 800edd4:	4629      	mov	r1, r5
 800edd6:	f7f1 fa69 	bl	80002ac <__adddf3>
 800edda:	4602      	mov	r2, r0
 800eddc:	460b      	mov	r3, r1
 800edde:	6a39      	ldr	r1, [r7, #32]
 800ede0:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	xhdot1=-temp1*m->cosio;
 800ede4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ede6:	61bb      	str	r3, [r7, #24]
 800ede8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800edea:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800edee:	61fb      	str	r3, [r7, #28]
 800edf0:	6a3b      	ldr	r3, [r7, #32]
 800edf2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800edf6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800edfa:	f7f1 fc0d 	bl	8000618 <__aeabi_dmul>
 800edfe:	4602      	mov	r2, r0
 800ee00:	460b      	mov	r3, r1
 800ee02:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	m->xnodot=xhdot1+(0.5*temp2*(4-19*theta2)+2*temp3*(3-7*theta2))*m->cosio;
 800ee06:	f04f 0200 	mov.w	r2, #0
 800ee0a:	4b49      	ldr	r3, [pc, #292]	@ (800ef30 <sgp4_init+0xf50>)
 800ee0c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800ee10:	f7f1 fc02 	bl	8000618 <__aeabi_dmul>
 800ee14:	4602      	mov	r2, r0
 800ee16:	460b      	mov	r3, r1
 800ee18:	4614      	mov	r4, r2
 800ee1a:	461d      	mov	r5, r3
 800ee1c:	f04f 0200 	mov.w	r2, #0
 800ee20:	4b4f      	ldr	r3, [pc, #316]	@ (800ef60 <sgp4_init+0xf80>)
 800ee22:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800ee26:	f7f1 fbf7 	bl	8000618 <__aeabi_dmul>
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	f04f 0000 	mov.w	r0, #0
 800ee32:	494c      	ldr	r1, [pc, #304]	@ (800ef64 <sgp4_init+0xf84>)
 800ee34:	f7f1 fa38 	bl	80002a8 <__aeabi_dsub>
 800ee38:	4602      	mov	r2, r0
 800ee3a:	460b      	mov	r3, r1
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	4629      	mov	r1, r5
 800ee40:	f7f1 fbea 	bl	8000618 <__aeabi_dmul>
 800ee44:	4602      	mov	r2, r0
 800ee46:	460b      	mov	r3, r1
 800ee48:	4614      	mov	r4, r2
 800ee4a:	461d      	mov	r5, r3
 800ee4c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800ee50:	4602      	mov	r2, r0
 800ee52:	460b      	mov	r3, r1
 800ee54:	f7f1 fa2a 	bl	80002ac <__adddf3>
 800ee58:	4602      	mov	r2, r0
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	4690      	mov	r8, r2
 800ee5e:	4699      	mov	r9, r3
 800ee60:	f04f 0200 	mov.w	r2, #0
 800ee64:	4b3a      	ldr	r3, [pc, #232]	@ (800ef50 <sgp4_init+0xf70>)
 800ee66:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800ee6a:	f7f1 fbd5 	bl	8000618 <__aeabi_dmul>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	460b      	mov	r3, r1
 800ee72:	f04f 0000 	mov.w	r0, #0
 800ee76:	4938      	ldr	r1, [pc, #224]	@ (800ef58 <sgp4_init+0xf78>)
 800ee78:	f7f1 fa16 	bl	80002a8 <__aeabi_dsub>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	460b      	mov	r3, r1
 800ee80:	4640      	mov	r0, r8
 800ee82:	4649      	mov	r1, r9
 800ee84:	f7f1 fbc8 	bl	8000618 <__aeabi_dmul>
 800ee88:	4602      	mov	r2, r0
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	4629      	mov	r1, r5
 800ee90:	f7f1 fa0c 	bl	80002ac <__adddf3>
 800ee94:	4602      	mov	r2, r0
 800ee96:	460b      	mov	r3, r1
 800ee98:	4610      	mov	r0, r2
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	6a3b      	ldr	r3, [r7, #32]
 800ee9e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800eea2:	f7f1 fbb9 	bl	8000618 <__aeabi_dmul>
 800eea6:	4602      	mov	r2, r0
 800eea8:	460b      	mov	r3, r1
 800eeaa:	4610      	mov	r0, r2
 800eeac:	4619      	mov	r1, r3
 800eeae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800eeb2:	f7f1 f9fb 	bl	80002ac <__adddf3>
 800eeb6:	4602      	mov	r2, r0
 800eeb8:	460b      	mov	r3, r1
 800eeba:	6a39      	ldr	r1, [r7, #32]
 800eebc:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
	m->omgcof=m->bstar*c3*cos(m->omegao);
 800eec0:	6a3b      	ldr	r3, [r7, #32]
 800eec2:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 800eec6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800eeca:	f7f1 fba5 	bl	8000618 <__aeabi_dmul>
 800eece:	4602      	mov	r2, r0
 800eed0:	460b      	mov	r3, r1
 800eed2:	4614      	mov	r4, r2
 800eed4:	461d      	mov	r5, r3
 800eed6:	6a3b      	ldr	r3, [r7, #32]
 800eed8:	ed93 7b42 	vldr	d7, [r3, #264]	@ 0x108
 800eedc:	eeb0 0a47 	vmov.f32	s0, s14
 800eee0:	eef0 0a67 	vmov.f32	s1, s15
 800eee4:	f013 fda8 	bl	8022a38 <cos>
 800eee8:	ec53 2b10 	vmov	r2, r3, d0
 800eeec:	4620      	mov	r0, r4
 800eeee:	4629      	mov	r1, r5
 800eef0:	f7f1 fb92 	bl	8000618 <__aeabi_dmul>
 800eef4:	4602      	mov	r2, r0
 800eef6:	460b      	mov	r3, r1
 800eef8:	6a39      	ldr	r1, [r7, #32]
 800eefa:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	m->xmcof=-TWO_THIRD*coef*m->bstar*AE/eeta;
 800eefe:	a30a      	add	r3, pc, #40	@ (adr r3, 800ef28 <sgp4_init+0xf48>)
 800ef00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef04:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800ef08:	f7f1 fb86 	bl	8000618 <__aeabi_dmul>
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	460b      	mov	r3, r1
 800ef10:	e036      	b.n	800ef80 <sgp4_init+0xfa0>
 800ef12:	bf00      	nop
 800ef14:	f3af 8000 	nop.w
 800ef18:	00000000 	.word	0x00000000
 800ef1c:	40612000 	.word	0x40612000
 800ef20:	00000000 	.word	0x00000000
 800ef24:	4078b000 	.word	0x4078b000
 800ef28:	55555555 	.word	0x55555555
 800ef2c:	bfe55555 	.word	0xbfe55555
 800ef30:	3fe00000 	.word	0x3fe00000
 800ef34:	3fb00000 	.word	0x3fb00000
 800ef38:	40538000 	.word	0x40538000
 800ef3c:	402a0000 	.word	0x402a0000
 800ef40:	40140000 	.word	0x40140000
 800ef44:	3ff00000 	.word	0x3ff00000
 800ef48:	bfe00000 	.word	0xbfe00000
 800ef4c:	405c8000 	.word	0x405c8000
 800ef50:	401c0000 	.word	0x401c0000
 800ef54:	40420000 	.word	0x40420000
 800ef58:	40080000 	.word	0x40080000
 800ef5c:	40488000 	.word	0x40488000
 800ef60:	40330000 	.word	0x40330000
 800ef64:	40100000 	.word	0x40100000
 800ef68:	cbb15878 	.word	0xcbb15878
 800ef6c:	3f5a9b3a 	.word	0x3f5a9b3a
 800ef70:	dd20e5a5 	.word	0xdd20e5a5
 800ef74:	3f41bcd1 	.word	0x3f41bcd1
 800ef78:	bdacda00 	.word	0xbdacda00
 800ef7c:	3eaa0bd0 	.word	0x3eaa0bd0
 800ef80:	4610      	mov	r0, r2
 800ef82:	4619      	mov	r1, r3
 800ef84:	6a3b      	ldr	r3, [r7, #32]
 800ef86:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 800ef8a:	f7f1 fb45 	bl	8000618 <__aeabi_dmul>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	460b      	mov	r3, r1
 800ef92:	4610      	mov	r0, r2
 800ef94:	4619      	mov	r1, r3
 800ef96:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800ef9a:	f7f1 fc67 	bl	800086c <__aeabi_ddiv>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	460b      	mov	r3, r1
 800efa2:	6a39      	ldr	r1, [r7, #32]
 800efa4:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
	m->xnodcf=3.5*betao2*xhdot1*m->c1;
 800efa8:	f04f 0200 	mov.w	r2, #0
 800efac:	4bc2      	ldr	r3, [pc, #776]	@ (800f2b8 <sgp4_init+0x12d8>)
 800efae:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800efb2:	f7f1 fb31 	bl	8000618 <__aeabi_dmul>
 800efb6:	4602      	mov	r2, r0
 800efb8:	460b      	mov	r3, r1
 800efba:	4610      	mov	r0, r2
 800efbc:	4619      	mov	r1, r3
 800efbe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800efc2:	f7f1 fb29 	bl	8000618 <__aeabi_dmul>
 800efc6:	4602      	mov	r2, r0
 800efc8:	460b      	mov	r3, r1
 800efca:	4610      	mov	r0, r2
 800efcc:	4619      	mov	r1, r3
 800efce:	6a3b      	ldr	r3, [r7, #32]
 800efd0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800efd4:	f7f1 fb20 	bl	8000618 <__aeabi_dmul>
 800efd8:	4602      	mov	r2, r0
 800efda:	460b      	mov	r3, r1
 800efdc:	6a39      	ldr	r1, [r7, #32]
 800efde:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
	m->t2cof=1.5*m->c1;
 800efe2:	6a3b      	ldr	r3, [r7, #32]
 800efe4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800efe8:	f04f 0200 	mov.w	r2, #0
 800efec:	4bb3      	ldr	r3, [pc, #716]	@ (800f2bc <sgp4_init+0x12dc>)
 800efee:	f7f1 fb13 	bl	8000618 <__aeabi_dmul>
 800eff2:	4602      	mov	r2, r0
 800eff4:	460b      	mov	r3, r1
 800eff6:	6a39      	ldr	r1, [r7, #32]
 800eff8:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	m->xlcof=0.125*a3ovk2*m->sinio*(3+5*m->cosio)/(1+m->cosio);
 800effc:	f04f 0200 	mov.w	r2, #0
 800f000:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f004:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800f008:	f7f1 fb06 	bl	8000618 <__aeabi_dmul>
 800f00c:	4602      	mov	r2, r0
 800f00e:	460b      	mov	r3, r1
 800f010:	4610      	mov	r0, r2
 800f012:	4619      	mov	r1, r3
 800f014:	6a3b      	ldr	r3, [r7, #32]
 800f016:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800f01a:	f7f1 fafd 	bl	8000618 <__aeabi_dmul>
 800f01e:	4602      	mov	r2, r0
 800f020:	460b      	mov	r3, r1
 800f022:	4614      	mov	r4, r2
 800f024:	461d      	mov	r5, r3
 800f026:	6a3b      	ldr	r3, [r7, #32]
 800f028:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800f02c:	f04f 0200 	mov.w	r2, #0
 800f030:	4ba3      	ldr	r3, [pc, #652]	@ (800f2c0 <sgp4_init+0x12e0>)
 800f032:	f7f1 faf1 	bl	8000618 <__aeabi_dmul>
 800f036:	4602      	mov	r2, r0
 800f038:	460b      	mov	r3, r1
 800f03a:	4610      	mov	r0, r2
 800f03c:	4619      	mov	r1, r3
 800f03e:	f04f 0200 	mov.w	r2, #0
 800f042:	4ba0      	ldr	r3, [pc, #640]	@ (800f2c4 <sgp4_init+0x12e4>)
 800f044:	f7f1 f932 	bl	80002ac <__adddf3>
 800f048:	4602      	mov	r2, r0
 800f04a:	460b      	mov	r3, r1
 800f04c:	4620      	mov	r0, r4
 800f04e:	4629      	mov	r1, r5
 800f050:	f7f1 fae2 	bl	8000618 <__aeabi_dmul>
 800f054:	4602      	mov	r2, r0
 800f056:	460b      	mov	r3, r1
 800f058:	4614      	mov	r4, r2
 800f05a:	461d      	mov	r5, r3
 800f05c:	6a3b      	ldr	r3, [r7, #32]
 800f05e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800f062:	f04f 0200 	mov.w	r2, #0
 800f066:	4b98      	ldr	r3, [pc, #608]	@ (800f2c8 <sgp4_init+0x12e8>)
 800f068:	f7f1 f920 	bl	80002ac <__adddf3>
 800f06c:	4602      	mov	r2, r0
 800f06e:	460b      	mov	r3, r1
 800f070:	4620      	mov	r0, r4
 800f072:	4629      	mov	r1, r5
 800f074:	f7f1 fbfa 	bl	800086c <__aeabi_ddiv>
 800f078:	4602      	mov	r2, r0
 800f07a:	460b      	mov	r3, r1
 800f07c:	6a39      	ldr	r1, [r7, #32]
 800f07e:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
	m->aycof=0.25*a3ovk2*m->sinio;
 800f082:	f04f 0200 	mov.w	r2, #0
 800f086:	4b91      	ldr	r3, [pc, #580]	@ (800f2cc <sgp4_init+0x12ec>)
 800f088:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800f08c:	f7f1 fac4 	bl	8000618 <__aeabi_dmul>
 800f090:	4602      	mov	r2, r0
 800f092:	460b      	mov	r3, r1
 800f094:	4610      	mov	r0, r2
 800f096:	4619      	mov	r1, r3
 800f098:	6a3b      	ldr	r3, [r7, #32]
 800f09a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800f09e:	f7f1 fabb 	bl	8000618 <__aeabi_dmul>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	6a39      	ldr	r1, [r7, #32]
 800f0a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	m->delmo=pow(1+m->eta*cos(m->xmo),3);
 800f0ac:	6a3b      	ldr	r3, [r7, #32]
 800f0ae:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	@ 0x60
 800f0b2:	6a3b      	ldr	r3, [r7, #32]
 800f0b4:	ed93 7b44 	vldr	d7, [r3, #272]	@ 0x110
 800f0b8:	eeb0 0a47 	vmov.f32	s0, s14
 800f0bc:	eef0 0a67 	vmov.f32	s1, s15
 800f0c0:	f013 fcba 	bl	8022a38 <cos>
 800f0c4:	ec53 2b10 	vmov	r2, r3, d0
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	4629      	mov	r1, r5
 800f0cc:	f7f1 faa4 	bl	8000618 <__aeabi_dmul>
 800f0d0:	4602      	mov	r2, r0
 800f0d2:	460b      	mov	r3, r1
 800f0d4:	4610      	mov	r0, r2
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	f04f 0200 	mov.w	r2, #0
 800f0dc:	4b7a      	ldr	r3, [pc, #488]	@ (800f2c8 <sgp4_init+0x12e8>)
 800f0de:	f7f1 f8e5 	bl	80002ac <__adddf3>
 800f0e2:	4602      	mov	r2, r0
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	ec43 2b17 	vmov	d7, r2, r3
 800f0ea:	ed9f 1b6f 	vldr	d1, [pc, #444]	@ 800f2a8 <sgp4_init+0x12c8>
 800f0ee:	eeb0 0a47 	vmov.f32	s0, s14
 800f0f2:	eef0 0a67 	vmov.f32	s1, s15
 800f0f6:	f013 fa69 	bl	80225cc <pow>
 800f0fa:	eeb0 7a40 	vmov.f32	s14, s0
 800f0fe:	eef0 7a60 	vmov.f32	s15, s1
 800f102:	6a3b      	ldr	r3, [r7, #32]
 800f104:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
	m->sinmo=sin(m->xmo);
 800f108:	6a3b      	ldr	r3, [r7, #32]
 800f10a:	ed93 7b44 	vldr	d7, [r3, #272]	@ 0x110
 800f10e:	eeb0 0a47 	vmov.f32	s0, s14
 800f112:	eef0 0a67 	vmov.f32	s1, s15
 800f116:	f013 fceb 	bl	8022af0 <sin>
 800f11a:	eeb0 7a40 	vmov.f32	s14, s0
 800f11e:	eef0 7a60 	vmov.f32	s15, s1
 800f122:	6a3b      	ldr	r3, [r7, #32]
 800f124:	ed83 7b20 	vstr	d7, [r3, #128]	@ 0x80
	m->x7thm1=7*theta2-1;
 800f128:	f04f 0200 	mov.w	r2, #0
 800f12c:	4b68      	ldr	r3, [pc, #416]	@ (800f2d0 <sgp4_init+0x12f0>)
 800f12e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800f132:	f7f1 fa71 	bl	8000618 <__aeabi_dmul>
 800f136:	4602      	mov	r2, r0
 800f138:	460b      	mov	r3, r1
 800f13a:	4610      	mov	r0, r2
 800f13c:	4619      	mov	r1, r3
 800f13e:	f04f 0200 	mov.w	r2, #0
 800f142:	4b61      	ldr	r3, [pc, #388]	@ (800f2c8 <sgp4_init+0x12e8>)
 800f144:	f7f1 f8b0 	bl	80002a8 <__aeabi_dsub>
 800f148:	4602      	mov	r2, r0
 800f14a:	460b      	mov	r3, r1
 800f14c:	6a39      	ldr	r1, [r7, #32]
 800f14e:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8

	if (!m->simpleFlag) {
 800f152:	6a3b      	ldr	r3, [r7, #32]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	f040 8199 	bne.w	800f48e <sgp4_init+0x14ae>
		c1sq=m->c1*m->c1;
 800f15c:	6a3b      	ldr	r3, [r7, #32]
 800f15e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800f162:	6a3b      	ldr	r3, [r7, #32]
 800f164:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800f168:	f7f1 fa56 	bl	8000618 <__aeabi_dmul>
 800f16c:	4602      	mov	r2, r0
 800f16e:	460b      	mov	r3, r1
 800f170:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		m->d2=4*m->aodp*tsi*c1sq;
 800f174:	6a3b      	ldr	r3, [r7, #32]
 800f176:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f17a:	f04f 0200 	mov.w	r2, #0
 800f17e:	4b55      	ldr	r3, [pc, #340]	@ (800f2d4 <sgp4_init+0x12f4>)
 800f180:	f7f1 fa4a 	bl	8000618 <__aeabi_dmul>
 800f184:	4602      	mov	r2, r0
 800f186:	460b      	mov	r3, r1
 800f188:	4610      	mov	r0, r2
 800f18a:	4619      	mov	r1, r3
 800f18c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800f190:	f7f1 fa42 	bl	8000618 <__aeabi_dmul>
 800f194:	4602      	mov	r2, r0
 800f196:	460b      	mov	r3, r1
 800f198:	4610      	mov	r0, r2
 800f19a:	4619      	mov	r1, r3
 800f19c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800f1a0:	f7f1 fa3a 	bl	8000618 <__aeabi_dmul>
 800f1a4:	4602      	mov	r2, r0
 800f1a6:	460b      	mov	r3, r1
 800f1a8:	6a39      	ldr	r1, [r7, #32]
 800f1aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		temp=m->d2*tsi*m->c1/3;
 800f1ae:	6a3b      	ldr	r3, [r7, #32]
 800f1b0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f1b4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800f1b8:	f7f1 fa2e 	bl	8000618 <__aeabi_dmul>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	460b      	mov	r3, r1
 800f1c0:	4610      	mov	r0, r2
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	6a3b      	ldr	r3, [r7, #32]
 800f1c6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800f1ca:	f7f1 fa25 	bl	8000618 <__aeabi_dmul>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	4610      	mov	r0, r2
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	f04f 0200 	mov.w	r2, #0
 800f1da:	4b3a      	ldr	r3, [pc, #232]	@ (800f2c4 <sgp4_init+0x12e4>)
 800f1dc:	f7f1 fb46 	bl	800086c <__aeabi_ddiv>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		m->d3=(17*m->aodp+s4)*temp;
 800f1e8:	6a3b      	ldr	r3, [r7, #32]
 800f1ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f1ee:	f04f 0200 	mov.w	r2, #0
 800f1f2:	4b39      	ldr	r3, [pc, #228]	@ (800f2d8 <sgp4_init+0x12f8>)
 800f1f4:	f7f1 fa10 	bl	8000618 <__aeabi_dmul>
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	4610      	mov	r0, r2
 800f1fe:	4619      	mov	r1, r3
 800f200:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800f204:	f7f1 f852 	bl	80002ac <__adddf3>
 800f208:	4602      	mov	r2, r0
 800f20a:	460b      	mov	r3, r1
 800f20c:	4610      	mov	r0, r2
 800f20e:	4619      	mov	r1, r3
 800f210:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800f214:	f7f1 fa00 	bl	8000618 <__aeabi_dmul>
 800f218:	4602      	mov	r2, r0
 800f21a:	460b      	mov	r3, r1
 800f21c:	6a39      	ldr	r1, [r7, #32]
 800f21e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		m->d4=0.5*temp*m->aodp*tsi*(221*m->aodp+31*s4)*m->c1;
 800f222:	f04f 0200 	mov.w	r2, #0
 800f226:	4b2d      	ldr	r3, [pc, #180]	@ (800f2dc <sgp4_init+0x12fc>)
 800f228:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800f22c:	f7f1 f9f4 	bl	8000618 <__aeabi_dmul>
 800f230:	4602      	mov	r2, r0
 800f232:	460b      	mov	r3, r1
 800f234:	4610      	mov	r0, r2
 800f236:	4619      	mov	r1, r3
 800f238:	6a3b      	ldr	r3, [r7, #32]
 800f23a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f23e:	f7f1 f9eb 	bl	8000618 <__aeabi_dmul>
 800f242:	4602      	mov	r2, r0
 800f244:	460b      	mov	r3, r1
 800f246:	4610      	mov	r0, r2
 800f248:	4619      	mov	r1, r3
 800f24a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800f24e:	f7f1 f9e3 	bl	8000618 <__aeabi_dmul>
 800f252:	4602      	mov	r2, r0
 800f254:	460b      	mov	r3, r1
 800f256:	4614      	mov	r4, r2
 800f258:	461d      	mov	r5, r3
 800f25a:	6a3b      	ldr	r3, [r7, #32]
 800f25c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f260:	a313      	add	r3, pc, #76	@ (adr r3, 800f2b0 <sgp4_init+0x12d0>)
 800f262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f266:	f7f1 f9d7 	bl	8000618 <__aeabi_dmul>
 800f26a:	4602      	mov	r2, r0
 800f26c:	460b      	mov	r3, r1
 800f26e:	4690      	mov	r8, r2
 800f270:	4699      	mov	r9, r3
 800f272:	f04f 0200 	mov.w	r2, #0
 800f276:	4b1a      	ldr	r3, [pc, #104]	@ (800f2e0 <sgp4_init+0x1300>)
 800f278:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800f27c:	f7f1 f9cc 	bl	8000618 <__aeabi_dmul>
 800f280:	4602      	mov	r2, r0
 800f282:	460b      	mov	r3, r1
 800f284:	4640      	mov	r0, r8
 800f286:	4649      	mov	r1, r9
 800f288:	f7f1 f810 	bl	80002ac <__adddf3>
 800f28c:	4602      	mov	r2, r0
 800f28e:	460b      	mov	r3, r1
 800f290:	4620      	mov	r0, r4
 800f292:	4629      	mov	r1, r5
 800f294:	f7f1 f9c0 	bl	8000618 <__aeabi_dmul>
 800f298:	4602      	mov	r2, r0
 800f29a:	460b      	mov	r3, r1
 800f29c:	4610      	mov	r0, r2
 800f29e:	4619      	mov	r1, r3
 800f2a0:	6a3b      	ldr	r3, [r7, #32]
 800f2a2:	e01f      	b.n	800f2e4 <sgp4_init+0x1304>
 800f2a4:	f3af 8000 	nop.w
 800f2a8:	00000000 	.word	0x00000000
 800f2ac:	40080000 	.word	0x40080000
 800f2b0:	00000000 	.word	0x00000000
 800f2b4:	406ba000 	.word	0x406ba000
 800f2b8:	400c0000 	.word	0x400c0000
 800f2bc:	3ff80000 	.word	0x3ff80000
 800f2c0:	40140000 	.word	0x40140000
 800f2c4:	40080000 	.word	0x40080000
 800f2c8:	3ff00000 	.word	0x3ff00000
 800f2cc:	3fd00000 	.word	0x3fd00000
 800f2d0:	401c0000 	.word	0x401c0000
 800f2d4:	40100000 	.word	0x40100000
 800f2d8:	40310000 	.word	0x40310000
 800f2dc:	3fe00000 	.word	0x3fe00000
 800f2e0:	403f0000 	.word	0x403f0000
 800f2e4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800f2e8:	f7f1 f996 	bl	8000618 <__aeabi_dmul>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	6a39      	ldr	r1, [r7, #32]
 800f2f2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
		m->t3cof=m->d2+2*c1sq;
 800f2f6:	6a3b      	ldr	r3, [r7, #32]
 800f2f8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800f2fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800f300:	4602      	mov	r2, r0
 800f302:	460b      	mov	r3, r1
 800f304:	f7f0 ffd2 	bl	80002ac <__adddf3>
 800f308:	4602      	mov	r2, r0
 800f30a:	460b      	mov	r3, r1
 800f30c:	4620      	mov	r0, r4
 800f30e:	4629      	mov	r1, r5
 800f310:	f7f0 ffcc 	bl	80002ac <__adddf3>
 800f314:	4602      	mov	r2, r0
 800f316:	460b      	mov	r3, r1
 800f318:	6a39      	ldr	r1, [r7, #32]
 800f31a:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		m->t4cof=0.25*(3*m->d3+m->c1*(12*m->d2+10*c1sq));
 800f31e:	6a3b      	ldr	r3, [r7, #32]
 800f320:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800f324:	f04f 0200 	mov.w	r2, #0
 800f328:	4b5f      	ldr	r3, [pc, #380]	@ (800f4a8 <sgp4_init+0x14c8>)
 800f32a:	f7f1 f975 	bl	8000618 <__aeabi_dmul>
 800f32e:	4602      	mov	r2, r0
 800f330:	460b      	mov	r3, r1
 800f332:	4690      	mov	r8, r2
 800f334:	4699      	mov	r9, r3
 800f336:	6a3b      	ldr	r3, [r7, #32]
 800f338:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800f33c:	6a3b      	ldr	r3, [r7, #32]
 800f33e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f342:	f04f 0200 	mov.w	r2, #0
 800f346:	4b59      	ldr	r3, [pc, #356]	@ (800f4ac <sgp4_init+0x14cc>)
 800f348:	f7f1 f966 	bl	8000618 <__aeabi_dmul>
 800f34c:	4602      	mov	r2, r0
 800f34e:	460b      	mov	r3, r1
 800f350:	4692      	mov	sl, r2
 800f352:	469b      	mov	fp, r3
 800f354:	f04f 0200 	mov.w	r2, #0
 800f358:	4b55      	ldr	r3, [pc, #340]	@ (800f4b0 <sgp4_init+0x14d0>)
 800f35a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800f35e:	f7f1 f95b 	bl	8000618 <__aeabi_dmul>
 800f362:	4602      	mov	r2, r0
 800f364:	460b      	mov	r3, r1
 800f366:	4650      	mov	r0, sl
 800f368:	4659      	mov	r1, fp
 800f36a:	f7f0 ff9f 	bl	80002ac <__adddf3>
 800f36e:	4602      	mov	r2, r0
 800f370:	460b      	mov	r3, r1
 800f372:	4620      	mov	r0, r4
 800f374:	4629      	mov	r1, r5
 800f376:	f7f1 f94f 	bl	8000618 <__aeabi_dmul>
 800f37a:	4602      	mov	r2, r0
 800f37c:	460b      	mov	r3, r1
 800f37e:	4640      	mov	r0, r8
 800f380:	4649      	mov	r1, r9
 800f382:	f7f0 ff93 	bl	80002ac <__adddf3>
 800f386:	4602      	mov	r2, r0
 800f388:	460b      	mov	r3, r1
 800f38a:	4610      	mov	r0, r2
 800f38c:	4619      	mov	r1, r3
 800f38e:	f04f 0200 	mov.w	r2, #0
 800f392:	4b48      	ldr	r3, [pc, #288]	@ (800f4b4 <sgp4_init+0x14d4>)
 800f394:	f7f1 f940 	bl	8000618 <__aeabi_dmul>
 800f398:	4602      	mov	r2, r0
 800f39a:	460b      	mov	r3, r1
 800f39c:	6a39      	ldr	r1, [r7, #32]
 800f39e:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
		m->t5cof=0.2*(3*m->d4+12*m->c1*m->d3+6*m->d2*m->d2+15*c1sq*(2*m->d2+c1sq));
 800f3a2:	6a3b      	ldr	r3, [r7, #32]
 800f3a4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800f3a8:	f04f 0200 	mov.w	r2, #0
 800f3ac:	4b3e      	ldr	r3, [pc, #248]	@ (800f4a8 <sgp4_init+0x14c8>)
 800f3ae:	f7f1 f933 	bl	8000618 <__aeabi_dmul>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	4614      	mov	r4, r2
 800f3b8:	461d      	mov	r5, r3
 800f3ba:	6a3b      	ldr	r3, [r7, #32]
 800f3bc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800f3c0:	f04f 0200 	mov.w	r2, #0
 800f3c4:	4b39      	ldr	r3, [pc, #228]	@ (800f4ac <sgp4_init+0x14cc>)
 800f3c6:	f7f1 f927 	bl	8000618 <__aeabi_dmul>
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	4610      	mov	r0, r2
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	6a3b      	ldr	r3, [r7, #32]
 800f3d4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800f3d8:	f7f1 f91e 	bl	8000618 <__aeabi_dmul>
 800f3dc:	4602      	mov	r2, r0
 800f3de:	460b      	mov	r3, r1
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	f7f0 ff62 	bl	80002ac <__adddf3>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	4614      	mov	r4, r2
 800f3ee:	461d      	mov	r5, r3
 800f3f0:	6a3b      	ldr	r3, [r7, #32]
 800f3f2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f3f6:	f04f 0200 	mov.w	r2, #0
 800f3fa:	4b2f      	ldr	r3, [pc, #188]	@ (800f4b8 <sgp4_init+0x14d8>)
 800f3fc:	f7f1 f90c 	bl	8000618 <__aeabi_dmul>
 800f400:	4602      	mov	r2, r0
 800f402:	460b      	mov	r3, r1
 800f404:	4610      	mov	r0, r2
 800f406:	4619      	mov	r1, r3
 800f408:	6a3b      	ldr	r3, [r7, #32]
 800f40a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f40e:	f7f1 f903 	bl	8000618 <__aeabi_dmul>
 800f412:	4602      	mov	r2, r0
 800f414:	460b      	mov	r3, r1
 800f416:	4620      	mov	r0, r4
 800f418:	4629      	mov	r1, r5
 800f41a:	f7f0 ff47 	bl	80002ac <__adddf3>
 800f41e:	4602      	mov	r2, r0
 800f420:	460b      	mov	r3, r1
 800f422:	4614      	mov	r4, r2
 800f424:	461d      	mov	r5, r3
 800f426:	f04f 0200 	mov.w	r2, #0
 800f42a:	4b24      	ldr	r3, [pc, #144]	@ (800f4bc <sgp4_init+0x14dc>)
 800f42c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800f430:	f7f1 f8f2 	bl	8000618 <__aeabi_dmul>
 800f434:	4602      	mov	r2, r0
 800f436:	460b      	mov	r3, r1
 800f438:	4690      	mov	r8, r2
 800f43a:	4699      	mov	r9, r3
 800f43c:	6a3b      	ldr	r3, [r7, #32]
 800f43e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f442:	4602      	mov	r2, r0
 800f444:	460b      	mov	r3, r1
 800f446:	f7f0 ff31 	bl	80002ac <__adddf3>
 800f44a:	4602      	mov	r2, r0
 800f44c:	460b      	mov	r3, r1
 800f44e:	4610      	mov	r0, r2
 800f450:	4619      	mov	r1, r3
 800f452:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800f456:	f7f0 ff29 	bl	80002ac <__adddf3>
 800f45a:	4602      	mov	r2, r0
 800f45c:	460b      	mov	r3, r1
 800f45e:	4640      	mov	r0, r8
 800f460:	4649      	mov	r1, r9
 800f462:	f7f1 f8d9 	bl	8000618 <__aeabi_dmul>
 800f466:	4602      	mov	r2, r0
 800f468:	460b      	mov	r3, r1
 800f46a:	4620      	mov	r0, r4
 800f46c:	4629      	mov	r1, r5
 800f46e:	f7f0 ff1d 	bl	80002ac <__adddf3>
 800f472:	4602      	mov	r2, r0
 800f474:	460b      	mov	r3, r1
 800f476:	4610      	mov	r0, r2
 800f478:	4619      	mov	r1, r3
 800f47a:	a309      	add	r3, pc, #36	@ (adr r3, 800f4a0 <sgp4_init+0x14c0>)
 800f47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f480:	f7f1 f8ca 	bl	8000618 <__aeabi_dmul>
 800f484:	4602      	mov	r2, r0
 800f486:	460b      	mov	r3, r1
 800f488:	6a39      	ldr	r1, [r7, #32]
 800f48a:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	}
}
 800f48e:	bf00      	nop
 800f490:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800f494:	46bd      	mov	sp, r7
 800f496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f49a:	bf00      	nop
 800f49c:	f3af 8000 	nop.w
 800f4a0:	9999999a 	.word	0x9999999a
 800f4a4:	3fc99999 	.word	0x3fc99999
 800f4a8:	40080000 	.word	0x40080000
 800f4ac:	40280000 	.word	0x40280000
 800f4b0:	40240000 	.word	0x40240000
 800f4b4:	3fd00000 	.word	0x3fd00000
 800f4b8:	40180000 	.word	0x40180000
 800f4bc:	402e0000 	.word	0x402e0000

0800f4c0 <sgp4_predict>:

void sgp4_predict(const struct _sgp4 *m, double tsince, struct model_output *output)
{
 800f4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4c4:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f4ce:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f4d2:	6018      	str	r0, [r3, #0]
 800f4d4:	f107 0310 	add.w	r3, r7, #16
 800f4d8:	ed03 0b02 	vstr	d0, [r3, #-8]
 800f4dc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f4e0:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800f4e4:	6019      	str	r1, [r3, #0]
	temp3, temp4, temp5, temp6;

	int i;

	/* Update for secular gravity and atmospheric drag. */
	xmdf=m->xmo+m->xmdot*tsince;
 800f4e6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f4ea:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	e9d3 ab44 	ldrd	sl, fp, [r3, #272]	@ 0x110
 800f4f4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f4f8:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 800f502:	f107 0310 	add.w	r3, r7, #16
 800f506:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f50a:	f7f1 f885 	bl	8000618 <__aeabi_dmul>
 800f50e:	4602      	mov	r2, r0
 800f510:	460b      	mov	r3, r1
 800f512:	4650      	mov	r0, sl
 800f514:	4659      	mov	r1, fp
 800f516:	f7f0 fec9 	bl	80002ac <__adddf3>
 800f51a:	4602      	mov	r2, r0
 800f51c:	460b      	mov	r3, r1
 800f51e:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
	omgadf=m->omegao+m->omgdot*tsince;
 800f522:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f526:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	e9d3 ab42 	ldrd	sl, fp, [r3, #264]	@ 0x108
 800f530:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f534:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800f53e:	f107 0310 	add.w	r3, r7, #16
 800f542:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f546:	f7f1 f867 	bl	8000618 <__aeabi_dmul>
 800f54a:	4602      	mov	r2, r0
 800f54c:	460b      	mov	r3, r1
 800f54e:	4650      	mov	r0, sl
 800f550:	4659      	mov	r1, fp
 800f552:	f7f0 feab 	bl	80002ac <__adddf3>
 800f556:	4602      	mov	r2, r0
 800f558:	460b      	mov	r3, r1
 800f55a:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
	xnoddf=m->xnodeo+m->xnodot*tsince;
 800f55e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f562:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	e9d3 ab3e 	ldrd	sl, fp, [r3, #248]	@ 0xf8
 800f56c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f570:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	@ 0xd8
 800f57a:	f107 0310 	add.w	r3, r7, #16
 800f57e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f582:	f7f1 f849 	bl	8000618 <__aeabi_dmul>
 800f586:	4602      	mov	r2, r0
 800f588:	460b      	mov	r3, r1
 800f58a:	4650      	mov	r0, sl
 800f58c:	4659      	mov	r1, fp
 800f58e:	f7f0 fe8d 	bl	80002ac <__adddf3>
 800f592:	4602      	mov	r2, r0
 800f594:	460b      	mov	r3, r1
 800f596:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
	omega=omgadf;
 800f59a:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 800f59e:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	xmp=xmdf;
 800f5a2:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 800f5a6:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
	tsq=tsince*tsince;
 800f5aa:	f107 0310 	add.w	r3, r7, #16
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 800f5b4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f5b8:	f7f1 f82e 	bl	8000618 <__aeabi_dmul>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
	xnode=xnoddf+m->xnodcf*tsq;
 800f5c4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f5c8:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800f5d2:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 800f5d6:	f7f1 f81f 	bl	8000618 <__aeabi_dmul>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	460b      	mov	r3, r1
 800f5de:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 800f5e2:	f7f0 fe63 	bl	80002ac <__adddf3>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
	tempa=1-m->c1*tsince;
 800f5ee:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f5f2:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800f5fc:	f107 0310 	add.w	r3, r7, #16
 800f600:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f604:	f7f1 f808 	bl	8000618 <__aeabi_dmul>
 800f608:	4602      	mov	r2, r0
 800f60a:	460b      	mov	r3, r1
 800f60c:	f04f 0000 	mov.w	r0, #0
 800f610:	49bf      	ldr	r1, [pc, #764]	@ (800f910 <sgp4_predict+0x450>)
 800f612:	f7f0 fe49 	bl	80002a8 <__aeabi_dsub>
 800f616:	4602      	mov	r2, r0
 800f618:	460b      	mov	r3, r1
 800f61a:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
	tempe=m->bstar*m->c4*tsince;
 800f61e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f622:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 800f62c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f630:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f63a:	f7f0 ffed 	bl	8000618 <__aeabi_dmul>
 800f63e:	4602      	mov	r2, r0
 800f640:	460b      	mov	r3, r1
 800f642:	f107 0110 	add.w	r1, r7, #16
 800f646:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f64a:	f7f0 ffe5 	bl	8000618 <__aeabi_dmul>
 800f64e:	4602      	mov	r2, r0
 800f650:	460b      	mov	r3, r1
 800f652:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
	templ=m->t2cof*tsq;
 800f656:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f65a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800f664:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800f668:	f7f0 ffd6 	bl	8000618 <__aeabi_dmul>
 800f66c:	4602      	mov	r2, r0
 800f66e:	460b      	mov	r3, r1
 800f670:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238

	if (!m->simpleFlag) {
 800f674:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f678:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	2b00      	cmp	r3, #0
 800f682:	f040 814a 	bne.w	800f91a <sgp4_predict+0x45a>

		delomg=m->omgcof*tsince;
 800f686:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f68a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800f694:	f107 0110 	add.w	r1, r7, #16
 800f698:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f69c:	f7f0 ffbc 	bl	8000618 <__aeabi_dmul>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
		delm=m->xmcof*(pow(1+m->eta*cos(xmdf),3)-m->delmo);
 800f6a8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f6ac:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	e9d3 ab30 	ldrd	sl, fp, [r3, #192]	@ 0xc0
 800f6b6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f6ba:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 800f6c4:	ed87 7b00 	vstr	d7, [r7]
 800f6c8:	ed97 0b80 	vldr	d0, [r7, #512]	@ 0x200
 800f6cc:	f013 f9b4 	bl	8022a38 <cos>
 800f6d0:	ec53 2b10 	vmov	r2, r3, d0
 800f6d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f6d8:	f7f0 ff9e 	bl	8000618 <__aeabi_dmul>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	460b      	mov	r3, r1
 800f6e0:	4610      	mov	r0, r2
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	f04f 0200 	mov.w	r2, #0
 800f6e8:	4b89      	ldr	r3, [pc, #548]	@ (800f910 <sgp4_predict+0x450>)
 800f6ea:	f7f0 fddf 	bl	80002ac <__adddf3>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	ec43 2b17 	vmov	d7, r2, r3
 800f6f6:	ed9f 1b84 	vldr	d1, [pc, #528]	@ 800f908 <sgp4_predict+0x448>
 800f6fa:	eeb0 0a47 	vmov.f32	s0, s14
 800f6fe:	eef0 0a67 	vmov.f32	s1, s15
 800f702:	f012 ff63 	bl	80225cc <pow>
 800f706:	ec51 0b10 	vmov	r0, r1, d0
 800f70a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f70e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800f718:	f7f0 fdc6 	bl	80002a8 <__aeabi_dsub>
 800f71c:	4602      	mov	r2, r0
 800f71e:	460b      	mov	r3, r1
 800f720:	4650      	mov	r0, sl
 800f722:	4659      	mov	r1, fp
 800f724:	f7f0 ff78 	bl	8000618 <__aeabi_dmul>
 800f728:	4602      	mov	r2, r0
 800f72a:	460b      	mov	r3, r1
 800f72c:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
		temp=delomg+delm;
 800f730:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 800f734:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 800f738:	f7f0 fdb8 	bl	80002ac <__adddf3>
 800f73c:	4602      	mov	r2, r0
 800f73e:	460b      	mov	r3, r1
 800f740:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
		xmp=xmdf+temp;
 800f744:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800f748:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 800f74c:	f7f0 fdae 	bl	80002ac <__adddf3>
 800f750:	4602      	mov	r2, r0
 800f752:	460b      	mov	r3, r1
 800f754:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
		omega=omgadf-temp;
 800f758:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800f75c:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 800f760:	f7f0 fda2 	bl	80002a8 <__aeabi_dsub>
 800f764:	4602      	mov	r2, r0
 800f766:	460b      	mov	r3, r1
 800f768:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
		tcube=tsq*tsince;
 800f76c:	f107 0310 	add.w	r3, r7, #16
 800f770:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f774:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800f778:	f7f0 ff4e 	bl	8000618 <__aeabi_dmul>
 800f77c:	4602      	mov	r2, r0
 800f77e:	460b      	mov	r3, r1
 800f780:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
		tfour=tsince*tcube;
 800f784:	f107 0310 	add.w	r3, r7, #16
 800f788:	4619      	mov	r1, r3
 800f78a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 800f78e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f792:	f7f0 ff41 	bl	8000618 <__aeabi_dmul>
 800f796:	4602      	mov	r2, r0
 800f798:	460b      	mov	r3, r1
 800f79a:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
		tempa=tempa-m->d2*tsq-m->d3*tcube-m->d4*tfour;
 800f79e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f7a2:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f7ac:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 800f7b0:	f7f0 ff32 	bl	8000618 <__aeabi_dmul>
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	460b      	mov	r3, r1
 800f7b8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800f7bc:	f7f0 fd74 	bl	80002a8 <__aeabi_dsub>
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	460b      	mov	r3, r1
 800f7c4:	4692      	mov	sl, r2
 800f7c6:	469b      	mov	fp, r3
 800f7c8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f7cc:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800f7d6:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 800f7da:	f7f0 ff1d 	bl	8000618 <__aeabi_dmul>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	4650      	mov	r0, sl
 800f7e4:	4659      	mov	r1, fp
 800f7e6:	f7f0 fd5f 	bl	80002a8 <__aeabi_dsub>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	4692      	mov	sl, r2
 800f7f0:	469b      	mov	fp, r3
 800f7f2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f7f6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800f800:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 800f804:	f7f0 ff08 	bl	8000618 <__aeabi_dmul>
 800f808:	4602      	mov	r2, r0
 800f80a:	460b      	mov	r3, r1
 800f80c:	4650      	mov	r0, sl
 800f80e:	4659      	mov	r1, fp
 800f810:	f7f0 fd4a 	bl	80002a8 <__aeabi_dsub>
 800f814:	4602      	mov	r2, r0
 800f816:	460b      	mov	r3, r1
 800f818:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
		tempe=tempe+m->bstar*m->c5*(sin(xmp)-m->sinmo);
 800f81c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f820:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 800f82a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f82e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800f838:	f7f0 feee 	bl	8000618 <__aeabi_dmul>
 800f83c:	4602      	mov	r2, r0
 800f83e:	460b      	mov	r3, r1
 800f840:	4692      	mov	sl, r2
 800f842:	469b      	mov	fp, r3
 800f844:	ed97 0b88 	vldr	d0, [r7, #544]	@ 0x220
 800f848:	f013 f952 	bl	8022af0 <sin>
 800f84c:	ec51 0b10 	vmov	r0, r1, d0
 800f850:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f854:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 800f85e:	f7f0 fd23 	bl	80002a8 <__aeabi_dsub>
 800f862:	4602      	mov	r2, r0
 800f864:	460b      	mov	r3, r1
 800f866:	4650      	mov	r0, sl
 800f868:	4659      	mov	r1, fp
 800f86a:	f7f0 fed5 	bl	8000618 <__aeabi_dmul>
 800f86e:	4602      	mov	r2, r0
 800f870:	460b      	mov	r3, r1
 800f872:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 800f876:	f7f0 fd19 	bl	80002ac <__adddf3>
 800f87a:	4602      	mov	r2, r0
 800f87c:	460b      	mov	r3, r1
 800f87e:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
		templ=templ+m->t3cof*tcube+tfour*(m->t4cof+tsince*m->t5cof);
 800f882:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f886:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 800f890:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 800f894:	f7f0 fec0 	bl	8000618 <__aeabi_dmul>
 800f898:	4602      	mov	r2, r0
 800f89a:	460b      	mov	r3, r1
 800f89c:	4610      	mov	r0, r2
 800f89e:	4619      	mov	r1, r3
 800f8a0:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 800f8a4:	f7f0 fd02 	bl	80002ac <__adddf3>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	e9c7 2300 	strd	r2, r3, [r7]
 800f8b0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f8b4:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	e9d3 ab26 	ldrd	sl, fp, [r3, #152]	@ 0x98
 800f8be:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f8c2:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	@ 0xa0
 800f8cc:	f107 0310 	add.w	r3, r7, #16
 800f8d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f8d4:	f7f0 fea0 	bl	8000618 <__aeabi_dmul>
 800f8d8:	4602      	mov	r2, r0
 800f8da:	460b      	mov	r3, r1
 800f8dc:	4650      	mov	r0, sl
 800f8de:	4659      	mov	r1, fp
 800f8e0:	f7f0 fce4 	bl	80002ac <__adddf3>
 800f8e4:	4602      	mov	r2, r0
 800f8e6:	460b      	mov	r3, r1
 800f8e8:	4610      	mov	r0, r2
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 800f8f0:	f7f0 fe92 	bl	8000618 <__aeabi_dmul>
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f8fc:	f7f0 fcd6 	bl	80002ac <__adddf3>
 800f900:	4602      	mov	r2, r0
 800f902:	e007      	b.n	800f914 <sgp4_predict+0x454>
 800f904:	f3af 8000 	nop.w
 800f908:	00000000 	.word	0x00000000
 800f90c:	40080000 	.word	0x40080000
 800f910:	3ff00000 	.word	0x3ff00000
 800f914:	460b      	mov	r3, r1
 800f916:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
	}

	a=m->aodp*pow(tempa,2);
 800f91a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f91e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 800f928:	ed9f 1bbf 	vldr	d1, [pc, #764]	@ 800fc28 <sgp4_predict+0x768>
 800f92c:	ed97 0b8a 	vldr	d0, [r7, #552]	@ 0x228
 800f930:	f012 fe4c 	bl	80225cc <pow>
 800f934:	ec53 2b10 	vmov	r2, r3, d0
 800f938:	4650      	mov	r0, sl
 800f93a:	4659      	mov	r1, fp
 800f93c:	f7f0 fe6c 	bl	8000618 <__aeabi_dmul>
 800f940:	4602      	mov	r2, r0
 800f942:	460b      	mov	r3, r1
 800f944:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
	e=m->eo-tempe;
 800f948:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f94c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800f956:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 800f95a:	f7f0 fca5 	bl	80002a8 <__aeabi_dsub>
 800f95e:	4602      	mov	r2, r0
 800f960:	460b      	mov	r3, r1
 800f962:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
	xl=xmp+omega+xnode+m->xnodp*templ;
 800f966:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 800f96a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800f96e:	f7f0 fc9d 	bl	80002ac <__adddf3>
 800f972:	4602      	mov	r2, r0
 800f974:	460b      	mov	r3, r1
 800f976:	4610      	mov	r0, r2
 800f978:	4619      	mov	r1, r3
 800f97a:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 800f97e:	f7f0 fc95 	bl	80002ac <__adddf3>
 800f982:	4602      	mov	r2, r0
 800f984:	460b      	mov	r3, r1
 800f986:	4692      	mov	sl, r2
 800f988:	469b      	mov	fp, r3
 800f98a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f98e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800f998:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 800f99c:	f7f0 fe3c 	bl	8000618 <__aeabi_dmul>
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	4650      	mov	r0, sl
 800f9a6:	4659      	mov	r1, fp
 800f9a8:	f7f0 fc80 	bl	80002ac <__adddf3>
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
	beta=sqrt(1-e*e);
 800f9b4:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 800f9b8:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 800f9bc:	f7f0 fe2c 	bl	8000618 <__aeabi_dmul>
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	f04f 0000 	mov.w	r0, #0
 800f9c8:	499d      	ldr	r1, [pc, #628]	@ (800fc40 <sgp4_predict+0x780>)
 800f9ca:	f7f0 fc6d 	bl	80002a8 <__aeabi_dsub>
 800f9ce:	4602      	mov	r2, r0
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	ec43 2b17 	vmov	d7, r2, r3
 800f9d6:	eeb0 0a47 	vmov.f32	s0, s14
 800f9da:	eef0 0a67 	vmov.f32	s1, s15
 800f9de:	f012 fe65 	bl	80226ac <sqrt>
 800f9e2:	ed87 0b66 	vstr	d0, [r7, #408]	@ 0x198
	xn=XKE/pow(a,1.5);
 800f9e6:	ed9f 1b92 	vldr	d1, [pc, #584]	@ 800fc30 <sgp4_predict+0x770>
 800f9ea:	ed97 0b6c 	vldr	d0, [r7, #432]	@ 0x1b0
 800f9ee:	f012 fded 	bl	80225cc <pow>
 800f9f2:	ec53 2b10 	vmov	r2, r3, d0
 800f9f6:	a190      	add	r1, pc, #576	@ (adr r1, 800fc38 <sgp4_predict+0x778>)
 800f9f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9fc:	f7f0 ff36 	bl	800086c <__aeabi_ddiv>
 800fa00:	4602      	mov	r2, r0
 800fa02:	460b      	mov	r3, r1
 800fa04:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190

	/* Long period periodics */
	axn=e*cos(omega);
 800fa08:	ed97 0b86 	vldr	d0, [r7, #536]	@ 0x218
 800fa0c:	f013 f814 	bl	8022a38 <cos>
 800fa10:	ec53 2b10 	vmov	r2, r3, d0
 800fa14:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 800fa18:	f7f0 fdfe 	bl	8000618 <__aeabi_dmul>
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	460b      	mov	r3, r1
 800fa20:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
	temp=1/(a*beta*beta);
 800fa24:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 800fa28:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800fa2c:	f7f0 fdf4 	bl	8000618 <__aeabi_dmul>
 800fa30:	4602      	mov	r2, r0
 800fa32:	460b      	mov	r3, r1
 800fa34:	4610      	mov	r0, r2
 800fa36:	4619      	mov	r1, r3
 800fa38:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 800fa3c:	f7f0 fdec 	bl	8000618 <__aeabi_dmul>
 800fa40:	4602      	mov	r2, r0
 800fa42:	460b      	mov	r3, r1
 800fa44:	f04f 0000 	mov.w	r0, #0
 800fa48:	497d      	ldr	r1, [pc, #500]	@ (800fc40 <sgp4_predict+0x780>)
 800fa4a:	f7f0 ff0f 	bl	800086c <__aeabi_ddiv>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	460b      	mov	r3, r1
 800fa52:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
	xll=temp*m->xlcof*axn;
 800fa56:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fa5a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	@ 0xe0
 800fa64:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800fa68:	f7f0 fdd6 	bl	8000618 <__aeabi_dmul>
 800fa6c:	4602      	mov	r2, r0
 800fa6e:	460b      	mov	r3, r1
 800fa70:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800fa74:	f7f0 fdd0 	bl	8000618 <__aeabi_dmul>
 800fa78:	4602      	mov	r2, r0
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	aynl=temp*m->aycof;
 800fa80:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fa84:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fa8e:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 800fa92:	f7f0 fdc1 	bl	8000618 <__aeabi_dmul>
 800fa96:	4602      	mov	r2, r0
 800fa98:	460b      	mov	r3, r1
 800fa9a:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
	xlt=xl+xll;
 800fa9e:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 800faa2:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 800faa6:	f7f0 fc01 	bl	80002ac <__adddf3>
 800faaa:	4602      	mov	r2, r0
 800faac:	460b      	mov	r3, r1
 800faae:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
	ayn=e*sin(omega)+aynl;
 800fab2:	ed97 0b86 	vldr	d0, [r7, #536]	@ 0x218
 800fab6:	f013 f81b 	bl	8022af0 <sin>
 800faba:	ec51 0b10 	vmov	r0, r1, d0
 800fabe:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 800fac2:	f7f0 fda9 	bl	8000618 <__aeabi_dmul>
 800fac6:	4602      	mov	r2, r0
 800fac8:	460b      	mov	r3, r1
 800faca:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 800face:	f7f0 fbed 	bl	80002ac <__adddf3>
 800fad2:	4602      	mov	r2, r0
 800fad4:	460b      	mov	r3, r1
 800fad6:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168

	/* Solve Kepler's Equation */
	capu=FMod2p(xlt-xnode);
 800fada:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 800fade:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 800fae2:	f7f0 fbe1 	bl	80002a8 <__aeabi_dsub>
 800fae6:	4602      	mov	r2, r0
 800fae8:	460b      	mov	r3, r1
 800faea:	ec43 2b17 	vmov	d7, r2, r3
 800faee:	eeb0 0a47 	vmov.f32	s0, s14
 800faf2:	eef0 0a67 	vmov.f32	s1, s15
 800faf6:	f001 fc7f 	bl	80113f8 <FMod2p>
 800fafa:	ed87 0b58 	vstr	d0, [r7, #352]	@ 0x160
	temp2=capu;
 800fafe:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 800fb02:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
	i=0;
 800fb06:	2300      	movs	r3, #0
 800fb08:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

	do
	{
		sinepw=sin(temp2);
 800fb0c:	ed97 0b84 	vldr	d0, [r7, #528]	@ 0x210
 800fb10:	f012 ffee 	bl	8022af0 <sin>
 800fb14:	ed87 0b56 	vstr	d0, [r7, #344]	@ 0x158
		cosepw=cos(temp2);
 800fb18:	ed97 0b84 	vldr	d0, [r7, #528]	@ 0x210
 800fb1c:	f012 ff8c 	bl	8022a38 <cos>
 800fb20:	ed87 0b54 	vstr	d0, [r7, #336]	@ 0x150
		temp3=axn*sinepw;
 800fb24:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800fb28:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800fb2c:	f7f0 fd74 	bl	8000618 <__aeabi_dmul>
 800fb30:	4602      	mov	r2, r0
 800fb32:	460b      	mov	r3, r1
 800fb34:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
		temp4=ayn*cosepw;
 800fb38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fb3c:	461e      	mov	r6, r3
 800fb3e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800fb42:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800fb46:	f7f0 fd67 	bl	8000618 <__aeabi_dmul>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	e9c6 2300 	strd	r2, r3, [r6]
		temp5=axn*cosepw;
 800fb52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fb56:	461e      	mov	r6, r3
 800fb58:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800fb5c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800fb60:	f7f0 fd5a 	bl	8000618 <__aeabi_dmul>
 800fb64:	4602      	mov	r2, r0
 800fb66:	460b      	mov	r3, r1
 800fb68:	e946 2302 	strd	r2, r3, [r6, #-8]
		temp6=ayn*sinepw;
 800fb6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb70:	461e      	mov	r6, r3
 800fb72:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800fb76:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800fb7a:	f7f0 fd4d 	bl	8000618 <__aeabi_dmul>
 800fb7e:	4602      	mov	r2, r0
 800fb80:	460b      	mov	r3, r1
 800fb82:	e9c6 2300 	strd	r2, r3, [r6]
		epw=(capu-temp4+temp3-temp2)/(1-temp5-temp6)+temp2;
 800fb86:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb8e:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 800fb92:	f7f0 fb89 	bl	80002a8 <__aeabi_dsub>
 800fb96:	4602      	mov	r2, r0
 800fb98:	460b      	mov	r3, r1
 800fb9a:	4610      	mov	r0, r2
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800fba2:	f7f0 fb83 	bl	80002ac <__adddf3>
 800fba6:	4602      	mov	r2, r0
 800fba8:	460b      	mov	r3, r1
 800fbaa:	4610      	mov	r0, r2
 800fbac:	4619      	mov	r1, r3
 800fbae:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 800fbb2:	f7f0 fb79 	bl	80002a8 <__aeabi_dsub>
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	460b      	mov	r3, r1
 800fbba:	4692      	mov	sl, r2
 800fbbc:	469b      	mov	fp, r3
 800fbbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fbc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fbc6:	f04f 0000 	mov.w	r0, #0
 800fbca:	491d      	ldr	r1, [pc, #116]	@ (800fc40 <sgp4_predict+0x780>)
 800fbcc:	f7f0 fb6c 	bl	80002a8 <__aeabi_dsub>
 800fbd0:	4602      	mov	r2, r0
 800fbd2:	460b      	mov	r3, r1
 800fbd4:	4610      	mov	r0, r2
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe0:	f7f0 fb62 	bl	80002a8 <__aeabi_dsub>
 800fbe4:	4602      	mov	r2, r0
 800fbe6:	460b      	mov	r3, r1
 800fbe8:	4650      	mov	r0, sl
 800fbea:	4659      	mov	r1, fp
 800fbec:	f7f0 fe3e 	bl	800086c <__aeabi_ddiv>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800fbf8:	460e      	mov	r6, r1
 800fbfa:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800fbfe:	f7f0 fb55 	bl	80002ac <__adddf3>
 800fc02:	4602      	mov	r2, r0
 800fc04:	460b      	mov	r3, r1
 800fc06:	e946 2302 	strd	r2, r3, [r6, #-8]

		if (fabs(epw-temp2)<= E6A)
 800fc0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc0e:	4619      	mov	r1, r3
 800fc10:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 800fc14:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800fc18:	f7f0 fb46 	bl	80002a8 <__aeabi_dsub>
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	460b      	mov	r3, r1
 800fc20:	4690      	mov	r8, r2
 800fc22:	e00f      	b.n	800fc44 <sgp4_predict+0x784>
 800fc24:	f3af 8000 	nop.w
 800fc28:	00000000 	.word	0x00000000
 800fc2c:	40000000 	.word	0x40000000
 800fc30:	00000000 	.word	0x00000000
 800fc34:	3ff80000 	.word	0x3ff80000
 800fc38:	d08dcacf 	.word	0xd08dcacf
 800fc3c:	3fb309b5 	.word	0x3fb309b5
 800fc40:	3ff00000 	.word	0x3ff00000
 800fc44:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800fc48:	a30d      	add	r3, pc, #52	@ (adr r3, 800fc80 <sgp4_predict+0x7c0>)
 800fc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4e:	4640      	mov	r0, r8
 800fc50:	4649      	mov	r1, r9
 800fc52:	f7f0 ff5d 	bl	8000b10 <__aeabi_dcmple>
 800fc56:	4603      	mov	r3, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d115      	bne.n	800fc88 <sgp4_predict+0x7c8>
			break;

		temp2=epw;
 800fc5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fc64:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210

	} while (i++<10);
 800fc68:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800fc6c:	1c5a      	adds	r2, r3, #1
 800fc6e:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 800fc72:	2b09      	cmp	r3, #9
 800fc74:	f77f af4a 	ble.w	800fb0c <sgp4_predict+0x64c>
 800fc78:	e007      	b.n	800fc8a <sgp4_predict+0x7ca>
 800fc7a:	bf00      	nop
 800fc7c:	f3af 8000 	nop.w
 800fc80:	a0b5ed8d 	.word	0xa0b5ed8d
 800fc84:	3eb0c6f7 	.word	0x3eb0c6f7
			break;
 800fc88:	bf00      	nop

	/* Short period preliminary quantities */
	ecose=temp5+temp6;
 800fc8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fc8e:	461e      	mov	r6, r3
 800fc90:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fc94:	4619      	mov	r1, r3
 800fc96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800fca2:	f7f0 fb03 	bl	80002ac <__adddf3>
 800fca6:	4602      	mov	r2, r0
 800fca8:	460b      	mov	r3, r1
 800fcaa:	e9c6 2300 	strd	r2, r3, [r6]
	esine=temp3-temp4;
 800fcae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fcb2:	461e      	mov	r6, r3
 800fcb4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcbc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800fcc0:	f7f0 faf2 	bl	80002a8 <__aeabi_dsub>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	e946 2302 	strd	r2, r3, [r6, #-8]
	elsq=axn*axn+ayn*ayn;
 800fccc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800fcd0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800fcd4:	f7f0 fca0 	bl	8000618 <__aeabi_dmul>
 800fcd8:	4602      	mov	r2, r0
 800fcda:	460b      	mov	r3, r1
 800fcdc:	4690      	mov	r8, r2
 800fcde:	4699      	mov	r9, r3
 800fce0:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 800fce4:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800fce8:	f7f0 fc96 	bl	8000618 <__aeabi_dmul>
 800fcec:	4602      	mov	r2, r0
 800fcee:	460b      	mov	r3, r1
 800fcf0:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800fcf4:	460e      	mov	r6, r1
 800fcf6:	4640      	mov	r0, r8
 800fcf8:	4649      	mov	r1, r9
 800fcfa:	f7f0 fad7 	bl	80002ac <__adddf3>
 800fcfe:	4602      	mov	r2, r0
 800fd00:	460b      	mov	r3, r1
 800fd02:	e9c6 2300 	strd	r2, r3, [r6]
	temp=1-elsq;
 800fd06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0e:	f04f 0000 	mov.w	r0, #0
 800fd12:	49c7      	ldr	r1, [pc, #796]	@ (8010030 <sgp4_predict+0xb70>)
 800fd14:	f7f0 fac8 	bl	80002a8 <__aeabi_dsub>
 800fd18:	4602      	mov	r2, r0
 800fd1a:	460b      	mov	r3, r1
 800fd1c:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
	pl=a*temp;
 800fd20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fd24:	461e      	mov	r6, r3
 800fd26:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800fd2a:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800fd2e:	f7f0 fc73 	bl	8000618 <__aeabi_dmul>
 800fd32:	4602      	mov	r2, r0
 800fd34:	460b      	mov	r3, r1
 800fd36:	e946 2302 	strd	r2, r3, [r6, #-8]
	r=a*(1-ecose);
 800fd3a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd42:	f04f 0000 	mov.w	r0, #0
 800fd46:	49ba      	ldr	r1, [pc, #744]	@ (8010030 <sgp4_predict+0xb70>)
 800fd48:	f7f0 faae 	bl	80002a8 <__aeabi_dsub>
 800fd4c:	4602      	mov	r2, r0
 800fd4e:	460b      	mov	r3, r1
 800fd50:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 800fd54:	460e      	mov	r6, r1
 800fd56:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800fd5a:	f7f0 fc5d 	bl	8000618 <__aeabi_dmul>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	460b      	mov	r3, r1
 800fd62:	e9c6 2300 	strd	r2, r3, [r6]
	temp1=1/r;
 800fd66:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800fd6a:	461e      	mov	r6, r3
 800fd6c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800fd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd74:	f04f 0000 	mov.w	r0, #0
 800fd78:	49ad      	ldr	r1, [pc, #692]	@ (8010030 <sgp4_predict+0xb70>)
 800fd7a:	f7f0 fd77 	bl	800086c <__aeabi_ddiv>
 800fd7e:	4602      	mov	r2, r0
 800fd80:	460b      	mov	r3, r1
 800fd82:	e946 2302 	strd	r2, r3, [r6, #-8]
	rdot=XKE*sqrt(a)*esine*temp1;
 800fd86:	ed97 0b6c 	vldr	d0, [r7, #432]	@ 0x1b0
 800fd8a:	f012 fc8f 	bl	80226ac <sqrt>
 800fd8e:	ec51 0b10 	vmov	r0, r1, d0
 800fd92:	a3a3      	add	r3, pc, #652	@ (adr r3, 8010020 <sgp4_predict+0xb60>)
 800fd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd98:	f7f0 fc3e 	bl	8000618 <__aeabi_dmul>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	460b      	mov	r3, r1
 800fda0:	4610      	mov	r0, r2
 800fda2:	4619      	mov	r1, r3
 800fda4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fda8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fdac:	f7f0 fc34 	bl	8000618 <__aeabi_dmul>
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	460b      	mov	r3, r1
 800fdb4:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800fdb8:	460e      	mov	r6, r1
 800fdba:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 800fdbe:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800fdc2:	f7f0 fc29 	bl	8000618 <__aeabi_dmul>
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	460b      	mov	r3, r1
 800fdca:	e9c6 2300 	strd	r2, r3, [r6]
	rfdot=XKE*sqrt(pl)*temp1;
 800fdce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fdd2:	ed13 0b02 	vldr	d0, [r3, #-8]
 800fdd6:	f012 fc69 	bl	80226ac <sqrt>
 800fdda:	ec51 0b10 	vmov	r0, r1, d0
 800fdde:	a390      	add	r3, pc, #576	@ (adr r3, 8010020 <sgp4_predict+0xb60>)
 800fde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde4:	f7f0 fc18 	bl	8000618 <__aeabi_dmul>
 800fde8:	4602      	mov	r2, r0
 800fdea:	460b      	mov	r3, r1
 800fdec:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800fdf0:	460e      	mov	r6, r1
 800fdf2:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 800fdf6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800fdfa:	f7f0 fc0d 	bl	8000618 <__aeabi_dmul>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	460b      	mov	r3, r1
 800fe02:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp2=a*temp1;
 800fe06:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800fe0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fe0e:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800fe12:	f7f0 fc01 	bl	8000618 <__aeabi_dmul>
 800fe16:	4602      	mov	r2, r0
 800fe18:	460b      	mov	r3, r1
 800fe1a:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
	betal=sqrt(temp);
 800fe1e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800fe22:	461e      	mov	r6, r3
 800fe24:	ed97 0b72 	vldr	d0, [r7, #456]	@ 0x1c8
 800fe28:	f012 fc40 	bl	80226ac <sqrt>
 800fe2c:	ed86 0b00 	vstr	d0, [r6]
	temp3=1/(1+betal);
 800fe30:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800fe34:	4619      	mov	r1, r3
 800fe36:	f04f 0200 	mov.w	r2, #0
 800fe3a:	4b7d      	ldr	r3, [pc, #500]	@ (8010030 <sgp4_predict+0xb70>)
 800fe3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe40:	f7f0 fa34 	bl	80002ac <__adddf3>
 800fe44:	4602      	mov	r2, r0
 800fe46:	460b      	mov	r3, r1
 800fe48:	f04f 0000 	mov.w	r0, #0
 800fe4c:	4978      	ldr	r1, [pc, #480]	@ (8010030 <sgp4_predict+0xb70>)
 800fe4e:	f7f0 fd0d 	bl	800086c <__aeabi_ddiv>
 800fe52:	4602      	mov	r2, r0
 800fe54:	460b      	mov	r3, r1
 800fe56:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	cosu=temp2*(cosepw-axn+ayn*esine*temp3);
 800fe5a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800fe5e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 800fe62:	f7f0 fa21 	bl	80002a8 <__aeabi_dsub>
 800fe66:	4602      	mov	r2, r0
 800fe68:	460b      	mov	r3, r1
 800fe6a:	4690      	mov	r8, r2
 800fe6c:	4699      	mov	r9, r3
 800fe6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fe72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fe76:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800fe7a:	f7f0 fbcd 	bl	8000618 <__aeabi_dmul>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	460b      	mov	r3, r1
 800fe82:	4610      	mov	r0, r2
 800fe84:	4619      	mov	r1, r3
 800fe86:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800fe8a:	f7f0 fbc5 	bl	8000618 <__aeabi_dmul>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	460b      	mov	r3, r1
 800fe92:	4640      	mov	r0, r8
 800fe94:	4649      	mov	r1, r9
 800fe96:	f7f0 fa09 	bl	80002ac <__adddf3>
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800fea2:	460e      	mov	r6, r1
 800fea4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800fea8:	f7f0 fbb6 	bl	8000618 <__aeabi_dmul>
 800feac:	4602      	mov	r2, r0
 800feae:	460b      	mov	r3, r1
 800feb0:	e946 2302 	strd	r2, r3, [r6, #-8]
	sinu=temp2*(sinepw-ayn-axn*esine*temp3);
 800feb4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 800feb8:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800febc:	f7f0 f9f4 	bl	80002a8 <__aeabi_dsub>
 800fec0:	4602      	mov	r2, r0
 800fec2:	460b      	mov	r3, r1
 800fec4:	4690      	mov	r8, r2
 800fec6:	4699      	mov	r9, r3
 800fec8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fecc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fed0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800fed4:	f7f0 fba0 	bl	8000618 <__aeabi_dmul>
 800fed8:	4602      	mov	r2, r0
 800feda:	460b      	mov	r3, r1
 800fedc:	4610      	mov	r0, r2
 800fede:	4619      	mov	r1, r3
 800fee0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800fee4:	f7f0 fb98 	bl	8000618 <__aeabi_dmul>
 800fee8:	4602      	mov	r2, r0
 800feea:	460b      	mov	r3, r1
 800feec:	4640      	mov	r0, r8
 800feee:	4649      	mov	r1, r9
 800fef0:	f7f0 f9da 	bl	80002a8 <__aeabi_dsub>
 800fef4:	4602      	mov	r2, r0
 800fef6:	460b      	mov	r3, r1
 800fef8:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 800fefc:	460e      	mov	r6, r1
 800fefe:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800ff02:	f7f0 fb89 	bl	8000618 <__aeabi_dmul>
 800ff06:	4602      	mov	r2, r0
 800ff08:	460b      	mov	r3, r1
 800ff0a:	e9c6 2300 	strd	r2, r3, [r6]
	u=atan2(sinu,cosu);
 800ff0e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800ff12:	461e      	mov	r6, r3
 800ff14:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800ff18:	461a      	mov	r2, r3
 800ff1a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800ff1e:	ed12 1b02 	vldr	d1, [r2, #-8]
 800ff22:	ed93 0b00 	vldr	d0, [r3]
 800ff26:	f012 fa97 	bl	8022458 <atan2>
 800ff2a:	ed06 0b02 	vstr	d0, [r6, #-8]
	sin2u=2*sinu*cosu;
 800ff2e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800ff32:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff36:	4602      	mov	r2, r0
 800ff38:	460b      	mov	r3, r1
 800ff3a:	f7f0 f9b7 	bl	80002ac <__adddf3>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	460b      	mov	r3, r1
 800ff42:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 800ff46:	460e      	mov	r6, r1
 800ff48:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800ff4c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ff50:	f7f0 fb62 	bl	8000618 <__aeabi_dmul>
 800ff54:	4602      	mov	r2, r0
 800ff56:	460b      	mov	r3, r1
 800ff58:	e9c6 2300 	strd	r2, r3, [r6]
	cos2u=2*cosu*cosu-1;
 800ff5c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800ff60:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ff64:	4602      	mov	r2, r0
 800ff66:	460b      	mov	r3, r1
 800ff68:	f7f0 f9a0 	bl	80002ac <__adddf3>
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	460b      	mov	r3, r1
 800ff70:	4610      	mov	r0, r2
 800ff72:	4619      	mov	r1, r3
 800ff74:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800ff78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ff7c:	f7f0 fb4c 	bl	8000618 <__aeabi_dmul>
 800ff80:	4602      	mov	r2, r0
 800ff82:	460b      	mov	r3, r1
 800ff84:	4610      	mov	r0, r2
 800ff86:	4619      	mov	r1, r3
 800ff88:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800ff8c:	461e      	mov	r6, r3
 800ff8e:	f04f 0200 	mov.w	r2, #0
 800ff92:	4b27      	ldr	r3, [pc, #156]	@ (8010030 <sgp4_predict+0xb70>)
 800ff94:	f7f0 f988 	bl	80002a8 <__aeabi_dsub>
 800ff98:	4602      	mov	r2, r0
 800ff9a:	460b      	mov	r3, r1
 800ff9c:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp=1/pl;
 800ffa0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ffa4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ffa8:	f04f 0000 	mov.w	r0, #0
 800ffac:	4920      	ldr	r1, [pc, #128]	@ (8010030 <sgp4_predict+0xb70>)
 800ffae:	f7f0 fc5d 	bl	800086c <__aeabi_ddiv>
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
	temp1=CK2*temp;
 800ffba:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800ffbe:	461e      	mov	r6, r3
 800ffc0:	a319      	add	r3, pc, #100	@ (adr r3, 8010028 <sgp4_predict+0xb68>)
 800ffc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc6:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 800ffca:	f7f0 fb25 	bl	8000618 <__aeabi_dmul>
 800ffce:	4602      	mov	r2, r0
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp2=temp1*temp;
 800ffd6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800ffda:	4619      	mov	r1, r3
 800ffdc:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800ffe0:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ffe4:	f7f0 fb18 	bl	8000618 <__aeabi_dmul>
 800ffe8:	4602      	mov	r2, r0
 800ffea:	460b      	mov	r3, r1
 800ffec:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210

	/* Update for short periodics */
	rk=r*(1-1.5*temp2*betal*m->x3thm1)+0.5*temp1*m->x1mth2*cos2u;
 800fff0:	f04f 0200 	mov.w	r2, #0
 800fff4:	4b0f      	ldr	r3, [pc, #60]	@ (8010034 <sgp4_predict+0xb74>)
 800fff6:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800fffa:	f7f0 fb0d 	bl	8000618 <__aeabi_dmul>
 800fffe:	4602      	mov	r2, r0
 8010000:	460b      	mov	r3, r1
 8010002:	4610      	mov	r0, r2
 8010004:	4619      	mov	r1, r3
 8010006:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 801000a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000e:	f7f0 fb03 	bl	8000618 <__aeabi_dmul>
 8010012:	4602      	mov	r2, r0
 8010014:	460b      	mov	r3, r1
 8010016:	4610      	mov	r0, r2
 8010018:	4619      	mov	r1, r3
 801001a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801001e:	e00b      	b.n	8010038 <sgp4_predict+0xb78>
 8010020:	d08dcacf 	.word	0xd08dcacf
 8010024:	3fb309b5 	.word	0x3fb309b5
 8010028:	dd20e5a5 	.word	0xdd20e5a5
 801002c:	3f41bcd1 	.word	0x3f41bcd1
 8010030:	3ff00000 	.word	0x3ff00000
 8010034:	3ff80000 	.word	0x3ff80000
 8010038:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 8010042:	f7f0 fae9 	bl	8000618 <__aeabi_dmul>
 8010046:	4602      	mov	r2, r0
 8010048:	460b      	mov	r3, r1
 801004a:	f04f 0000 	mov.w	r0, #0
 801004e:	49d0      	ldr	r1, [pc, #832]	@ (8010390 <sgp4_predict+0xed0>)
 8010050:	f7f0 f92a 	bl	80002a8 <__aeabi_dsub>
 8010054:	4602      	mov	r2, r0
 8010056:	460b      	mov	r3, r1
 8010058:	4610      	mov	r0, r2
 801005a:	4619      	mov	r1, r3
 801005c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8010060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010064:	f7f0 fad8 	bl	8000618 <__aeabi_dmul>
 8010068:	4602      	mov	r2, r0
 801006a:	460b      	mov	r3, r1
 801006c:	4690      	mov	r8, r2
 801006e:	4699      	mov	r9, r3
 8010070:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8010074:	4619      	mov	r1, r3
 8010076:	f04f 0200 	mov.w	r2, #0
 801007a:	4bc6      	ldr	r3, [pc, #792]	@ (8010394 <sgp4_predict+0xed4>)
 801007c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8010080:	f7f0 faca 	bl	8000618 <__aeabi_dmul>
 8010084:	4602      	mov	r2, r0
 8010086:	460b      	mov	r3, r1
 8010088:	4610      	mov	r0, r2
 801008a:	4619      	mov	r1, r3
 801008c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010090:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 801009a:	f7f0 fabd 	bl	8000618 <__aeabi_dmul>
 801009e:	4602      	mov	r2, r0
 80100a0:	460b      	mov	r3, r1
 80100a2:	4610      	mov	r0, r2
 80100a4:	4619      	mov	r1, r3
 80100a6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80100aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80100ae:	f7f0 fab3 	bl	8000618 <__aeabi_dmul>
 80100b2:	4602      	mov	r2, r0
 80100b4:	460b      	mov	r3, r1
 80100b6:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 80100ba:	460e      	mov	r6, r1
 80100bc:	4640      	mov	r0, r8
 80100be:	4649      	mov	r1, r9
 80100c0:	f7f0 f8f4 	bl	80002ac <__adddf3>
 80100c4:	4602      	mov	r2, r0
 80100c6:	460b      	mov	r3, r1
 80100c8:	e9c6 2300 	strd	r2, r3, [r6]
	uk=u-0.25*temp2*m->x7thm1*sin2u;
 80100cc:	f04f 0200 	mov.w	r2, #0
 80100d0:	4bb1      	ldr	r3, [pc, #708]	@ (8010398 <sgp4_predict+0xed8>)
 80100d2:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80100d6:	f7f0 fa9f 	bl	8000618 <__aeabi_dmul>
 80100da:	4602      	mov	r2, r0
 80100dc:	460b      	mov	r3, r1
 80100de:	4610      	mov	r0, r2
 80100e0:	4619      	mov	r1, r3
 80100e2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80100e6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 80100f0:	f7f0 fa92 	bl	8000618 <__aeabi_dmul>
 80100f4:	4602      	mov	r2, r0
 80100f6:	460b      	mov	r3, r1
 80100f8:	4610      	mov	r0, r2
 80100fa:	4619      	mov	r1, r3
 80100fc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8010100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010104:	f7f0 fa88 	bl	8000618 <__aeabi_dmul>
 8010108:	4602      	mov	r2, r0
 801010a:	460b      	mov	r3, r1
 801010c:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8010110:	460e      	mov	r6, r1
 8010112:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8010116:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 801011a:	f7f0 f8c5 	bl	80002a8 <__aeabi_dsub>
 801011e:	4602      	mov	r2, r0
 8010120:	460b      	mov	r3, r1
 8010122:	e946 2302 	strd	r2, r3, [r6, #-8]
	xnodek=xnode+1.5*temp2*m->cosio*sin2u;
 8010126:	f04f 0200 	mov.w	r2, #0
 801012a:	4b9c      	ldr	r3, [pc, #624]	@ (801039c <sgp4_predict+0xedc>)
 801012c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8010130:	f7f0 fa72 	bl	8000618 <__aeabi_dmul>
 8010134:	4602      	mov	r2, r0
 8010136:	460b      	mov	r3, r1
 8010138:	4610      	mov	r0, r2
 801013a:	4619      	mov	r1, r3
 801013c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010140:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 801014a:	f7f0 fa65 	bl	8000618 <__aeabi_dmul>
 801014e:	4602      	mov	r2, r0
 8010150:	460b      	mov	r3, r1
 8010152:	4610      	mov	r0, r2
 8010154:	4619      	mov	r1, r3
 8010156:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801015a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015e:	f7f0 fa5b 	bl	8000618 <__aeabi_dmul>
 8010162:	4602      	mov	r2, r0
 8010164:	460b      	mov	r3, r1
 8010166:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801016a:	460e      	mov	r6, r1
 801016c:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8010170:	f7f0 f89c 	bl	80002ac <__adddf3>
 8010174:	4602      	mov	r2, r0
 8010176:	460b      	mov	r3, r1
 8010178:	e9c6 2300 	strd	r2, r3, [r6]
	xinck=m->xincl+1.5*temp2*m->cosio*m->sinio*cos2u;
 801017c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010180:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	e9d3 893c 	ldrd	r8, r9, [r3, #240]	@ 0xf0
 801018a:	f04f 0200 	mov.w	r2, #0
 801018e:	4b83      	ldr	r3, [pc, #524]	@ (801039c <sgp4_predict+0xedc>)
 8010190:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8010194:	f7f0 fa40 	bl	8000618 <__aeabi_dmul>
 8010198:	4602      	mov	r2, r0
 801019a:	460b      	mov	r3, r1
 801019c:	4610      	mov	r0, r2
 801019e:	4619      	mov	r1, r3
 80101a0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80101a4:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80101ae:	f7f0 fa33 	bl	8000618 <__aeabi_dmul>
 80101b2:	4602      	mov	r2, r0
 80101b4:	460b      	mov	r3, r1
 80101b6:	4610      	mov	r0, r2
 80101b8:	4619      	mov	r1, r3
 80101ba:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80101be:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80101c8:	f7f0 fa26 	bl	8000618 <__aeabi_dmul>
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	4610      	mov	r0, r2
 80101d2:	4619      	mov	r1, r3
 80101d4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80101d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80101dc:	f7f0 fa1c 	bl	8000618 <__aeabi_dmul>
 80101e0:	4602      	mov	r2, r0
 80101e2:	460b      	mov	r3, r1
 80101e4:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 80101e8:	460e      	mov	r6, r1
 80101ea:	4640      	mov	r0, r8
 80101ec:	4649      	mov	r1, r9
 80101ee:	f7f0 f85d 	bl	80002ac <__adddf3>
 80101f2:	4602      	mov	r2, r0
 80101f4:	460b      	mov	r3, r1
 80101f6:	e946 2302 	strd	r2, r3, [r6, #-8]
	rdotk=rdot-xn*temp1*m->x1mth2*sin2u;
 80101fa:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80101fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010202:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8010206:	f7f0 fa07 	bl	8000618 <__aeabi_dmul>
 801020a:	4602      	mov	r2, r0
 801020c:	460b      	mov	r3, r1
 801020e:	4610      	mov	r0, r2
 8010210:	4619      	mov	r1, r3
 8010212:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010216:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8010220:	f7f0 f9fa 	bl	8000618 <__aeabi_dmul>
 8010224:	4602      	mov	r2, r0
 8010226:	460b      	mov	r3, r1
 8010228:	4610      	mov	r0, r2
 801022a:	4619      	mov	r1, r3
 801022c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8010230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010234:	f7f0 f9f0 	bl	8000618 <__aeabi_dmul>
 8010238:	4602      	mov	r2, r0
 801023a:	460b      	mov	r3, r1
 801023c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8010240:	460e      	mov	r6, r1
 8010242:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 8010246:	e9d1 0100 	ldrd	r0, r1, [r1]
 801024a:	f7f0 f82d 	bl	80002a8 <__aeabi_dsub>
 801024e:	4602      	mov	r2, r0
 8010250:	460b      	mov	r3, r1
 8010252:	e9c6 2300 	strd	r2, r3, [r6]
	rfdotk=rfdot+xn*temp1*(m->x1mth2*cos2u+1.5*m->x3thm1);
 8010256:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 801025a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801025e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8010262:	f7f0 f9d9 	bl	8000618 <__aeabi_dmul>
 8010266:	4602      	mov	r2, r0
 8010268:	460b      	mov	r3, r1
 801026a:	4690      	mov	r8, r2
 801026c:	4699      	mov	r9, r3
 801026e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010272:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 801027c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8010280:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010284:	f7f0 f9c8 	bl	8000618 <__aeabi_dmul>
 8010288:	4602      	mov	r2, r0
 801028a:	460b      	mov	r3, r1
 801028c:	4692      	mov	sl, r2
 801028e:	469b      	mov	fp, r3
 8010290:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010294:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 801029e:	f04f 0200 	mov.w	r2, #0
 80102a2:	4b3e      	ldr	r3, [pc, #248]	@ (801039c <sgp4_predict+0xedc>)
 80102a4:	f7f0 f9b8 	bl	8000618 <__aeabi_dmul>
 80102a8:	4602      	mov	r2, r0
 80102aa:	460b      	mov	r3, r1
 80102ac:	4650      	mov	r0, sl
 80102ae:	4659      	mov	r1, fp
 80102b0:	f7ef fffc 	bl	80002ac <__adddf3>
 80102b4:	4602      	mov	r2, r0
 80102b6:	460b      	mov	r3, r1
 80102b8:	4640      	mov	r0, r8
 80102ba:	4649      	mov	r1, r9
 80102bc:	f7f0 f9ac 	bl	8000618 <__aeabi_dmul>
 80102c0:	4602      	mov	r2, r0
 80102c2:	460b      	mov	r3, r1
 80102c4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80102c8:	460e      	mov	r6, r1
 80102ca:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 80102ce:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80102d2:	f7ef ffeb 	bl	80002ac <__adddf3>
 80102d6:	4602      	mov	r2, r0
 80102d8:	460b      	mov	r3, r1
 80102da:	e946 2302 	strd	r2, r3, [r6, #-8]

	/* Orientation vectors */
	sinuk=sin(uk);
 80102de:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80102e2:	461e      	mov	r6, r3
 80102e4:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80102e8:	ed13 0b02 	vldr	d0, [r3, #-8]
 80102ec:	f012 fc00 	bl	8022af0 <sin>
 80102f0:	ed86 0b00 	vstr	d0, [r6]
	cosuk=cos(uk);
 80102f4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80102f8:	461e      	mov	r6, r3
 80102fa:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80102fe:	ed13 0b02 	vldr	d0, [r3, #-8]
 8010302:	f012 fb99 	bl	8022a38 <cos>
 8010306:	ed06 0b02 	vstr	d0, [r6, #-8]
	sinik=sin(xinck);
 801030a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801030e:	461e      	mov	r6, r3
 8010310:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8010314:	ed13 0b02 	vldr	d0, [r3, #-8]
 8010318:	f012 fbea 	bl	8022af0 <sin>
 801031c:	ed86 0b00 	vstr	d0, [r6]
	cosik=cos(xinck);
 8010320:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8010324:	461e      	mov	r6, r3
 8010326:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801032a:	ed13 0b02 	vldr	d0, [r3, #-8]
 801032e:	f012 fb83 	bl	8022a38 <cos>
 8010332:	ed06 0b02 	vstr	d0, [r6, #-8]
	sinnok=sin(xnodek);
 8010336:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801033a:	461e      	mov	r6, r3
 801033c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8010340:	ed93 0b00 	vldr	d0, [r3]
 8010344:	f012 fbd4 	bl	8022af0 <sin>
 8010348:	ed86 0b00 	vstr	d0, [r6]
	cosnok=cos(xnodek);
 801034c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8010350:	461e      	mov	r6, r3
 8010352:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8010356:	ed93 0b00 	vldr	d0, [r3]
 801035a:	f012 fb6d 	bl	8022a38 <cos>
 801035e:	ed06 0b02 	vstr	d0, [r6, #-8]
	xmx=-sinnok*cosik;
 8010362:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8010366:	681c      	ldr	r4, [r3, #0]
 8010368:	685b      	ldr	r3, [r3, #4]
 801036a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 801036e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010372:	461e      	mov	r6, r3
 8010374:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8010378:	4619      	mov	r1, r3
 801037a:	4622      	mov	r2, r4
 801037c:	462b      	mov	r3, r5
 801037e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8010382:	f7f0 f949 	bl	8000618 <__aeabi_dmul>
 8010386:	4602      	mov	r2, r0
 8010388:	460b      	mov	r3, r1
 801038a:	e9c6 2300 	strd	r2, r3, [r6]
 801038e:	e007      	b.n	80103a0 <sgp4_predict+0xee0>
 8010390:	3ff00000 	.word	0x3ff00000
 8010394:	3fe00000 	.word	0x3fe00000
 8010398:	3fd00000 	.word	0x3fd00000
 801039c:	3ff80000 	.word	0x3ff80000
	xmy=cosnok*cosik;
 80103a0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80103a4:	461c      	mov	r4, r3
 80103a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80103aa:	4619      	mov	r1, r3
 80103ac:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80103b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80103b4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80103b8:	f7f0 f92e 	bl	8000618 <__aeabi_dmul>
 80103bc:	4602      	mov	r2, r0
 80103be:	460b      	mov	r3, r1
 80103c0:	e944 2302 	strd	r2, r3, [r4, #-8]
	ux=xmx*sinuk+cosnok*cosuk;
 80103c4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80103c8:	4619      	mov	r1, r3
 80103ca:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80103ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103d6:	f7f0 f91f 	bl	8000618 <__aeabi_dmul>
 80103da:	4602      	mov	r2, r0
 80103dc:	460b      	mov	r3, r1
 80103de:	4614      	mov	r4, r2
 80103e0:	461d      	mov	r5, r3
 80103e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80103e6:	4619      	mov	r1, r3
 80103e8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80103ec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80103f0:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80103f4:	f7f0 f910 	bl	8000618 <__aeabi_dmul>
 80103f8:	4602      	mov	r2, r0
 80103fa:	460b      	mov	r3, r1
 80103fc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8010400:	460e      	mov	r6, r1
 8010402:	4620      	mov	r0, r4
 8010404:	4629      	mov	r1, r5
 8010406:	f7ef ff51 	bl	80002ac <__adddf3>
 801040a:	4602      	mov	r2, r0
 801040c:	460b      	mov	r3, r1
 801040e:	e9c6 2300 	strd	r2, r3, [r6]
	uy=xmy*sinuk+sinnok*cosuk;
 8010412:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010416:	4619      	mov	r1, r3
 8010418:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801041c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010420:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8010424:	f7f0 f8f8 	bl	8000618 <__aeabi_dmul>
 8010428:	4602      	mov	r2, r0
 801042a:	460b      	mov	r3, r1
 801042c:	4614      	mov	r4, r2
 801042e:	461d      	mov	r5, r3
 8010430:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8010434:	4619      	mov	r1, r3
 8010436:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801043a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801043e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010442:	f7f0 f8e9 	bl	8000618 <__aeabi_dmul>
 8010446:	4602      	mov	r2, r0
 8010448:	460b      	mov	r3, r1
 801044a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801044e:	460e      	mov	r6, r1
 8010450:	4620      	mov	r0, r4
 8010452:	4629      	mov	r1, r5
 8010454:	f7ef ff2a 	bl	80002ac <__adddf3>
 8010458:	4602      	mov	r2, r0
 801045a:	460b      	mov	r3, r1
 801045c:	e946 2302 	strd	r2, r3, [r6, #-8]
	uz=sinik*sinuk;
 8010460:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010464:	461c      	mov	r4, r3
 8010466:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801046a:	4619      	mov	r1, r3
 801046c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8010470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010478:	f7f0 f8ce 	bl	8000618 <__aeabi_dmul>
 801047c:	4602      	mov	r2, r0
 801047e:	460b      	mov	r3, r1
 8010480:	e9c4 2300 	strd	r2, r3, [r4]
	vx=xmx*cosuk-cosnok*sinuk;
 8010484:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010488:	4619      	mov	r1, r3
 801048a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801048e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010496:	f7f0 f8bf 	bl	8000618 <__aeabi_dmul>
 801049a:	4602      	mov	r2, r0
 801049c:	460b      	mov	r3, r1
 801049e:	4614      	mov	r4, r2
 80104a0:	461d      	mov	r5, r3
 80104a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80104a6:	4619      	mov	r1, r3
 80104a8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80104ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b0:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80104b4:	f7f0 f8b0 	bl	8000618 <__aeabi_dmul>
 80104b8:	4602      	mov	r2, r0
 80104ba:	460b      	mov	r3, r1
 80104bc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80104c0:	460e      	mov	r6, r1
 80104c2:	4620      	mov	r0, r4
 80104c4:	4629      	mov	r1, r5
 80104c6:	f7ef feef 	bl	80002a8 <__aeabi_dsub>
 80104ca:	4602      	mov	r2, r0
 80104cc:	460b      	mov	r3, r1
 80104ce:	e946 2302 	strd	r2, r3, [r6, #-8]
	vy=xmy*cosuk-sinnok*sinuk;
 80104d2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80104d6:	4619      	mov	r1, r3
 80104d8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80104dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80104e0:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80104e4:	f7f0 f898 	bl	8000618 <__aeabi_dmul>
 80104e8:	4602      	mov	r2, r0
 80104ea:	460b      	mov	r3, r1
 80104ec:	4614      	mov	r4, r2
 80104ee:	461d      	mov	r5, r3
 80104f0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80104f4:	4619      	mov	r1, r3
 80104f6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80104fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010502:	f7f0 f889 	bl	8000618 <__aeabi_dmul>
 8010506:	4602      	mov	r2, r0
 8010508:	460b      	mov	r3, r1
 801050a:	f107 0120 	add.w	r1, r7, #32
 801050e:	460e      	mov	r6, r1
 8010510:	4620      	mov	r0, r4
 8010512:	4629      	mov	r1, r5
 8010514:	f7ef fec8 	bl	80002a8 <__aeabi_dsub>
 8010518:	4602      	mov	r2, r0
 801051a:	460b      	mov	r3, r1
 801051c:	e9c6 2300 	strd	r2, r3, [r6]
	vz=sinik*cosuk;
 8010520:	f107 0320 	add.w	r3, r7, #32
 8010524:	461c      	mov	r4, r3
 8010526:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801052a:	4619      	mov	r1, r3
 801052c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8010530:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010538:	f7f0 f86e 	bl	8000618 <__aeabi_dmul>
 801053c:	4602      	mov	r2, r0
 801053e:	460b      	mov	r3, r1
 8010540:	e944 2302 	strd	r2, r3, [r4, #-8]

	/* Position and velocity */
	output->pos[0] = rk*ux;
 8010544:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8010548:	4619      	mov	r1, r3
 801054a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801054e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010556:	f7f0 f85f 	bl	8000618 <__aeabi_dmul>
 801055a:	4602      	mov	r2, r0
 801055c:	460b      	mov	r3, r1
 801055e:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 8010562:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 8010566:	6809      	ldr	r1, [r1, #0]
 8010568:	e9c1 2306 	strd	r2, r3, [r1, #24]
	output->pos[1] = rk*uy;
 801056c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8010570:	4619      	mov	r1, r3
 8010572:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8010576:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801057a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801057e:	f7f0 f84b 	bl	8000618 <__aeabi_dmul>
 8010582:	4602      	mov	r2, r0
 8010584:	460b      	mov	r3, r1
 8010586:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 801058a:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 801058e:	6809      	ldr	r1, [r1, #0]
 8010590:	e9c1 2308 	strd	r2, r3, [r1, #32]
	output->pos[2] = rk*uz;
 8010594:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8010598:	4619      	mov	r1, r3
 801059a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801059e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105a6:	f7f0 f837 	bl	8000618 <__aeabi_dmul>
 80105aa:	4602      	mov	r2, r0
 80105ac:	460b      	mov	r3, r1
 80105ae:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 80105b2:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 80105b6:	6809      	ldr	r1, [r1, #0]
 80105b8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	output->vel[0] = rdotk*ux+rfdotk*vx;
 80105bc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80105c0:	4619      	mov	r1, r3
 80105c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80105c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105ce:	f7f0 f823 	bl	8000618 <__aeabi_dmul>
 80105d2:	4602      	mov	r2, r0
 80105d4:	460b      	mov	r3, r1
 80105d6:	4614      	mov	r4, r2
 80105d8:	461d      	mov	r5, r3
 80105da:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80105de:	4619      	mov	r1, r3
 80105e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80105e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80105e8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80105ec:	f7f0 f814 	bl	8000618 <__aeabi_dmul>
 80105f0:	4602      	mov	r2, r0
 80105f2:	460b      	mov	r3, r1
 80105f4:	4620      	mov	r0, r4
 80105f6:	4629      	mov	r1, r5
 80105f8:	f7ef fe58 	bl	80002ac <__adddf3>
 80105fc:	4602      	mov	r2, r0
 80105fe:	460b      	mov	r3, r1
 8010600:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 8010604:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 8010608:	6809      	ldr	r1, [r1, #0]
 801060a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	output->vel[1] = rdotk*uy+rfdotk*vy;
 801060e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8010612:	4619      	mov	r1, r3
 8010614:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8010618:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801061c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010620:	f7ef fffa 	bl	8000618 <__aeabi_dmul>
 8010624:	4602      	mov	r2, r0
 8010626:	460b      	mov	r3, r1
 8010628:	4614      	mov	r4, r2
 801062a:	461d      	mov	r5, r3
 801062c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8010630:	4619      	mov	r1, r3
 8010632:	f107 0320 	add.w	r3, r7, #32
 8010636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063a:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 801063e:	f7ef ffeb 	bl	8000618 <__aeabi_dmul>
 8010642:	4602      	mov	r2, r0
 8010644:	460b      	mov	r3, r1
 8010646:	4620      	mov	r0, r4
 8010648:	4629      	mov	r1, r5
 801064a:	f7ef fe2f 	bl	80002ac <__adddf3>
 801064e:	4602      	mov	r2, r0
 8010650:	460b      	mov	r3, r1
 8010652:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 8010656:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 801065a:	6809      	ldr	r1, [r1, #0]
 801065c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	output->vel[2] = rdotk*uz+rfdotk*vz;
 8010660:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8010664:	4619      	mov	r1, r3
 8010666:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801066a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801066e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010672:	f7ef ffd1 	bl	8000618 <__aeabi_dmul>
 8010676:	4602      	mov	r2, r0
 8010678:	460b      	mov	r3, r1
 801067a:	4614      	mov	r4, r2
 801067c:	461d      	mov	r5, r3
 801067e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8010682:	4619      	mov	r1, r3
 8010684:	f107 0320 	add.w	r3, r7, #32
 8010688:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801068c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8010690:	f7ef ffc2 	bl	8000618 <__aeabi_dmul>
 8010694:	4602      	mov	r2, r0
 8010696:	460b      	mov	r3, r1
 8010698:	4620      	mov	r0, r4
 801069a:	4629      	mov	r1, r5
 801069c:	f7ef fe06 	bl	80002ac <__adddf3>
 80106a0:	4602      	mov	r2, r0
 80106a2:	460b      	mov	r3, r1
 80106a4:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 80106a8:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 80106ac:	6809      	ldr	r1, [r1, #0]
 80106ae:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	/* Phase in radians */
	output->phase=xlt-xnode-omgadf+TWO_PI;
 80106b2:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 80106b6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80106ba:	f7ef fdf5 	bl	80002a8 <__aeabi_dsub>
 80106be:	4602      	mov	r2, r0
 80106c0:	460b      	mov	r3, r1
 80106c2:	4610      	mov	r0, r2
 80106c4:	4619      	mov	r1, r3
 80106c6:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 80106ca:	f7ef fded 	bl	80002a8 <__aeabi_dsub>
 80106ce:	4602      	mov	r2, r0
 80106d0:	460b      	mov	r3, r1
 80106d2:	4610      	mov	r0, r2
 80106d4:	4619      	mov	r1, r3
 80106d6:	a338      	add	r3, pc, #224	@ (adr r3, 80107b8 <sgp4_predict+0x12f8>)
 80106d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106dc:	f7ef fde6 	bl	80002ac <__adddf3>
 80106e0:	4602      	mov	r2, r0
 80106e2:	460b      	mov	r3, r1
 80106e4:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 80106e8:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 80106ec:	6809      	ldr	r1, [r1, #0]
 80106ee:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	if (output->phase<0.0)
 80106f2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80106f6:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8010700:	f04f 0200 	mov.w	r2, #0
 8010704:	f04f 0300 	mov.w	r3, #0
 8010708:	f7f0 f9f8 	bl	8000afc <__aeabi_dcmplt>
 801070c:	4603      	mov	r3, r0
 801070e:	2b00      	cmp	r3, #0
 8010710:	d014      	beq.n	801073c <sgp4_predict+0x127c>
		output->phase+=TWO_PI;
 8010712:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010716:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8010720:	a325      	add	r3, pc, #148	@ (adr r3, 80107b8 <sgp4_predict+0x12f8>)
 8010722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010726:	f7ef fdc1 	bl	80002ac <__adddf3>
 801072a:	4602      	mov	r2, r0
 801072c:	460b      	mov	r3, r1
 801072e:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 8010732:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 8010736:	6809      	ldr	r1, [r1, #0]
 8010738:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	output->phase=FMod2p(output->phase);
 801073c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010740:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 801074a:	eeb0 0a47 	vmov.f32	s0, s14
 801074e:	eef0 0a67 	vmov.f32	s1, s15
 8010752:	f000 fe51 	bl	80113f8 <FMod2p>
 8010756:	eeb0 7a40 	vmov.f32	s14, s0
 801075a:	eef0 7a60 	vmov.f32	s15, s1
 801075e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010762:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48

	output->xinck = xinck;
 801076c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010770:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8010774:	6819      	ldr	r1, [r3, #0]
 8010776:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801077a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801077e:	e9c1 2300 	strd	r2, r3, [r1]
	output->omgadf = omgadf;
 8010782:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010786:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 801078a:	6819      	ldr	r1, [r3, #0]
 801078c:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8010790:	e9c1 2302 	strd	r2, r3, [r1, #8]
	output->xnodek = xnodek;
 8010794:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010798:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 801079c:	6819      	ldr	r1, [r3, #0]
 801079e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80107a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a6:	e9c1 2304 	strd	r2, r3, [r1, #16]

}
 80107aa:	bf00      	nop
 80107ac:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 80107b0:	46bd      	mov	sp, r7
 80107b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b6:	bf00      	nop
 80107b8:	54442d18 	.word	0x54442d18
 80107bc:	401921fb 	.word	0x401921fb

080107c0 <Delta_ET>:
 * The function Delta_ET has been added to allow calculations on the position of the sun.  It provides the difference between UT (approximately the same as UTC) and ET (now referred to as TDT). This function is based on a least squares fit of data from 1950 to 1991 and will need to be updated periodically. Values determined using data from 1950-1991 in the 1990 Astronomical Almanac.  See DELTA_ET.WQ1 for details.
 *
 * \copyright GPLv2+
 **/
double Delta_ET(double year)
{
 80107c0:	b5b0      	push	{r4, r5, r7, lr}
 80107c2:	b084      	sub	sp, #16
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	ed87 0b00 	vstr	d0, [r7]
	double delta_et;

	delta_et=26.465+0.747622*(year-1950)+1.886913*sin(2*M_PI*(year-1975)/33);
 80107ca:	a332      	add	r3, pc, #200	@ (adr r3, 8010894 <Delta_ET+0xd4>)
 80107cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80107d4:	f7ef fd68 	bl	80002a8 <__aeabi_dsub>
 80107d8:	4602      	mov	r2, r0
 80107da:	460b      	mov	r3, r1
 80107dc:	4610      	mov	r0, r2
 80107de:	4619      	mov	r1, r3
 80107e0:	a32e      	add	r3, pc, #184	@ (adr r3, 801089c <Delta_ET+0xdc>)
 80107e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e6:	f7ef ff17 	bl	8000618 <__aeabi_dmul>
 80107ea:	4602      	mov	r2, r0
 80107ec:	460b      	mov	r3, r1
 80107ee:	4610      	mov	r0, r2
 80107f0:	4619      	mov	r1, r3
 80107f2:	a32c      	add	r3, pc, #176	@ (adr r3, 80108a4 <Delta_ET+0xe4>)
 80107f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f8:	f7ef fd58 	bl	80002ac <__adddf3>
 80107fc:	4602      	mov	r2, r0
 80107fe:	460b      	mov	r3, r1
 8010800:	4614      	mov	r4, r2
 8010802:	461d      	mov	r5, r3
 8010804:	a329      	add	r3, pc, #164	@ (adr r3, 80108ac <Delta_ET+0xec>)
 8010806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801080e:	f7ef fd4b 	bl	80002a8 <__aeabi_dsub>
 8010812:	4602      	mov	r2, r0
 8010814:	460b      	mov	r3, r1
 8010816:	4610      	mov	r0, r2
 8010818:	4619      	mov	r1, r3
 801081a:	a326      	add	r3, pc, #152	@ (adr r3, 80108b4 <Delta_ET+0xf4>)
 801081c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010820:	f7ef fefa 	bl	8000618 <__aeabi_dmul>
 8010824:	4602      	mov	r2, r0
 8010826:	460b      	mov	r3, r1
 8010828:	4610      	mov	r0, r2
 801082a:	4619      	mov	r1, r3
 801082c:	f04f 0200 	mov.w	r2, #0
 8010830:	4b17      	ldr	r3, [pc, #92]	@ (8010890 <Delta_ET+0xd0>)
 8010832:	f7f0 f81b 	bl	800086c <__aeabi_ddiv>
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	ec43 2b17 	vmov	d7, r2, r3
 801083e:	eeb0 0a47 	vmov.f32	s0, s14
 8010842:	eef0 0a67 	vmov.f32	s1, s15
 8010846:	f012 f953 	bl	8022af0 <sin>
 801084a:	ec51 0b10 	vmov	r0, r1, d0
 801084e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010888 <Delta_ET+0xc8>)
 8010850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010854:	f7ef fee0 	bl	8000618 <__aeabi_dmul>
 8010858:	4602      	mov	r2, r0
 801085a:	460b      	mov	r3, r1
 801085c:	4620      	mov	r0, r4
 801085e:	4629      	mov	r1, r5
 8010860:	f7ef fd24 	bl	80002ac <__adddf3>
 8010864:	4602      	mov	r2, r0
 8010866:	460b      	mov	r3, r1
 8010868:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return delta_et;
 801086c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010870:	ec43 2b17 	vmov	d7, r2, r3
}
 8010874:	eeb0 0a47 	vmov.f32	s0, s14
 8010878:	eef0 0a67 	vmov.f32	s1, s15
 801087c:	3710      	adds	r7, #16
 801087e:	46bd      	mov	sp, r7
 8010880:	bdb0      	pop	{r4, r5, r7, pc}
 8010882:	bf00      	nop
 8010884:	f3af 8000 	nop.w
 8010888:	af965b21 	.word	0xaf965b21
 801088c:	3ffe30cb 	.word	0x3ffe30cb
 8010890:	40408000 	.word	0x40408000
 8010894:	00000000 	.word	0x00000000
 8010898:	409e7800 	.word	0x409e7800
 801089c:	f8f8a4c2 	.word	0xf8f8a4c2
 80108a0:	3fe7ec84 	.word	0x3fe7ec84
 80108a4:	3d70a3d7 	.word	0x3d70a3d7
 80108a8:	403a770a 	.word	0x403a770a
 80108ac:	00000000 	.word	0x00000000
 80108b0:	409edc00 	.word	0x409edc00
 80108b4:	54442d18 	.word	0x54442d18
 80108b8:	401921fb 	.word	0x401921fb
 80108bc:	00000000 	.word	0x00000000

080108c0 <Radians>:
 * Returns angle in radians from argument in degrees.
 *
 * \copyright GPLv2+
 **/
double Radians(double arg)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	ed87 0b00 	vstr	d0, [r7]
	/* Returns angle in radians from argument in degrees */
	return (arg*M_PI/180.0);
 80108ca:	a30e      	add	r3, pc, #56	@ (adr r3, 8010904 <Radians+0x44>)
 80108cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80108d4:	f7ef fea0 	bl	8000618 <__aeabi_dmul>
 80108d8:	4602      	mov	r2, r0
 80108da:	460b      	mov	r3, r1
 80108dc:	4610      	mov	r0, r2
 80108de:	4619      	mov	r1, r3
 80108e0:	f04f 0200 	mov.w	r2, #0
 80108e4:	4b06      	ldr	r3, [pc, #24]	@ (8010900 <Radians+0x40>)
 80108e6:	f7ef ffc1 	bl	800086c <__aeabi_ddiv>
 80108ea:	4602      	mov	r2, r0
 80108ec:	460b      	mov	r3, r1
 80108ee:	ec43 2b17 	vmov	d7, r2, r3
}
 80108f2:	eeb0 0a47 	vmov.f32	s0, s14
 80108f6:	eef0 0a67 	vmov.f32	s1, s15
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	40668000 	.word	0x40668000
 8010904:	54442d18 	.word	0x54442d18
 8010908:	400921fb 	.word	0x400921fb
 801090c:	00000000 	.word	0x00000000

08010910 <sun_predict>:
	/* Returns angle in degrees from argument in radians */
	return (arg*180.0/M_PI);
}

void sun_predict(double time, double position[3])
{
 8010910:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010914:	b09e      	sub	sp, #120	@ 0x78
 8010916:	af00      	add	r7, sp, #0
 8010918:	ed87 0b02 	vstr	d0, [r7, #8]
 801091c:	6078      	str	r0, [r7, #4]
	double jul_utc = time + JULIAN_TIME_DIFF;
 801091e:	f20f 4388 	addw	r3, pc, #1160	@ 0x488
 8010922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801092a:	f7ef fcbf 	bl	80002ac <__adddf3>
 801092e:	4602      	mov	r2, r0
 8010930:	460b      	mov	r3, r1
 8010932:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	double mjd = jul_utc - 2415020.0;
 8010936:	f20f 4378 	addw	r3, pc, #1144	@ 0x478
 801093a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8010942:	f7ef fcb1 	bl	80002a8 <__aeabi_dsub>
 8010946:	4602      	mov	r2, r0
 8010948:	460b      	mov	r3, r1
 801094a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	double year = 1900 + mjd / 365.25;
 801094e:	f20f 4368 	addw	r3, pc, #1128	@ 0x468
 8010952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010956:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801095a:	f7ef ff87 	bl	800086c <__aeabi_ddiv>
 801095e:	4602      	mov	r2, r0
 8010960:	460b      	mov	r3, r1
 8010962:	4610      	mov	r0, r2
 8010964:	4619      	mov	r1, r3
 8010966:	f20f 4358 	addw	r3, pc, #1112	@ 0x458
 801096a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096e:	f7ef fc9d 	bl	80002ac <__adddf3>
 8010972:	4602      	mov	r2, r0
 8010974:	460b      	mov	r3, r1
 8010976:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	double T = (mjd + Delta_ET(year) / SECONDS_PER_DAY) / 36525.0;
 801097a:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 801097e:	f7ff ff1f 	bl	80107c0 <Delta_ET>
 8010982:	ec51 0b10 	vmov	r0, r1, d0
 8010986:	f20f 4340 	addw	r3, pc, #1088	@ 0x440
 801098a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098e:	f7ef ff6d 	bl	800086c <__aeabi_ddiv>
 8010992:	4602      	mov	r2, r0
 8010994:	460b      	mov	r3, r1
 8010996:	4610      	mov	r0, r2
 8010998:	4619      	mov	r1, r3
 801099a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801099e:	f7ef fc85 	bl	80002ac <__adddf3>
 80109a2:	4602      	mov	r2, r0
 80109a4:	460b      	mov	r3, r1
 80109a6:	4610      	mov	r0, r2
 80109a8:	4619      	mov	r1, r3
 80109aa:	f20f 4324 	addw	r3, pc, #1060	@ 0x424
 80109ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b2:	f7ef ff5b 	bl	800086c <__aeabi_ddiv>
 80109b6:	4602      	mov	r2, r0
 80109b8:	460b      	mov	r3, r1
 80109ba:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	double M = Radians(fmod(358.47583+fmod(35999.04975*T,360.0)-(0.000150+0.0000033*T)*Sqr(T),360.0));
 80109be:	f20f 4318 	addw	r3, pc, #1048	@ 0x418
 80109c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80109ca:	f7ef fe25 	bl	8000618 <__aeabi_dmul>
 80109ce:	4602      	mov	r2, r0
 80109d0:	460b      	mov	r3, r1
 80109d2:	ec43 2b17 	vmov	d7, r2, r3
 80109d6:	ed9f 1be4 	vldr	d1, [pc, #912]	@ 8010d68 <sun_predict+0x458>
 80109da:	eeb0 0a47 	vmov.f32	s0, s14
 80109de:	eef0 0a67 	vmov.f32	s1, s15
 80109e2:	f011 fd85 	bl	80224f0 <fmod>
 80109e6:	ec51 0b10 	vmov	r0, r1, d0
 80109ea:	a3fd      	add	r3, pc, #1012	@ (adr r3, 8010de0 <sun_predict+0x4d0>)
 80109ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f0:	f7ef fc5c 	bl	80002ac <__adddf3>
 80109f4:	4602      	mov	r2, r0
 80109f6:	460b      	mov	r3, r1
 80109f8:	4614      	mov	r4, r2
 80109fa:	461d      	mov	r5, r3
 80109fc:	a3fa      	add	r3, pc, #1000	@ (adr r3, 8010de8 <sun_predict+0x4d8>)
 80109fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8010a06:	f7ef fe07 	bl	8000618 <__aeabi_dmul>
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	4610      	mov	r0, r2
 8010a10:	4619      	mov	r1, r3
 8010a12:	a3f7      	add	r3, pc, #988	@ (adr r3, 8010df0 <sun_predict+0x4e0>)
 8010a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a18:	f7ef fc48 	bl	80002ac <__adddf3>
 8010a1c:	4602      	mov	r2, r0
 8010a1e:	460b      	mov	r3, r1
 8010a20:	4690      	mov	r8, r2
 8010a22:	4699      	mov	r9, r3
 8010a24:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8010a28:	f000 fcce 	bl	80113c8 <Sqr>
 8010a2c:	ec53 2b10 	vmov	r2, r3, d0
 8010a30:	4640      	mov	r0, r8
 8010a32:	4649      	mov	r1, r9
 8010a34:	f7ef fdf0 	bl	8000618 <__aeabi_dmul>
 8010a38:	4602      	mov	r2, r0
 8010a3a:	460b      	mov	r3, r1
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	4629      	mov	r1, r5
 8010a40:	f7ef fc32 	bl	80002a8 <__aeabi_dsub>
 8010a44:	4602      	mov	r2, r0
 8010a46:	460b      	mov	r3, r1
 8010a48:	ec43 2b17 	vmov	d7, r2, r3
 8010a4c:	ed9f 1bc6 	vldr	d1, [pc, #792]	@ 8010d68 <sun_predict+0x458>
 8010a50:	eeb0 0a47 	vmov.f32	s0, s14
 8010a54:	eef0 0a67 	vmov.f32	s1, s15
 8010a58:	f011 fd4a 	bl	80224f0 <fmod>
 8010a5c:	eeb0 7a40 	vmov.f32	s14, s0
 8010a60:	eef0 7a60 	vmov.f32	s15, s1
 8010a64:	eeb0 0a47 	vmov.f32	s0, s14
 8010a68:	eef0 0a67 	vmov.f32	s1, s15
 8010a6c:	f7ff ff28 	bl	80108c0 <Radians>
 8010a70:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
	double L = Radians(fmod(279.69668+fmod(36000.76892*T,360.0)+0.0003025*Sqr(T),360.0));
 8010a74:	a3e0      	add	r3, pc, #896	@ (adr r3, 8010df8 <sun_predict+0x4e8>)
 8010a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8010a7e:	f7ef fdcb 	bl	8000618 <__aeabi_dmul>
 8010a82:	4602      	mov	r2, r0
 8010a84:	460b      	mov	r3, r1
 8010a86:	ec43 2b17 	vmov	d7, r2, r3
 8010a8a:	ed9f 1bb7 	vldr	d1, [pc, #732]	@ 8010d68 <sun_predict+0x458>
 8010a8e:	eeb0 0a47 	vmov.f32	s0, s14
 8010a92:	eef0 0a67 	vmov.f32	s1, s15
 8010a96:	f011 fd2b 	bl	80224f0 <fmod>
 8010a9a:	ec51 0b10 	vmov	r0, r1, d0
 8010a9e:	a3d8      	add	r3, pc, #864	@ (adr r3, 8010e00 <sun_predict+0x4f0>)
 8010aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa4:	f7ef fc02 	bl	80002ac <__adddf3>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	460b      	mov	r3, r1
 8010aac:	4614      	mov	r4, r2
 8010aae:	461d      	mov	r5, r3
 8010ab0:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8010ab4:	f000 fc88 	bl	80113c8 <Sqr>
 8010ab8:	ec51 0b10 	vmov	r0, r1, d0
 8010abc:	a3d2      	add	r3, pc, #840	@ (adr r3, 8010e08 <sun_predict+0x4f8>)
 8010abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac2:	f7ef fda9 	bl	8000618 <__aeabi_dmul>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	460b      	mov	r3, r1
 8010aca:	4620      	mov	r0, r4
 8010acc:	4629      	mov	r1, r5
 8010ace:	f7ef fbed 	bl	80002ac <__adddf3>
 8010ad2:	4602      	mov	r2, r0
 8010ad4:	460b      	mov	r3, r1
 8010ad6:	ec43 2b17 	vmov	d7, r2, r3
 8010ada:	ed9f 1ba3 	vldr	d1, [pc, #652]	@ 8010d68 <sun_predict+0x458>
 8010ade:	eeb0 0a47 	vmov.f32	s0, s14
 8010ae2:	eef0 0a67 	vmov.f32	s1, s15
 8010ae6:	f011 fd03 	bl	80224f0 <fmod>
 8010aea:	eeb0 7a40 	vmov.f32	s14, s0
 8010aee:	eef0 7a60 	vmov.f32	s15, s1
 8010af2:	eeb0 0a47 	vmov.f32	s0, s14
 8010af6:	eef0 0a67 	vmov.f32	s1, s15
 8010afa:	f7ff fee1 	bl	80108c0 <Radians>
 8010afe:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
	double e = 0.01675104-(0.0000418+0.000000126*T)*T;
 8010b02:	a3c3      	add	r3, pc, #780	@ (adr r3, 8010e10 <sun_predict+0x500>)
 8010b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b08:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8010b0c:	f7ef fd84 	bl	8000618 <__aeabi_dmul>
 8010b10:	4602      	mov	r2, r0
 8010b12:	460b      	mov	r3, r1
 8010b14:	4610      	mov	r0, r2
 8010b16:	4619      	mov	r1, r3
 8010b18:	a3bf      	add	r3, pc, #764	@ (adr r3, 8010e18 <sun_predict+0x508>)
 8010b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b1e:	f7ef fbc5 	bl	80002ac <__adddf3>
 8010b22:	4602      	mov	r2, r0
 8010b24:	460b      	mov	r3, r1
 8010b26:	4610      	mov	r0, r2
 8010b28:	4619      	mov	r1, r3
 8010b2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010b2e:	f7ef fd73 	bl	8000618 <__aeabi_dmul>
 8010b32:	4602      	mov	r2, r0
 8010b34:	460b      	mov	r3, r1
 8010b36:	a1ba      	add	r1, pc, #744	@ (adr r1, 8010e20 <sun_predict+0x510>)
 8010b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b3c:	f7ef fbb4 	bl	80002a8 <__aeabi_dsub>
 8010b40:	4602      	mov	r2, r0
 8010b42:	460b      	mov	r3, r1
 8010b44:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double C = Radians((1.919460-(0.004789+0.000014*T)*T)*sin(M)+(0.020094-0.000100*T)*sin(2*M)+0.000293*sin(3*M));
 8010b48:	a3b7      	add	r3, pc, #732	@ (adr r3, 8010e28 <sun_predict+0x518>)
 8010b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8010b52:	f7ef fd61 	bl	8000618 <__aeabi_dmul>
 8010b56:	4602      	mov	r2, r0
 8010b58:	460b      	mov	r3, r1
 8010b5a:	4610      	mov	r0, r2
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	a3b4      	add	r3, pc, #720	@ (adr r3, 8010e30 <sun_predict+0x520>)
 8010b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b64:	f7ef fba2 	bl	80002ac <__adddf3>
 8010b68:	4602      	mov	r2, r0
 8010b6a:	460b      	mov	r3, r1
 8010b6c:	4610      	mov	r0, r2
 8010b6e:	4619      	mov	r1, r3
 8010b70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010b74:	f7ef fd50 	bl	8000618 <__aeabi_dmul>
 8010b78:	4602      	mov	r2, r0
 8010b7a:	460b      	mov	r3, r1
 8010b7c:	a1ae      	add	r1, pc, #696	@ (adr r1, 8010e38 <sun_predict+0x528>)
 8010b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b82:	f7ef fb91 	bl	80002a8 <__aeabi_dsub>
 8010b86:	4602      	mov	r2, r0
 8010b88:	460b      	mov	r3, r1
 8010b8a:	4614      	mov	r4, r2
 8010b8c:	461d      	mov	r5, r3
 8010b8e:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8010b92:	f011 ffad 	bl	8022af0 <sin>
 8010b96:	ec53 2b10 	vmov	r2, r3, d0
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	4629      	mov	r1, r5
 8010b9e:	f7ef fd3b 	bl	8000618 <__aeabi_dmul>
 8010ba2:	4602      	mov	r2, r0
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	4614      	mov	r4, r2
 8010ba8:	461d      	mov	r5, r3
 8010baa:	a3a5      	add	r3, pc, #660	@ (adr r3, 8010e40 <sun_predict+0x530>)
 8010bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8010bb4:	f7ef fd30 	bl	8000618 <__aeabi_dmul>
 8010bb8:	4602      	mov	r2, r0
 8010bba:	460b      	mov	r3, r1
 8010bbc:	a1a2      	add	r1, pc, #648	@ (adr r1, 8010e48 <sun_predict+0x538>)
 8010bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bc2:	f7ef fb71 	bl	80002a8 <__aeabi_dsub>
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	460b      	mov	r3, r1
 8010bca:	4690      	mov	r8, r2
 8010bcc:	4699      	mov	r9, r3
 8010bce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	f7ef fb69 	bl	80002ac <__adddf3>
 8010bda:	4602      	mov	r2, r0
 8010bdc:	460b      	mov	r3, r1
 8010bde:	ec43 2b17 	vmov	d7, r2, r3
 8010be2:	eeb0 0a47 	vmov.f32	s0, s14
 8010be6:	eef0 0a67 	vmov.f32	s1, s15
 8010bea:	f011 ff81 	bl	8022af0 <sin>
 8010bee:	ec53 2b10 	vmov	r2, r3, d0
 8010bf2:	4640      	mov	r0, r8
 8010bf4:	4649      	mov	r1, r9
 8010bf6:	f7ef fd0f 	bl	8000618 <__aeabi_dmul>
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	460b      	mov	r3, r1
 8010bfe:	4620      	mov	r0, r4
 8010c00:	4629      	mov	r1, r5
 8010c02:	f7ef fb53 	bl	80002ac <__adddf3>
 8010c06:	4602      	mov	r2, r0
 8010c08:	460b      	mov	r3, r1
 8010c0a:	4614      	mov	r4, r2
 8010c0c:	461d      	mov	r5, r3
 8010c0e:	f04f 0200 	mov.w	r2, #0
 8010c12:	4b63      	ldr	r3, [pc, #396]	@ (8010da0 <sun_predict+0x490>)
 8010c14:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8010c18:	f7ef fcfe 	bl	8000618 <__aeabi_dmul>
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	460b      	mov	r3, r1
 8010c20:	ec43 2b17 	vmov	d7, r2, r3
 8010c24:	eeb0 0a47 	vmov.f32	s0, s14
 8010c28:	eef0 0a67 	vmov.f32	s1, s15
 8010c2c:	f011 ff60 	bl	8022af0 <sin>
 8010c30:	ec51 0b10 	vmov	r0, r1, d0
 8010c34:	a34e      	add	r3, pc, #312	@ (adr r3, 8010d70 <sun_predict+0x460>)
 8010c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3a:	f7ef fced 	bl	8000618 <__aeabi_dmul>
 8010c3e:	4602      	mov	r2, r0
 8010c40:	460b      	mov	r3, r1
 8010c42:	4620      	mov	r0, r4
 8010c44:	4629      	mov	r1, r5
 8010c46:	f7ef fb31 	bl	80002ac <__adddf3>
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	ec43 2b17 	vmov	d7, r2, r3
 8010c52:	eeb0 0a47 	vmov.f32	s0, s14
 8010c56:	eef0 0a67 	vmov.f32	s1, s15
 8010c5a:	f7ff fe31 	bl	80108c0 <Radians>
 8010c5e:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
	double O = Radians(fmod(259.18-1934.142*T,360.0));
 8010c62:	a345      	add	r3, pc, #276	@ (adr r3, 8010d78 <sun_predict+0x468>)
 8010c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c68:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8010c6c:	f7ef fcd4 	bl	8000618 <__aeabi_dmul>
 8010c70:	4602      	mov	r2, r0
 8010c72:	460b      	mov	r3, r1
 8010c74:	a142      	add	r1, pc, #264	@ (adr r1, 8010d80 <sun_predict+0x470>)
 8010c76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c7a:	f7ef fb15 	bl	80002a8 <__aeabi_dsub>
 8010c7e:	4602      	mov	r2, r0
 8010c80:	460b      	mov	r3, r1
 8010c82:	ec43 2b17 	vmov	d7, r2, r3
 8010c86:	ed9f 1b38 	vldr	d1, [pc, #224]	@ 8010d68 <sun_predict+0x458>
 8010c8a:	eeb0 0a47 	vmov.f32	s0, s14
 8010c8e:	eef0 0a67 	vmov.f32	s1, s15
 8010c92:	f011 fc2d 	bl	80224f0 <fmod>
 8010c96:	eeb0 7a40 	vmov.f32	s14, s0
 8010c9a:	eef0 7a60 	vmov.f32	s15, s1
 8010c9e:	eeb0 0a47 	vmov.f32	s0, s14
 8010ca2:	eef0 0a67 	vmov.f32	s1, s15
 8010ca6:	f7ff fe0b 	bl	80108c0 <Radians>
 8010caa:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double Lsa = fmod(L+C-Radians(0.00569-0.00479*sin(O)), 2*M_PI);
 8010cae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8010cb2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8010cb6:	f7ef faf9 	bl	80002ac <__adddf3>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	460b      	mov	r3, r1
 8010cbe:	4614      	mov	r4, r2
 8010cc0:	461d      	mov	r5, r3
 8010cc2:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8010cc6:	f011 ff13 	bl	8022af0 <sin>
 8010cca:	ec51 0b10 	vmov	r0, r1, d0
 8010cce:	a32e      	add	r3, pc, #184	@ (adr r3, 8010d88 <sun_predict+0x478>)
 8010cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd4:	f7ef fca0 	bl	8000618 <__aeabi_dmul>
 8010cd8:	4602      	mov	r2, r0
 8010cda:	460b      	mov	r3, r1
 8010cdc:	a12c      	add	r1, pc, #176	@ (adr r1, 8010d90 <sun_predict+0x480>)
 8010cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ce2:	f7ef fae1 	bl	80002a8 <__aeabi_dsub>
 8010ce6:	4602      	mov	r2, r0
 8010ce8:	460b      	mov	r3, r1
 8010cea:	ec43 2b17 	vmov	d7, r2, r3
 8010cee:	eeb0 0a47 	vmov.f32	s0, s14
 8010cf2:	eef0 0a67 	vmov.f32	s1, s15
 8010cf6:	f7ff fde3 	bl	80108c0 <Radians>
 8010cfa:	ec53 2b10 	vmov	r2, r3, d0
 8010cfe:	4620      	mov	r0, r4
 8010d00:	4629      	mov	r1, r5
 8010d02:	f7ef fad1 	bl	80002a8 <__aeabi_dsub>
 8010d06:	4602      	mov	r2, r0
 8010d08:	460b      	mov	r3, r1
 8010d0a:	ec43 2b17 	vmov	d7, r2, r3
 8010d0e:	ed9f 1b22 	vldr	d1, [pc, #136]	@ 8010d98 <sun_predict+0x488>
 8010d12:	eeb0 0a47 	vmov.f32	s0, s14
 8010d16:	eef0 0a67 	vmov.f32	s1, s15
 8010d1a:	f011 fbe9 	bl	80224f0 <fmod>
 8010d1e:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	double nu = fmod(M+C, 2*M_PI);
 8010d22:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8010d26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8010d2a:	f7ef fabf 	bl	80002ac <__adddf3>
 8010d2e:	4602      	mov	r2, r0
 8010d30:	460b      	mov	r3, r1
 8010d32:	ec43 2b17 	vmov	d7, r2, r3
 8010d36:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8010d98 <sun_predict+0x488>
 8010d3a:	eeb0 0a47 	vmov.f32	s0, s14
 8010d3e:	eef0 0a67 	vmov.f32	s1, s15
 8010d42:	f011 fbd5 	bl	80224f0 <fmod>
 8010d46:	ed87 0b08 	vstr	d0, [r7, #32]
	double R = 1.0000002*(1.0-Sqr(e))/(1.0+e*cos(nu));
 8010d4a:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8010d4e:	f000 fb3b 	bl	80113c8 <Sqr>
 8010d52:	ec53 2b10 	vmov	r2, r3, d0
 8010d56:	f04f 0000 	mov.w	r0, #0
 8010d5a:	4912      	ldr	r1, [pc, #72]	@ (8010da4 <sun_predict+0x494>)
 8010d5c:	f7ef faa4 	bl	80002a8 <__aeabi_dsub>
 8010d60:	4602      	mov	r2, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	e074      	b.n	8010e50 <sun_predict+0x540>
 8010d66:	bf00      	nop
 8010d68:	00000000 	.word	0x00000000
 8010d6c:	40768000 	.word	0x40768000
 8010d70:	6af038e3 	.word	0x6af038e3
 8010d74:	3f3333b9 	.word	0x3f3333b9
 8010d78:	6872b021 	.word	0x6872b021
 8010d7c:	409e3891 	.word	0x409e3891
 8010d80:	47ae147b 	.word	0x47ae147b
 8010d84:	407032e1 	.word	0x407032e1
 8010d88:	d590c0ad 	.word	0xd590c0ad
 8010d8c:	3f739ead 	.word	0x3f739ead
 8010d90:	bea0ba1f 	.word	0xbea0ba1f
 8010d94:	3f774e65 	.word	0x3f774e65
 8010d98:	54442d18 	.word	0x54442d18
 8010d9c:	401921fb 	.word	0x401921fb
 8010da0:	40080000 	.word	0x40080000
 8010da4:	3ff00000 	.word	0x3ff00000
 8010da8:	40000000 	.word	0x40000000
 8010dac:	4142a5e7 	.word	0x4142a5e7
 8010db0:	00000000 	.word	0x00000000
 8010db4:	41426cd6 	.word	0x41426cd6
 8010db8:	00000000 	.word	0x00000000
 8010dbc:	4076d400 	.word	0x4076d400
 8010dc0:	00000000 	.word	0x00000000
 8010dc4:	409db000 	.word	0x409db000
 8010dc8:	00000000 	.word	0x00000000
 8010dcc:	40f51800 	.word	0x40f51800
 8010dd0:	00000000 	.word	0x00000000
 8010dd4:	40e1d5a0 	.word	0x40e1d5a0
 8010dd8:	978d4fdf 	.word	0x978d4fdf
 8010ddc:	40e193e1 	.word	0x40e193e1
 8010de0:	ffeb074a 	.word	0xffeb074a
 8010de4:	4076679c 	.word	0x4076679c
 8010de8:	2f9294c3 	.word	0x2f9294c3
 8010dec:	3ecbaeb2 	.word	0x3ecbaeb2
 8010df0:	30553261 	.word	0x30553261
 8010df4:	3f23a92a 	.word	0x3f23a92a
 8010df8:	9afe1da8 	.word	0x9afe1da8
 8010dfc:	40e19418 	.word	0x40e19418
 8010e00:	99ed7c70 	.word	0x99ed7c70
 8010e04:	40717b25 	.word	0x40717b25
 8010e08:	9b66f933 	.word	0x9b66f933
 8010e0c:	3f33d31b 	.word	0x3f33d31b
 8010e10:	b8863b3a 	.word	0xb8863b3a
 8010e14:	3e80e953 	.word	0x3e80e953
 8010e18:	10540b1a 	.word	0x10540b1a
 8010e1c:	3f05ea4d 	.word	0x3f05ea4d
 8010e20:	43e55d11 	.word	0x43e55d11
 8010e24:	3f91272f 	.word	0x3f91272f
 8010e28:	593e5fb7 	.word	0x593e5fb7
 8010e2c:	3eed5c31 	.word	0x3eed5c31
 8010e30:	6616b54e 	.word	0x6616b54e
 8010e34:	3f739da1 	.word	0x3f739da1
 8010e38:	b05faebc 	.word	0xb05faebc
 8010e3c:	3ffeb61b 	.word	0x3ffeb61b
 8010e40:	eb1c432d 	.word	0xeb1c432d
 8010e44:	3f1a36e2 	.word	0x3f1a36e2
 8010e48:	83621fb0 	.word	0x83621fb0
 8010e4c:	3f949385 	.word	0x3f949385
 8010e50:	4610      	mov	r0, r2
 8010e52:	4619      	mov	r1, r3
 8010e54:	a377      	add	r3, pc, #476	@ (adr r3, 8011034 <sun_predict+0x724>)
 8010e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5a:	f7ef fbdd 	bl	8000618 <__aeabi_dmul>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	460b      	mov	r3, r1
 8010e62:	4614      	mov	r4, r2
 8010e64:	461d      	mov	r5, r3
 8010e66:	ed97 0b08 	vldr	d0, [r7, #32]
 8010e6a:	f011 fde5 	bl	8022a38 <cos>
 8010e6e:	ec51 0b10 	vmov	r0, r1, d0
 8010e72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010e76:	f7ef fbcf 	bl	8000618 <__aeabi_dmul>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	4610      	mov	r0, r2
 8010e80:	4619      	mov	r1, r3
 8010e82:	f04f 0200 	mov.w	r2, #0
 8010e86:	4b6a      	ldr	r3, [pc, #424]	@ (8011030 <sun_predict+0x720>)
 8010e88:	f7ef fa10 	bl	80002ac <__adddf3>
 8010e8c:	4602      	mov	r2, r0
 8010e8e:	460b      	mov	r3, r1
 8010e90:	4620      	mov	r0, r4
 8010e92:	4629      	mov	r1, r5
 8010e94:	f7ef fcea 	bl	800086c <__aeabi_ddiv>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double eps = Radians(23.452294-(0.0130125+(0.00000164-0.000000503*T)*T)*T+0.00256*cos(O));
 8010ea0:	a357      	add	r3, pc, #348	@ (adr r3, 8011000 <sun_predict+0x6f0>)
 8010ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8010eaa:	f7ef fbb5 	bl	8000618 <__aeabi_dmul>
 8010eae:	4602      	mov	r2, r0
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	a155      	add	r1, pc, #340	@ (adr r1, 8011008 <sun_predict+0x6f8>)
 8010eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010eb8:	f7ef f9f6 	bl	80002a8 <__aeabi_dsub>
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	460b      	mov	r3, r1
 8010ec0:	4610      	mov	r0, r2
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010ec8:	f7ef fba6 	bl	8000618 <__aeabi_dmul>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	460b      	mov	r3, r1
 8010ed0:	4610      	mov	r0, r2
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	a34e      	add	r3, pc, #312	@ (adr r3, 8011010 <sun_predict+0x700>)
 8010ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eda:	f7ef f9e7 	bl	80002ac <__adddf3>
 8010ede:	4602      	mov	r2, r0
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	4610      	mov	r0, r2
 8010ee4:	4619      	mov	r1, r3
 8010ee6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010eea:	f7ef fb95 	bl	8000618 <__aeabi_dmul>
 8010eee:	4602      	mov	r2, r0
 8010ef0:	460b      	mov	r3, r1
 8010ef2:	a149      	add	r1, pc, #292	@ (adr r1, 8011018 <sun_predict+0x708>)
 8010ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ef8:	f7ef f9d6 	bl	80002a8 <__aeabi_dsub>
 8010efc:	4602      	mov	r2, r0
 8010efe:	460b      	mov	r3, r1
 8010f00:	4614      	mov	r4, r2
 8010f02:	461d      	mov	r5, r3
 8010f04:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8010f08:	f011 fd96 	bl	8022a38 <cos>
 8010f0c:	ec51 0b10 	vmov	r0, r1, d0
 8010f10:	a343      	add	r3, pc, #268	@ (adr r3, 8011020 <sun_predict+0x710>)
 8010f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f16:	f7ef fb7f 	bl	8000618 <__aeabi_dmul>
 8010f1a:	4602      	mov	r2, r0
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	4620      	mov	r0, r4
 8010f20:	4629      	mov	r1, r5
 8010f22:	f7ef f9c3 	bl	80002ac <__adddf3>
 8010f26:	4602      	mov	r2, r0
 8010f28:	460b      	mov	r3, r1
 8010f2a:	ec43 2b17 	vmov	d7, r2, r3
 8010f2e:	eeb0 0a47 	vmov.f32	s0, s14
 8010f32:	eef0 0a67 	vmov.f32	s1, s15
 8010f36:	f7ff fcc3 	bl	80108c0 <Radians>
 8010f3a:	ed87 0b04 	vstr	d0, [r7, #16]
	R = ASTRONOMICAL_UNIT_KM*R;
 8010f3e:	a33a      	add	r3, pc, #232	@ (adr r3, 8011028 <sun_predict+0x718>)
 8010f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010f48:	f7ef fb66 	bl	8000618 <__aeabi_dmul>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	460b      	mov	r3, r1
 8010f50:	e9c7 2306 	strd	r2, r3, [r7, #24]

	position[0] = R*cos(Lsa);
 8010f54:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8010f58:	f011 fd6e 	bl	8022a38 <cos>
 8010f5c:	ec51 0b10 	vmov	r0, r1, d0
 8010f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010f64:	f7ef fb58 	bl	8000618 <__aeabi_dmul>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	6879      	ldr	r1, [r7, #4]
 8010f6e:	e9c1 2300 	strd	r2, r3, [r1]
	position[1] = R*sin(Lsa)*cos(eps);
 8010f72:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8010f76:	f011 fdbb 	bl	8022af0 <sin>
 8010f7a:	ec51 0b10 	vmov	r0, r1, d0
 8010f7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010f82:	f7ef fb49 	bl	8000618 <__aeabi_dmul>
 8010f86:	4602      	mov	r2, r0
 8010f88:	460b      	mov	r3, r1
 8010f8a:	4690      	mov	r8, r2
 8010f8c:	4699      	mov	r9, r3
 8010f8e:	ed97 0b04 	vldr	d0, [r7, #16]
 8010f92:	f011 fd51 	bl	8022a38 <cos>
 8010f96:	ec51 0b10 	vmov	r0, r1, d0
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f103 0408 	add.w	r4, r3, #8
 8010fa0:	4602      	mov	r2, r0
 8010fa2:	460b      	mov	r3, r1
 8010fa4:	4640      	mov	r0, r8
 8010fa6:	4649      	mov	r1, r9
 8010fa8:	f7ef fb36 	bl	8000618 <__aeabi_dmul>
 8010fac:	4602      	mov	r2, r0
 8010fae:	460b      	mov	r3, r1
 8010fb0:	e9c4 2300 	strd	r2, r3, [r4]
	position[2] = R*sin(Lsa)*sin(eps);
 8010fb4:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8010fb8:	f011 fd9a 	bl	8022af0 <sin>
 8010fbc:	ec51 0b10 	vmov	r0, r1, d0
 8010fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010fc4:	f7ef fb28 	bl	8000618 <__aeabi_dmul>
 8010fc8:	4602      	mov	r2, r0
 8010fca:	460b      	mov	r3, r1
 8010fcc:	4690      	mov	r8, r2
 8010fce:	4699      	mov	r9, r3
 8010fd0:	ed97 0b04 	vldr	d0, [r7, #16]
 8010fd4:	f011 fd8c 	bl	8022af0 <sin>
 8010fd8:	ec51 0b10 	vmov	r0, r1, d0
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f103 0410 	add.w	r4, r3, #16
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	460b      	mov	r3, r1
 8010fe6:	4640      	mov	r0, r8
 8010fe8:	4649      	mov	r1, r9
 8010fea:	f7ef fb15 	bl	8000618 <__aeabi_dmul>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	e9c4 2300 	strd	r2, r3, [r4]
}
 8010ff6:	bf00      	nop
 8010ff8:	3778      	adds	r7, #120	@ 0x78
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8011000:	b29227cf 	.word	0xb29227cf
 8011004:	3ea0e0bc 	.word	0x3ea0e0bc
 8011008:	11ce33aa 	.word	0x11ce33aa
 801100c:	3ebb83bf 	.word	0x3ebb83bf
 8011010:	2f837b4a 	.word	0x2f837b4a
 8011014:	3f8aa64c 	.word	0x3f8aa64c
 8011018:	8a222d51 	.word	0x8a222d51
 801101c:	403773c9 	.word	0x403773c9
 8011020:	88e368f1 	.word	0x88e368f1
 8011024:	3f64f8b5 	.word	0x3f64f8b5
 8011028:	5d61cac1 	.word	0x5d61cac1
 801102c:	41a1d55d 	.word	0x41a1d55d
 8011030:	3ff00000 	.word	0x3ff00000
 8011034:	35afe535 	.word	0x35afe535
 8011038:	3ff00000 	.word	0x3ff00000
 801103c:	00000000 	.word	0x00000000

08011040 <predict_observe_sun>:

void predict_observe_sun(const predict_observer_t *observer, double time, struct predict_observation *obs)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b0aa      	sub	sp, #168	@ 0xa8
 8011044:	af00      	add	r7, sp, #0
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	ed87 0b00 	vstr	d0, [r7]
 801104c:	60b9      	str	r1, [r7, #8]

	// Find sun position
	double solar_vector[3];
	sun_predict(time, solar_vector);
 801104e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011052:	4618      	mov	r0, r3
 8011054:	ed97 0b00 	vldr	d0, [r7]
 8011058:	f7ff fc5a 	bl	8010910 <sun_predict>

	/* Zero vector for initializations */
	double zero_vector[3] = {0,0,0};
 801105c:	f04f 0200 	mov.w	r2, #0
 8011060:	f04f 0300 	mov.w	r3, #0
 8011064:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8011068:	f04f 0200 	mov.w	r2, #0
 801106c:	f04f 0300 	mov.w	r3, #0
 8011070:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8011074:	f04f 0200 	mov.w	r2, #0
 8011078:	f04f 0300 	mov.w	r3, #0
 801107c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	/* Solar observed azimuth and elevation vector  */
	vector_t solar_set;

	geodetic_t geodetic;
	geodetic.lat = observer->latitude;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8011086:	e9c7 2304 	strd	r2, r3, [r7, #16]
	geodetic.lon = observer->longitude;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8011090:	e9c7 2306 	strd	r2, r3, [r7, #24]
	geodetic.alt = observer->altitude / 1000.0;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 801109a:	f04f 0200 	mov.w	r2, #0
 801109e:	4b3c      	ldr	r3, [pc, #240]	@ (8011190 <predict_observe_sun+0x150>)
 80110a0:	f7ef fbe4 	bl	800086c <__aeabi_ddiv>
 80110a4:	4602      	mov	r2, r0
 80110a6:	460b      	mov	r3, r1
 80110a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	geodetic.theta = 0.0;
 80110ac:	f04f 0200 	mov.w	r2, #0
 80110b0:	f04f 0300 	mov.w	r3, #0
 80110b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	double jul_utc = time + JULIAN_TIME_DIFF;
 80110b8:	a331      	add	r3, pc, #196	@ (adr r3, 8011180 <predict_observe_sun+0x140>)
 80110ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80110c2:	f7ef f8f3 	bl	80002ac <__adddf3>
 80110c6:	4602      	mov	r2, r0
 80110c8:	460b      	mov	r3, r1
 80110ca:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	Calculate_Obs(jul_utc, solar_vector, zero_vector, &geodetic, &solar_set);
 80110ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80110d2:	f107 0210 	add.w	r2, r7, #16
 80110d6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80110da:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80110de:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 80110e2:	f000 ff19 	bl	8011f18 <Calculate_Obs>

	double sun_azi = solar_set.x;
 80110e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80110ea:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	double sun_ele = solar_set.y;
 80110ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80110f2:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

	double sun_range = 1.0+((solar_set.z-ASTRONOMICAL_UNIT_KM)/ASTRONOMICAL_UNIT_KM);
 80110f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80110fa:	a323      	add	r3, pc, #140	@ (adr r3, 8011188 <predict_observe_sun+0x148>)
 80110fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011100:	f7ef f8d2 	bl	80002a8 <__aeabi_dsub>
 8011104:	4602      	mov	r2, r0
 8011106:	460b      	mov	r3, r1
 8011108:	4610      	mov	r0, r2
 801110a:	4619      	mov	r1, r3
 801110c:	a31e      	add	r3, pc, #120	@ (adr r3, 8011188 <predict_observe_sun+0x148>)
 801110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011112:	f7ef fbab 	bl	800086c <__aeabi_ddiv>
 8011116:	4602      	mov	r2, r0
 8011118:	460b      	mov	r3, r1
 801111a:	4610      	mov	r0, r2
 801111c:	4619      	mov	r1, r3
 801111e:	f04f 0200 	mov.w	r2, #0
 8011122:	4b1c      	ldr	r3, [pc, #112]	@ (8011194 <predict_observe_sun+0x154>)
 8011124:	f7ef f8c2 	bl	80002ac <__adddf3>
 8011128:	4602      	mov	r2, r0
 801112a:	460b      	mov	r3, r1
 801112c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	double sun_range_rate = 1000.0*solar_set.w;
 8011130:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8011134:	f04f 0200 	mov.w	r2, #0
 8011138:	4b15      	ldr	r3, [pc, #84]	@ (8011190 <predict_observe_sun+0x150>)
 801113a:	f7ef fa6d 	bl	8000618 <__aeabi_dmul>
 801113e:	4602      	mov	r2, r0
 8011140:	460b      	mov	r3, r1
 8011142:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	obs->time = time;
 8011146:	68b9      	ldr	r1, [r7, #8]
 8011148:	e9d7 2300 	ldrd	r2, r3, [r7]
 801114c:	e9c1 2300 	strd	r2, r3, [r1]
	obs->azimuth = sun_azi;
 8011150:	68b9      	ldr	r1, [r7, #8]
 8011152:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8011156:	e9c1 2302 	strd	r2, r3, [r1, #8]
	obs->elevation = sun_ele;
 801115a:	68b9      	ldr	r1, [r7, #8]
 801115c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8011160:	e9c1 2306 	strd	r2, r3, [r1, #24]
	obs->range = sun_range;
 8011164:	68b9      	ldr	r1, [r7, #8]
 8011166:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 801116a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	obs->range_rate = sun_range_rate;
 801116e:	68b9      	ldr	r1, [r7, #8]
 8011170:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8011174:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8011178:	bf00      	nop
 801117a:	37a8      	adds	r7, #168	@ 0xa8
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}
 8011180:	40000000 	.word	0x40000000
 8011184:	4142a5e7 	.word	0x4142a5e7
 8011188:	5d61cac1 	.word	0x5d61cac1
 801118c:	41a1d55d 	.word	0x41a1d55d
 8011190:	408f4000 	.word	0x408f4000
 8011194:	3ff00000 	.word	0x3ff00000

08011198 <vec3_set>:
#include "unsorted.h"

#include "defs.h"

void vec3_set(double v[3], double x, double y, double z)
{
 8011198:	b480      	push	{r7}
 801119a:	b089      	sub	sp, #36	@ 0x24
 801119c:	af00      	add	r7, sp, #0
 801119e:	61f8      	str	r0, [r7, #28]
 80111a0:	ed87 0b04 	vstr	d0, [r7, #16]
 80111a4:	ed87 1b02 	vstr	d1, [r7, #8]
 80111a8:	ed87 2b00 	vstr	d2, [r7]
	v[0] = x;
 80111ac:	69f9      	ldr	r1, [r7, #28]
 80111ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80111b2:	e9c1 2300 	strd	r2, r3, [r1]
	v[1] = y;
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	f103 0108 	add.w	r1, r3, #8
 80111bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80111c0:	e9c1 2300 	strd	r2, r3, [r1]
	v[2] = z;
 80111c4:	69fb      	ldr	r3, [r7, #28]
 80111c6:	f103 0110 	add.w	r1, r3, #16
 80111ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80111ce:	e9c1 2300 	strd	r2, r3, [r1]
}
 80111d2:	bf00      	nop
 80111d4:	3724      	adds	r7, #36	@ 0x24
 80111d6:	46bd      	mov	sp, r7
 80111d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111dc:	4770      	bx	lr

080111de <vec3_length>:

double vec3_length(const double v[3])
{
 80111de:	b5b0      	push	{r4, r5, r7, lr}
 80111e0:	b082      	sub	sp, #8
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	6078      	str	r0, [r7, #4]
	return sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f2:	f7ef fa11 	bl	8000618 <__aeabi_dmul>
 80111f6:	4602      	mov	r2, r0
 80111f8:	460b      	mov	r3, r1
 80111fa:	4614      	mov	r4, r2
 80111fc:	461d      	mov	r5, r3
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	3308      	adds	r3, #8
 8011202:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	3308      	adds	r3, #8
 801120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120e:	f7ef fa03 	bl	8000618 <__aeabi_dmul>
 8011212:	4602      	mov	r2, r0
 8011214:	460b      	mov	r3, r1
 8011216:	4620      	mov	r0, r4
 8011218:	4629      	mov	r1, r5
 801121a:	f7ef f847 	bl	80002ac <__adddf3>
 801121e:	4602      	mov	r2, r0
 8011220:	460b      	mov	r3, r1
 8011222:	4614      	mov	r4, r2
 8011224:	461d      	mov	r5, r3
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	3310      	adds	r3, #16
 801122a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	3310      	adds	r3, #16
 8011232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011236:	f7ef f9ef 	bl	8000618 <__aeabi_dmul>
 801123a:	4602      	mov	r2, r0
 801123c:	460b      	mov	r3, r1
 801123e:	4620      	mov	r0, r4
 8011240:	4629      	mov	r1, r5
 8011242:	f7ef f833 	bl	80002ac <__adddf3>
 8011246:	4602      	mov	r2, r0
 8011248:	460b      	mov	r3, r1
 801124a:	ec43 2b17 	vmov	d7, r2, r3
 801124e:	eeb0 0a47 	vmov.f32	s0, s14
 8011252:	eef0 0a67 	vmov.f32	s1, s15
 8011256:	f011 fa29 	bl	80226ac <sqrt>
 801125a:	eeb0 7a40 	vmov.f32	s14, s0
 801125e:	eef0 7a60 	vmov.f32	s15, s1
}
 8011262:	eeb0 0a47 	vmov.f32	s0, s14
 8011266:	eef0 0a67 	vmov.f32	s1, s15
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bdb0      	pop	{r4, r5, r7, pc}

08011270 <vec3_dot>:

double vec3_dot(const double v[3], const double u[3])
{
 8011270:	b5b0      	push	{r4, r5, r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]
	return (v[0]*u[0] + v[1]*u[1] + v[2]*u[2]);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011286:	f7ef f9c7 	bl	8000618 <__aeabi_dmul>
 801128a:	4602      	mov	r2, r0
 801128c:	460b      	mov	r3, r1
 801128e:	4614      	mov	r4, r2
 8011290:	461d      	mov	r5, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	3308      	adds	r3, #8
 8011296:	e9d3 0100 	ldrd	r0, r1, [r3]
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	3308      	adds	r3, #8
 801129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a2:	f7ef f9b9 	bl	8000618 <__aeabi_dmul>
 80112a6:	4602      	mov	r2, r0
 80112a8:	460b      	mov	r3, r1
 80112aa:	4620      	mov	r0, r4
 80112ac:	4629      	mov	r1, r5
 80112ae:	f7ee fffd 	bl	80002ac <__adddf3>
 80112b2:	4602      	mov	r2, r0
 80112b4:	460b      	mov	r3, r1
 80112b6:	4614      	mov	r4, r2
 80112b8:	461d      	mov	r5, r3
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	3310      	adds	r3, #16
 80112be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	3310      	adds	r3, #16
 80112c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ca:	f7ef f9a5 	bl	8000618 <__aeabi_dmul>
 80112ce:	4602      	mov	r2, r0
 80112d0:	460b      	mov	r3, r1
 80112d2:	4620      	mov	r0, r4
 80112d4:	4629      	mov	r1, r5
 80112d6:	f7ee ffe9 	bl	80002ac <__adddf3>
 80112da:	4602      	mov	r2, r0
 80112dc:	460b      	mov	r3, r1
 80112de:	ec43 2b17 	vmov	d7, r2, r3
}
 80112e2:	eeb0 0a47 	vmov.f32	s0, s14
 80112e6:	eef0 0a67 	vmov.f32	s1, s15
 80112ea:	3708      	adds	r7, #8
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bdb0      	pop	{r4, r5, r7, pc}

080112f0 <vec3_mul_scalar>:

void vec3_mul_scalar(const double v[3], double a, double r[3])
{
 80112f0:	b590      	push	{r4, r7, lr}
 80112f2:	b085      	sub	sp, #20
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	ed87 0b00 	vstr	d0, [r7]
 80112fc:	60b9      	str	r1, [r7, #8]
	r[0] = v[0]*a;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011308:	f7ef f986 	bl	8000618 <__aeabi_dmul>
 801130c:	4602      	mov	r2, r0
 801130e:	460b      	mov	r3, r1
 8011310:	68b9      	ldr	r1, [r7, #8]
 8011312:	e9c1 2300 	strd	r2, r3, [r1]
	r[1] = v[1]*a;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	3308      	adds	r3, #8
 801131a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	f103 0408 	add.w	r4, r3, #8
 8011324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011328:	f7ef f976 	bl	8000618 <__aeabi_dmul>
 801132c:	4602      	mov	r2, r0
 801132e:	460b      	mov	r3, r1
 8011330:	e9c4 2300 	strd	r2, r3, [r4]
	r[2] = v[2]*a;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	3310      	adds	r3, #16
 8011338:	e9d3 0100 	ldrd	r0, r1, [r3]
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	f103 0410 	add.w	r4, r3, #16
 8011342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011346:	f7ef f967 	bl	8000618 <__aeabi_dmul>
 801134a:	4602      	mov	r2, r0
 801134c:	460b      	mov	r3, r1
 801134e:	e9c4 2300 	strd	r2, r3, [r4]
}
 8011352:	bf00      	nop
 8011354:	3714      	adds	r7, #20
 8011356:	46bd      	mov	sp, r7
 8011358:	bd90      	pop	{r4, r7, pc}

0801135a <vec3_sub>:

void vec3_sub(const double v1[3], const double v2[3], double *r)
{
 801135a:	b590      	push	{r4, r7, lr}
 801135c:	b085      	sub	sp, #20
 801135e:	af00      	add	r7, sp, #0
 8011360:	60f8      	str	r0, [r7, #12]
 8011362:	60b9      	str	r1, [r7, #8]
 8011364:	607a      	str	r2, [r7, #4]
	r[0] = v1[0] - v2[0];
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	e9d3 0100 	ldrd	r0, r1, [r3]
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011372:	f7ee ff99 	bl	80002a8 <__aeabi_dsub>
 8011376:	4602      	mov	r2, r0
 8011378:	460b      	mov	r3, r1
 801137a:	6879      	ldr	r1, [r7, #4]
 801137c:	e9c1 2300 	strd	r2, r3, [r1]
	r[1] = v1[1] - v2[1];
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	3308      	adds	r3, #8
 8011384:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	3308      	adds	r3, #8
 801138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011390:	687c      	ldr	r4, [r7, #4]
 8011392:	3408      	adds	r4, #8
 8011394:	f7ee ff88 	bl	80002a8 <__aeabi_dsub>
 8011398:	4602      	mov	r2, r0
 801139a:	460b      	mov	r3, r1
 801139c:	e9c4 2300 	strd	r2, r3, [r4]
	r[2] = v1[2] - v2[2];
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	3310      	adds	r3, #16
 80113a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	3310      	adds	r3, #16
 80113ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b0:	687c      	ldr	r4, [r7, #4]
 80113b2:	3410      	adds	r4, #16
 80113b4:	f7ee ff78 	bl	80002a8 <__aeabi_dsub>
 80113b8:	4602      	mov	r2, r0
 80113ba:	460b      	mov	r3, r1
 80113bc:	e9c4 2300 	strd	r2, r3, [r4]
}
 80113c0:	bf00      	nop
 80113c2:	3714      	adds	r7, #20
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd90      	pop	{r4, r7, pc}

080113c8 <Sqr>:

double Sqr(double arg)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	ed87 0b00 	vstr	d0, [r7]
	/* Returns square of a double */
	return (arg*arg);
 80113d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80113d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80113da:	f7ef f91d 	bl	8000618 <__aeabi_dmul>
 80113de:	4602      	mov	r2, r0
 80113e0:	460b      	mov	r3, r1
 80113e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80113e6:	eeb0 0a47 	vmov.f32	s0, s14
 80113ea:	eef0 0a67 	vmov.f32	s1, s15
 80113ee:	3708      	adds	r7, #8
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	0000      	movs	r0, r0
	...

080113f8 <FMod2p>:

double FMod2p(double x)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	ed87 0b00 	vstr	d0, [r7]
	/* Returns mod 2PI of argument */

	double ret_val = fmod(x, 2*M_PI);
 8011402:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8011458 <FMod2p+0x60>
 8011406:	ed97 0b00 	vldr	d0, [r7]
 801140a:	f011 f871 	bl	80224f0 <fmod>
 801140e:	ed87 0b02 	vstr	d0, [r7, #8]

	if (ret_val < 0.0)
 8011412:	f04f 0200 	mov.w	r2, #0
 8011416:	f04f 0300 	mov.w	r3, #0
 801141a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801141e:	f7ef fb6d 	bl	8000afc <__aeabi_dcmplt>
 8011422:	4603      	mov	r3, r0
 8011424:	2b00      	cmp	r3, #0
 8011426:	d00a      	beq.n	801143e <FMod2p+0x46>
		ret_val += (2*M_PI);
 8011428:	a30b      	add	r3, pc, #44	@ (adr r3, 8011458 <FMod2p+0x60>)
 801142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011432:	f7ee ff3b 	bl	80002ac <__adddf3>
 8011436:	4602      	mov	r2, r0
 8011438:	460b      	mov	r3, r1
 801143a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return ret_val;
 801143e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011442:	ec43 2b17 	vmov	d7, r2, r3
}
 8011446:	eeb0 0a47 	vmov.f32	s0, s14
 801144a:	eef0 0a67 	vmov.f32	s1, s15
 801144e:	3710      	adds	r7, #16
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	f3af 8000 	nop.w
 8011458:	54442d18 	.word	0x54442d18
 801145c:	401921fb 	.word	0x401921fb

08011460 <Convert_Sat_State>:

void Convert_Sat_State(double pos[3], double vel[3])
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
	/* Converts the satellite's position and velocity  */
	/* vectors from normalized values to km and km/sec */ 

	vec3_mul_scalar(pos, EARTH_RADIUS_KM_WGS84, pos);
 801146a:	6879      	ldr	r1, [r7, #4]
 801146c:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8011490 <Convert_Sat_State+0x30>
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f7ff ff3d 	bl	80112f0 <vec3_mul_scalar>
	vec3_mul_scalar(vel, EARTH_RADIUS_KM_WGS84*MINUTES_PER_DAY/SECONDS_PER_DAY, vel);
 8011476:	6839      	ldr	r1, [r7, #0]
 8011478:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8011498 <Convert_Sat_State+0x38>
 801147c:	6838      	ldr	r0, [r7, #0]
 801147e:	f7ff ff37 	bl	80112f0 <vec3_mul_scalar>
}
 8011482:	bf00      	nop
 8011484:	3708      	adds	r7, #8
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	f3af 8000 	nop.w
 8011490:	126e978d 	.word	0x126e978d
 8011494:	40b8ea23 	.word	0x40b8ea23
 8011498:	9c31b2b8 	.word	0x9c31b2b8
 801149c:	405a9358 	.word	0x405a9358

080114a0 <Julian_Date_of_Year>:

double Julian_Date_of_Year(double year)
{
 80114a0:	b5b0      	push	{r4, r5, r7, lr}
 80114a2:	b088      	sub	sp, #32
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	ed87 0b00 	vstr	d0, [r7]
	/* pages 23-25. Calculate Julian Date of 0.0 Jan year */

	long A, B, i;
	double jdoy;

	year=year-1;
 80114aa:	f04f 0200 	mov.w	r2, #0
 80114ae:	4b3a      	ldr	r3, [pc, #232]	@ (8011598 <Julian_Date_of_Year+0xf8>)
 80114b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80114b4:	f7ee fef8 	bl	80002a8 <__aeabi_dsub>
 80114b8:	4602      	mov	r2, r0
 80114ba:	460b      	mov	r3, r1
 80114bc:	e9c7 2300 	strd	r2, r3, [r7]
	i=year/100;
 80114c0:	f04f 0200 	mov.w	r2, #0
 80114c4:	4b35      	ldr	r3, [pc, #212]	@ (801159c <Julian_Date_of_Year+0xfc>)
 80114c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80114ca:	f7ef f9cf 	bl	800086c <__aeabi_ddiv>
 80114ce:	4602      	mov	r2, r0
 80114d0:	460b      	mov	r3, r1
 80114d2:	4610      	mov	r0, r2
 80114d4:	4619      	mov	r1, r3
 80114d6:	f7ef fb4f 	bl	8000b78 <__aeabi_d2iz>
 80114da:	4603      	mov	r3, r0
 80114dc:	61fb      	str	r3, [r7, #28]
	A=i;
 80114de:	69fb      	ldr	r3, [r7, #28]
 80114e0:	61bb      	str	r3, [r7, #24]
	i=A/4;
 80114e2:	69bb      	ldr	r3, [r7, #24]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	da00      	bge.n	80114ea <Julian_Date_of_Year+0x4a>
 80114e8:	3303      	adds	r3, #3
 80114ea:	109b      	asrs	r3, r3, #2
 80114ec:	61fb      	str	r3, [r7, #28]
	B=2-A+i;
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	f1c3 0302 	rsb	r3, r3, #2
 80114f4:	69fa      	ldr	r2, [r7, #28]
 80114f6:	4413      	add	r3, r2
 80114f8:	617b      	str	r3, [r7, #20]
	i=365.25*year;
 80114fa:	a321      	add	r3, pc, #132	@ (adr r3, 8011580 <Julian_Date_of_Year+0xe0>)
 80114fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011504:	f7ef f888 	bl	8000618 <__aeabi_dmul>
 8011508:	4602      	mov	r2, r0
 801150a:	460b      	mov	r3, r1
 801150c:	4610      	mov	r0, r2
 801150e:	4619      	mov	r1, r3
 8011510:	f7ef fb32 	bl	8000b78 <__aeabi_d2iz>
 8011514:	4603      	mov	r3, r0
 8011516:	61fb      	str	r3, [r7, #28]
	i+=30.6001*14;
 8011518:	69f8      	ldr	r0, [r7, #28]
 801151a:	f7ef f813 	bl	8000544 <__aeabi_i2d>
 801151e:	a31a      	add	r3, pc, #104	@ (adr r3, 8011588 <Julian_Date_of_Year+0xe8>)
 8011520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011524:	f7ee fec2 	bl	80002ac <__adddf3>
 8011528:	4602      	mov	r2, r0
 801152a:	460b      	mov	r3, r1
 801152c:	4610      	mov	r0, r2
 801152e:	4619      	mov	r1, r3
 8011530:	f7ef fb22 	bl	8000b78 <__aeabi_d2iz>
 8011534:	4603      	mov	r3, r0
 8011536:	61fb      	str	r3, [r7, #28]
	jdoy=i+1720994.5+B;
 8011538:	69f8      	ldr	r0, [r7, #28]
 801153a:	f7ef f803 	bl	8000544 <__aeabi_i2d>
 801153e:	a314      	add	r3, pc, #80	@ (adr r3, 8011590 <Julian_Date_of_Year+0xf0>)
 8011540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011544:	f7ee feb2 	bl	80002ac <__adddf3>
 8011548:	4602      	mov	r2, r0
 801154a:	460b      	mov	r3, r1
 801154c:	4614      	mov	r4, r2
 801154e:	461d      	mov	r5, r3
 8011550:	6978      	ldr	r0, [r7, #20]
 8011552:	f7ee fff7 	bl	8000544 <__aeabi_i2d>
 8011556:	4602      	mov	r2, r0
 8011558:	460b      	mov	r3, r1
 801155a:	4620      	mov	r0, r4
 801155c:	4629      	mov	r1, r5
 801155e:	f7ee fea5 	bl	80002ac <__adddf3>
 8011562:	4602      	mov	r2, r0
 8011564:	460b      	mov	r3, r1
 8011566:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return jdoy;
 801156a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801156e:	ec43 2b17 	vmov	d7, r2, r3
}
 8011572:	eeb0 0a47 	vmov.f32	s0, s14
 8011576:	eef0 0a67 	vmov.f32	s1, s15
 801157a:	3720      	adds	r7, #32
 801157c:	46bd      	mov	sp, r7
 801157e:	bdb0      	pop	{r4, r5, r7, pc}
 8011580:	00000000 	.word	0x00000000
 8011584:	4076d400 	.word	0x4076d400
 8011588:	226809d5 	.word	0x226809d5
 801158c:	407ac66c 	.word	0x407ac66c
 8011590:	80000000 	.word	0x80000000
 8011594:	413a42a2 	.word	0x413a42a2
 8011598:	3ff00000 	.word	0x3ff00000
 801159c:	40590000 	.word	0x40590000

080115a0 <Julian_Date_of_Epoch>:

double Julian_Date_of_Epoch(double epoch)
{ 
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b086      	sub	sp, #24
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	ed87 0b00 	vstr	d0, [r7]
	double year, day;

	/* Modification to support Y2K */
	/* Valid 1957 through 2056     */

	day=modf(epoch*1E-3, &year)*1E3;
 80115aa:	a332      	add	r3, pc, #200	@ (adr r3, 8011674 <Julian_Date_of_Epoch+0xd4>)
 80115ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80115b4:	f7ef f830 	bl	8000618 <__aeabi_dmul>
 80115b8:	4602      	mov	r2, r0
 80115ba:	460b      	mov	r3, r1
 80115bc:	ec43 2b17 	vmov	d7, r2, r3
 80115c0:	f107 0308 	add.w	r3, r7, #8
 80115c4:	4618      	mov	r0, r3
 80115c6:	eeb0 0a47 	vmov.f32	s0, s14
 80115ca:	eef0 0a67 	vmov.f32	s1, s15
 80115ce:	f00d fe19 	bl	801f204 <modf>
 80115d2:	ec51 0b10 	vmov	r0, r1, d0
 80115d6:	f04f 0200 	mov.w	r2, #0
 80115da:	4b23      	ldr	r3, [pc, #140]	@ (8011668 <Julian_Date_of_Epoch+0xc8>)
 80115dc:	f7ef f81c 	bl	8000618 <__aeabi_dmul>
 80115e0:	4602      	mov	r2, r0
 80115e2:	460b      	mov	r3, r1
 80115e4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (year<57)
 80115e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80115ec:	f04f 0200 	mov.w	r2, #0
 80115f0:	4b1e      	ldr	r3, [pc, #120]	@ (801166c <Julian_Date_of_Epoch+0xcc>)
 80115f2:	f7ef fa83 	bl	8000afc <__aeabi_dcmplt>
 80115f6:	4603      	mov	r3, r0
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d00b      	beq.n	8011614 <Julian_Date_of_Epoch+0x74>
		year=year+2000;
 80115fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011600:	f04f 0200 	mov.w	r2, #0
 8011604:	4b1a      	ldr	r3, [pc, #104]	@ (8011670 <Julian_Date_of_Epoch+0xd0>)
 8011606:	f7ee fe51 	bl	80002ac <__adddf3>
 801160a:	4602      	mov	r2, r0
 801160c:	460b      	mov	r3, r1
 801160e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8011612:	e00a      	b.n	801162a <Julian_Date_of_Epoch+0x8a>
	else
		year=year+1900;
 8011614:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011618:	a311      	add	r3, pc, #68	@ (adr r3, 8011660 <Julian_Date_of_Epoch+0xc0>)
 801161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161e:	f7ee fe45 	bl	80002ac <__adddf3>
 8011622:	4602      	mov	r2, r0
 8011624:	460b      	mov	r3, r1
 8011626:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return (Julian_Date_of_Year(year)+day);
 801162a:	ed97 7b02 	vldr	d7, [r7, #8]
 801162e:	eeb0 0a47 	vmov.f32	s0, s14
 8011632:	eef0 0a67 	vmov.f32	s1, s15
 8011636:	f7ff ff33 	bl	80114a0 <Julian_Date_of_Year>
 801163a:	ec51 0b10 	vmov	r0, r1, d0
 801163e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011642:	f7ee fe33 	bl	80002ac <__adddf3>
 8011646:	4602      	mov	r2, r0
 8011648:	460b      	mov	r3, r1
 801164a:	ec43 2b17 	vmov	d7, r2, r3
}
 801164e:	eeb0 0a47 	vmov.f32	s0, s14
 8011652:	eef0 0a67 	vmov.f32	s1, s15
 8011656:	3718      	adds	r7, #24
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}
 801165c:	f3af 8000 	nop.w
 8011660:	00000000 	.word	0x00000000
 8011664:	409db000 	.word	0x409db000
 8011668:	408f4000 	.word	0x408f4000
 801166c:	404c8000 	.word	0x404c8000
 8011670:	409f4000 	.word	0x409f4000
 8011674:	d2f1a9fc 	.word	0xd2f1a9fc
 8011678:	3f50624d 	.word	0x3f50624d
 801167c:	00000000 	.word	0x00000000

08011680 <ThetaG_JD>:

double ThetaG_JD(double jd)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b08a      	sub	sp, #40	@ 0x28
 8011684:	af00      	add	r7, sp, #0
 8011686:	ed87 0b00 	vstr	d0, [r7]
	/* Reference:  The 1992 Astronomical Almanac, page B6. */

	double UT, TU, GMST;

	double dummy;
	UT=modf(jd+0.5, &dummy);
 801168a:	f04f 0200 	mov.w	r2, #0
 801168e:	4b62      	ldr	r3, [pc, #392]	@ (8011818 <ThetaG_JD+0x198>)
 8011690:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011694:	f7ee fe0a 	bl	80002ac <__adddf3>
 8011698:	4602      	mov	r2, r0
 801169a:	460b      	mov	r3, r1
 801169c:	ec43 2b17 	vmov	d7, r2, r3
 80116a0:	f107 0308 	add.w	r3, r7, #8
 80116a4:	4618      	mov	r0, r3
 80116a6:	eeb0 0a47 	vmov.f32	s0, s14
 80116aa:	eef0 0a67 	vmov.f32	s1, s15
 80116ae:	f00d fda9 	bl	801f204 <modf>
 80116b2:	ed87 0b08 	vstr	d0, [r7, #32]
	jd = jd - UT;
 80116b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80116ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80116be:	f7ee fdf3 	bl	80002a8 <__aeabi_dsub>
 80116c2:	4602      	mov	r2, r0
 80116c4:	460b      	mov	r3, r1
 80116c6:	e9c7 2300 	strd	r2, r3, [r7]
	TU=(jd-2451545.0)/36525;
 80116ca:	a341      	add	r3, pc, #260	@ (adr r3, 80117d0 <ThetaG_JD+0x150>)
 80116cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80116d4:	f7ee fde8 	bl	80002a8 <__aeabi_dsub>
 80116d8:	4602      	mov	r2, r0
 80116da:	460b      	mov	r3, r1
 80116dc:	4610      	mov	r0, r2
 80116de:	4619      	mov	r1, r3
 80116e0:	a33d      	add	r3, pc, #244	@ (adr r3, 80117d8 <ThetaG_JD+0x158>)
 80116e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e6:	f7ef f8c1 	bl	800086c <__aeabi_ddiv>
 80116ea:	4602      	mov	r2, r0
 80116ec:	460b      	mov	r3, r1
 80116ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	GMST=24110.54841+TU*(8640184.812866+TU*(0.093104-TU*6.2E-6));
 80116f2:	a33b      	add	r3, pc, #236	@ (adr r3, 80117e0 <ThetaG_JD+0x160>)
 80116f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80116fc:	f7ee ff8c 	bl	8000618 <__aeabi_dmul>
 8011700:	4602      	mov	r2, r0
 8011702:	460b      	mov	r3, r1
 8011704:	a138      	add	r1, pc, #224	@ (adr r1, 80117e8 <ThetaG_JD+0x168>)
 8011706:	e9d1 0100 	ldrd	r0, r1, [r1]
 801170a:	f7ee fdcd 	bl	80002a8 <__aeabi_dsub>
 801170e:	4602      	mov	r2, r0
 8011710:	460b      	mov	r3, r1
 8011712:	4610      	mov	r0, r2
 8011714:	4619      	mov	r1, r3
 8011716:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801171a:	f7ee ff7d 	bl	8000618 <__aeabi_dmul>
 801171e:	4602      	mov	r2, r0
 8011720:	460b      	mov	r3, r1
 8011722:	4610      	mov	r0, r2
 8011724:	4619      	mov	r1, r3
 8011726:	a332      	add	r3, pc, #200	@ (adr r3, 80117f0 <ThetaG_JD+0x170>)
 8011728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172c:	f7ee fdbe 	bl	80002ac <__adddf3>
 8011730:	4602      	mov	r2, r0
 8011732:	460b      	mov	r3, r1
 8011734:	4610      	mov	r0, r2
 8011736:	4619      	mov	r1, r3
 8011738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801173c:	f7ee ff6c 	bl	8000618 <__aeabi_dmul>
 8011740:	4602      	mov	r2, r0
 8011742:	460b      	mov	r3, r1
 8011744:	4610      	mov	r0, r2
 8011746:	4619      	mov	r1, r3
 8011748:	a32b      	add	r3, pc, #172	@ (adr r3, 80117f8 <ThetaG_JD+0x178>)
 801174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174e:	f7ee fdad 	bl	80002ac <__adddf3>
 8011752:	4602      	mov	r2, r0
 8011754:	460b      	mov	r3, r1
 8011756:	e9c7 2304 	strd	r2, r3, [r7, #16]
	GMST=fmod(GMST+SECONDS_PER_DAY*EARTH_ROTATIONS_PER_SIDERIAL_DAY*UT,SECONDS_PER_DAY);
 801175a:	a329      	add	r3, pc, #164	@ (adr r3, 8011800 <ThetaG_JD+0x180>)
 801175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011760:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011764:	f7ee ff58 	bl	8000618 <__aeabi_dmul>
 8011768:	4602      	mov	r2, r0
 801176a:	460b      	mov	r3, r1
 801176c:	4610      	mov	r0, r2
 801176e:	4619      	mov	r1, r3
 8011770:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011774:	f7ee fd9a 	bl	80002ac <__adddf3>
 8011778:	4602      	mov	r2, r0
 801177a:	460b      	mov	r3, r1
 801177c:	ec43 2b17 	vmov	d7, r2, r3
 8011780:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011808 <ThetaG_JD+0x188>
 8011784:	eeb0 0a47 	vmov.f32	s0, s14
 8011788:	eef0 0a67 	vmov.f32	s1, s15
 801178c:	f010 feb0 	bl	80224f0 <fmod>
 8011790:	ed87 0b04 	vstr	d0, [r7, #16]

	return (2*M_PI*GMST/SECONDS_PER_DAY);
 8011794:	a31e      	add	r3, pc, #120	@ (adr r3, 8011810 <ThetaG_JD+0x190>)
 8011796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801179e:	f7ee ff3b 	bl	8000618 <__aeabi_dmul>
 80117a2:	4602      	mov	r2, r0
 80117a4:	460b      	mov	r3, r1
 80117a6:	4610      	mov	r0, r2
 80117a8:	4619      	mov	r1, r3
 80117aa:	a317      	add	r3, pc, #92	@ (adr r3, 8011808 <ThetaG_JD+0x188>)
 80117ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b0:	f7ef f85c 	bl	800086c <__aeabi_ddiv>
 80117b4:	4602      	mov	r2, r0
 80117b6:	460b      	mov	r3, r1
 80117b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80117bc:	eeb0 0a47 	vmov.f32	s0, s14
 80117c0:	eef0 0a67 	vmov.f32	s1, s15
 80117c4:	3728      	adds	r7, #40	@ 0x28
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
 80117ca:	bf00      	nop
 80117cc:	f3af 8000 	nop.w
 80117d0:	80000000 	.word	0x80000000
 80117d4:	4142b42c 	.word	0x4142b42c
 80117d8:	00000000 	.word	0x00000000
 80117dc:	40e1d5a0 	.word	0x40e1d5a0
 80117e0:	05e6c9ce 	.word	0x05e6c9ce
 80117e4:	3eda0133 	.word	0x3eda0133
 80117e8:	eb2074eb 	.word	0xeb2074eb
 80117ec:	3fb7d5a9 	.word	0x3fb7d5a9
 80117f0:	1a02ff8f 	.word	0x1a02ff8f
 80117f4:	41607ad7 	.word	0x41607ad7
 80117f8:	192641b3 	.word	0x192641b3
 80117fc:	40d78ba3 	.word	0x40d78ba3
 8011800:	e2c87b73 	.word	0xe2c87b73
 8011804:	40f526c8 	.word	0x40f526c8
 8011808:	00000000 	.word	0x00000000
 801180c:	40f51800 	.word	0x40f51800
 8011810:	54442d18 	.word	0x54442d18
 8011814:	401921fb 	.word	0x401921fb
 8011818:	3fe00000 	.word	0x3fe00000
 801181c:	00000000 	.word	0x00000000

08011820 <Calculate_User_PosVel>:

void Calculate_User_PosVel(double time, geodetic_t *geodetic, double obs_pos[3], double obs_vel[3])
{
 8011820:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8011824:	b08c      	sub	sp, #48	@ 0x30
 8011826:	af00      	add	r7, sp, #0
 8011828:	ed87 0b04 	vstr	d0, [r7, #16]
 801182c:	60f8      	str	r0, [r7, #12]
 801182e:	60b9      	str	r1, [r7, #8]
 8011830:	607a      	str	r2, [r7, #4]

	/* Reference:  The 1992 Astronomical Almanac, page K11. */

	double c, sq, achcp;

	geodetic->theta=FMod2p(ThetaG_JD(time)+geodetic->lon); /* LMST */
 8011832:	ed97 0b04 	vldr	d0, [r7, #16]
 8011836:	f7ff ff23 	bl	8011680 <ThetaG_JD>
 801183a:	ec51 0b10 	vmov	r0, r1, d0
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011844:	f7ee fd32 	bl	80002ac <__adddf3>
 8011848:	4602      	mov	r2, r0
 801184a:	460b      	mov	r3, r1
 801184c:	ec43 2b17 	vmov	d7, r2, r3
 8011850:	eeb0 0a47 	vmov.f32	s0, s14
 8011854:	eef0 0a67 	vmov.f32	s1, s15
 8011858:	f7ff fdce 	bl	80113f8 <FMod2p>
 801185c:	eeb0 7a40 	vmov.f32	s14, s0
 8011860:	eef0 7a60 	vmov.f32	s15, s1
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	ed83 7b06 	vstr	d7, [r3, #24]
	c=1/sqrt(1+FLATTENING_FACTOR*(FLATTENING_FACTOR-2)*Sqr(sin(geodetic->lat)));
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	ed93 7b00 	vldr	d7, [r3]
 8011870:	eeb0 0a47 	vmov.f32	s0, s14
 8011874:	eef0 0a67 	vmov.f32	s1, s15
 8011878:	f011 f93a 	bl	8022af0 <sin>
 801187c:	eeb0 7a40 	vmov.f32	s14, s0
 8011880:	eef0 7a60 	vmov.f32	s15, s1
 8011884:	eeb0 0a47 	vmov.f32	s0, s14
 8011888:	eef0 0a67 	vmov.f32	s1, s15
 801188c:	f7ff fd9c 	bl	80113c8 <Sqr>
 8011890:	ec51 0b10 	vmov	r0, r1, d0
 8011894:	a375      	add	r3, pc, #468	@ (adr r3, 8011a6c <Calculate_User_PosVel+0x24c>)
 8011896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801189a:	f7ee febd 	bl	8000618 <__aeabi_dmul>
 801189e:	4602      	mov	r2, r0
 80118a0:	460b      	mov	r3, r1
 80118a2:	4610      	mov	r0, r2
 80118a4:	4619      	mov	r1, r3
 80118a6:	f04f 0200 	mov.w	r2, #0
 80118aa:	4b6f      	ldr	r3, [pc, #444]	@ (8011a68 <Calculate_User_PosVel+0x248>)
 80118ac:	f7ee fcfe 	bl	80002ac <__adddf3>
 80118b0:	4602      	mov	r2, r0
 80118b2:	460b      	mov	r3, r1
 80118b4:	ec43 2b17 	vmov	d7, r2, r3
 80118b8:	eeb0 0a47 	vmov.f32	s0, s14
 80118bc:	eef0 0a67 	vmov.f32	s1, s15
 80118c0:	f010 fef4 	bl	80226ac <sqrt>
 80118c4:	ec53 2b10 	vmov	r2, r3, d0
 80118c8:	f04f 0000 	mov.w	r0, #0
 80118cc:	4966      	ldr	r1, [pc, #408]	@ (8011a68 <Calculate_User_PosVel+0x248>)
 80118ce:	f7ee ffcd 	bl	800086c <__aeabi_ddiv>
 80118d2:	4602      	mov	r2, r0
 80118d4:	460b      	mov	r3, r1
 80118d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	sq=Sqr(1-FLATTENING_FACTOR)*c;
 80118da:	ed9f 0b5b 	vldr	d0, [pc, #364]	@ 8011a48 <Calculate_User_PosVel+0x228>
 80118de:	f7ff fd73 	bl	80113c8 <Sqr>
 80118e2:	ec53 2b10 	vmov	r2, r3, d0
 80118e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80118ea:	f7ee fe95 	bl	8000618 <__aeabi_dmul>
 80118ee:	4602      	mov	r2, r0
 80118f0:	460b      	mov	r3, r1
 80118f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	achcp=(EARTH_RADIUS_KM_WGS84*c+geodetic->alt)*cos(geodetic->lat);
 80118f6:	a356      	add	r3, pc, #344	@ (adr r3, 8011a50 <Calculate_User_PosVel+0x230>)
 80118f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8011900:	f7ee fe8a 	bl	8000618 <__aeabi_dmul>
 8011904:	4602      	mov	r2, r0
 8011906:	460b      	mov	r3, r1
 8011908:	4610      	mov	r0, r2
 801190a:	4619      	mov	r1, r3
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011912:	f7ee fccb 	bl	80002ac <__adddf3>
 8011916:	4602      	mov	r2, r0
 8011918:	460b      	mov	r3, r1
 801191a:	4614      	mov	r4, r2
 801191c:	461d      	mov	r5, r3
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	ed93 7b00 	vldr	d7, [r3]
 8011924:	eeb0 0a47 	vmov.f32	s0, s14
 8011928:	eef0 0a67 	vmov.f32	s1, s15
 801192c:	f011 f884 	bl	8022a38 <cos>
 8011930:	ec53 2b10 	vmov	r2, r3, d0
 8011934:	4620      	mov	r0, r4
 8011936:	4629      	mov	r1, r5
 8011938:	f7ee fe6e 	bl	8000618 <__aeabi_dmul>
 801193c:	4602      	mov	r2, r0
 801193e:	460b      	mov	r3, r1
 8011940:	e9c7 2306 	strd	r2, r3, [r7, #24]
	obs_pos[0] = (achcp*cos(geodetic->theta)); /* kilometers */
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	ed93 7b06 	vldr	d7, [r3, #24]
 801194a:	eeb0 0a47 	vmov.f32	s0, s14
 801194e:	eef0 0a67 	vmov.f32	s1, s15
 8011952:	f011 f871 	bl	8022a38 <cos>
 8011956:	ec51 0b10 	vmov	r0, r1, d0
 801195a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801195e:	f7ee fe5b 	bl	8000618 <__aeabi_dmul>
 8011962:	4602      	mov	r2, r0
 8011964:	460b      	mov	r3, r1
 8011966:	68b9      	ldr	r1, [r7, #8]
 8011968:	e9c1 2300 	strd	r2, r3, [r1]
	obs_pos[1] = (achcp*sin(geodetic->theta));
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	ed93 7b06 	vldr	d7, [r3, #24]
 8011972:	eeb0 0a47 	vmov.f32	s0, s14
 8011976:	eef0 0a67 	vmov.f32	s1, s15
 801197a:	f011 f8b9 	bl	8022af0 <sin>
 801197e:	ec51 0b10 	vmov	r0, r1, d0
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	f103 0408 	add.w	r4, r3, #8
 8011988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801198c:	f7ee fe44 	bl	8000618 <__aeabi_dmul>
 8011990:	4602      	mov	r2, r0
 8011992:	460b      	mov	r3, r1
 8011994:	e9c4 2300 	strd	r2, r3, [r4]
	obs_pos[2] = ((EARTH_RADIUS_KM_WGS84*sq+geodetic->alt)*sin(geodetic->lat));
 8011998:	a32d      	add	r3, pc, #180	@ (adr r3, 8011a50 <Calculate_User_PosVel+0x230>)
 801199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80119a2:	f7ee fe39 	bl	8000618 <__aeabi_dmul>
 80119a6:	4602      	mov	r2, r0
 80119a8:	460b      	mov	r3, r1
 80119aa:	4610      	mov	r0, r2
 80119ac:	4619      	mov	r1, r3
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80119b4:	f7ee fc7a 	bl	80002ac <__adddf3>
 80119b8:	4602      	mov	r2, r0
 80119ba:	460b      	mov	r3, r1
 80119bc:	4690      	mov	r8, r2
 80119be:	4699      	mov	r9, r3
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	ed93 7b00 	vldr	d7, [r3]
 80119c6:	eeb0 0a47 	vmov.f32	s0, s14
 80119ca:	eef0 0a67 	vmov.f32	s1, s15
 80119ce:	f011 f88f 	bl	8022af0 <sin>
 80119d2:	ec51 0b10 	vmov	r0, r1, d0
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	f103 0410 	add.w	r4, r3, #16
 80119dc:	4602      	mov	r2, r0
 80119de:	460b      	mov	r3, r1
 80119e0:	4640      	mov	r0, r8
 80119e2:	4649      	mov	r1, r9
 80119e4:	f7ee fe18 	bl	8000618 <__aeabi_dmul>
 80119e8:	4602      	mov	r2, r0
 80119ea:	460b      	mov	r3, r1
 80119ec:	e9c4 2300 	strd	r2, r3, [r4]
	obs_vel[0] = (-EARTH_ANGULAR_VELOCITY*obs_pos[1]); /* kilometers/second */
 80119f0:	68bb      	ldr	r3, [r7, #8]
 80119f2:	3308      	adds	r3, #8
 80119f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80119f8:	a317      	add	r3, pc, #92	@ (adr r3, 8011a58 <Calculate_User_PosVel+0x238>)
 80119fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119fe:	f7ee fe0b 	bl	8000618 <__aeabi_dmul>
 8011a02:	4602      	mov	r2, r0
 8011a04:	460b      	mov	r3, r1
 8011a06:	6879      	ldr	r1, [r7, #4]
 8011a08:	e9c1 2300 	strd	r2, r3, [r1]
	obs_vel[1] = (EARTH_ANGULAR_VELOCITY*obs_pos[0]);
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f103 0408 	add.w	r4, r3, #8
 8011a18:	a311      	add	r3, pc, #68	@ (adr r3, 8011a60 <Calculate_User_PosVel+0x240>)
 8011a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1e:	f7ee fdfb 	bl	8000618 <__aeabi_dmul>
 8011a22:	4602      	mov	r2, r0
 8011a24:	460b      	mov	r3, r1
 8011a26:	e9c4 2300 	strd	r2, r3, [r4]
	obs_vel[2] = (0);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f103 0110 	add.w	r1, r3, #16
 8011a30:	f04f 0200 	mov.w	r2, #0
 8011a34:	f04f 0300 	mov.w	r3, #0
 8011a38:	e9c1 2300 	strd	r2, r3, [r1]
}
 8011a3c:	bf00      	nop
 8011a3e:	3730      	adds	r7, #48	@ 0x30
 8011a40:	46bd      	mov	sp, r7
 8011a42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8011a46:	bf00      	nop
 8011a48:	a57b0c1f 	.word	0xa57b0c1f
 8011a4c:	3fefe488 	.word	0x3fefe488
 8011a50:	126e978d 	.word	0x126e978d
 8011a54:	40b8ea23 	.word	0x40b8ea23
 8011a58:	d157db65 	.word	0xd157db65
 8011a5c:	bf131da7 	.word	0xbf131da7
 8011a60:	d157db65 	.word	0xd157db65
 8011a64:	3f131da7 	.word	0x3f131da7
 8011a68:	3ff00000 	.word	0x3ff00000
 8011a6c:	f1fe94ef 	.word	0xf1fe94ef
 8011a70:	bf7b6b90 	.word	0xbf7b6b90
 8011a74:	00000000 	.word	0x00000000

08011a78 <DayNum>:

long DayNum(int m, int d, int y)
{
 8011a78:	b5b0      	push	{r4, r5, r7, lr}
 8011a7a:	b08a      	sub	sp, #40	@ 0x28
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	607a      	str	r2, [r7, #4]

	long dn;
	double mm, yy;

	if (m<3) {
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2b02      	cmp	r3, #2
 8011a88:	dc05      	bgt.n	8011a96 <DayNum+0x1e>
		y--;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	3b01      	subs	r3, #1
 8011a8e:	607b      	str	r3, [r7, #4]
		m+=12;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	330c      	adds	r3, #12
 8011a94:	60fb      	str	r3, [r7, #12]
	}

	if (y<57)
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2b38      	cmp	r3, #56	@ 0x38
 8011a9a:	dc02      	bgt.n	8011aa2 <DayNum+0x2a>
		y+=100;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	3364      	adds	r3, #100	@ 0x64
 8011aa0:	607b      	str	r3, [r7, #4]

	yy=(double)y;
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f7ee fd4e 	bl	8000544 <__aeabi_i2d>
 8011aa8:	4602      	mov	r2, r0
 8011aaa:	460b      	mov	r3, r1
 8011aac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	mm=(double)m;
 8011ab0:	68f8      	ldr	r0, [r7, #12]
 8011ab2:	f7ee fd47 	bl	8000544 <__aeabi_i2d>
 8011ab6:	4602      	mov	r2, r0
 8011ab8:	460b      	mov	r3, r1
 8011aba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	dn=(long)(floor(365.25*(yy-80.0))-floor(19.0+yy/100.0)+floor(4.75+yy/400.0)-16.0);
 8011abe:	f04f 0200 	mov.w	r2, #0
 8011ac2:	4b57      	ldr	r3, [pc, #348]	@ (8011c20 <DayNum+0x1a8>)
 8011ac4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011ac8:	f7ee fbee 	bl	80002a8 <__aeabi_dsub>
 8011acc:	4602      	mov	r2, r0
 8011ace:	460b      	mov	r3, r1
 8011ad0:	4610      	mov	r0, r2
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	a34c      	add	r3, pc, #304	@ (adr r3, 8011c08 <DayNum+0x190>)
 8011ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ada:	f7ee fd9d 	bl	8000618 <__aeabi_dmul>
 8011ade:	4602      	mov	r2, r0
 8011ae0:	460b      	mov	r3, r1
 8011ae2:	ec43 2b17 	vmov	d7, r2, r3
 8011ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8011aea:	eef0 0a67 	vmov.f32	s1, s15
 8011aee:	f011 f937 	bl	8022d60 <floor>
 8011af2:	ec55 4b10 	vmov	r4, r5, d0
 8011af6:	f04f 0200 	mov.w	r2, #0
 8011afa:	4b4a      	ldr	r3, [pc, #296]	@ (8011c24 <DayNum+0x1ac>)
 8011afc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011b00:	f7ee feb4 	bl	800086c <__aeabi_ddiv>
 8011b04:	4602      	mov	r2, r0
 8011b06:	460b      	mov	r3, r1
 8011b08:	4610      	mov	r0, r2
 8011b0a:	4619      	mov	r1, r3
 8011b0c:	f04f 0200 	mov.w	r2, #0
 8011b10:	4b45      	ldr	r3, [pc, #276]	@ (8011c28 <DayNum+0x1b0>)
 8011b12:	f7ee fbcb 	bl	80002ac <__adddf3>
 8011b16:	4602      	mov	r2, r0
 8011b18:	460b      	mov	r3, r1
 8011b1a:	ec43 2b17 	vmov	d7, r2, r3
 8011b1e:	eeb0 0a47 	vmov.f32	s0, s14
 8011b22:	eef0 0a67 	vmov.f32	s1, s15
 8011b26:	f011 f91b 	bl	8022d60 <floor>
 8011b2a:	ec53 2b10 	vmov	r2, r3, d0
 8011b2e:	4620      	mov	r0, r4
 8011b30:	4629      	mov	r1, r5
 8011b32:	f7ee fbb9 	bl	80002a8 <__aeabi_dsub>
 8011b36:	4602      	mov	r2, r0
 8011b38:	460b      	mov	r3, r1
 8011b3a:	4614      	mov	r4, r2
 8011b3c:	461d      	mov	r5, r3
 8011b3e:	f04f 0200 	mov.w	r2, #0
 8011b42:	4b3a      	ldr	r3, [pc, #232]	@ (8011c2c <DayNum+0x1b4>)
 8011b44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011b48:	f7ee fe90 	bl	800086c <__aeabi_ddiv>
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	460b      	mov	r3, r1
 8011b50:	4610      	mov	r0, r2
 8011b52:	4619      	mov	r1, r3
 8011b54:	f04f 0200 	mov.w	r2, #0
 8011b58:	4b35      	ldr	r3, [pc, #212]	@ (8011c30 <DayNum+0x1b8>)
 8011b5a:	f7ee fba7 	bl	80002ac <__adddf3>
 8011b5e:	4602      	mov	r2, r0
 8011b60:	460b      	mov	r3, r1
 8011b62:	ec43 2b17 	vmov	d7, r2, r3
 8011b66:	eeb0 0a47 	vmov.f32	s0, s14
 8011b6a:	eef0 0a67 	vmov.f32	s1, s15
 8011b6e:	f011 f8f7 	bl	8022d60 <floor>
 8011b72:	ec53 2b10 	vmov	r2, r3, d0
 8011b76:	4620      	mov	r0, r4
 8011b78:	4629      	mov	r1, r5
 8011b7a:	f7ee fb97 	bl	80002ac <__adddf3>
 8011b7e:	4602      	mov	r2, r0
 8011b80:	460b      	mov	r3, r1
 8011b82:	4610      	mov	r0, r2
 8011b84:	4619      	mov	r1, r3
 8011b86:	f04f 0200 	mov.w	r2, #0
 8011b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8011c34 <DayNum+0x1bc>)
 8011b8c:	f7ee fb8c 	bl	80002a8 <__aeabi_dsub>
 8011b90:	4602      	mov	r2, r0
 8011b92:	460b      	mov	r3, r1
 8011b94:	4610      	mov	r0, r2
 8011b96:	4619      	mov	r1, r3
 8011b98:	f7ee ffee 	bl	8000b78 <__aeabi_d2iz>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	617b      	str	r3, [r7, #20]
	dn+=d+30*m+(long)floor(0.6*mm-0.3);
 8011ba0:	68fa      	ldr	r2, [r7, #12]
 8011ba2:	4613      	mov	r3, r2
 8011ba4:	011b      	lsls	r3, r3, #4
 8011ba6:	1a9b      	subs	r3, r3, r2
 8011ba8:	005b      	lsls	r3, r3, #1
 8011baa:	461a      	mov	r2, r3
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	18d4      	adds	r4, r2, r3
 8011bb0:	a317      	add	r3, pc, #92	@ (adr r3, 8011c10 <DayNum+0x198>)
 8011bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011bba:	f7ee fd2d 	bl	8000618 <__aeabi_dmul>
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	4610      	mov	r0, r2
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	a314      	add	r3, pc, #80	@ (adr r3, 8011c18 <DayNum+0x1a0>)
 8011bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bcc:	f7ee fb6c 	bl	80002a8 <__aeabi_dsub>
 8011bd0:	4602      	mov	r2, r0
 8011bd2:	460b      	mov	r3, r1
 8011bd4:	ec43 2b17 	vmov	d7, r2, r3
 8011bd8:	eeb0 0a47 	vmov.f32	s0, s14
 8011bdc:	eef0 0a67 	vmov.f32	s1, s15
 8011be0:	f011 f8be 	bl	8022d60 <floor>
 8011be4:	ec53 2b10 	vmov	r2, r3, d0
 8011be8:	4610      	mov	r0, r2
 8011bea:	4619      	mov	r1, r3
 8011bec:	f7ee ffc4 	bl	8000b78 <__aeabi_d2iz>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	4423      	add	r3, r4
 8011bf4:	697a      	ldr	r2, [r7, #20]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	617b      	str	r3, [r7, #20]
	return dn;
 8011bfa:	697b      	ldr	r3, [r7, #20]
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3728      	adds	r7, #40	@ 0x28
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bdb0      	pop	{r4, r5, r7, pc}
 8011c04:	f3af 8000 	nop.w
 8011c08:	00000000 	.word	0x00000000
 8011c0c:	4076d400 	.word	0x4076d400
 8011c10:	33333333 	.word	0x33333333
 8011c14:	3fe33333 	.word	0x3fe33333
 8011c18:	33333333 	.word	0x33333333
 8011c1c:	3fd33333 	.word	0x3fd33333
 8011c20:	40540000 	.word	0x40540000
 8011c24:	40590000 	.word	0x40590000
 8011c28:	40330000 	.word	0x40330000
 8011c2c:	40790000 	.word	0x40790000
 8011c30:	40130000 	.word	0x40130000
 8011c34:	40300000 	.word	0x40300000

08011c38 <Calculate_LatLonAlt>:


void Calculate_LatLonAlt(double time, const double pos[3],  geodetic_t *geodetic)
{
 8011c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011c3c:	b08c      	sub	sp, #48	@ 0x30
 8011c3e:	af00      	add	r7, sp, #0
 8011c40:	ed87 0b02 	vstr	d0, [r7, #8]
 8011c44:	6078      	str	r0, [r7, #4]
 8011c46:	6039      	str	r1, [r7, #0]
	/* Reference:  The 1992 Astronomical Almanac, page K12. */

	double r, e2, phi, c;
	
	//Convert to julian time:
	time += JULIAN_TIME_DIFF;
 8011c48:	a3ae      	add	r3, pc, #696	@ (adr r3, 8011f04 <Calculate_LatLonAlt+0x2cc>)
 8011c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011c52:	f7ee fb2b 	bl	80002ac <__adddf3>
 8011c56:	4602      	mov	r2, r0
 8011c58:	460b      	mov	r3, r1
 8011c5a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	geodetic->theta = atan2(pos[1], pos[0]); /* radians */
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	3308      	adds	r3, #8
 8011c62:	ed93 7b00 	vldr	d7, [r3]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	ed93 6b00 	vldr	d6, [r3]
 8011c6c:	eeb0 1a46 	vmov.f32	s2, s12
 8011c70:	eef0 1a66 	vmov.f32	s3, s13
 8011c74:	eeb0 0a47 	vmov.f32	s0, s14
 8011c78:	eef0 0a67 	vmov.f32	s1, s15
 8011c7c:	f010 fbec 	bl	8022458 <atan2>
 8011c80:	eeb0 7a40 	vmov.f32	s14, s0
 8011c84:	eef0 7a60 	vmov.f32	s15, s1
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	ed83 7b06 	vstr	d7, [r3, #24]
	geodetic->lon = FMod2p(geodetic->theta-ThetaG_JD(time)); /* radians */
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8011c94:	ed97 0b02 	vldr	d0, [r7, #8]
 8011c98:	f7ff fcf2 	bl	8011680 <ThetaG_JD>
 8011c9c:	ec53 2b10 	vmov	r2, r3, d0
 8011ca0:	4640      	mov	r0, r8
 8011ca2:	4649      	mov	r1, r9
 8011ca4:	f7ee fb00 	bl	80002a8 <__aeabi_dsub>
 8011ca8:	4602      	mov	r2, r0
 8011caa:	460b      	mov	r3, r1
 8011cac:	ec43 2b17 	vmov	d7, r2, r3
 8011cb0:	eeb0 0a47 	vmov.f32	s0, s14
 8011cb4:	eef0 0a67 	vmov.f32	s1, s15
 8011cb8:	f7ff fb9e 	bl	80113f8 <FMod2p>
 8011cbc:	eeb0 7a40 	vmov.f32	s14, s0
 8011cc0:	eef0 7a60 	vmov.f32	s15, s1
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	ed83 7b02 	vstr	d7, [r3, #8]
	r = sqrt(Sqr(pos[0])+Sqr(pos[1]));
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	ed93 7b00 	vldr	d7, [r3]
 8011cd0:	eeb0 0a47 	vmov.f32	s0, s14
 8011cd4:	eef0 0a67 	vmov.f32	s1, s15
 8011cd8:	f7ff fb76 	bl	80113c8 <Sqr>
 8011cdc:	ec59 8b10 	vmov	r8, r9, d0
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	3308      	adds	r3, #8
 8011ce4:	ed93 7b00 	vldr	d7, [r3]
 8011ce8:	eeb0 0a47 	vmov.f32	s0, s14
 8011cec:	eef0 0a67 	vmov.f32	s1, s15
 8011cf0:	f7ff fb6a 	bl	80113c8 <Sqr>
 8011cf4:	ec53 2b10 	vmov	r2, r3, d0
 8011cf8:	4640      	mov	r0, r8
 8011cfa:	4649      	mov	r1, r9
 8011cfc:	f7ee fad6 	bl	80002ac <__adddf3>
 8011d00:	4602      	mov	r2, r0
 8011d02:	460b      	mov	r3, r1
 8011d04:	ec43 2b17 	vmov	d7, r2, r3
 8011d08:	eeb0 0a47 	vmov.f32	s0, s14
 8011d0c:	eef0 0a67 	vmov.f32	s1, s15
 8011d10:	f010 fccc 	bl	80226ac <sqrt>
 8011d14:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	e2 = FLATTENING_FACTOR*(2-FLATTENING_FACTOR);
 8011d18:	a37c      	add	r3, pc, #496	@ (adr r3, 8011f0c <Calculate_LatLonAlt+0x2d4>)
 8011d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	geodetic->lat=atan2(pos[2],r); /* radians */
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	3310      	adds	r3, #16
 8011d26:	ed93 7b00 	vldr	d7, [r3]
 8011d2a:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 8011d2e:	eeb0 0a47 	vmov.f32	s0, s14
 8011d32:	eef0 0a67 	vmov.f32	s1, s15
 8011d36:	f010 fb8f 	bl	8022458 <atan2>
 8011d3a:	eeb0 7a40 	vmov.f32	s14, s0
 8011d3e:	eef0 7a60 	vmov.f32	s15, s1
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	ed83 7b00 	vstr	d7, [r3]

	do
	{
		phi=geodetic->lat;
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		c=1/sqrt(1-e2*Sqr(sin(phi)));
 8011d52:	ed97 0b06 	vldr	d0, [r7, #24]
 8011d56:	f010 fecb 	bl	8022af0 <sin>
 8011d5a:	eeb0 7a40 	vmov.f32	s14, s0
 8011d5e:	eef0 7a60 	vmov.f32	s15, s1
 8011d62:	eeb0 0a47 	vmov.f32	s0, s14
 8011d66:	eef0 0a67 	vmov.f32	s1, s15
 8011d6a:	f7ff fb2d 	bl	80113c8 <Sqr>
 8011d6e:	ec51 0b10 	vmov	r0, r1, d0
 8011d72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011d76:	f7ee fc4f 	bl	8000618 <__aeabi_dmul>
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	460b      	mov	r3, r1
 8011d7e:	f04f 0000 	mov.w	r0, #0
 8011d82:	495f      	ldr	r1, [pc, #380]	@ (8011f00 <Calculate_LatLonAlt+0x2c8>)
 8011d84:	f7ee fa90 	bl	80002a8 <__aeabi_dsub>
 8011d88:	4602      	mov	r2, r0
 8011d8a:	460b      	mov	r3, r1
 8011d8c:	ec43 2b17 	vmov	d7, r2, r3
 8011d90:	eeb0 0a47 	vmov.f32	s0, s14
 8011d94:	eef0 0a67 	vmov.f32	s1, s15
 8011d98:	f010 fc88 	bl	80226ac <sqrt>
 8011d9c:	ec53 2b10 	vmov	r2, r3, d0
 8011da0:	f04f 0000 	mov.w	r0, #0
 8011da4:	4956      	ldr	r1, [pc, #344]	@ (8011f00 <Calculate_LatLonAlt+0x2c8>)
 8011da6:	f7ee fd61 	bl	800086c <__aeabi_ddiv>
 8011daa:	4602      	mov	r2, r0
 8011dac:	460b      	mov	r3, r1
 8011dae:	e9c7 2304 	strd	r2, r3, [r7, #16]
		geodetic->lat=atan2(pos[2]+EARTH_RADIUS_KM_WGS84*c*e2*sin(phi),r);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	3310      	adds	r3, #16
 8011db6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011dba:	a349      	add	r3, pc, #292	@ (adr r3, 8011ee0 <Calculate_LatLonAlt+0x2a8>)
 8011dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011dc4:	f7ee fc28 	bl	8000618 <__aeabi_dmul>
 8011dc8:	4602      	mov	r2, r0
 8011dca:	460b      	mov	r3, r1
 8011dcc:	4610      	mov	r0, r2
 8011dce:	4619      	mov	r1, r3
 8011dd0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011dd4:	f7ee fc20 	bl	8000618 <__aeabi_dmul>
 8011dd8:	4602      	mov	r2, r0
 8011dda:	460b      	mov	r3, r1
 8011ddc:	4692      	mov	sl, r2
 8011dde:	469b      	mov	fp, r3
 8011de0:	ed97 0b06 	vldr	d0, [r7, #24]
 8011de4:	f010 fe84 	bl	8022af0 <sin>
 8011de8:	ec53 2b10 	vmov	r2, r3, d0
 8011dec:	4650      	mov	r0, sl
 8011dee:	4659      	mov	r1, fp
 8011df0:	f7ee fc12 	bl	8000618 <__aeabi_dmul>
 8011df4:	4602      	mov	r2, r0
 8011df6:	460b      	mov	r3, r1
 8011df8:	4640      	mov	r0, r8
 8011dfa:	4649      	mov	r1, r9
 8011dfc:	f7ee fa56 	bl	80002ac <__adddf3>
 8011e00:	4602      	mov	r2, r0
 8011e02:	460b      	mov	r3, r1
 8011e04:	ec43 2b17 	vmov	d7, r2, r3
 8011e08:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 8011e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8011e10:	eef0 0a67 	vmov.f32	s1, s15
 8011e14:	f010 fb20 	bl	8022458 <atan2>
 8011e18:	eeb0 7a40 	vmov.f32	s14, s0
 8011e1c:	eef0 7a60 	vmov.f32	s15, s1
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	ed83 7b00 	vstr	d7, [r3]

	} while (fabs(geodetic->lat-phi)>=1E-10);
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011e30:	f7ee fa3a 	bl	80002a8 <__aeabi_dsub>
 8011e34:	4602      	mov	r2, r0
 8011e36:	460b      	mov	r3, r1
 8011e38:	4614      	mov	r4, r2
 8011e3a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8011e3e:	a32a      	add	r3, pc, #168	@ (adr r3, 8011ee8 <Calculate_LatLonAlt+0x2b0>)
 8011e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e44:	4620      	mov	r0, r4
 8011e46:	4629      	mov	r1, r5
 8011e48:	f7ee fe6c 	bl	8000b24 <__aeabi_dcmpge>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	f47f af7a 	bne.w	8011d48 <Calculate_LatLonAlt+0x110>

	geodetic->alt=r/cos(geodetic->lat)-EARTH_RADIUS_KM_WGS84*c; /* kilometers */
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	ed93 7b00 	vldr	d7, [r3]
 8011e5a:	eeb0 0a47 	vmov.f32	s0, s14
 8011e5e:	eef0 0a67 	vmov.f32	s1, s15
 8011e62:	f010 fde9 	bl	8022a38 <cos>
 8011e66:	ec53 2b10 	vmov	r2, r3, d0
 8011e6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8011e6e:	f7ee fcfd 	bl	800086c <__aeabi_ddiv>
 8011e72:	4602      	mov	r2, r0
 8011e74:	460b      	mov	r3, r1
 8011e76:	4614      	mov	r4, r2
 8011e78:	461d      	mov	r5, r3
 8011e7a:	a319      	add	r3, pc, #100	@ (adr r3, 8011ee0 <Calculate_LatLonAlt+0x2a8>)
 8011e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011e84:	f7ee fbc8 	bl	8000618 <__aeabi_dmul>
 8011e88:	4602      	mov	r2, r0
 8011e8a:	460b      	mov	r3, r1
 8011e8c:	4620      	mov	r0, r4
 8011e8e:	4629      	mov	r1, r5
 8011e90:	f7ee fa0a 	bl	80002a8 <__aeabi_dsub>
 8011e94:	4602      	mov	r2, r0
 8011e96:	460b      	mov	r3, r1
 8011e98:	6839      	ldr	r1, [r7, #0]
 8011e9a:	e9c1 2304 	strd	r2, r3, [r1, #16]

	if (geodetic->lat>PI_HALF)
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011ea4:	a312      	add	r3, pc, #72	@ (adr r3, 8011ef0 <Calculate_LatLonAlt+0x2b8>)
 8011ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eaa:	f7ee fe45 	bl	8000b38 <__aeabi_dcmpgt>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d100      	bne.n	8011eb6 <Calculate_LatLonAlt+0x27e>
		geodetic->lat-= 2*M_PI;
}
 8011eb4:	e00c      	b.n	8011ed0 <Calculate_LatLonAlt+0x298>
		geodetic->lat-= 2*M_PI;
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011ebc:	a30e      	add	r3, pc, #56	@ (adr r3, 8011ef8 <Calculate_LatLonAlt+0x2c0>)
 8011ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec2:	f7ee f9f1 	bl	80002a8 <__aeabi_dsub>
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	460b      	mov	r3, r1
 8011eca:	6839      	ldr	r1, [r7, #0]
 8011ecc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8011ed0:	bf00      	nop
 8011ed2:	3730      	adds	r7, #48	@ 0x30
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011eda:	bf00      	nop
 8011edc:	f3af 8000 	nop.w
 8011ee0:	126e978d 	.word	0x126e978d
 8011ee4:	40b8ea23 	.word	0x40b8ea23
 8011ee8:	d9d7bdbb 	.word	0xd9d7bdbb
 8011eec:	3ddb7cdf 	.word	0x3ddb7cdf
 8011ef0:	54442d18 	.word	0x54442d18
 8011ef4:	3ff921fb 	.word	0x3ff921fb
 8011ef8:	54442d18 	.word	0x54442d18
 8011efc:	401921fb 	.word	0x401921fb
 8011f00:	3ff00000 	.word	0x3ff00000
 8011f04:	40000000 	.word	0x40000000
 8011f08:	4142a5e7 	.word	0x4142a5e7
 8011f0c:	f1fe94ef 	.word	0xf1fe94ef
 8011f10:	3f7b6b90 	.word	0x3f7b6b90
 8011f14:	00000000 	.word	0x00000000

08011f18 <Calculate_Obs>:

void Calculate_Obs(double time, const double pos[3], const double vel[3], geodetic_t *geodetic, vector_t *obs_set)
{
 8011f18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8011f1c:	b0b4      	sub	sp, #208	@ 0xd0
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	ed87 0b06 	vstr	d0, [r7, #24]
 8011f24:	6178      	str	r0, [r7, #20]
 8011f26:	6139      	str	r1, [r7, #16]
 8011f28:	60fa      	str	r2, [r7, #12]
 8011f2a:	60bb      	str	r3, [r7, #8]
	double obs_pos[3];
	double obs_vel[3];
	double range[3];
	double rgvel[3];

	Calculate_User_PosVel(time, geodetic, obs_pos, obs_vel);
 8011f2c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8011f30:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011f34:	4619      	mov	r1, r3
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	ed97 0b06 	vldr	d0, [r7, #24]
 8011f3c:	f7ff fc70 	bl	8011820 <Calculate_User_PosVel>

	vec3_sub(pos, obs_pos, range);
 8011f40:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8011f44:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011f48:	4619      	mov	r1, r3
 8011f4a:	6978      	ldr	r0, [r7, #20]
 8011f4c:	f7ff fa05 	bl	801135a <vec3_sub>
	vec3_sub(vel, obs_vel, rgvel);
 8011f50:	f107 0220 	add.w	r2, r7, #32
 8011f54:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011f58:	4619      	mov	r1, r3
 8011f5a:	6938      	ldr	r0, [r7, #16]
 8011f5c:	f7ff f9fd 	bl	801135a <vec3_sub>
	
	double range_length = vec3_length(range);
 8011f60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7ff f93a 	bl	80111de <vec3_length>
 8011f6a:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0

	sin_lat=sin(geodetic->lat);
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	ed93 7b00 	vldr	d7, [r3]
 8011f74:	eeb0 0a47 	vmov.f32	s0, s14
 8011f78:	eef0 0a67 	vmov.f32	s1, s15
 8011f7c:	f010 fdb8 	bl	8022af0 <sin>
 8011f80:	ed87 0b2e 	vstr	d0, [r7, #184]	@ 0xb8
	cos_lat=cos(geodetic->lat);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	ed93 7b00 	vldr	d7, [r3]
 8011f8a:	eeb0 0a47 	vmov.f32	s0, s14
 8011f8e:	eef0 0a67 	vmov.f32	s1, s15
 8011f92:	f010 fd51 	bl	8022a38 <cos>
 8011f96:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
	sin_theta=sin(geodetic->theta);
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	ed93 7b06 	vldr	d7, [r3, #24]
 8011fa0:	eeb0 0a47 	vmov.f32	s0, s14
 8011fa4:	eef0 0a67 	vmov.f32	s1, s15
 8011fa8:	f010 fda2 	bl	8022af0 <sin>
 8011fac:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8
	cos_theta=cos(geodetic->theta);
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	ed93 7b06 	vldr	d7, [r3, #24]
 8011fb6:	eeb0 0a47 	vmov.f32	s0, s14
 8011fba:	eef0 0a67 	vmov.f32	s1, s15
 8011fbe:	f010 fd3b 	bl	8022a38 <cos>
 8011fc2:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0
	top_s=sin_lat*cos_theta*range[0]+sin_lat*sin_theta*range[1]-cos_lat*range[2];
 8011fc6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8011fca:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8011fce:	f7ee fb23 	bl	8000618 <__aeabi_dmul>
 8011fd2:	4602      	mov	r2, r0
 8011fd4:	460b      	mov	r3, r1
 8011fd6:	4610      	mov	r0, r2
 8011fd8:	4619      	mov	r1, r3
 8011fda:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011fde:	f7ee fb1b 	bl	8000618 <__aeabi_dmul>
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	460b      	mov	r3, r1
 8011fe6:	4690      	mov	r8, r2
 8011fe8:	4699      	mov	r9, r3
 8011fea:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8011fee:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8011ff2:	f7ee fb11 	bl	8000618 <__aeabi_dmul>
 8011ff6:	4602      	mov	r2, r0
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	4610      	mov	r0, r2
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8012002:	f7ee fb09 	bl	8000618 <__aeabi_dmul>
 8012006:	4602      	mov	r2, r0
 8012008:	460b      	mov	r3, r1
 801200a:	4640      	mov	r0, r8
 801200c:	4649      	mov	r1, r9
 801200e:	f7ee f94d 	bl	80002ac <__adddf3>
 8012012:	4602      	mov	r2, r0
 8012014:	460b      	mov	r3, r1
 8012016:	4690      	mov	r8, r2
 8012018:	4699      	mov	r9, r3
 801201a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801201e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8012022:	f7ee faf9 	bl	8000618 <__aeabi_dmul>
 8012026:	4602      	mov	r2, r0
 8012028:	460b      	mov	r3, r1
 801202a:	4640      	mov	r0, r8
 801202c:	4649      	mov	r1, r9
 801202e:	f7ee f93b 	bl	80002a8 <__aeabi_dsub>
 8012032:	4602      	mov	r2, r0
 8012034:	460b      	mov	r3, r1
 8012036:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	top_e=-sin_theta*range[0]+cos_theta*range[1];
 801203a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801203e:	603b      	str	r3, [r7, #0]
 8012040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012044:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8012048:	607b      	str	r3, [r7, #4]
 801204a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801204e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012052:	f7ee fae1 	bl	8000618 <__aeabi_dmul>
 8012056:	4602      	mov	r2, r0
 8012058:	460b      	mov	r3, r1
 801205a:	4690      	mov	r8, r2
 801205c:	4699      	mov	r9, r3
 801205e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8012062:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8012066:	f7ee fad7 	bl	8000618 <__aeabi_dmul>
 801206a:	4602      	mov	r2, r0
 801206c:	460b      	mov	r3, r1
 801206e:	4640      	mov	r0, r8
 8012070:	4649      	mov	r1, r9
 8012072:	f7ee f91b 	bl	80002ac <__adddf3>
 8012076:	4602      	mov	r2, r0
 8012078:	460b      	mov	r3, r1
 801207a:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	top_z=cos_lat*cos_theta*range[0]+cos_lat*sin_theta*range[1]+sin_lat*range[2];
 801207e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8012082:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8012086:	f7ee fac7 	bl	8000618 <__aeabi_dmul>
 801208a:	4602      	mov	r2, r0
 801208c:	460b      	mov	r3, r1
 801208e:	4610      	mov	r0, r2
 8012090:	4619      	mov	r1, r3
 8012092:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8012096:	f7ee fabf 	bl	8000618 <__aeabi_dmul>
 801209a:	4602      	mov	r2, r0
 801209c:	460b      	mov	r3, r1
 801209e:	4690      	mov	r8, r2
 80120a0:	4699      	mov	r9, r3
 80120a2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80120a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80120aa:	f7ee fab5 	bl	8000618 <__aeabi_dmul>
 80120ae:	4602      	mov	r2, r0
 80120b0:	460b      	mov	r3, r1
 80120b2:	4610      	mov	r0, r2
 80120b4:	4619      	mov	r1, r3
 80120b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80120ba:	f7ee faad 	bl	8000618 <__aeabi_dmul>
 80120be:	4602      	mov	r2, r0
 80120c0:	460b      	mov	r3, r1
 80120c2:	4640      	mov	r0, r8
 80120c4:	4649      	mov	r1, r9
 80120c6:	f7ee f8f1 	bl	80002ac <__adddf3>
 80120ca:	4602      	mov	r2, r0
 80120cc:	460b      	mov	r3, r1
 80120ce:	4690      	mov	r8, r2
 80120d0:	4699      	mov	r9, r3
 80120d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80120d6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80120da:	f7ee fa9d 	bl	8000618 <__aeabi_dmul>
 80120de:	4602      	mov	r2, r0
 80120e0:	460b      	mov	r3, r1
 80120e2:	4640      	mov	r0, r8
 80120e4:	4649      	mov	r1, r9
 80120e6:	f7ee f8e1 	bl	80002ac <__adddf3>
 80120ea:	4602      	mov	r2, r0
 80120ec:	460b      	mov	r3, r1
 80120ee:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	azim=atan(-top_e/top_s); /* Azimuth */
 80120f2:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 80120f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80120fa:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80120fe:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8012102:	4620      	mov	r0, r4
 8012104:	4629      	mov	r1, r5
 8012106:	f7ee fbb1 	bl	800086c <__aeabi_ddiv>
 801210a:	4602      	mov	r2, r0
 801210c:	460b      	mov	r3, r1
 801210e:	ec43 2b17 	vmov	d7, r2, r3
 8012112:	eeb0 0a47 	vmov.f32	s0, s14
 8012116:	eef0 0a67 	vmov.f32	s1, s15
 801211a:	f010 faf5 	bl	8022708 <atan>
 801211e:	ed87 0b32 	vstr	d0, [r7, #200]	@ 0xc8

	if (top_s>0.0) 
 8012122:	f04f 0200 	mov.w	r2, #0
 8012126:	f04f 0300 	mov.w	r3, #0
 801212a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801212e:	f7ee fd03 	bl	8000b38 <__aeabi_dcmpgt>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d00a      	beq.n	801214e <Calculate_Obs+0x236>
		azim=azim+PI;
 8012138:	a33b      	add	r3, pc, #236	@ (adr r3, 8012228 <Calculate_Obs+0x310>)
 801213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801213e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8012142:	f7ee f8b3 	bl	80002ac <__adddf3>
 8012146:	4602      	mov	r2, r0
 8012148:	460b      	mov	r3, r1
 801214a:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

	if (azim<0.0)
 801214e:	f04f 0200 	mov.w	r2, #0
 8012152:	f04f 0300 	mov.w	r3, #0
 8012156:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801215a:	f7ee fccf 	bl	8000afc <__aeabi_dcmplt>
 801215e:	4603      	mov	r3, r0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d00a      	beq.n	801217a <Calculate_Obs+0x262>
		azim = azim + 2*M_PI;
 8012164:	a332      	add	r3, pc, #200	@ (adr r3, 8012230 <Calculate_Obs+0x318>)
 8012166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801216e:	f7ee f89d 	bl	80002ac <__adddf3>
 8012172:	4602      	mov	r2, r0
 8012174:	460b      	mov	r3, r1
 8012176:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

	el=asin_(top_z/range_length);
 801217a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 801217e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8012182:	f7ee fb73 	bl	800086c <__aeabi_ddiv>
 8012186:	4602      	mov	r2, r0
 8012188:	460b      	mov	r3, r1
 801218a:	ec43 2b17 	vmov	d7, r2, r3
 801218e:	eeb0 0a47 	vmov.f32	s0, s14
 8012192:	eef0 0a67 	vmov.f32	s1, s15
 8012196:	f000 f8d3 	bl	8012340 <asin_>
 801219a:	ed87 0b20 	vstr	d0, [r7, #128]	@ 0x80
	obs_set->x=azim;	/* Azimuth (radians)   */
 801219e:	68b9      	ldr	r1, [r7, #8]
 80121a0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80121a4:	e9c1 2300 	strd	r2, r3, [r1]
	obs_set->y=el;		/* Elevation (radians) */
 80121a8:	68b9      	ldr	r1, [r7, #8]
 80121aa:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80121ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
	obs_set->z=range_length;	/* Range (kilometers)  */
 80121b2:	68b9      	ldr	r1, [r7, #8]
 80121b4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80121b8:	e9c1 2304 	strd	r2, r3, [r1, #16]

	/* Range Rate (kilometers/second) */
	obs_set->w = vec3_dot(range, rgvel)/vec3_length(range);
 80121bc:	f107 0220 	add.w	r2, r7, #32
 80121c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80121c4:	4611      	mov	r1, r2
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7ff f852 	bl	8011270 <vec3_dot>
 80121cc:	ec55 4b10 	vmov	r4, r5, d0
 80121d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7ff f802 	bl	80111de <vec3_length>
 80121da:	ec53 2b10 	vmov	r2, r3, d0
 80121de:	4620      	mov	r0, r4
 80121e0:	4629      	mov	r1, r5
 80121e2:	f7ee fb43 	bl	800086c <__aeabi_ddiv>
 80121e6:	4602      	mov	r2, r0
 80121e8:	460b      	mov	r3, r1
 80121ea:	68b9      	ldr	r1, [r7, #8]
 80121ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
	obs_set->y=el;
 80121f0:	68b9      	ldr	r1, [r7, #8]
 80121f2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80121f6:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/**** End bypass ****/

	if (obs_set->y<0.0)
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8012200:	f04f 0200 	mov.w	r2, #0
 8012204:	f04f 0300 	mov.w	r3, #0
 8012208:	f7ee fc78 	bl	8000afc <__aeabi_dcmplt>
 801220c:	4603      	mov	r3, r0
 801220e:	2b00      	cmp	r3, #0
 8012210:	d100      	bne.n	8012214 <Calculate_Obs+0x2fc>
		obs_set->y=el;  /* Reset to true elevation */
}
 8012212:	e004      	b.n	801221e <Calculate_Obs+0x306>
		obs_set->y=el;  /* Reset to true elevation */
 8012214:	68b9      	ldr	r1, [r7, #8]
 8012216:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801221a:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 801221e:	bf00      	nop
 8012220:	37d0      	adds	r7, #208	@ 0xd0
 8012222:	46bd      	mov	sp, r7
 8012224:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012228:	54442d18 	.word	0x54442d18
 801222c:	400921fb 	.word	0x400921fb
 8012230:	54442d18 	.word	0x54442d18
 8012234:	401921fb 	.word	0x401921fb

08012238 <SubString>:
}

/* .... SGP4/SDP4 functions end .... */

char *SubString(const char *string, int buffer_length, char *output_buffer, int start, int end)
{
 8012238:	b480      	push	{r7}
 801223a:	b087      	sub	sp, #28
 801223c:	af00      	add	r7, sp, #0
 801223e:	60f8      	str	r0, [r7, #12]
 8012240:	60b9      	str	r1, [r7, #8]
 8012242:	607a      	str	r2, [r7, #4]
 8012244:	603b      	str	r3, [r7, #0]

	unsigned x, y;

	if ((end >= start) && (buffer_length > end - start + 2))
 8012246:	6a3a      	ldr	r2, [r7, #32]
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	429a      	cmp	r2, r3
 801224c:	db30      	blt.n	80122b0 <SubString+0x78>
 801224e:	6a3a      	ldr	r2, [r7, #32]
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	1ad3      	subs	r3, r2, r3
 8012254:	3302      	adds	r3, #2
 8012256:	68ba      	ldr	r2, [r7, #8]
 8012258:	429a      	cmp	r2, r3
 801225a:	dd29      	ble.n	80122b0 <SubString+0x78>
	{
		for (x=start, y=0; x<=end && string[x]!=0; x++)
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	617b      	str	r3, [r7, #20]
 8012260:	2300      	movs	r3, #0
 8012262:	613b      	str	r3, [r7, #16]
 8012264:	e013      	b.n	801228e <SubString+0x56>
			if (string[x]!=' ')
 8012266:	68fa      	ldr	r2, [r7, #12]
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	4413      	add	r3, r2
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	2b20      	cmp	r3, #32
 8012270:	d00a      	beq.n	8012288 <SubString+0x50>
			{
				output_buffer[y] = string[x];
 8012272:	68fa      	ldr	r2, [r7, #12]
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	441a      	add	r2, r3
 8012278:	6879      	ldr	r1, [r7, #4]
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	440b      	add	r3, r1
 801227e:	7812      	ldrb	r2, [r2, #0]
 8012280:	701a      	strb	r2, [r3, #0]
				y++;
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	3301      	adds	r3, #1
 8012286:	613b      	str	r3, [r7, #16]
		for (x=start, y=0; x<=end && string[x]!=0; x++)
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	3301      	adds	r3, #1
 801228c:	617b      	str	r3, [r7, #20]
 801228e:	6a3b      	ldr	r3, [r7, #32]
 8012290:	697a      	ldr	r2, [r7, #20]
 8012292:	429a      	cmp	r2, r3
 8012294:	d805      	bhi.n	80122a2 <SubString+0x6a>
 8012296:	68fa      	ldr	r2, [r7, #12]
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	4413      	add	r3, r2
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d1e1      	bne.n	8012266 <SubString+0x2e>
			}

		output_buffer[y]=0;
 80122a2:	687a      	ldr	r2, [r7, #4]
 80122a4:	693b      	ldr	r3, [r7, #16]
 80122a6:	4413      	add	r3, r2
 80122a8:	2200      	movs	r2, #0
 80122aa:	701a      	strb	r2, [r3, #0]
		return output_buffer;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	e000      	b.n	80122b2 <SubString+0x7a>
	}
	else
		return NULL;
 80122b0:	2300      	movs	r3, #0
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	371c      	adds	r7, #28
 80122b6:	46bd      	mov	sp, r7
 80122b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122bc:	4770      	bx	lr
	...

080122c0 <acos_>:

double acos_(double arg)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b082      	sub	sp, #8
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	ed87 0b00 	vstr	d0, [r7]
	return acos(arg < -1.0 ? -1.0 : (arg > 1.0 ? 1.0 : arg));
 80122ca:	f04f 0200 	mov.w	r2, #0
 80122ce:	4b1a      	ldr	r3, [pc, #104]	@ (8012338 <acos_+0x78>)
 80122d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80122d4:	f7ee fc12 	bl	8000afc <__aeabi_dcmplt>
 80122d8:	4603      	mov	r3, r0
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d002      	beq.n	80122e4 <acos_+0x24>
 80122de:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8012328 <acos_+0x68>
 80122e2:	e00e      	b.n	8012302 <acos_+0x42>
 80122e4:	f04f 0200 	mov.w	r2, #0
 80122e8:	4b14      	ldr	r3, [pc, #80]	@ (801233c <acos_+0x7c>)
 80122ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80122ee:	f7ee fc23 	bl	8000b38 <__aeabi_dcmpgt>
 80122f2:	4603      	mov	r3, r0
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d002      	beq.n	80122fe <acos_+0x3e>
 80122f8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012330 <acos_+0x70>
 80122fc:	e001      	b.n	8012302 <acos_+0x42>
 80122fe:	ed97 7b00 	vldr	d7, [r7]
 8012302:	eeb0 0a47 	vmov.f32	s0, s14
 8012306:	eef0 0a67 	vmov.f32	s1, s15
 801230a:	f010 f83d 	bl	8022388 <acos>
 801230e:	eeb0 7a40 	vmov.f32	s14, s0
 8012312:	eef0 7a60 	vmov.f32	s15, s1
}
 8012316:	eeb0 0a47 	vmov.f32	s0, s14
 801231a:	eef0 0a67 	vmov.f32	s1, s15
 801231e:	3708      	adds	r7, #8
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}
 8012324:	f3af 8000 	nop.w
 8012328:	00000000 	.word	0x00000000
 801232c:	bff00000 	.word	0xbff00000
 8012330:	00000000 	.word	0x00000000
 8012334:	3ff00000 	.word	0x3ff00000
 8012338:	bff00000 	.word	0xbff00000
 801233c:	3ff00000 	.word	0x3ff00000

08012340 <asin_>:

double asin_(double arg)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b082      	sub	sp, #8
 8012344:	af00      	add	r7, sp, #0
 8012346:	ed87 0b00 	vstr	d0, [r7]
	return asin(arg < -1.0 ? -1.0 : (arg > 1.0 ? 1.0 : arg));
 801234a:	f04f 0200 	mov.w	r2, #0
 801234e:	4b1a      	ldr	r3, [pc, #104]	@ (80123b8 <asin_+0x78>)
 8012350:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012354:	f7ee fbd2 	bl	8000afc <__aeabi_dcmplt>
 8012358:	4603      	mov	r3, r0
 801235a:	2b00      	cmp	r3, #0
 801235c:	d002      	beq.n	8012364 <asin_+0x24>
 801235e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80123a8 <asin_+0x68>
 8012362:	e00e      	b.n	8012382 <asin_+0x42>
 8012364:	f04f 0200 	mov.w	r2, #0
 8012368:	4b14      	ldr	r3, [pc, #80]	@ (80123bc <asin_+0x7c>)
 801236a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801236e:	f7ee fbe3 	bl	8000b38 <__aeabi_dcmpgt>
 8012372:	4603      	mov	r3, r0
 8012374:	2b00      	cmp	r3, #0
 8012376:	d002      	beq.n	801237e <asin_+0x3e>
 8012378:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80123b0 <asin_+0x70>
 801237c:	e001      	b.n	8012382 <asin_+0x42>
 801237e:	ed97 7b00 	vldr	d7, [r7]
 8012382:	eeb0 0a47 	vmov.f32	s0, s14
 8012386:	eef0 0a67 	vmov.f32	s1, s15
 801238a:	f010 f831 	bl	80223f0 <asin>
 801238e:	eeb0 7a40 	vmov.f32	s14, s0
 8012392:	eef0 7a60 	vmov.f32	s15, s1
}
 8012396:	eeb0 0a47 	vmov.f32	s0, s14
 801239a:	eef0 0a67 	vmov.f32	s1, s15
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}
 80123a4:	f3af 8000 	nop.w
 80123a8:	00000000 	.word	0x00000000
 80123ac:	bff00000 	.word	0xbff00000
 80123b0:	00000000 	.word	0x00000000
 80123b4:	3ff00000 	.word	0x3ff00000
 80123b8:	bff00000 	.word	0xbff00000
 80123bc:	3ff00000 	.word	0x3ff00000

080123c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80123c6:	2300      	movs	r3, #0
 80123c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80123ca:	4b0c      	ldr	r3, [pc, #48]	@ (80123fc <HAL_Init+0x3c>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	4a0b      	ldr	r2, [pc, #44]	@ (80123fc <HAL_Init+0x3c>)
 80123d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80123d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80123d6:	2003      	movs	r0, #3
 80123d8:	f001 f883 	bl	80134e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80123dc:	200f      	movs	r0, #15
 80123de:	f7f0 fdf1 	bl	8002fc4 <HAL_InitTick>
 80123e2:	4603      	mov	r3, r0
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d002      	beq.n	80123ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80123e8:	2301      	movs	r3, #1
 80123ea:	71fb      	strb	r3, [r7, #7]
 80123ec:	e001      	b.n	80123f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80123ee:	f7f0 fdc1 	bl	8002f74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80123f2:	79fb      	ldrb	r3, [r7, #7]
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	3708      	adds	r7, #8
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd80      	pop	{r7, pc}
 80123fc:	40022000 	.word	0x40022000

08012400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012400:	b480      	push	{r7}
 8012402:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8012404:	4b06      	ldr	r3, [pc, #24]	@ (8012420 <HAL_IncTick+0x20>)
 8012406:	781b      	ldrb	r3, [r3, #0]
 8012408:	461a      	mov	r2, r3
 801240a:	4b06      	ldr	r3, [pc, #24]	@ (8012424 <HAL_IncTick+0x24>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	4413      	add	r3, r2
 8012410:	4a04      	ldr	r2, [pc, #16]	@ (8012424 <HAL_IncTick+0x24>)
 8012412:	6013      	str	r3, [r2, #0]
}
 8012414:	bf00      	nop
 8012416:	46bd      	mov	sp, r7
 8012418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241c:	4770      	bx	lr
 801241e:	bf00      	nop
 8012420:	20000038 	.word	0x20000038
 8012424:	200014a8 	.word	0x200014a8

08012428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012428:	b480      	push	{r7}
 801242a:	af00      	add	r7, sp, #0
  return uwTick;
 801242c:	4b03      	ldr	r3, [pc, #12]	@ (801243c <HAL_GetTick+0x14>)
 801242e:	681b      	ldr	r3, [r3, #0]
}
 8012430:	4618      	mov	r0, r3
 8012432:	46bd      	mov	sp, r7
 8012434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012438:	4770      	bx	lr
 801243a:	bf00      	nop
 801243c:	200014a8 	.word	0x200014a8

08012440 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8012440:	b480      	push	{r7}
 8012442:	b083      	sub	sp, #12
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	689b      	ldr	r3, [r3, #8]
 801244e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	431a      	orrs	r2, r3
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	609a      	str	r2, [r3, #8]
}
 801245a:	bf00      	nop
 801245c:	370c      	adds	r7, #12
 801245e:	46bd      	mov	sp, r7
 8012460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012464:	4770      	bx	lr

08012466 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8012466:	b480      	push	{r7}
 8012468:	b083      	sub	sp, #12
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
 801246e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	689b      	ldr	r3, [r3, #8]
 8012474:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	431a      	orrs	r2, r3
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	609a      	str	r2, [r3, #8]
}
 8012480:	bf00      	nop
 8012482:	370c      	adds	r7, #12
 8012484:	46bd      	mov	sp, r7
 8012486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248a:	4770      	bx	lr

0801248c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 801248c:	b480      	push	{r7}
 801248e:	b083      	sub	sp, #12
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	689b      	ldr	r3, [r3, #8]
 8012498:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 801249c:	4618      	mov	r0, r3
 801249e:	370c      	adds	r7, #12
 80124a0:	46bd      	mov	sp, r7
 80124a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a6:	4770      	bx	lr

080124a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80124a8:	b480      	push	{r7}
 80124aa:	b087      	sub	sp, #28
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
 80124b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	3360      	adds	r3, #96	@ 0x60
 80124ba:	461a      	mov	r2, r3
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	009b      	lsls	r3, r3, #2
 80124c0:	4413      	add	r3, r2
 80124c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80124c4:	697b      	ldr	r3, [r7, #20]
 80124c6:	681a      	ldr	r2, [r3, #0]
 80124c8:	4b08      	ldr	r3, [pc, #32]	@ (80124ec <LL_ADC_SetOffset+0x44>)
 80124ca:	4013      	ands	r3, r2
 80124cc:	687a      	ldr	r2, [r7, #4]
 80124ce:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80124d2:	683a      	ldr	r2, [r7, #0]
 80124d4:	430a      	orrs	r2, r1
 80124d6:	4313      	orrs	r3, r2
 80124d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80124e0:	bf00      	nop
 80124e2:	371c      	adds	r7, #28
 80124e4:	46bd      	mov	sp, r7
 80124e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ea:	4770      	bx	lr
 80124ec:	03fff000 	.word	0x03fff000

080124f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80124f0:	b480      	push	{r7}
 80124f2:	b085      	sub	sp, #20
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	3360      	adds	r3, #96	@ 0x60
 80124fe:	461a      	mov	r2, r3
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	009b      	lsls	r3, r3, #2
 8012504:	4413      	add	r3, r2
 8012506:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8012510:	4618      	mov	r0, r3
 8012512:	3714      	adds	r7, #20
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr

0801251c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 801251c:	b480      	push	{r7}
 801251e:	b087      	sub	sp, #28
 8012520:	af00      	add	r7, sp, #0
 8012522:	60f8      	str	r0, [r7, #12]
 8012524:	60b9      	str	r1, [r7, #8]
 8012526:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	3360      	adds	r3, #96	@ 0x60
 801252c:	461a      	mov	r2, r3
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	009b      	lsls	r3, r3, #2
 8012532:	4413      	add	r3, r2
 8012534:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	431a      	orrs	r2, r3
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8012546:	bf00      	nop
 8012548:	371c      	adds	r7, #28
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr

08012552 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8012552:	b480      	push	{r7}
 8012554:	b087      	sub	sp, #28
 8012556:	af00      	add	r7, sp, #0
 8012558:	60f8      	str	r0, [r7, #12]
 801255a:	60b9      	str	r1, [r7, #8]
 801255c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	3330      	adds	r3, #48	@ 0x30
 8012562:	461a      	mov	r2, r3
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	0a1b      	lsrs	r3, r3, #8
 8012568:	009b      	lsls	r3, r3, #2
 801256a:	f003 030c 	and.w	r3, r3, #12
 801256e:	4413      	add	r3, r2
 8012570:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	681a      	ldr	r2, [r3, #0]
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	f003 031f 	and.w	r3, r3, #31
 801257c:	211f      	movs	r1, #31
 801257e:	fa01 f303 	lsl.w	r3, r1, r3
 8012582:	43db      	mvns	r3, r3
 8012584:	401a      	ands	r2, r3
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	0e9b      	lsrs	r3, r3, #26
 801258a:	f003 011f 	and.w	r1, r3, #31
 801258e:	68bb      	ldr	r3, [r7, #8]
 8012590:	f003 031f 	and.w	r3, r3, #31
 8012594:	fa01 f303 	lsl.w	r3, r1, r3
 8012598:	431a      	orrs	r2, r3
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 801259e:	bf00      	nop
 80125a0:	371c      	adds	r7, #28
 80125a2:	46bd      	mov	sp, r7
 80125a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a8:	4770      	bx	lr

080125aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80125aa:	b480      	push	{r7}
 80125ac:	b087      	sub	sp, #28
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	60f8      	str	r0, [r7, #12]
 80125b2:	60b9      	str	r1, [r7, #8]
 80125b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	3314      	adds	r3, #20
 80125ba:	461a      	mov	r2, r3
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	0e5b      	lsrs	r3, r3, #25
 80125c0:	009b      	lsls	r3, r3, #2
 80125c2:	f003 0304 	and.w	r3, r3, #4
 80125c6:	4413      	add	r3, r2
 80125c8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	681a      	ldr	r2, [r3, #0]
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	0d1b      	lsrs	r3, r3, #20
 80125d2:	f003 031f 	and.w	r3, r3, #31
 80125d6:	2107      	movs	r1, #7
 80125d8:	fa01 f303 	lsl.w	r3, r1, r3
 80125dc:	43db      	mvns	r3, r3
 80125de:	401a      	ands	r2, r3
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	0d1b      	lsrs	r3, r3, #20
 80125e4:	f003 031f 	and.w	r3, r3, #31
 80125e8:	6879      	ldr	r1, [r7, #4]
 80125ea:	fa01 f303 	lsl.w	r3, r1, r3
 80125ee:	431a      	orrs	r2, r3
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80125f4:	bf00      	nop
 80125f6:	371c      	adds	r7, #28
 80125f8:	46bd      	mov	sp, r7
 80125fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fe:	4770      	bx	lr

08012600 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8012600:	b480      	push	{r7}
 8012602:	b085      	sub	sp, #20
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012618:	43db      	mvns	r3, r3
 801261a:	401a      	ands	r2, r3
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f003 0318 	and.w	r3, r3, #24
 8012622:	4908      	ldr	r1, [pc, #32]	@ (8012644 <LL_ADC_SetChannelSingleDiff+0x44>)
 8012624:	40d9      	lsrs	r1, r3
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	400b      	ands	r3, r1
 801262a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801262e:	431a      	orrs	r2, r3
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8012636:	bf00      	nop
 8012638:	3714      	adds	r7, #20
 801263a:	46bd      	mov	sp, r7
 801263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012640:	4770      	bx	lr
 8012642:	bf00      	nop
 8012644:	0007ffff 	.word	0x0007ffff

08012648 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8012648:	b480      	push	{r7}
 801264a:	b083      	sub	sp, #12
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	689b      	ldr	r3, [r3, #8]
 8012654:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8012658:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	6093      	str	r3, [r2, #8]
}
 8012660:	bf00      	nop
 8012662:	370c      	adds	r7, #12
 8012664:	46bd      	mov	sp, r7
 8012666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266a:	4770      	bx	lr

0801266c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 801266c:	b480      	push	{r7}
 801266e:	b083      	sub	sp, #12
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	689b      	ldr	r3, [r3, #8]
 8012678:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801267c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012680:	d101      	bne.n	8012686 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8012682:	2301      	movs	r3, #1
 8012684:	e000      	b.n	8012688 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8012686:	2300      	movs	r3, #0
}
 8012688:	4618      	mov	r0, r3
 801268a:	370c      	adds	r7, #12
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr

08012694 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	689b      	ldr	r3, [r3, #8]
 80126a0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80126a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80126a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80126b0:	bf00      	nop
 80126b2:	370c      	adds	r7, #12
 80126b4:	46bd      	mov	sp, r7
 80126b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ba:	4770      	bx	lr

080126bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80126bc:	b480      	push	{r7}
 80126be:	b083      	sub	sp, #12
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	689b      	ldr	r3, [r3, #8]
 80126c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80126cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80126d0:	d101      	bne.n	80126d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80126d2:	2301      	movs	r3, #1
 80126d4:	e000      	b.n	80126d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80126d6:	2300      	movs	r3, #0
}
 80126d8:	4618      	mov	r0, r3
 80126da:	370c      	adds	r7, #12
 80126dc:	46bd      	mov	sp, r7
 80126de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e2:	4770      	bx	lr

080126e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80126e4:	b480      	push	{r7}
 80126e6:	b083      	sub	sp, #12
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	689b      	ldr	r3, [r3, #8]
 80126f0:	f003 0301 	and.w	r3, r3, #1
 80126f4:	2b01      	cmp	r3, #1
 80126f6:	d101      	bne.n	80126fc <LL_ADC_IsEnabled+0x18>
 80126f8:	2301      	movs	r3, #1
 80126fa:	e000      	b.n	80126fe <LL_ADC_IsEnabled+0x1a>
 80126fc:	2300      	movs	r3, #0
}
 80126fe:	4618      	mov	r0, r3
 8012700:	370c      	adds	r7, #12
 8012702:	46bd      	mov	sp, r7
 8012704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012708:	4770      	bx	lr

0801270a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 801270a:	b480      	push	{r7}
 801270c:	b083      	sub	sp, #12
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	689b      	ldr	r3, [r3, #8]
 8012716:	f003 0304 	and.w	r3, r3, #4
 801271a:	2b04      	cmp	r3, #4
 801271c:	d101      	bne.n	8012722 <LL_ADC_REG_IsConversionOngoing+0x18>
 801271e:	2301      	movs	r3, #1
 8012720:	e000      	b.n	8012724 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8012722:	2300      	movs	r3, #0
}
 8012724:	4618      	mov	r0, r3
 8012726:	370c      	adds	r7, #12
 8012728:	46bd      	mov	sp, r7
 801272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272e:	4770      	bx	lr

08012730 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8012730:	b480      	push	{r7}
 8012732:	b083      	sub	sp, #12
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	689b      	ldr	r3, [r3, #8]
 801273c:	f003 0308 	and.w	r3, r3, #8
 8012740:	2b08      	cmp	r3, #8
 8012742:	d101      	bne.n	8012748 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8012744:	2301      	movs	r3, #1
 8012746:	e000      	b.n	801274a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8012748:	2300      	movs	r3, #0
}
 801274a:	4618      	mov	r0, r3
 801274c:	370c      	adds	r7, #12
 801274e:	46bd      	mov	sp, r7
 8012750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012754:	4770      	bx	lr
	...

08012758 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8012758:	b590      	push	{r4, r7, lr}
 801275a:	b089      	sub	sp, #36	@ 0x24
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012760:	2300      	movs	r3, #0
 8012762:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8012764:	2300      	movs	r3, #0
 8012766:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d101      	bne.n	8012772 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 801276e:	2301      	movs	r3, #1
 8012770:	e130      	b.n	80129d4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	691b      	ldr	r3, [r3, #16]
 8012776:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801277c:	2b00      	cmp	r3, #0
 801277e:	d109      	bne.n	8012794 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f7ef faff 	bl	8001d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2200      	movs	r2, #0
 801278a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2200      	movs	r2, #0
 8012790:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	4618      	mov	r0, r3
 801279a:	f7ff ff67 	bl	801266c <LL_ADC_IsDeepPowerDownEnabled>
 801279e:	4603      	mov	r3, r0
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d004      	beq.n	80127ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7ff ff4d 	bl	8012648 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	4618      	mov	r0, r3
 80127b4:	f7ff ff82 	bl	80126bc <LL_ADC_IsInternalRegulatorEnabled>
 80127b8:	4603      	mov	r3, r0
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d115      	bne.n	80127ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7ff ff66 	bl	8012694 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80127c8:	4b84      	ldr	r3, [pc, #528]	@ (80129dc <HAL_ADC_Init+0x284>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	099b      	lsrs	r3, r3, #6
 80127ce:	4a84      	ldr	r2, [pc, #528]	@ (80129e0 <HAL_ADC_Init+0x288>)
 80127d0:	fba2 2303 	umull	r2, r3, r2, r3
 80127d4:	099b      	lsrs	r3, r3, #6
 80127d6:	3301      	adds	r3, #1
 80127d8:	005b      	lsls	r3, r3, #1
 80127da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80127dc:	e002      	b.n	80127e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	3b01      	subs	r3, #1
 80127e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d1f9      	bne.n	80127de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	4618      	mov	r0, r3
 80127f0:	f7ff ff64 	bl	80126bc <LL_ADC_IsInternalRegulatorEnabled>
 80127f4:	4603      	mov	r3, r0
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d10d      	bne.n	8012816 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80127fe:	f043 0210 	orr.w	r2, r3, #16
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801280a:	f043 0201 	orr.w	r2, r3, #1
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8012812:	2301      	movs	r3, #1
 8012814:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	4618      	mov	r0, r3
 801281c:	f7ff ff75 	bl	801270a <LL_ADC_REG_IsConversionOngoing>
 8012820:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012826:	f003 0310 	and.w	r3, r3, #16
 801282a:	2b00      	cmp	r3, #0
 801282c:	f040 80c9 	bne.w	80129c2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	2b00      	cmp	r3, #0
 8012834:	f040 80c5 	bne.w	80129c2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801283c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8012840:	f043 0202 	orr.w	r2, r3, #2
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	4618      	mov	r0, r3
 801284e:	f7ff ff49 	bl	80126e4 <LL_ADC_IsEnabled>
 8012852:	4603      	mov	r3, r0
 8012854:	2b00      	cmp	r3, #0
 8012856:	d115      	bne.n	8012884 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8012858:	4862      	ldr	r0, [pc, #392]	@ (80129e4 <HAL_ADC_Init+0x28c>)
 801285a:	f7ff ff43 	bl	80126e4 <LL_ADC_IsEnabled>
 801285e:	4604      	mov	r4, r0
 8012860:	4861      	ldr	r0, [pc, #388]	@ (80129e8 <HAL_ADC_Init+0x290>)
 8012862:	f7ff ff3f 	bl	80126e4 <LL_ADC_IsEnabled>
 8012866:	4603      	mov	r3, r0
 8012868:	431c      	orrs	r4, r3
 801286a:	4860      	ldr	r0, [pc, #384]	@ (80129ec <HAL_ADC_Init+0x294>)
 801286c:	f7ff ff3a 	bl	80126e4 <LL_ADC_IsEnabled>
 8012870:	4603      	mov	r3, r0
 8012872:	4323      	orrs	r3, r4
 8012874:	2b00      	cmp	r3, #0
 8012876:	d105      	bne.n	8012884 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	4619      	mov	r1, r3
 801287e:	485c      	ldr	r0, [pc, #368]	@ (80129f0 <HAL_ADC_Init+0x298>)
 8012880:	f7ff fdde 	bl	8012440 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	7e5b      	ldrb	r3, [r3, #25]
 8012888:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801288e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8012894:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 801289a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80128a4:	4313      	orrs	r3, r2
 80128a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128ae:	2b01      	cmp	r3, #1
 80128b0:	d106      	bne.n	80128c0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128b6:	3b01      	subs	r3, #1
 80128b8:	045b      	lsls	r3, r3, #17
 80128ba:	69ba      	ldr	r2, [r7, #24]
 80128bc:	4313      	orrs	r3, r2
 80128be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d009      	beq.n	80128dc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128cc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80128d6:	69ba      	ldr	r2, [r7, #24]
 80128d8:	4313      	orrs	r3, r2
 80128da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	68da      	ldr	r2, [r3, #12]
 80128e2:	4b44      	ldr	r3, [pc, #272]	@ (80129f4 <HAL_ADC_Init+0x29c>)
 80128e4:	4013      	ands	r3, r2
 80128e6:	687a      	ldr	r2, [r7, #4]
 80128e8:	6812      	ldr	r2, [r2, #0]
 80128ea:	69b9      	ldr	r1, [r7, #24]
 80128ec:	430b      	orrs	r3, r1
 80128ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7ff ff1b 	bl	8012730 <LL_ADC_INJ_IsConversionOngoing>
 80128fa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d13d      	bne.n	801297e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8012902:	693b      	ldr	r3, [r7, #16]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d13a      	bne.n	801297e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 801290c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012914:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8012916:	4313      	orrs	r3, r2
 8012918:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	68db      	ldr	r3, [r3, #12]
 8012920:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012924:	f023 0302 	bic.w	r3, r3, #2
 8012928:	687a      	ldr	r2, [r7, #4]
 801292a:	6812      	ldr	r2, [r2, #0]
 801292c:	69b9      	ldr	r1, [r7, #24]
 801292e:	430b      	orrs	r3, r1
 8012930:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012938:	2b01      	cmp	r3, #1
 801293a:	d118      	bne.n	801296e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	691b      	ldr	r3, [r3, #16]
 8012942:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8012946:	f023 0304 	bic.w	r3, r3, #4
 801294a:	687a      	ldr	r2, [r7, #4]
 801294c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 801294e:	687a      	ldr	r2, [r7, #4]
 8012950:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8012952:	4311      	orrs	r1, r2
 8012954:	687a      	ldr	r2, [r7, #4]
 8012956:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8012958:	4311      	orrs	r1, r2
 801295a:	687a      	ldr	r2, [r7, #4]
 801295c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801295e:	430a      	orrs	r2, r1
 8012960:	431a      	orrs	r2, r3
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	f042 0201 	orr.w	r2, r2, #1
 801296a:	611a      	str	r2, [r3, #16]
 801296c:	e007      	b.n	801297e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	691a      	ldr	r2, [r3, #16]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	f022 0201 	bic.w	r2, r2, #1
 801297c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	691b      	ldr	r3, [r3, #16]
 8012982:	2b01      	cmp	r3, #1
 8012984:	d10c      	bne.n	80129a0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801298c:	f023 010f 	bic.w	r1, r3, #15
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	69db      	ldr	r3, [r3, #28]
 8012994:	1e5a      	subs	r2, r3, #1
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	430a      	orrs	r2, r1
 801299c:	631a      	str	r2, [r3, #48]	@ 0x30
 801299e:	e007      	b.n	80129b0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	f022 020f 	bic.w	r2, r2, #15
 80129ae:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129b4:	f023 0303 	bic.w	r3, r3, #3
 80129b8:	f043 0201 	orr.w	r2, r3, #1
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	655a      	str	r2, [r3, #84]	@ 0x54
 80129c0:	e007      	b.n	80129d2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129c6:	f043 0210 	orr.w	r2, r3, #16
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80129ce:	2301      	movs	r3, #1
 80129d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80129d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3724      	adds	r7, #36	@ 0x24
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd90      	pop	{r4, r7, pc}
 80129dc:	20000030 	.word	0x20000030
 80129e0:	053e2d63 	.word	0x053e2d63
 80129e4:	50040000 	.word	0x50040000
 80129e8:	50040100 	.word	0x50040100
 80129ec:	50040200 	.word	0x50040200
 80129f0:	50040300 	.word	0x50040300
 80129f4:	fff0c007 	.word	0xfff0c007

080129f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b0b6      	sub	sp, #216	@ 0xd8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
 8012a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012a02:	2300      	movs	r3, #0
 8012a04:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012a12:	2b01      	cmp	r3, #1
 8012a14:	d101      	bne.n	8012a1a <HAL_ADC_ConfigChannel+0x22>
 8012a16:	2302      	movs	r3, #2
 8012a18:	e3c9      	b.n	80131ae <HAL_ADC_ConfigChannel+0x7b6>
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2201      	movs	r2, #1
 8012a1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7ff fe6f 	bl	801270a <LL_ADC_REG_IsConversionOngoing>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	f040 83aa 	bne.w	8013188 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	685b      	ldr	r3, [r3, #4]
 8012a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	685b      	ldr	r3, [r3, #4]
 8012a40:	2b05      	cmp	r3, #5
 8012a42:	d824      	bhi.n	8012a8e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	685b      	ldr	r3, [r3, #4]
 8012a48:	3b02      	subs	r3, #2
 8012a4a:	2b03      	cmp	r3, #3
 8012a4c:	d81b      	bhi.n	8012a86 <HAL_ADC_ConfigChannel+0x8e>
 8012a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8012a54 <HAL_ADC_ConfigChannel+0x5c>)
 8012a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a54:	08012a65 	.word	0x08012a65
 8012a58:	08012a6d 	.word	0x08012a6d
 8012a5c:	08012a75 	.word	0x08012a75
 8012a60:	08012a7d 	.word	0x08012a7d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8012a64:	230c      	movs	r3, #12
 8012a66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8012a6a:	e010      	b.n	8012a8e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8012a6c:	2312      	movs	r3, #18
 8012a6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8012a72:	e00c      	b.n	8012a8e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8012a74:	2318      	movs	r3, #24
 8012a76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8012a7a:	e008      	b.n	8012a8e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8012a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8012a84:	e003      	b.n	8012a8e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8012a86:	2306      	movs	r3, #6
 8012a88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8012a8c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	6818      	ldr	r0, [r3, #0]
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	461a      	mov	r2, r3
 8012a98:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8012a9c:	f7ff fd59 	bl	8012552 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f7ff fe30 	bl	801270a <LL_ADC_REG_IsConversionOngoing>
 8012aaa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7ff fe3c 	bl	8012730 <LL_ADC_INJ_IsConversionOngoing>
 8012ab8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8012abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	f040 81a4 	bne.w	8012e0e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8012ac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	f040 819f 	bne.w	8012e0e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6818      	ldr	r0, [r3, #0]
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	6819      	ldr	r1, [r3, #0]
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	689b      	ldr	r3, [r3, #8]
 8012adc:	461a      	mov	r2, r3
 8012ade:	f7ff fd64 	bl	80125aa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	695a      	ldr	r2, [r3, #20]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	68db      	ldr	r3, [r3, #12]
 8012aec:	08db      	lsrs	r3, r3, #3
 8012aee:	f003 0303 	and.w	r3, r3, #3
 8012af2:	005b      	lsls	r3, r3, #1
 8012af4:	fa02 f303 	lsl.w	r3, r2, r3
 8012af8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	691b      	ldr	r3, [r3, #16]
 8012b00:	2b04      	cmp	r3, #4
 8012b02:	d00a      	beq.n	8012b1a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	6818      	ldr	r0, [r3, #0]
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	6919      	ldr	r1, [r3, #16]
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	681a      	ldr	r2, [r3, #0]
 8012b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b14:	f7ff fcc8 	bl	80124a8 <LL_ADC_SetOffset>
 8012b18:	e179      	b.n	8012e0e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2100      	movs	r1, #0
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7ff fce5 	bl	80124f0 <LL_ADC_GetOffsetChannel>
 8012b26:	4603      	mov	r3, r0
 8012b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d10a      	bne.n	8012b46 <HAL_ADC_ConfigChannel+0x14e>
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	2100      	movs	r1, #0
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7ff fcda 	bl	80124f0 <LL_ADC_GetOffsetChannel>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	0e9b      	lsrs	r3, r3, #26
 8012b40:	f003 021f 	and.w	r2, r3, #31
 8012b44:	e01e      	b.n	8012b84 <HAL_ADC_ConfigChannel+0x18c>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	2100      	movs	r1, #0
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7ff fccf 	bl	80124f0 <LL_ADC_GetOffsetChannel>
 8012b52:	4603      	mov	r3, r0
 8012b54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012b58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012b5c:	fa93 f3a3 	rbit	r3, r3
 8012b60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8012b64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8012b6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d101      	bne.n	8012b78 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8012b74:	2320      	movs	r3, #32
 8012b76:	e004      	b.n	8012b82 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8012b78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012b7c:	fab3 f383 	clz	r3, r3
 8012b80:	b2db      	uxtb	r3, r3
 8012b82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d105      	bne.n	8012b9c <HAL_ADC_ConfigChannel+0x1a4>
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	0e9b      	lsrs	r3, r3, #26
 8012b96:	f003 031f 	and.w	r3, r3, #31
 8012b9a:	e018      	b.n	8012bce <HAL_ADC_ConfigChannel+0x1d6>
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012ba8:	fa93 f3a3 	rbit	r3, r3
 8012bac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8012bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8012bb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d101      	bne.n	8012bc4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8012bc0:	2320      	movs	r3, #32
 8012bc2:	e004      	b.n	8012bce <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8012bc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012bc8:	fab3 f383 	clz	r3, r3
 8012bcc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d106      	bne.n	8012be0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	2100      	movs	r1, #0
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7ff fc9e 	bl	801251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	2101      	movs	r1, #1
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7ff fc82 	bl	80124f0 <LL_ADC_GetOffsetChannel>
 8012bec:	4603      	mov	r3, r0
 8012bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d10a      	bne.n	8012c0c <HAL_ADC_ConfigChannel+0x214>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	2101      	movs	r1, #1
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7ff fc77 	bl	80124f0 <LL_ADC_GetOffsetChannel>
 8012c02:	4603      	mov	r3, r0
 8012c04:	0e9b      	lsrs	r3, r3, #26
 8012c06:	f003 021f 	and.w	r2, r3, #31
 8012c0a:	e01e      	b.n	8012c4a <HAL_ADC_ConfigChannel+0x252>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	2101      	movs	r1, #1
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7ff fc6c 	bl	80124f0 <LL_ADC_GetOffsetChannel>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012c22:	fa93 f3a3 	rbit	r3, r3
 8012c26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8012c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8012c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d101      	bne.n	8012c3e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8012c3a:	2320      	movs	r3, #32
 8012c3c:	e004      	b.n	8012c48 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8012c3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012c42:	fab3 f383 	clz	r3, r3
 8012c46:	b2db      	uxtb	r3, r3
 8012c48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d105      	bne.n	8012c62 <HAL_ADC_ConfigChannel+0x26a>
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	0e9b      	lsrs	r3, r3, #26
 8012c5c:	f003 031f 	and.w	r3, r3, #31
 8012c60:	e018      	b.n	8012c94 <HAL_ADC_ConfigChannel+0x29c>
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012c6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012c6e:	fa93 f3a3 	rbit	r3, r3
 8012c72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8012c76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012c7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8012c7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d101      	bne.n	8012c8a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8012c86:	2320      	movs	r3, #32
 8012c88:	e004      	b.n	8012c94 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8012c8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012c8e:	fab3 f383 	clz	r3, r3
 8012c92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8012c94:	429a      	cmp	r2, r3
 8012c96:	d106      	bne.n	8012ca6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	2101      	movs	r1, #1
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7ff fc3b 	bl	801251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2102      	movs	r1, #2
 8012cac:	4618      	mov	r0, r3
 8012cae:	f7ff fc1f 	bl	80124f0 <LL_ADC_GetOffsetChannel>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d10a      	bne.n	8012cd2 <HAL_ADC_ConfigChannel+0x2da>
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	2102      	movs	r1, #2
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7ff fc14 	bl	80124f0 <LL_ADC_GetOffsetChannel>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	0e9b      	lsrs	r3, r3, #26
 8012ccc:	f003 021f 	and.w	r2, r3, #31
 8012cd0:	e01e      	b.n	8012d10 <HAL_ADC_ConfigChannel+0x318>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	2102      	movs	r1, #2
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7ff fc09 	bl	80124f0 <LL_ADC_GetOffsetChannel>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012ce8:	fa93 f3a3 	rbit	r3, r3
 8012cec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8012cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012cf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8012cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d101      	bne.n	8012d04 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8012d00:	2320      	movs	r3, #32
 8012d02:	e004      	b.n	8012d0e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8012d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012d08:	fab3 f383 	clz	r3, r3
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d105      	bne.n	8012d28 <HAL_ADC_ConfigChannel+0x330>
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	0e9b      	lsrs	r3, r3, #26
 8012d22:	f003 031f 	and.w	r3, r3, #31
 8012d26:	e014      	b.n	8012d52 <HAL_ADC_ConfigChannel+0x35a>
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012d2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012d30:	fa93 f3a3 	rbit	r3, r3
 8012d34:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8012d36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8012d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d101      	bne.n	8012d48 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8012d44:	2320      	movs	r3, #32
 8012d46:	e004      	b.n	8012d52 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8012d48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012d4c:	fab3 f383 	clz	r3, r3
 8012d50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d106      	bne.n	8012d64 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	2102      	movs	r1, #2
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7ff fbdc 	bl	801251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	2103      	movs	r1, #3
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7ff fbc0 	bl	80124f0 <LL_ADC_GetOffsetChannel>
 8012d70:	4603      	mov	r3, r0
 8012d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d10a      	bne.n	8012d90 <HAL_ADC_ConfigChannel+0x398>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	2103      	movs	r1, #3
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7ff fbb5 	bl	80124f0 <LL_ADC_GetOffsetChannel>
 8012d86:	4603      	mov	r3, r0
 8012d88:	0e9b      	lsrs	r3, r3, #26
 8012d8a:	f003 021f 	and.w	r2, r3, #31
 8012d8e:	e017      	b.n	8012dc0 <HAL_ADC_ConfigChannel+0x3c8>
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2103      	movs	r1, #3
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7ff fbaa 	bl	80124f0 <LL_ADC_GetOffsetChannel>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012da0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012da2:	fa93 f3a3 	rbit	r3, r3
 8012da6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8012da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012daa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8012dac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d101      	bne.n	8012db6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8012db2:	2320      	movs	r3, #32
 8012db4:	e003      	b.n	8012dbe <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8012db6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012db8:	fab3 f383 	clz	r3, r3
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d105      	bne.n	8012dd8 <HAL_ADC_ConfigChannel+0x3e0>
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	0e9b      	lsrs	r3, r3, #26
 8012dd2:	f003 031f 	and.w	r3, r3, #31
 8012dd6:	e011      	b.n	8012dfc <HAL_ADC_ConfigChannel+0x404>
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012dde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012de0:	fa93 f3a3 	rbit	r3, r3
 8012de4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8012de6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012de8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8012dea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d101      	bne.n	8012df4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8012df0:	2320      	movs	r3, #32
 8012df2:	e003      	b.n	8012dfc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8012df4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012df6:	fab3 f383 	clz	r3, r3
 8012dfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d106      	bne.n	8012e0e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	2200      	movs	r2, #0
 8012e06:	2103      	movs	r1, #3
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7ff fb87 	bl	801251c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7ff fc66 	bl	80126e4 <LL_ADC_IsEnabled>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	f040 8140 	bne.w	80130a0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6818      	ldr	r0, [r3, #0]
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	6819      	ldr	r1, [r3, #0]
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	68db      	ldr	r3, [r3, #12]
 8012e2c:	461a      	mov	r2, r3
 8012e2e:	f7ff fbe7 	bl	8012600 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	68db      	ldr	r3, [r3, #12]
 8012e36:	4a8f      	ldr	r2, [pc, #572]	@ (8013074 <HAL_ADC_ConfigChannel+0x67c>)
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	f040 8131 	bne.w	80130a0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d10b      	bne.n	8012e66 <HAL_ADC_ConfigChannel+0x46e>
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	0e9b      	lsrs	r3, r3, #26
 8012e54:	3301      	adds	r3, #1
 8012e56:	f003 031f 	and.w	r3, r3, #31
 8012e5a:	2b09      	cmp	r3, #9
 8012e5c:	bf94      	ite	ls
 8012e5e:	2301      	movls	r3, #1
 8012e60:	2300      	movhi	r3, #0
 8012e62:	b2db      	uxtb	r3, r3
 8012e64:	e019      	b.n	8012e9a <HAL_ADC_ConfigChannel+0x4a2>
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012e6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e6e:	fa93 f3a3 	rbit	r3, r3
 8012e72:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8012e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8012e78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d101      	bne.n	8012e82 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8012e7e:	2320      	movs	r3, #32
 8012e80:	e003      	b.n	8012e8a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8012e82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e84:	fab3 f383 	clz	r3, r3
 8012e88:	b2db      	uxtb	r3, r3
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	f003 031f 	and.w	r3, r3, #31
 8012e90:	2b09      	cmp	r3, #9
 8012e92:	bf94      	ite	ls
 8012e94:	2301      	movls	r3, #1
 8012e96:	2300      	movhi	r3, #0
 8012e98:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d079      	beq.n	8012f92 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d107      	bne.n	8012eba <HAL_ADC_ConfigChannel+0x4c2>
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	0e9b      	lsrs	r3, r3, #26
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	069b      	lsls	r3, r3, #26
 8012eb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8012eb8:	e015      	b.n	8012ee6 <HAL_ADC_ConfigChannel+0x4ee>
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012ec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ec2:	fa93 f3a3 	rbit	r3, r3
 8012ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8012ec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012eca:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8012ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d101      	bne.n	8012ed6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8012ed2:	2320      	movs	r3, #32
 8012ed4:	e003      	b.n	8012ede <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8012ed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ed8:	fab3 f383 	clz	r3, r3
 8012edc:	b2db      	uxtb	r3, r3
 8012ede:	3301      	adds	r3, #1
 8012ee0:	069b      	lsls	r3, r3, #26
 8012ee2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d109      	bne.n	8012f06 <HAL_ADC_ConfigChannel+0x50e>
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	0e9b      	lsrs	r3, r3, #26
 8012ef8:	3301      	adds	r3, #1
 8012efa:	f003 031f 	and.w	r3, r3, #31
 8012efe:	2101      	movs	r1, #1
 8012f00:	fa01 f303 	lsl.w	r3, r1, r3
 8012f04:	e017      	b.n	8012f36 <HAL_ADC_ConfigChannel+0x53e>
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f0e:	fa93 f3a3 	rbit	r3, r3
 8012f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8012f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f16:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8012f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d101      	bne.n	8012f22 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8012f1e:	2320      	movs	r3, #32
 8012f20:	e003      	b.n	8012f2a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8012f22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f24:	fab3 f383 	clz	r3, r3
 8012f28:	b2db      	uxtb	r3, r3
 8012f2a:	3301      	adds	r3, #1
 8012f2c:	f003 031f 	and.w	r3, r3, #31
 8012f30:	2101      	movs	r1, #1
 8012f32:	fa01 f303 	lsl.w	r3, r1, r3
 8012f36:	ea42 0103 	orr.w	r1, r2, r3
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d10a      	bne.n	8012f5c <HAL_ADC_ConfigChannel+0x564>
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	0e9b      	lsrs	r3, r3, #26
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	f003 021f 	and.w	r2, r3, #31
 8012f52:	4613      	mov	r3, r2
 8012f54:	005b      	lsls	r3, r3, #1
 8012f56:	4413      	add	r3, r2
 8012f58:	051b      	lsls	r3, r3, #20
 8012f5a:	e018      	b.n	8012f8e <HAL_ADC_ConfigChannel+0x596>
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f64:	fa93 f3a3 	rbit	r3, r3
 8012f68:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8012f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8012f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d101      	bne.n	8012f78 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8012f74:	2320      	movs	r3, #32
 8012f76:	e003      	b.n	8012f80 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8012f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f7a:	fab3 f383 	clz	r3, r3
 8012f7e:	b2db      	uxtb	r3, r3
 8012f80:	3301      	adds	r3, #1
 8012f82:	f003 021f 	and.w	r2, r3, #31
 8012f86:	4613      	mov	r3, r2
 8012f88:	005b      	lsls	r3, r3, #1
 8012f8a:	4413      	add	r3, r2
 8012f8c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012f8e:	430b      	orrs	r3, r1
 8012f90:	e081      	b.n	8013096 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d107      	bne.n	8012fae <HAL_ADC_ConfigChannel+0x5b6>
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	0e9b      	lsrs	r3, r3, #26
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	069b      	lsls	r3, r3, #26
 8012fa8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8012fac:	e015      	b.n	8012fda <HAL_ADC_ConfigChannel+0x5e2>
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fb6:	fa93 f3a3 	rbit	r3, r3
 8012fba:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8012fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8012fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d101      	bne.n	8012fca <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8012fc6:	2320      	movs	r3, #32
 8012fc8:	e003      	b.n	8012fd2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8012fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fcc:	fab3 f383 	clz	r3, r3
 8012fd0:	b2db      	uxtb	r3, r3
 8012fd2:	3301      	adds	r3, #1
 8012fd4:	069b      	lsls	r3, r3, #26
 8012fd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8012fda:	683b      	ldr	r3, [r7, #0]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d109      	bne.n	8012ffa <HAL_ADC_ConfigChannel+0x602>
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	0e9b      	lsrs	r3, r3, #26
 8012fec:	3301      	adds	r3, #1
 8012fee:	f003 031f 	and.w	r3, r3, #31
 8012ff2:	2101      	movs	r1, #1
 8012ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8012ff8:	e017      	b.n	801302a <HAL_ADC_ConfigChannel+0x632>
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	fa93 f3a3 	rbit	r3, r3
 8013006:	61bb      	str	r3, [r7, #24]
  return result;
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 801300c:	6a3b      	ldr	r3, [r7, #32]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d101      	bne.n	8013016 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8013012:	2320      	movs	r3, #32
 8013014:	e003      	b.n	801301e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8013016:	6a3b      	ldr	r3, [r7, #32]
 8013018:	fab3 f383 	clz	r3, r3
 801301c:	b2db      	uxtb	r3, r3
 801301e:	3301      	adds	r3, #1
 8013020:	f003 031f 	and.w	r3, r3, #31
 8013024:	2101      	movs	r1, #1
 8013026:	fa01 f303 	lsl.w	r3, r1, r3
 801302a:	ea42 0103 	orr.w	r1, r2, r3
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013036:	2b00      	cmp	r3, #0
 8013038:	d10d      	bne.n	8013056 <HAL_ADC_ConfigChannel+0x65e>
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	0e9b      	lsrs	r3, r3, #26
 8013040:	3301      	adds	r3, #1
 8013042:	f003 021f 	and.w	r2, r3, #31
 8013046:	4613      	mov	r3, r2
 8013048:	005b      	lsls	r3, r3, #1
 801304a:	4413      	add	r3, r2
 801304c:	3b1e      	subs	r3, #30
 801304e:	051b      	lsls	r3, r3, #20
 8013050:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8013054:	e01e      	b.n	8013094 <HAL_ADC_ConfigChannel+0x69c>
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	fa93 f3a3 	rbit	r3, r3
 8013062:	60fb      	str	r3, [r7, #12]
  return result;
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d104      	bne.n	8013078 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 801306e:	2320      	movs	r3, #32
 8013070:	e006      	b.n	8013080 <HAL_ADC_ConfigChannel+0x688>
 8013072:	bf00      	nop
 8013074:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	fab3 f383 	clz	r3, r3
 801307e:	b2db      	uxtb	r3, r3
 8013080:	3301      	adds	r3, #1
 8013082:	f003 021f 	and.w	r2, r3, #31
 8013086:	4613      	mov	r3, r2
 8013088:	005b      	lsls	r3, r3, #1
 801308a:	4413      	add	r3, r2
 801308c:	3b1e      	subs	r3, #30
 801308e:	051b      	lsls	r3, r3, #20
 8013090:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013094:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8013096:	683a      	ldr	r2, [r7, #0]
 8013098:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801309a:	4619      	mov	r1, r3
 801309c:	f7ff fa85 	bl	80125aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	4b44      	ldr	r3, [pc, #272]	@ (80131b8 <HAL_ADC_ConfigChannel+0x7c0>)
 80130a6:	4013      	ands	r3, r2
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d07a      	beq.n	80131a2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80130ac:	4843      	ldr	r0, [pc, #268]	@ (80131bc <HAL_ADC_ConfigChannel+0x7c4>)
 80130ae:	f7ff f9ed 	bl	801248c <LL_ADC_GetCommonPathInternalCh>
 80130b2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	4a41      	ldr	r2, [pc, #260]	@ (80131c0 <HAL_ADC_ConfigChannel+0x7c8>)
 80130bc:	4293      	cmp	r3, r2
 80130be:	d12c      	bne.n	801311a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80130c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80130c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d126      	bne.n	801311a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4a3c      	ldr	r2, [pc, #240]	@ (80131c4 <HAL_ADC_ConfigChannel+0x7cc>)
 80130d2:	4293      	cmp	r3, r2
 80130d4:	d004      	beq.n	80130e0 <HAL_ADC_ConfigChannel+0x6e8>
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	4a3b      	ldr	r2, [pc, #236]	@ (80131c8 <HAL_ADC_ConfigChannel+0x7d0>)
 80130dc:	4293      	cmp	r3, r2
 80130de:	d15d      	bne.n	801319c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80130e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80130e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80130e8:	4619      	mov	r1, r3
 80130ea:	4834      	ldr	r0, [pc, #208]	@ (80131bc <HAL_ADC_ConfigChannel+0x7c4>)
 80130ec:	f7ff f9bb 	bl	8012466 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80130f0:	4b36      	ldr	r3, [pc, #216]	@ (80131cc <HAL_ADC_ConfigChannel+0x7d4>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	099b      	lsrs	r3, r3, #6
 80130f6:	4a36      	ldr	r2, [pc, #216]	@ (80131d0 <HAL_ADC_ConfigChannel+0x7d8>)
 80130f8:	fba2 2303 	umull	r2, r3, r2, r3
 80130fc:	099b      	lsrs	r3, r3, #6
 80130fe:	1c5a      	adds	r2, r3, #1
 8013100:	4613      	mov	r3, r2
 8013102:	005b      	lsls	r3, r3, #1
 8013104:	4413      	add	r3, r2
 8013106:	009b      	lsls	r3, r3, #2
 8013108:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 801310a:	e002      	b.n	8013112 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	3b01      	subs	r3, #1
 8013110:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d1f9      	bne.n	801310c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8013118:	e040      	b.n	801319c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	4a2d      	ldr	r2, [pc, #180]	@ (80131d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8013120:	4293      	cmp	r3, r2
 8013122:	d118      	bne.n	8013156 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8013124:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801312c:	2b00      	cmp	r3, #0
 801312e:	d112      	bne.n	8013156 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	4a23      	ldr	r2, [pc, #140]	@ (80131c4 <HAL_ADC_ConfigChannel+0x7cc>)
 8013136:	4293      	cmp	r3, r2
 8013138:	d004      	beq.n	8013144 <HAL_ADC_ConfigChannel+0x74c>
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	4a22      	ldr	r2, [pc, #136]	@ (80131c8 <HAL_ADC_ConfigChannel+0x7d0>)
 8013140:	4293      	cmp	r3, r2
 8013142:	d12d      	bne.n	80131a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8013144:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013148:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801314c:	4619      	mov	r1, r3
 801314e:	481b      	ldr	r0, [pc, #108]	@ (80131bc <HAL_ADC_ConfigChannel+0x7c4>)
 8013150:	f7ff f989 	bl	8012466 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013154:	e024      	b.n	80131a0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	4a1f      	ldr	r2, [pc, #124]	@ (80131d8 <HAL_ADC_ConfigChannel+0x7e0>)
 801315c:	4293      	cmp	r3, r2
 801315e:	d120      	bne.n	80131a2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8013160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013164:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013168:	2b00      	cmp	r3, #0
 801316a:	d11a      	bne.n	80131a2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	4a14      	ldr	r2, [pc, #80]	@ (80131c4 <HAL_ADC_ConfigChannel+0x7cc>)
 8013172:	4293      	cmp	r3, r2
 8013174:	d115      	bne.n	80131a2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8013176:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801317a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801317e:	4619      	mov	r1, r3
 8013180:	480e      	ldr	r0, [pc, #56]	@ (80131bc <HAL_ADC_ConfigChannel+0x7c4>)
 8013182:	f7ff f970 	bl	8012466 <LL_ADC_SetCommonPathInternalCh>
 8013186:	e00c      	b.n	80131a2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801318c:	f043 0220 	orr.w	r2, r3, #32
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8013194:	2301      	movs	r3, #1
 8013196:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 801319a:	e002      	b.n	80131a2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801319c:	bf00      	nop
 801319e:	e000      	b.n	80131a2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80131a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2200      	movs	r2, #0
 80131a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80131aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	37d8      	adds	r7, #216	@ 0xd8
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	80080000 	.word	0x80080000
 80131bc:	50040300 	.word	0x50040300
 80131c0:	c7520000 	.word	0xc7520000
 80131c4:	50040000 	.word	0x50040000
 80131c8:	50040200 	.word	0x50040200
 80131cc:	20000030 	.word	0x20000030
 80131d0:	053e2d63 	.word	0x053e2d63
 80131d4:	cb840000 	.word	0xcb840000
 80131d8:	80000001 	.word	0x80000001

080131dc <LL_ADC_IsEnabled>:
{
 80131dc:	b480      	push	{r7}
 80131de:	b083      	sub	sp, #12
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	689b      	ldr	r3, [r3, #8]
 80131e8:	f003 0301 	and.w	r3, r3, #1
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d101      	bne.n	80131f4 <LL_ADC_IsEnabled+0x18>
 80131f0:	2301      	movs	r3, #1
 80131f2:	e000      	b.n	80131f6 <LL_ADC_IsEnabled+0x1a>
 80131f4:	2300      	movs	r3, #0
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	370c      	adds	r7, #12
 80131fa:	46bd      	mov	sp, r7
 80131fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013200:	4770      	bx	lr

08013202 <LL_ADC_REG_IsConversionOngoing>:
{
 8013202:	b480      	push	{r7}
 8013204:	b083      	sub	sp, #12
 8013206:	af00      	add	r7, sp, #0
 8013208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	689b      	ldr	r3, [r3, #8]
 801320e:	f003 0304 	and.w	r3, r3, #4
 8013212:	2b04      	cmp	r3, #4
 8013214:	d101      	bne.n	801321a <LL_ADC_REG_IsConversionOngoing+0x18>
 8013216:	2301      	movs	r3, #1
 8013218:	e000      	b.n	801321c <LL_ADC_REG_IsConversionOngoing+0x1a>
 801321a:	2300      	movs	r3, #0
}
 801321c:	4618      	mov	r0, r3
 801321e:	370c      	adds	r7, #12
 8013220:	46bd      	mov	sp, r7
 8013222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013226:	4770      	bx	lr

08013228 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8013228:	b590      	push	{r4, r7, lr}
 801322a:	b09f      	sub	sp, #124	@ 0x7c
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
 8013230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013232:	2300      	movs	r3, #0
 8013234:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801323e:	2b01      	cmp	r3, #1
 8013240:	d101      	bne.n	8013246 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8013242:	2302      	movs	r3, #2
 8013244:	e093      	b.n	801336e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2201      	movs	r2, #1
 801324a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 801324e:	2300      	movs	r3, #0
 8013250:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8013252:	2300      	movs	r3, #0
 8013254:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	4a47      	ldr	r2, [pc, #284]	@ (8013378 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 801325c:	4293      	cmp	r3, r2
 801325e:	d102      	bne.n	8013266 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8013260:	4b46      	ldr	r3, [pc, #280]	@ (801337c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8013262:	60bb      	str	r3, [r7, #8]
 8013264:	e001      	b.n	801326a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8013266:	2300      	movs	r3, #0
 8013268:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d10b      	bne.n	8013288 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013274:	f043 0220 	orr.w	r2, r3, #32
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2200      	movs	r2, #0
 8013280:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8013284:	2301      	movs	r3, #1
 8013286:	e072      	b.n	801336e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	4618      	mov	r0, r3
 801328c:	f7ff ffb9 	bl	8013202 <LL_ADC_REG_IsConversionOngoing>
 8013290:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	4618      	mov	r0, r3
 8013298:	f7ff ffb3 	bl	8013202 <LL_ADC_REG_IsConversionOngoing>
 801329c:	4603      	mov	r3, r0
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d154      	bne.n	801334c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80132a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d151      	bne.n	801334c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80132a8:	4b35      	ldr	r3, [pc, #212]	@ (8013380 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80132aa:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d02c      	beq.n	801330e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80132b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80132b6:	689b      	ldr	r3, [r3, #8]
 80132b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	6859      	ldr	r1, [r3, #4]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80132c6:	035b      	lsls	r3, r3, #13
 80132c8:	430b      	orrs	r3, r1
 80132ca:	431a      	orrs	r2, r3
 80132cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80132ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80132d0:	4829      	ldr	r0, [pc, #164]	@ (8013378 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80132d2:	f7ff ff83 	bl	80131dc <LL_ADC_IsEnabled>
 80132d6:	4604      	mov	r4, r0
 80132d8:	4828      	ldr	r0, [pc, #160]	@ (801337c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80132da:	f7ff ff7f 	bl	80131dc <LL_ADC_IsEnabled>
 80132de:	4603      	mov	r3, r0
 80132e0:	431c      	orrs	r4, r3
 80132e2:	4828      	ldr	r0, [pc, #160]	@ (8013384 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80132e4:	f7ff ff7a 	bl	80131dc <LL_ADC_IsEnabled>
 80132e8:	4603      	mov	r3, r0
 80132ea:	4323      	orrs	r3, r4
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d137      	bne.n	8013360 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80132f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80132f2:	689b      	ldr	r3, [r3, #8]
 80132f4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80132f8:	f023 030f 	bic.w	r3, r3, #15
 80132fc:	683a      	ldr	r2, [r7, #0]
 80132fe:	6811      	ldr	r1, [r2, #0]
 8013300:	683a      	ldr	r2, [r7, #0]
 8013302:	6892      	ldr	r2, [r2, #8]
 8013304:	430a      	orrs	r2, r1
 8013306:	431a      	orrs	r2, r3
 8013308:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801330a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 801330c:	e028      	b.n	8013360 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801330e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013310:	689b      	ldr	r3, [r3, #8]
 8013312:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8013316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013318:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801331a:	4817      	ldr	r0, [pc, #92]	@ (8013378 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 801331c:	f7ff ff5e 	bl	80131dc <LL_ADC_IsEnabled>
 8013320:	4604      	mov	r4, r0
 8013322:	4816      	ldr	r0, [pc, #88]	@ (801337c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8013324:	f7ff ff5a 	bl	80131dc <LL_ADC_IsEnabled>
 8013328:	4603      	mov	r3, r0
 801332a:	431c      	orrs	r4, r3
 801332c:	4815      	ldr	r0, [pc, #84]	@ (8013384 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 801332e:	f7ff ff55 	bl	80131dc <LL_ADC_IsEnabled>
 8013332:	4603      	mov	r3, r0
 8013334:	4323      	orrs	r3, r4
 8013336:	2b00      	cmp	r3, #0
 8013338:	d112      	bne.n	8013360 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801333a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801333c:	689b      	ldr	r3, [r3, #8]
 801333e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8013342:	f023 030f 	bic.w	r3, r3, #15
 8013346:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013348:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 801334a:	e009      	b.n	8013360 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013350:	f043 0220 	orr.w	r2, r3, #32
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8013358:	2301      	movs	r3, #1
 801335a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 801335e:	e000      	b.n	8013362 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8013360:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2200      	movs	r2, #0
 8013366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 801336a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 801336e:	4618      	mov	r0, r3
 8013370:	377c      	adds	r7, #124	@ 0x7c
 8013372:	46bd      	mov	sp, r7
 8013374:	bd90      	pop	{r4, r7, pc}
 8013376:	bf00      	nop
 8013378:	50040000 	.word	0x50040000
 801337c:	50040100 	.word	0x50040100
 8013380:	50040300 	.word	0x50040300
 8013384:	50040200 	.word	0x50040200

08013388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013388:	b480      	push	{r7}
 801338a:	b085      	sub	sp, #20
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f003 0307 	and.w	r3, r3, #7
 8013396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013398:	4b0c      	ldr	r3, [pc, #48]	@ (80133cc <__NVIC_SetPriorityGrouping+0x44>)
 801339a:	68db      	ldr	r3, [r3, #12]
 801339c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801339e:	68ba      	ldr	r2, [r7, #8]
 80133a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80133a4:	4013      	ands	r3, r2
 80133a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80133b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80133b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80133b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80133ba:	4a04      	ldr	r2, [pc, #16]	@ (80133cc <__NVIC_SetPriorityGrouping+0x44>)
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	60d3      	str	r3, [r2, #12]
}
 80133c0:	bf00      	nop
 80133c2:	3714      	adds	r7, #20
 80133c4:	46bd      	mov	sp, r7
 80133c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ca:	4770      	bx	lr
 80133cc:	e000ed00 	.word	0xe000ed00

080133d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80133d0:	b480      	push	{r7}
 80133d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80133d4:	4b04      	ldr	r3, [pc, #16]	@ (80133e8 <__NVIC_GetPriorityGrouping+0x18>)
 80133d6:	68db      	ldr	r3, [r3, #12]
 80133d8:	0a1b      	lsrs	r3, r3, #8
 80133da:	f003 0307 	and.w	r3, r3, #7
}
 80133de:	4618      	mov	r0, r3
 80133e0:	46bd      	mov	sp, r7
 80133e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e6:	4770      	bx	lr
 80133e8:	e000ed00 	.word	0xe000ed00

080133ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	4603      	mov	r3, r0
 80133f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80133f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	db0b      	blt.n	8013416 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80133fe:	79fb      	ldrb	r3, [r7, #7]
 8013400:	f003 021f 	and.w	r2, r3, #31
 8013404:	4907      	ldr	r1, [pc, #28]	@ (8013424 <__NVIC_EnableIRQ+0x38>)
 8013406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801340a:	095b      	lsrs	r3, r3, #5
 801340c:	2001      	movs	r0, #1
 801340e:	fa00 f202 	lsl.w	r2, r0, r2
 8013412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8013416:	bf00      	nop
 8013418:	370c      	adds	r7, #12
 801341a:	46bd      	mov	sp, r7
 801341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013420:	4770      	bx	lr
 8013422:	bf00      	nop
 8013424:	e000e100 	.word	0xe000e100

08013428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8013428:	b480      	push	{r7}
 801342a:	b083      	sub	sp, #12
 801342c:	af00      	add	r7, sp, #0
 801342e:	4603      	mov	r3, r0
 8013430:	6039      	str	r1, [r7, #0]
 8013432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013438:	2b00      	cmp	r3, #0
 801343a:	db0a      	blt.n	8013452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	b2da      	uxtb	r2, r3
 8013440:	490c      	ldr	r1, [pc, #48]	@ (8013474 <__NVIC_SetPriority+0x4c>)
 8013442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013446:	0112      	lsls	r2, r2, #4
 8013448:	b2d2      	uxtb	r2, r2
 801344a:	440b      	add	r3, r1
 801344c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8013450:	e00a      	b.n	8013468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	b2da      	uxtb	r2, r3
 8013456:	4908      	ldr	r1, [pc, #32]	@ (8013478 <__NVIC_SetPriority+0x50>)
 8013458:	79fb      	ldrb	r3, [r7, #7]
 801345a:	f003 030f 	and.w	r3, r3, #15
 801345e:	3b04      	subs	r3, #4
 8013460:	0112      	lsls	r2, r2, #4
 8013462:	b2d2      	uxtb	r2, r2
 8013464:	440b      	add	r3, r1
 8013466:	761a      	strb	r2, [r3, #24]
}
 8013468:	bf00      	nop
 801346a:	370c      	adds	r7, #12
 801346c:	46bd      	mov	sp, r7
 801346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013472:	4770      	bx	lr
 8013474:	e000e100 	.word	0xe000e100
 8013478:	e000ed00 	.word	0xe000ed00

0801347c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801347c:	b480      	push	{r7}
 801347e:	b089      	sub	sp, #36	@ 0x24
 8013480:	af00      	add	r7, sp, #0
 8013482:	60f8      	str	r0, [r7, #12]
 8013484:	60b9      	str	r1, [r7, #8]
 8013486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	f003 0307 	and.w	r3, r3, #7
 801348e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8013490:	69fb      	ldr	r3, [r7, #28]
 8013492:	f1c3 0307 	rsb	r3, r3, #7
 8013496:	2b04      	cmp	r3, #4
 8013498:	bf28      	it	cs
 801349a:	2304      	movcs	r3, #4
 801349c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801349e:	69fb      	ldr	r3, [r7, #28]
 80134a0:	3304      	adds	r3, #4
 80134a2:	2b06      	cmp	r3, #6
 80134a4:	d902      	bls.n	80134ac <NVIC_EncodePriority+0x30>
 80134a6:	69fb      	ldr	r3, [r7, #28]
 80134a8:	3b03      	subs	r3, #3
 80134aa:	e000      	b.n	80134ae <NVIC_EncodePriority+0x32>
 80134ac:	2300      	movs	r3, #0
 80134ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80134b0:	f04f 32ff 	mov.w	r2, #4294967295
 80134b4:	69bb      	ldr	r3, [r7, #24]
 80134b6:	fa02 f303 	lsl.w	r3, r2, r3
 80134ba:	43da      	mvns	r2, r3
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	401a      	ands	r2, r3
 80134c0:	697b      	ldr	r3, [r7, #20]
 80134c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80134c4:	f04f 31ff 	mov.w	r1, #4294967295
 80134c8:	697b      	ldr	r3, [r7, #20]
 80134ca:	fa01 f303 	lsl.w	r3, r1, r3
 80134ce:	43d9      	mvns	r1, r3
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80134d4:	4313      	orrs	r3, r2
         );
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3724      	adds	r7, #36	@ 0x24
 80134da:	46bd      	mov	sp, r7
 80134dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e0:	4770      	bx	lr

080134e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80134e2:	b580      	push	{r7, lr}
 80134e4:	b082      	sub	sp, #8
 80134e6:	af00      	add	r7, sp, #0
 80134e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f7ff ff4c 	bl	8013388 <__NVIC_SetPriorityGrouping>
}
 80134f0:	bf00      	nop
 80134f2:	3708      	adds	r7, #8
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}

080134f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b086      	sub	sp, #24
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	4603      	mov	r3, r0
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	607a      	str	r2, [r7, #4]
 8013504:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8013506:	2300      	movs	r3, #0
 8013508:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801350a:	f7ff ff61 	bl	80133d0 <__NVIC_GetPriorityGrouping>
 801350e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8013510:	687a      	ldr	r2, [r7, #4]
 8013512:	68b9      	ldr	r1, [r7, #8]
 8013514:	6978      	ldr	r0, [r7, #20]
 8013516:	f7ff ffb1 	bl	801347c <NVIC_EncodePriority>
 801351a:	4602      	mov	r2, r0
 801351c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013520:	4611      	mov	r1, r2
 8013522:	4618      	mov	r0, r3
 8013524:	f7ff ff80 	bl	8013428 <__NVIC_SetPriority>
}
 8013528:	bf00      	nop
 801352a:	3718      	adds	r7, #24
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}

08013530 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b082      	sub	sp, #8
 8013534:	af00      	add	r7, sp, #0
 8013536:	4603      	mov	r3, r0
 8013538:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801353e:	4618      	mov	r0, r3
 8013540:	f7ff ff54 	bl	80133ec <__NVIC_EnableIRQ>
}
 8013544:	bf00      	nop
 8013546:	3708      	adds	r7, #8
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}

0801354c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801354c:	b480      	push	{r7}
 801354e:	b085      	sub	sp, #20
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013554:	2300      	movs	r3, #0
 8013556:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 801355e:	b2db      	uxtb	r3, r3
 8013560:	2b02      	cmp	r3, #2
 8013562:	d008      	beq.n	8013576 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2204      	movs	r2, #4
 8013568:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2200      	movs	r2, #0
 801356e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8013572:	2301      	movs	r3, #1
 8013574:	e022      	b.n	80135bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	681a      	ldr	r2, [r3, #0]
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	f022 020e 	bic.w	r2, r2, #14
 8013584:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	681a      	ldr	r2, [r3, #0]
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	f022 0201 	bic.w	r2, r2, #1
 8013594:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801359a:	f003 021c 	and.w	r2, r3, #28
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135a2:	2101      	movs	r1, #1
 80135a4:	fa01 f202 	lsl.w	r2, r1, r2
 80135a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2201      	movs	r2, #1
 80135ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	2200      	movs	r2, #0
 80135b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80135ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3714      	adds	r7, #20
 80135c0:	46bd      	mov	sp, r7
 80135c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c6:	4770      	bx	lr

080135c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b084      	sub	sp, #16
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80135d0:	2300      	movs	r3, #0
 80135d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80135da:	b2db      	uxtb	r3, r3
 80135dc:	2b02      	cmp	r3, #2
 80135de:	d005      	beq.n	80135ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2204      	movs	r2, #4
 80135e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80135e6:	2301      	movs	r3, #1
 80135e8:	73fb      	strb	r3, [r7, #15]
 80135ea:	e029      	b.n	8013640 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	681a      	ldr	r2, [r3, #0]
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	f022 020e 	bic.w	r2, r2, #14
 80135fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	681a      	ldr	r2, [r3, #0]
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	f022 0201 	bic.w	r2, r2, #1
 801360a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013610:	f003 021c 	and.w	r2, r3, #28
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013618:	2101      	movs	r1, #1
 801361a:	fa01 f202 	lsl.w	r2, r1, r2
 801361e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2201      	movs	r2, #1
 8013624:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2200      	movs	r2, #0
 801362c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013634:	2b00      	cmp	r3, #0
 8013636:	d003      	beq.n	8013640 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	4798      	blx	r3
    }
  }
  return status;
 8013640:	7bfb      	ldrb	r3, [r7, #15]
}
 8013642:	4618      	mov	r0, r3
 8013644:	3710      	adds	r7, #16
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}

0801364a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801364a:	b480      	push	{r7}
 801364c:	b083      	sub	sp, #12
 801364e:	af00      	add	r7, sp, #0
 8013650:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8013658:	b2db      	uxtb	r3, r3
}
 801365a:	4618      	mov	r0, r3
 801365c:	370c      	adds	r7, #12
 801365e:	46bd      	mov	sp, r7
 8013660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013664:	4770      	bx	lr
	...

08013668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013668:	b480      	push	{r7}
 801366a:	b087      	sub	sp, #28
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8013672:	2300      	movs	r3, #0
 8013674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8013676:	e17f      	b.n	8013978 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	681a      	ldr	r2, [r3, #0]
 801367c:	2101      	movs	r1, #1
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	fa01 f303 	lsl.w	r3, r1, r3
 8013684:	4013      	ands	r3, r2
 8013686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2b00      	cmp	r3, #0
 801368c:	f000 8171 	beq.w	8013972 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	f003 0303 	and.w	r3, r3, #3
 8013698:	2b01      	cmp	r3, #1
 801369a:	d005      	beq.n	80136a8 <HAL_GPIO_Init+0x40>
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	685b      	ldr	r3, [r3, #4]
 80136a0:	f003 0303 	and.w	r3, r3, #3
 80136a4:	2b02      	cmp	r3, #2
 80136a6:	d130      	bne.n	801370a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	689b      	ldr	r3, [r3, #8]
 80136ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	005b      	lsls	r3, r3, #1
 80136b2:	2203      	movs	r2, #3
 80136b4:	fa02 f303 	lsl.w	r3, r2, r3
 80136b8:	43db      	mvns	r3, r3
 80136ba:	693a      	ldr	r2, [r7, #16]
 80136bc:	4013      	ands	r3, r2
 80136be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80136c0:	683b      	ldr	r3, [r7, #0]
 80136c2:	68da      	ldr	r2, [r3, #12]
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	005b      	lsls	r3, r3, #1
 80136c8:	fa02 f303 	lsl.w	r3, r2, r3
 80136cc:	693a      	ldr	r2, [r7, #16]
 80136ce:	4313      	orrs	r3, r2
 80136d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	693a      	ldr	r2, [r7, #16]
 80136d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	685b      	ldr	r3, [r3, #4]
 80136dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80136de:	2201      	movs	r2, #1
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	fa02 f303 	lsl.w	r3, r2, r3
 80136e6:	43db      	mvns	r3, r3
 80136e8:	693a      	ldr	r2, [r7, #16]
 80136ea:	4013      	ands	r3, r2
 80136ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	685b      	ldr	r3, [r3, #4]
 80136f2:	091b      	lsrs	r3, r3, #4
 80136f4:	f003 0201 	and.w	r2, r3, #1
 80136f8:	697b      	ldr	r3, [r7, #20]
 80136fa:	fa02 f303 	lsl.w	r3, r2, r3
 80136fe:	693a      	ldr	r2, [r7, #16]
 8013700:	4313      	orrs	r3, r2
 8013702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	693a      	ldr	r2, [r7, #16]
 8013708:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	685b      	ldr	r3, [r3, #4]
 801370e:	f003 0303 	and.w	r3, r3, #3
 8013712:	2b03      	cmp	r3, #3
 8013714:	d118      	bne.n	8013748 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801371a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 801371c:	2201      	movs	r2, #1
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	fa02 f303 	lsl.w	r3, r2, r3
 8013724:	43db      	mvns	r3, r3
 8013726:	693a      	ldr	r2, [r7, #16]
 8013728:	4013      	ands	r3, r2
 801372a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	685b      	ldr	r3, [r3, #4]
 8013730:	08db      	lsrs	r3, r3, #3
 8013732:	f003 0201 	and.w	r2, r3, #1
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	fa02 f303 	lsl.w	r3, r2, r3
 801373c:	693a      	ldr	r2, [r7, #16]
 801373e:	4313      	orrs	r3, r2
 8013740:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	693a      	ldr	r2, [r7, #16]
 8013746:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	685b      	ldr	r3, [r3, #4]
 801374c:	f003 0303 	and.w	r3, r3, #3
 8013750:	2b03      	cmp	r3, #3
 8013752:	d017      	beq.n	8013784 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	68db      	ldr	r3, [r3, #12]
 8013758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	005b      	lsls	r3, r3, #1
 801375e:	2203      	movs	r2, #3
 8013760:	fa02 f303 	lsl.w	r3, r2, r3
 8013764:	43db      	mvns	r3, r3
 8013766:	693a      	ldr	r2, [r7, #16]
 8013768:	4013      	ands	r3, r2
 801376a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	689a      	ldr	r2, [r3, #8]
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	005b      	lsls	r3, r3, #1
 8013774:	fa02 f303 	lsl.w	r3, r2, r3
 8013778:	693a      	ldr	r2, [r7, #16]
 801377a:	4313      	orrs	r3, r2
 801377c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	693a      	ldr	r2, [r7, #16]
 8013782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	685b      	ldr	r3, [r3, #4]
 8013788:	f003 0303 	and.w	r3, r3, #3
 801378c:	2b02      	cmp	r3, #2
 801378e:	d123      	bne.n	80137d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8013790:	697b      	ldr	r3, [r7, #20]
 8013792:	08da      	lsrs	r2, r3, #3
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	3208      	adds	r2, #8
 8013798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801379c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	f003 0307 	and.w	r3, r3, #7
 80137a4:	009b      	lsls	r3, r3, #2
 80137a6:	220f      	movs	r2, #15
 80137a8:	fa02 f303 	lsl.w	r3, r2, r3
 80137ac:	43db      	mvns	r3, r3
 80137ae:	693a      	ldr	r2, [r7, #16]
 80137b0:	4013      	ands	r3, r2
 80137b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	691a      	ldr	r2, [r3, #16]
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	f003 0307 	and.w	r3, r3, #7
 80137be:	009b      	lsls	r3, r3, #2
 80137c0:	fa02 f303 	lsl.w	r3, r2, r3
 80137c4:	693a      	ldr	r2, [r7, #16]
 80137c6:	4313      	orrs	r3, r2
 80137c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	08da      	lsrs	r2, r3, #3
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	3208      	adds	r2, #8
 80137d2:	6939      	ldr	r1, [r7, #16]
 80137d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	005b      	lsls	r3, r3, #1
 80137e2:	2203      	movs	r2, #3
 80137e4:	fa02 f303 	lsl.w	r3, r2, r3
 80137e8:	43db      	mvns	r3, r3
 80137ea:	693a      	ldr	r2, [r7, #16]
 80137ec:	4013      	ands	r3, r2
 80137ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	685b      	ldr	r3, [r3, #4]
 80137f4:	f003 0203 	and.w	r2, r3, #3
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	005b      	lsls	r3, r3, #1
 80137fc:	fa02 f303 	lsl.w	r3, r2, r3
 8013800:	693a      	ldr	r2, [r7, #16]
 8013802:	4313      	orrs	r3, r2
 8013804:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	693a      	ldr	r2, [r7, #16]
 801380a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	685b      	ldr	r3, [r3, #4]
 8013810:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013814:	2b00      	cmp	r3, #0
 8013816:	f000 80ac 	beq.w	8013972 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801381a:	4b5f      	ldr	r3, [pc, #380]	@ (8013998 <HAL_GPIO_Init+0x330>)
 801381c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801381e:	4a5e      	ldr	r2, [pc, #376]	@ (8013998 <HAL_GPIO_Init+0x330>)
 8013820:	f043 0301 	orr.w	r3, r3, #1
 8013824:	6613      	str	r3, [r2, #96]	@ 0x60
 8013826:	4b5c      	ldr	r3, [pc, #368]	@ (8013998 <HAL_GPIO_Init+0x330>)
 8013828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801382a:	f003 0301 	and.w	r3, r3, #1
 801382e:	60bb      	str	r3, [r7, #8]
 8013830:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8013832:	4a5a      	ldr	r2, [pc, #360]	@ (801399c <HAL_GPIO_Init+0x334>)
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	089b      	lsrs	r3, r3, #2
 8013838:	3302      	adds	r3, #2
 801383a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801383e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	f003 0303 	and.w	r3, r3, #3
 8013846:	009b      	lsls	r3, r3, #2
 8013848:	220f      	movs	r2, #15
 801384a:	fa02 f303 	lsl.w	r3, r2, r3
 801384e:	43db      	mvns	r3, r3
 8013850:	693a      	ldr	r2, [r7, #16]
 8013852:	4013      	ands	r3, r2
 8013854:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 801385c:	d025      	beq.n	80138aa <HAL_GPIO_Init+0x242>
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	4a4f      	ldr	r2, [pc, #316]	@ (80139a0 <HAL_GPIO_Init+0x338>)
 8013862:	4293      	cmp	r3, r2
 8013864:	d01f      	beq.n	80138a6 <HAL_GPIO_Init+0x23e>
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	4a4e      	ldr	r2, [pc, #312]	@ (80139a4 <HAL_GPIO_Init+0x33c>)
 801386a:	4293      	cmp	r3, r2
 801386c:	d019      	beq.n	80138a2 <HAL_GPIO_Init+0x23a>
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	4a4d      	ldr	r2, [pc, #308]	@ (80139a8 <HAL_GPIO_Init+0x340>)
 8013872:	4293      	cmp	r3, r2
 8013874:	d013      	beq.n	801389e <HAL_GPIO_Init+0x236>
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	4a4c      	ldr	r2, [pc, #304]	@ (80139ac <HAL_GPIO_Init+0x344>)
 801387a:	4293      	cmp	r3, r2
 801387c:	d00d      	beq.n	801389a <HAL_GPIO_Init+0x232>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	4a4b      	ldr	r2, [pc, #300]	@ (80139b0 <HAL_GPIO_Init+0x348>)
 8013882:	4293      	cmp	r3, r2
 8013884:	d007      	beq.n	8013896 <HAL_GPIO_Init+0x22e>
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	4a4a      	ldr	r2, [pc, #296]	@ (80139b4 <HAL_GPIO_Init+0x34c>)
 801388a:	4293      	cmp	r3, r2
 801388c:	d101      	bne.n	8013892 <HAL_GPIO_Init+0x22a>
 801388e:	2306      	movs	r3, #6
 8013890:	e00c      	b.n	80138ac <HAL_GPIO_Init+0x244>
 8013892:	2307      	movs	r3, #7
 8013894:	e00a      	b.n	80138ac <HAL_GPIO_Init+0x244>
 8013896:	2305      	movs	r3, #5
 8013898:	e008      	b.n	80138ac <HAL_GPIO_Init+0x244>
 801389a:	2304      	movs	r3, #4
 801389c:	e006      	b.n	80138ac <HAL_GPIO_Init+0x244>
 801389e:	2303      	movs	r3, #3
 80138a0:	e004      	b.n	80138ac <HAL_GPIO_Init+0x244>
 80138a2:	2302      	movs	r3, #2
 80138a4:	e002      	b.n	80138ac <HAL_GPIO_Init+0x244>
 80138a6:	2301      	movs	r3, #1
 80138a8:	e000      	b.n	80138ac <HAL_GPIO_Init+0x244>
 80138aa:	2300      	movs	r3, #0
 80138ac:	697a      	ldr	r2, [r7, #20]
 80138ae:	f002 0203 	and.w	r2, r2, #3
 80138b2:	0092      	lsls	r2, r2, #2
 80138b4:	4093      	lsls	r3, r2
 80138b6:	693a      	ldr	r2, [r7, #16]
 80138b8:	4313      	orrs	r3, r2
 80138ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80138bc:	4937      	ldr	r1, [pc, #220]	@ (801399c <HAL_GPIO_Init+0x334>)
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	089b      	lsrs	r3, r3, #2
 80138c2:	3302      	adds	r3, #2
 80138c4:	693a      	ldr	r2, [r7, #16]
 80138c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80138ca:	4b3b      	ldr	r3, [pc, #236]	@ (80139b8 <HAL_GPIO_Init+0x350>)
 80138cc:	689b      	ldr	r3, [r3, #8]
 80138ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	43db      	mvns	r3, r3
 80138d4:	693a      	ldr	r2, [r7, #16]
 80138d6:	4013      	ands	r3, r2
 80138d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	685b      	ldr	r3, [r3, #4]
 80138de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d003      	beq.n	80138ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80138e6:	693a      	ldr	r2, [r7, #16]
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	4313      	orrs	r3, r2
 80138ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80138ee:	4a32      	ldr	r2, [pc, #200]	@ (80139b8 <HAL_GPIO_Init+0x350>)
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80138f4:	4b30      	ldr	r3, [pc, #192]	@ (80139b8 <HAL_GPIO_Init+0x350>)
 80138f6:	68db      	ldr	r3, [r3, #12]
 80138f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	43db      	mvns	r3, r3
 80138fe:	693a      	ldr	r2, [r7, #16]
 8013900:	4013      	ands	r3, r2
 8013902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	685b      	ldr	r3, [r3, #4]
 8013908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801390c:	2b00      	cmp	r3, #0
 801390e:	d003      	beq.n	8013918 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8013910:	693a      	ldr	r2, [r7, #16]
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	4313      	orrs	r3, r2
 8013916:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8013918:	4a27      	ldr	r2, [pc, #156]	@ (80139b8 <HAL_GPIO_Init+0x350>)
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 801391e:	4b26      	ldr	r3, [pc, #152]	@ (80139b8 <HAL_GPIO_Init+0x350>)
 8013920:	685b      	ldr	r3, [r3, #4]
 8013922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	43db      	mvns	r3, r3
 8013928:	693a      	ldr	r2, [r7, #16]
 801392a:	4013      	ands	r3, r2
 801392c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013936:	2b00      	cmp	r3, #0
 8013938:	d003      	beq.n	8013942 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 801393a:	693a      	ldr	r2, [r7, #16]
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	4313      	orrs	r3, r2
 8013940:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8013942:	4a1d      	ldr	r2, [pc, #116]	@ (80139b8 <HAL_GPIO_Init+0x350>)
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8013948:	4b1b      	ldr	r3, [pc, #108]	@ (80139b8 <HAL_GPIO_Init+0x350>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	43db      	mvns	r3, r3
 8013952:	693a      	ldr	r2, [r7, #16]
 8013954:	4013      	ands	r3, r2
 8013956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	685b      	ldr	r3, [r3, #4]
 801395c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013960:	2b00      	cmp	r3, #0
 8013962:	d003      	beq.n	801396c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8013964:	693a      	ldr	r2, [r7, #16]
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	4313      	orrs	r3, r2
 801396a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801396c:	4a12      	ldr	r2, [pc, #72]	@ (80139b8 <HAL_GPIO_Init+0x350>)
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	3301      	adds	r3, #1
 8013976:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	fa22 f303 	lsr.w	r3, r2, r3
 8013982:	2b00      	cmp	r3, #0
 8013984:	f47f ae78 	bne.w	8013678 <HAL_GPIO_Init+0x10>
  }
}
 8013988:	bf00      	nop
 801398a:	bf00      	nop
 801398c:	371c      	adds	r7, #28
 801398e:	46bd      	mov	sp, r7
 8013990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013994:	4770      	bx	lr
 8013996:	bf00      	nop
 8013998:	40021000 	.word	0x40021000
 801399c:	40010000 	.word	0x40010000
 80139a0:	48000400 	.word	0x48000400
 80139a4:	48000800 	.word	0x48000800
 80139a8:	48000c00 	.word	0x48000c00
 80139ac:	48001000 	.word	0x48001000
 80139b0:	48001400 	.word	0x48001400
 80139b4:	48001800 	.word	0x48001800
 80139b8:	40010400 	.word	0x40010400

080139bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80139bc:	b480      	push	{r7}
 80139be:	b085      	sub	sp, #20
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	460b      	mov	r3, r1
 80139c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	691a      	ldr	r2, [r3, #16]
 80139cc:	887b      	ldrh	r3, [r7, #2]
 80139ce:	4013      	ands	r3, r2
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d002      	beq.n	80139da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80139d4:	2301      	movs	r3, #1
 80139d6:	73fb      	strb	r3, [r7, #15]
 80139d8:	e001      	b.n	80139de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80139da:	2300      	movs	r3, #0
 80139dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80139de:	7bfb      	ldrb	r3, [r7, #15]
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3714      	adds	r7, #20
 80139e4:	46bd      	mov	sp, r7
 80139e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ea:	4770      	bx	lr

080139ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80139ec:	b480      	push	{r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
 80139f4:	460b      	mov	r3, r1
 80139f6:	807b      	strh	r3, [r7, #2]
 80139f8:	4613      	mov	r3, r2
 80139fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80139fc:	787b      	ldrb	r3, [r7, #1]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d003      	beq.n	8013a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8013a02:	887a      	ldrh	r2, [r7, #2]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8013a08:	e002      	b.n	8013a10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8013a0a:	887a      	ldrh	r2, [r7, #2]
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8013a10:	bf00      	nop
 8013a12:	370c      	adds	r7, #12
 8013a14:	46bd      	mov	sp, r7
 8013a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1a:	4770      	bx	lr

08013a1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	4603      	mov	r3, r0
 8013a24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8013a26:	4b08      	ldr	r3, [pc, #32]	@ (8013a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013a28:	695a      	ldr	r2, [r3, #20]
 8013a2a:	88fb      	ldrh	r3, [r7, #6]
 8013a2c:	4013      	ands	r3, r2
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d006      	beq.n	8013a40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8013a32:	4a05      	ldr	r2, [pc, #20]	@ (8013a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013a34:	88fb      	ldrh	r3, [r7, #6]
 8013a36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8013a38:	88fb      	ldrh	r3, [r7, #6]
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7ef fa2a 	bl	8002e94 <HAL_GPIO_EXTI_Callback>
  }
}
 8013a40:	bf00      	nop
 8013a42:	3708      	adds	r7, #8
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}
 8013a48:	40010400 	.word	0x40010400

08013a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b082      	sub	sp, #8
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d101      	bne.n	8013a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	e08d      	b.n	8013b7a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013a64:	b2db      	uxtb	r3, r3
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d106      	bne.n	8013a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f7ee fe74 	bl	8002760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2224      	movs	r2, #36	@ 0x24
 8013a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	681a      	ldr	r2, [r3, #0]
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	f022 0201 	bic.w	r2, r2, #1
 8013a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	685a      	ldr	r2, [r3, #4]
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8013a9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	689a      	ldr	r2, [r3, #8]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8013aac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	68db      	ldr	r3, [r3, #12]
 8013ab2:	2b01      	cmp	r3, #1
 8013ab4:	d107      	bne.n	8013ac6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	689a      	ldr	r2, [r3, #8]
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8013ac2:	609a      	str	r2, [r3, #8]
 8013ac4:	e006      	b.n	8013ad4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	689a      	ldr	r2, [r3, #8]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8013ad2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	68db      	ldr	r3, [r3, #12]
 8013ad8:	2b02      	cmp	r3, #2
 8013ada:	d108      	bne.n	8013aee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	685a      	ldr	r2, [r3, #4]
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013aea:	605a      	str	r2, [r3, #4]
 8013aec:	e007      	b.n	8013afe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	685a      	ldr	r2, [r3, #4]
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8013afc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	687a      	ldr	r2, [r7, #4]
 8013b06:	6812      	ldr	r2, [r2, #0]
 8013b08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8013b0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013b10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	68da      	ldr	r2, [r3, #12]
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8013b20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	691a      	ldr	r2, [r3, #16]
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	695b      	ldr	r3, [r3, #20]
 8013b2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	699b      	ldr	r3, [r3, #24]
 8013b32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	430a      	orrs	r2, r1
 8013b3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	69d9      	ldr	r1, [r3, #28]
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	6a1a      	ldr	r2, [r3, #32]
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	430a      	orrs	r2, r1
 8013b4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	681a      	ldr	r2, [r3, #0]
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	f042 0201 	orr.w	r2, r2, #1
 8013b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2220      	movs	r2, #32
 8013b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	2200      	movs	r2, #0
 8013b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8013b78:	2300      	movs	r3, #0
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3708      	adds	r7, #8
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}

08013b82 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013b82:	b580      	push	{r7, lr}
 8013b84:	b084      	sub	sp, #16
 8013b86:	af00      	add	r7, sp, #0
 8013b88:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	699b      	ldr	r3, [r3, #24]
 8013b90:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d005      	beq.n	8013bae <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ba6:	68ba      	ldr	r2, [r7, #8]
 8013ba8:	68f9      	ldr	r1, [r7, #12]
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	4798      	blx	r3
  }
}
 8013bae:	bf00      	nop
 8013bb0:	3710      	adds	r7, #16
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}

08013bb6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8013bb6:	b580      	push	{r7, lr}
 8013bb8:	b086      	sub	sp, #24
 8013bba:	af00      	add	r7, sp, #0
 8013bbc:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	699b      	ldr	r3, [r3, #24]
 8013bc4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	0a1b      	lsrs	r3, r3, #8
 8013bd2:	f003 0301 	and.w	r3, r3, #1
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d010      	beq.n	8013bfc <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	09db      	lsrs	r3, r3, #7
 8013bde:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d00a      	beq.n	8013bfc <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013bea:	f043 0201 	orr.w	r2, r3, #1
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013bfa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8013bfc:	697b      	ldr	r3, [r7, #20]
 8013bfe:	0a9b      	lsrs	r3, r3, #10
 8013c00:	f003 0301 	and.w	r3, r3, #1
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d010      	beq.n	8013c2a <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	09db      	lsrs	r3, r3, #7
 8013c0c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d00a      	beq.n	8013c2a <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c18:	f043 0208 	orr.w	r2, r3, #8
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013c28:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8013c2a:	697b      	ldr	r3, [r7, #20]
 8013c2c:	0a5b      	lsrs	r3, r3, #9
 8013c2e:	f003 0301 	and.w	r3, r3, #1
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d010      	beq.n	8013c58 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	09db      	lsrs	r3, r3, #7
 8013c3a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d00a      	beq.n	8013c58 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c46:	f043 0202 	orr.w	r2, r3, #2
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013c56:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c5c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	f003 030b 	and.w	r3, r3, #11
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d003      	beq.n	8013c70 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8013c68:	68f9      	ldr	r1, [r7, #12]
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f000 fbea 	bl	8014444 <I2C_ITError>
  }
}
 8013c70:	bf00      	nop
 8013c72:	3718      	adds	r7, #24
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}

08013c78 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013c78:	b480      	push	{r7}
 8013c7a:	b083      	sub	sp, #12
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8013c80:	bf00      	nop
 8013c82:	370c      	adds	r7, #12
 8013c84:	46bd      	mov	sp, r7
 8013c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8a:	4770      	bx	lr

08013c8c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	b083      	sub	sp, #12
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8013c94:	bf00      	nop
 8013c96:	370c      	adds	r7, #12
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9e:	4770      	bx	lr

08013ca0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8013ca0:	b480      	push	{r7}
 8013ca2:	b083      	sub	sp, #12
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	460b      	mov	r3, r1
 8013caa:	70fb      	strb	r3, [r7, #3]
 8013cac:	4613      	mov	r3, r2
 8013cae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8013cb0:	bf00      	nop
 8013cb2:	370c      	adds	r7, #12
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cba:	4770      	bx	lr

08013cbc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013cbc:	b480      	push	{r7}
 8013cbe:	b083      	sub	sp, #12
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8013cc4:	bf00      	nop
 8013cc6:	370c      	adds	r7, #12
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cce:	4770      	bx	lr

08013cd0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8013cd0:	b480      	push	{r7}
 8013cd2:	b083      	sub	sp, #12
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8013cd8:	bf00      	nop
 8013cda:	370c      	adds	r7, #12
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce2:	4770      	bx	lr

08013ce4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	b083      	sub	sp, #12
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8013cec:	bf00      	nop
 8013cee:	370c      	adds	r7, #12
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr

08013cf8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b086      	sub	sp, #24
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	60f8      	str	r0, [r7, #12]
 8013d00:	60b9      	str	r1, [r7, #8]
 8013d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d08:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013d14:	2b01      	cmp	r3, #1
 8013d16:	d101      	bne.n	8013d1c <I2C_Slave_ISR_IT+0x24>
 8013d18:	2302      	movs	r3, #2
 8013d1a:	e0ed      	b.n	8013ef8 <I2C_Slave_ISR_IT+0x200>
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	2201      	movs	r2, #1
 8013d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	095b      	lsrs	r3, r3, #5
 8013d28:	f003 0301 	and.w	r3, r3, #1
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d00a      	beq.n	8013d46 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	095b      	lsrs	r3, r3, #5
 8013d34:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d004      	beq.n	8013d46 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8013d3c:	6939      	ldr	r1, [r7, #16]
 8013d3e:	68f8      	ldr	r0, [r7, #12]
 8013d40:	f000 f9c0 	bl	80140c4 <I2C_ITSlaveCplt>
 8013d44:	e0d3      	b.n	8013eee <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	091b      	lsrs	r3, r3, #4
 8013d4a:	f003 0301 	and.w	r3, r3, #1
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d04d      	beq.n	8013dee <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	091b      	lsrs	r3, r3, #4
 8013d56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d047      	beq.n	8013dee <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013d62:	b29b      	uxth	r3, r3
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d128      	bne.n	8013dba <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	2b28      	cmp	r3, #40	@ 0x28
 8013d72:	d108      	bne.n	8013d86 <I2C_Slave_ISR_IT+0x8e>
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013d7a:	d104      	bne.n	8013d86 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8013d7c:	6939      	ldr	r1, [r7, #16]
 8013d7e:	68f8      	ldr	r0, [r7, #12]
 8013d80:	f000 fb0a 	bl	8014398 <I2C_ITListenCplt>
 8013d84:	e032      	b.n	8013dec <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013d8c:	b2db      	uxtb	r3, r3
 8013d8e:	2b29      	cmp	r3, #41	@ 0x29
 8013d90:	d10e      	bne.n	8013db0 <I2C_Slave_ISR_IT+0xb8>
 8013d92:	697b      	ldr	r3, [r7, #20]
 8013d94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8013d98:	d00a      	beq.n	8013db0 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	2210      	movs	r2, #16
 8013da0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8013da2:	68f8      	ldr	r0, [r7, #12]
 8013da4:	f000 fc65 	bl	8014672 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8013da8:	68f8      	ldr	r0, [r7, #12]
 8013daa:	f000 f92d 	bl	8014008 <I2C_ITSlaveSeqCplt>
 8013dae:	e01d      	b.n	8013dec <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	2210      	movs	r2, #16
 8013db6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8013db8:	e096      	b.n	8013ee8 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	2210      	movs	r2, #16
 8013dc0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013dc6:	f043 0204 	orr.w	r2, r3, #4
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d004      	beq.n	8013dde <I2C_Slave_ISR_IT+0xe6>
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013dda:	f040 8085 	bne.w	8013ee8 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013de2:	4619      	mov	r1, r3
 8013de4:	68f8      	ldr	r0, [r7, #12]
 8013de6:	f000 fb2d 	bl	8014444 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8013dea:	e07d      	b.n	8013ee8 <I2C_Slave_ISR_IT+0x1f0>
 8013dec:	e07c      	b.n	8013ee8 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013dee:	693b      	ldr	r3, [r7, #16]
 8013df0:	089b      	lsrs	r3, r3, #2
 8013df2:	f003 0301 	and.w	r3, r3, #1
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d030      	beq.n	8013e5c <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	089b      	lsrs	r3, r3, #2
 8013dfe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d02a      	beq.n	8013e5c <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d018      	beq.n	8013e42 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e1a:	b2d2      	uxtb	r2, r2
 8013e1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e22:	1c5a      	adds	r2, r3, #1
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e2c:	3b01      	subs	r3, #1
 8013e2e:	b29a      	uxth	r2, r3
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e38:	b29b      	uxth	r3, r3
 8013e3a:	3b01      	subs	r3, #1
 8013e3c:	b29a      	uxth	r2, r3
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e46:	b29b      	uxth	r3, r3
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d14f      	bne.n	8013eec <I2C_Slave_ISR_IT+0x1f4>
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8013e52:	d04b      	beq.n	8013eec <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8013e54:	68f8      	ldr	r0, [r7, #12]
 8013e56:	f000 f8d7 	bl	8014008 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8013e5a:	e047      	b.n	8013eec <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	08db      	lsrs	r3, r3, #3
 8013e60:	f003 0301 	and.w	r3, r3, #1
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d00a      	beq.n	8013e7e <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	08db      	lsrs	r3, r3, #3
 8013e6c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d004      	beq.n	8013e7e <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8013e74:	6939      	ldr	r1, [r7, #16]
 8013e76:	68f8      	ldr	r0, [r7, #12]
 8013e78:	f000 f842 	bl	8013f00 <I2C_ITAddrCplt>
 8013e7c:	e037      	b.n	8013eee <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013e7e:	693b      	ldr	r3, [r7, #16]
 8013e80:	085b      	lsrs	r3, r3, #1
 8013e82:	f003 0301 	and.w	r3, r3, #1
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d031      	beq.n	8013eee <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	085b      	lsrs	r3, r3, #1
 8013e8e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d02b      	beq.n	8013eee <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e9a:	b29b      	uxth	r3, r3
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d018      	beq.n	8013ed2 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ea4:	781a      	ldrb	r2, [r3, #0]
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013eb0:	1c5a      	adds	r2, r3, #1
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013eba:	b29b      	uxth	r3, r3
 8013ebc:	3b01      	subs	r3, #1
 8013ebe:	b29a      	uxth	r2, r3
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ec8:	3b01      	subs	r3, #1
 8013eca:	b29a      	uxth	r2, r3
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	851a      	strh	r2, [r3, #40]	@ 0x28
 8013ed0:	e00d      	b.n	8013eee <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013ed8:	d002      	beq.n	8013ee0 <I2C_Slave_ISR_IT+0x1e8>
 8013eda:	697b      	ldr	r3, [r7, #20]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d106      	bne.n	8013eee <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8013ee0:	68f8      	ldr	r0, [r7, #12]
 8013ee2:	f000 f891 	bl	8014008 <I2C_ITSlaveSeqCplt>
 8013ee6:	e002      	b.n	8013eee <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8013ee8:	bf00      	nop
 8013eea:	e000      	b.n	8013eee <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8013eec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8013ef6:	2300      	movs	r3, #0
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3718      	adds	r7, #24
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}

08013f00 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b084      	sub	sp, #16
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
 8013f08:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013f10:	b2db      	uxtb	r3, r3
 8013f12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8013f16:	2b28      	cmp	r3, #40	@ 0x28
 8013f18:	d16a      	bne.n	8013ff0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	699b      	ldr	r3, [r3, #24]
 8013f20:	0c1b      	lsrs	r3, r3, #16
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	f003 0301 	and.w	r3, r3, #1
 8013f28:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	699b      	ldr	r3, [r3, #24]
 8013f30:	0c1b      	lsrs	r3, r3, #16
 8013f32:	b29b      	uxth	r3, r3
 8013f34:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8013f38:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	689b      	ldr	r3, [r3, #8]
 8013f40:	b29b      	uxth	r3, r3
 8013f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013f46:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	68db      	ldr	r3, [r3, #12]
 8013f4e:	b29b      	uxth	r3, r3
 8013f50:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8013f54:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	68db      	ldr	r3, [r3, #12]
 8013f5a:	2b02      	cmp	r3, #2
 8013f5c:	d138      	bne.n	8013fd0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8013f5e:	897b      	ldrh	r3, [r7, #10]
 8013f60:	09db      	lsrs	r3, r3, #7
 8013f62:	b29a      	uxth	r2, r3
 8013f64:	89bb      	ldrh	r3, [r7, #12]
 8013f66:	4053      	eors	r3, r2
 8013f68:	b29b      	uxth	r3, r3
 8013f6a:	f003 0306 	and.w	r3, r3, #6
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d11c      	bne.n	8013fac <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8013f72:	897b      	ldrh	r3, [r7, #10]
 8013f74:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013f7a:	1c5a      	adds	r2, r3, #1
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013f84:	2b02      	cmp	r3, #2
 8013f86:	d13b      	bne.n	8014000 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	2208      	movs	r2, #8
 8013f94:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2200      	movs	r2, #0
 8013f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8013f9e:	89ba      	ldrh	r2, [r7, #12]
 8013fa0:	7bfb      	ldrb	r3, [r7, #15]
 8013fa2:	4619      	mov	r1, r3
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f7ff fe7b 	bl	8013ca0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8013faa:	e029      	b.n	8014000 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8013fac:	893b      	ldrh	r3, [r7, #8]
 8013fae:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8013fb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f000 fb9e 	bl	80146f6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8013fc2:	89ba      	ldrh	r2, [r7, #12]
 8013fc4:	7bfb      	ldrb	r3, [r7, #15]
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f7ff fe69 	bl	8013ca0 <HAL_I2C_AddrCallback>
}
 8013fce:	e017      	b.n	8014000 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8013fd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f000 fb8e 	bl	80146f6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2200      	movs	r2, #0
 8013fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8013fe2:	89ba      	ldrh	r2, [r7, #12]
 8013fe4:	7bfb      	ldrb	r3, [r7, #15]
 8013fe6:	4619      	mov	r1, r3
 8013fe8:	6878      	ldr	r0, [r7, #4]
 8013fea:	f7ff fe59 	bl	8013ca0 <HAL_I2C_AddrCallback>
}
 8013fee:	e007      	b.n	8014000 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	2208      	movs	r2, #8
 8013ff6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8014000:	bf00      	nop
 8014002:	3710      	adds	r7, #16
 8014004:	46bd      	mov	sp, r7
 8014006:	bd80      	pop	{r7, pc}

08014008 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b084      	sub	sp, #16
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2200      	movs	r2, #0
 801401c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	0b9b      	lsrs	r3, r3, #14
 8014024:	f003 0301 	and.w	r3, r3, #1
 8014028:	2b00      	cmp	r3, #0
 801402a:	d008      	beq.n	801403e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	681a      	ldr	r2, [r3, #0]
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801403a:	601a      	str	r2, [r3, #0]
 801403c:	e00d      	b.n	801405a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	0bdb      	lsrs	r3, r3, #15
 8014042:	f003 0301 	and.w	r3, r3, #1
 8014046:	2b00      	cmp	r3, #0
 8014048:	d007      	beq.n	801405a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	681a      	ldr	r2, [r3, #0]
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8014058:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014060:	b2db      	uxtb	r3, r3
 8014062:	2b29      	cmp	r3, #41	@ 0x29
 8014064:	d112      	bne.n	801408c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2228      	movs	r2, #40	@ 0x28
 801406a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2221      	movs	r2, #33	@ 0x21
 8014072:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014074:	2101      	movs	r1, #1
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f000 fb3d 	bl	80146f6 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	2200      	movs	r2, #0
 8014080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f7ff fdf7 	bl	8013c78 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801408a:	e017      	b.n	80140bc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014092:	b2db      	uxtb	r3, r3
 8014094:	2b2a      	cmp	r3, #42	@ 0x2a
 8014096:	d111      	bne.n	80140bc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	2228      	movs	r2, #40	@ 0x28
 801409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	2222      	movs	r2, #34	@ 0x22
 80140a4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80140a6:	2102      	movs	r1, #2
 80140a8:	6878      	ldr	r0, [r7, #4]
 80140aa:	f000 fb24 	bl	80146f6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	2200      	movs	r2, #0
 80140b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80140b6:	6878      	ldr	r0, [r7, #4]
 80140b8:	f7ff fde8 	bl	8013c8c <HAL_I2C_SlaveRxCpltCallback>
}
 80140bc:	bf00      	nop
 80140be:	3710      	adds	r7, #16
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}

080140c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b086      	sub	sp, #24
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
 80140cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140de:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80140e6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	2220      	movs	r2, #32
 80140ee:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80140f0:	7afb      	ldrb	r3, [r7, #11]
 80140f2:	2b21      	cmp	r3, #33	@ 0x21
 80140f4:	d002      	beq.n	80140fc <I2C_ITSlaveCplt+0x38>
 80140f6:	7afb      	ldrb	r3, [r7, #11]
 80140f8:	2b29      	cmp	r3, #41	@ 0x29
 80140fa:	d108      	bne.n	801410e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80140fc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f000 faf8 	bl	80146f6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2221      	movs	r2, #33	@ 0x21
 801410a:	631a      	str	r2, [r3, #48]	@ 0x30
 801410c:	e019      	b.n	8014142 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801410e:	7afb      	ldrb	r3, [r7, #11]
 8014110:	2b22      	cmp	r3, #34	@ 0x22
 8014112:	d002      	beq.n	801411a <I2C_ITSlaveCplt+0x56>
 8014114:	7afb      	ldrb	r3, [r7, #11]
 8014116:	2b2a      	cmp	r3, #42	@ 0x2a
 8014118:	d108      	bne.n	801412c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 801411a:	f248 0102 	movw	r1, #32770	@ 0x8002
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f000 fae9 	bl	80146f6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2222      	movs	r2, #34	@ 0x22
 8014128:	631a      	str	r2, [r3, #48]	@ 0x30
 801412a:	e00a      	b.n	8014142 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 801412c:	7afb      	ldrb	r3, [r7, #11]
 801412e:	2b28      	cmp	r3, #40	@ 0x28
 8014130:	d107      	bne.n	8014142 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8014132:	f248 0103 	movw	r1, #32771	@ 0x8003
 8014136:	6878      	ldr	r0, [r7, #4]
 8014138:	f000 fadd 	bl	80146f6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2200      	movs	r2, #0
 8014140:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	685a      	ldr	r2, [r3, #4]
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8014150:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	6859      	ldr	r1, [r3, #4]
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	681a      	ldr	r2, [r3, #0]
 801415c:	4b8c      	ldr	r3, [pc, #560]	@ (8014390 <I2C_ITSlaveCplt+0x2cc>)
 801415e:	400b      	ands	r3, r1
 8014160:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f000 fa85 	bl	8014672 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8014168:	693b      	ldr	r3, [r7, #16]
 801416a:	0b9b      	lsrs	r3, r3, #14
 801416c:	f003 0301 	and.w	r3, r3, #1
 8014170:	2b00      	cmp	r3, #0
 8014172:	d013      	beq.n	801419c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	681a      	ldr	r2, [r3, #0]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8014182:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014188:	2b00      	cmp	r3, #0
 801418a:	d020      	beq.n	80141ce <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	685b      	ldr	r3, [r3, #4]
 8014194:	b29a      	uxth	r2, r3
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801419a:	e018      	b.n	80141ce <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801419c:	693b      	ldr	r3, [r7, #16]
 801419e:	0bdb      	lsrs	r3, r3, #15
 80141a0:	f003 0301 	and.w	r3, r3, #1
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d012      	beq.n	80141ce <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	681a      	ldr	r2, [r3, #0]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80141b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d006      	beq.n	80141ce <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	685b      	ldr	r3, [r3, #4]
 80141c8:	b29a      	uxth	r2, r3
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	089b      	lsrs	r3, r3, #2
 80141d2:	f003 0301 	and.w	r3, r3, #1
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d020      	beq.n	801421c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80141da:	697b      	ldr	r3, [r7, #20]
 80141dc:	f023 0304 	bic.w	r3, r3, #4
 80141e0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141ec:	b2d2      	uxtb	r2, r2
 80141ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141f4:	1c5a      	adds	r2, r3, #1
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d00c      	beq.n	801421c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014206:	3b01      	subs	r3, #1
 8014208:	b29a      	uxth	r2, r3
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014212:	b29b      	uxth	r3, r3
 8014214:	3b01      	subs	r3, #1
 8014216:	b29a      	uxth	r2, r3
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014220:	b29b      	uxth	r3, r3
 8014222:	2b00      	cmp	r3, #0
 8014224:	d005      	beq.n	8014232 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801422a:	f043 0204 	orr.w	r2, r3, #4
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	091b      	lsrs	r3, r3, #4
 8014236:	f003 0301 	and.w	r3, r3, #1
 801423a:	2b00      	cmp	r3, #0
 801423c:	d04a      	beq.n	80142d4 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	091b      	lsrs	r3, r3, #4
 8014242:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014246:	2b00      	cmp	r3, #0
 8014248:	d044      	beq.n	80142d4 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801424e:	b29b      	uxth	r3, r3
 8014250:	2b00      	cmp	r3, #0
 8014252:	d128      	bne.n	80142a6 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801425a:	b2db      	uxtb	r3, r3
 801425c:	2b28      	cmp	r3, #40	@ 0x28
 801425e:	d108      	bne.n	8014272 <I2C_ITSlaveCplt+0x1ae>
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014266:	d104      	bne.n	8014272 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8014268:	6979      	ldr	r1, [r7, #20]
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	f000 f894 	bl	8014398 <I2C_ITListenCplt>
 8014270:	e030      	b.n	80142d4 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014278:	b2db      	uxtb	r3, r3
 801427a:	2b29      	cmp	r3, #41	@ 0x29
 801427c:	d10e      	bne.n	801429c <I2C_ITSlaveCplt+0x1d8>
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8014284:	d00a      	beq.n	801429c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	2210      	movs	r2, #16
 801428c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f000 f9ef 	bl	8014672 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f7ff feb7 	bl	8014008 <I2C_ITSlaveSeqCplt>
 801429a:	e01b      	b.n	80142d4 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2210      	movs	r2, #16
 80142a2:	61da      	str	r2, [r3, #28]
 80142a4:	e016      	b.n	80142d4 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	2210      	movs	r2, #16
 80142ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80142b2:	f043 0204 	orr.w	r2, r3, #4
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d003      	beq.n	80142c8 <I2C_ITSlaveCplt+0x204>
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80142c6:	d105      	bne.n	80142d4 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80142cc:	4619      	mov	r1, r3
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f000 f8b8 	bl	8014444 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2200      	movs	r2, #0
 80142d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	2200      	movs	r2, #0
 80142e0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d010      	beq.n	801430c <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80142ee:	4619      	mov	r1, r3
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f000 f8a7 	bl	8014444 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80142fc:	b2db      	uxtb	r3, r3
 80142fe:	2b28      	cmp	r3, #40	@ 0x28
 8014300:	d141      	bne.n	8014386 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8014302:	6979      	ldr	r1, [r7, #20]
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f000 f847 	bl	8014398 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801430a:	e03c      	b.n	8014386 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014310:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8014314:	d014      	beq.n	8014340 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8014316:	6878      	ldr	r0, [r7, #4]
 8014318:	f7ff fe76 	bl	8014008 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	4a1d      	ldr	r2, [pc, #116]	@ (8014394 <I2C_ITSlaveCplt+0x2d0>)
 8014320:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	2220      	movs	r2, #32
 8014326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2200      	movs	r2, #0
 801432e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	2200      	movs	r2, #0
 8014334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f7ff fcbf 	bl	8013cbc <HAL_I2C_ListenCpltCallback>
}
 801433e:	e022      	b.n	8014386 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014346:	b2db      	uxtb	r3, r3
 8014348:	2b22      	cmp	r3, #34	@ 0x22
 801434a:	d10e      	bne.n	801436a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	2220      	movs	r2, #32
 8014350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2200      	movs	r2, #0
 8014358:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	2200      	movs	r2, #0
 801435e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014362:	6878      	ldr	r0, [r7, #4]
 8014364:	f7ff fc92 	bl	8013c8c <HAL_I2C_SlaveRxCpltCallback>
}
 8014368:	e00d      	b.n	8014386 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2220      	movs	r2, #32
 801436e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2200      	movs	r2, #0
 8014376:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2200      	movs	r2, #0
 801437c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8014380:	6878      	ldr	r0, [r7, #4]
 8014382:	f7ff fc79 	bl	8013c78 <HAL_I2C_SlaveTxCpltCallback>
}
 8014386:	bf00      	nop
 8014388:	3718      	adds	r7, #24
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}
 801438e:	bf00      	nop
 8014390:	fe00e800 	.word	0xfe00e800
 8014394:	ffff0000 	.word	0xffff0000

08014398 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b082      	sub	sp, #8
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
 80143a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	4a26      	ldr	r2, [pc, #152]	@ (8014440 <I2C_ITListenCplt+0xa8>)
 80143a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2200      	movs	r2, #0
 80143ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2220      	movs	r2, #32
 80143b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2200      	movs	r2, #0
 80143ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2200      	movs	r2, #0
 80143c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	089b      	lsrs	r3, r3, #2
 80143c8:	f003 0301 	and.w	r3, r3, #1
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d022      	beq.n	8014416 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143da:	b2d2      	uxtb	r2, r2
 80143dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143e2:	1c5a      	adds	r2, r3, #1
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d012      	beq.n	8014416 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80143f4:	3b01      	subs	r3, #1
 80143f6:	b29a      	uxth	r2, r3
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014400:	b29b      	uxth	r3, r3
 8014402:	3b01      	subs	r3, #1
 8014404:	b29a      	uxth	r2, r3
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801440e:	f043 0204 	orr.w	r2, r3, #4
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8014416:	f248 0103 	movw	r1, #32771	@ 0x8003
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f000 f96b 	bl	80146f6 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	2210      	movs	r2, #16
 8014426:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	2200      	movs	r2, #0
 801442c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8014430:	6878      	ldr	r0, [r7, #4]
 8014432:	f7ff fc43 	bl	8013cbc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8014436:	bf00      	nop
 8014438:	3708      	adds	r7, #8
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
 801443e:	bf00      	nop
 8014440:	ffff0000 	.word	0xffff0000

08014444 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b084      	sub	sp, #16
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014454:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2200      	movs	r2, #0
 801445a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	4a6d      	ldr	r2, [pc, #436]	@ (8014618 <I2C_ITError+0x1d4>)
 8014462:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2200      	movs	r2, #0
 8014468:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	431a      	orrs	r2, r3
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8014476:	7bfb      	ldrb	r3, [r7, #15]
 8014478:	2b28      	cmp	r3, #40	@ 0x28
 801447a:	d005      	beq.n	8014488 <I2C_ITError+0x44>
 801447c:	7bfb      	ldrb	r3, [r7, #15]
 801447e:	2b29      	cmp	r3, #41	@ 0x29
 8014480:	d002      	beq.n	8014488 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8014482:	7bfb      	ldrb	r3, [r7, #15]
 8014484:	2b2a      	cmp	r3, #42	@ 0x2a
 8014486:	d10b      	bne.n	80144a0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8014488:	2103      	movs	r1, #3
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f000 f933 	bl	80146f6 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2228      	movs	r2, #40	@ 0x28
 8014494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	4a60      	ldr	r2, [pc, #384]	@ (801461c <I2C_ITError+0x1d8>)
 801449c:	635a      	str	r2, [r3, #52]	@ 0x34
 801449e:	e030      	b.n	8014502 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80144a0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f000 f926 	bl	80146f6 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f000 f8e1 	bl	8014672 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80144b6:	b2db      	uxtb	r3, r3
 80144b8:	2b60      	cmp	r3, #96	@ 0x60
 80144ba:	d01f      	beq.n	80144fc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2220      	movs	r2, #32
 80144c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	699b      	ldr	r3, [r3, #24]
 80144ca:	f003 0320 	and.w	r3, r3, #32
 80144ce:	2b20      	cmp	r3, #32
 80144d0:	d114      	bne.n	80144fc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	699b      	ldr	r3, [r3, #24]
 80144d8:	f003 0310 	and.w	r3, r3, #16
 80144dc:	2b10      	cmp	r3, #16
 80144de:	d109      	bne.n	80144f4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	2210      	movs	r2, #16
 80144e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80144ec:	f043 0204 	orr.w	r2, r3, #4
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	2220      	movs	r2, #32
 80144fa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	2200      	movs	r2, #0
 8014500:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014506:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801450c:	2b00      	cmp	r3, #0
 801450e:	d039      	beq.n	8014584 <I2C_ITError+0x140>
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	2b11      	cmp	r3, #17
 8014514:	d002      	beq.n	801451c <I2C_ITError+0xd8>
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	2b21      	cmp	r3, #33	@ 0x21
 801451a:	d133      	bne.n	8014584 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014526:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801452a:	d107      	bne.n	801453c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	681a      	ldr	r2, [r3, #0]
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801453a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014540:	4618      	mov	r0, r3
 8014542:	f7ff f882 	bl	801364a <HAL_DMA_GetState>
 8014546:	4603      	mov	r3, r0
 8014548:	2b01      	cmp	r3, #1
 801454a:	d017      	beq.n	801457c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014550:	4a33      	ldr	r2, [pc, #204]	@ (8014620 <I2C_ITError+0x1dc>)
 8014552:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	2200      	movs	r2, #0
 8014558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014560:	4618      	mov	r0, r3
 8014562:	f7ff f831 	bl	80135c8 <HAL_DMA_Abort_IT>
 8014566:	4603      	mov	r3, r0
 8014568:	2b00      	cmp	r3, #0
 801456a:	d04d      	beq.n	8014608 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014572:	687a      	ldr	r2, [r7, #4]
 8014574:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8014576:	4610      	mov	r0, r2
 8014578:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801457a:	e045      	b.n	8014608 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801457c:	6878      	ldr	r0, [r7, #4]
 801457e:	f000 f851 	bl	8014624 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014582:	e041      	b.n	8014608 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014588:	2b00      	cmp	r3, #0
 801458a:	d039      	beq.n	8014600 <I2C_ITError+0x1bc>
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	2b12      	cmp	r3, #18
 8014590:	d002      	beq.n	8014598 <I2C_ITError+0x154>
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	2b22      	cmp	r3, #34	@ 0x22
 8014596:	d133      	bne.n	8014600 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80145a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80145a6:	d107      	bne.n	80145b8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	681a      	ldr	r2, [r3, #0]
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80145b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145bc:	4618      	mov	r0, r3
 80145be:	f7ff f844 	bl	801364a <HAL_DMA_GetState>
 80145c2:	4603      	mov	r3, r0
 80145c4:	2b01      	cmp	r3, #1
 80145c6:	d017      	beq.n	80145f8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145cc:	4a14      	ldr	r2, [pc, #80]	@ (8014620 <I2C_ITError+0x1dc>)
 80145ce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2200      	movs	r2, #0
 80145d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145dc:	4618      	mov	r0, r3
 80145de:	f7fe fff3 	bl	80135c8 <HAL_DMA_Abort_IT>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d011      	beq.n	801460c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145ee:	687a      	ldr	r2, [r7, #4]
 80145f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80145f2:	4610      	mov	r0, r2
 80145f4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80145f6:	e009      	b.n	801460c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f000 f813 	bl	8014624 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80145fe:	e005      	b.n	801460c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f000 f80f 	bl	8014624 <I2C_TreatErrorCallback>
  }
}
 8014606:	e002      	b.n	801460e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014608:	bf00      	nop
 801460a:	e000      	b.n	801460e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801460c:	bf00      	nop
}
 801460e:	bf00      	nop
 8014610:	3710      	adds	r7, #16
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}
 8014616:	bf00      	nop
 8014618:	ffff0000 	.word	0xffff0000
 801461c:	08013cf9 	.word	0x08013cf9
 8014620:	080146bb 	.word	0x080146bb

08014624 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014632:	b2db      	uxtb	r3, r3
 8014634:	2b60      	cmp	r3, #96	@ 0x60
 8014636:	d10e      	bne.n	8014656 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2220      	movs	r2, #32
 801463c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2200      	movs	r2, #0
 8014644:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	2200      	movs	r2, #0
 801464a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f7ff fb48 	bl	8013ce4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014654:	e009      	b.n	801466a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	2200      	movs	r2, #0
 801465a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2200      	movs	r2, #0
 8014660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8014664:	6878      	ldr	r0, [r7, #4]
 8014666:	f7ff fb33 	bl	8013cd0 <HAL_I2C_ErrorCallback>
}
 801466a:	bf00      	nop
 801466c:	3708      	adds	r7, #8
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}

08014672 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8014672:	b480      	push	{r7}
 8014674:	b083      	sub	sp, #12
 8014676:	af00      	add	r7, sp, #0
 8014678:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	699b      	ldr	r3, [r3, #24]
 8014680:	f003 0302 	and.w	r3, r3, #2
 8014684:	2b02      	cmp	r3, #2
 8014686:	d103      	bne.n	8014690 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	2200      	movs	r2, #0
 801468e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	699b      	ldr	r3, [r3, #24]
 8014696:	f003 0301 	and.w	r3, r3, #1
 801469a:	2b01      	cmp	r3, #1
 801469c:	d007      	beq.n	80146ae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	699a      	ldr	r2, [r3, #24]
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	f042 0201 	orr.w	r2, r2, #1
 80146ac:	619a      	str	r2, [r3, #24]
  }
}
 80146ae:	bf00      	nop
 80146b0:	370c      	adds	r7, #12
 80146b2:	46bd      	mov	sp, r7
 80146b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b8:	4770      	bx	lr

080146ba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80146ba:	b580      	push	{r7, lr}
 80146bc:	b084      	sub	sp, #16
 80146be:	af00      	add	r7, sp, #0
 80146c0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146c6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d003      	beq.n	80146d8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80146d4:	2200      	movs	r2, #0
 80146d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d003      	beq.n	80146e8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80146e4:	2200      	movs	r2, #0
 80146e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80146e8:	68f8      	ldr	r0, [r7, #12]
 80146ea:	f7ff ff9b 	bl	8014624 <I2C_TreatErrorCallback>
}
 80146ee:	bf00      	nop
 80146f0:	3710      	adds	r7, #16
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}

080146f6 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80146f6:	b480      	push	{r7}
 80146f8:	b085      	sub	sp, #20
 80146fa:	af00      	add	r7, sp, #0
 80146fc:	6078      	str	r0, [r7, #4]
 80146fe:	460b      	mov	r3, r1
 8014700:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8014702:	2300      	movs	r3, #0
 8014704:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8014706:	887b      	ldrh	r3, [r7, #2]
 8014708:	f003 0301 	and.w	r3, r3, #1
 801470c:	2b00      	cmp	r3, #0
 801470e:	d00f      	beq.n	8014730 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8014716:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801471e:	b2db      	uxtb	r3, r3
 8014720:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8014724:	2b28      	cmp	r3, #40	@ 0x28
 8014726:	d003      	beq.n	8014730 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 801472e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8014730:	887b      	ldrh	r3, [r7, #2]
 8014732:	f003 0302 	and.w	r3, r3, #2
 8014736:	2b00      	cmp	r3, #0
 8014738:	d00f      	beq.n	801475a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8014740:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014748:	b2db      	uxtb	r3, r3
 801474a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 801474e:	2b28      	cmp	r3, #40	@ 0x28
 8014750:	d003      	beq.n	801475a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8014758:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801475a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801475e:	2b00      	cmp	r3, #0
 8014760:	da03      	bge.n	801476a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8014768:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 801476a:	887b      	ldrh	r3, [r7, #2]
 801476c:	2b10      	cmp	r3, #16
 801476e:	d103      	bne.n	8014778 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8014776:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8014778:	887b      	ldrh	r3, [r7, #2]
 801477a:	2b20      	cmp	r3, #32
 801477c:	d103      	bne.n	8014786 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	f043 0320 	orr.w	r3, r3, #32
 8014784:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8014786:	887b      	ldrh	r3, [r7, #2]
 8014788:	2b40      	cmp	r3, #64	@ 0x40
 801478a:	d103      	bne.n	8014794 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014792:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	6819      	ldr	r1, [r3, #0]
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	43da      	mvns	r2, r3
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	400a      	ands	r2, r1
 80147a4:	601a      	str	r2, [r3, #0]
}
 80147a6:	bf00      	nop
 80147a8:	3714      	adds	r7, #20
 80147aa:	46bd      	mov	sp, r7
 80147ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b0:	4770      	bx	lr

080147b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80147b2:	b480      	push	{r7}
 80147b4:	b083      	sub	sp, #12
 80147b6:	af00      	add	r7, sp, #0
 80147b8:	6078      	str	r0, [r7, #4]
 80147ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80147c2:	b2db      	uxtb	r3, r3
 80147c4:	2b20      	cmp	r3, #32
 80147c6:	d138      	bne.n	801483a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80147ce:	2b01      	cmp	r3, #1
 80147d0:	d101      	bne.n	80147d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80147d2:	2302      	movs	r3, #2
 80147d4:	e032      	b.n	801483c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2201      	movs	r2, #1
 80147da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2224      	movs	r2, #36	@ 0x24
 80147e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	681a      	ldr	r2, [r3, #0]
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	f022 0201 	bic.w	r2, r2, #1
 80147f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	681a      	ldr	r2, [r3, #0]
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8014804:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	6819      	ldr	r1, [r3, #0]
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	683a      	ldr	r2, [r7, #0]
 8014812:	430a      	orrs	r2, r1
 8014814:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	681a      	ldr	r2, [r3, #0]
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	f042 0201 	orr.w	r2, r2, #1
 8014824:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	2220      	movs	r2, #32
 801482a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	2200      	movs	r2, #0
 8014832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8014836:	2300      	movs	r3, #0
 8014838:	e000      	b.n	801483c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801483a:	2302      	movs	r3, #2
  }
}
 801483c:	4618      	mov	r0, r3
 801483e:	370c      	adds	r7, #12
 8014840:	46bd      	mov	sp, r7
 8014842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014846:	4770      	bx	lr

08014848 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8014848:	b480      	push	{r7}
 801484a:	b085      	sub	sp, #20
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014858:	b2db      	uxtb	r3, r3
 801485a:	2b20      	cmp	r3, #32
 801485c:	d139      	bne.n	80148d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8014864:	2b01      	cmp	r3, #1
 8014866:	d101      	bne.n	801486c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8014868:	2302      	movs	r3, #2
 801486a:	e033      	b.n	80148d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	2201      	movs	r2, #1
 8014870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2224      	movs	r2, #36	@ 0x24
 8014878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	681a      	ldr	r2, [r3, #0]
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	f022 0201 	bic.w	r2, r2, #1
 801488a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801489a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	021b      	lsls	r3, r3, #8
 80148a0:	68fa      	ldr	r2, [r7, #12]
 80148a2:	4313      	orrs	r3, r2
 80148a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	68fa      	ldr	r2, [r7, #12]
 80148ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	681a      	ldr	r2, [r3, #0]
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	f042 0201 	orr.w	r2, r2, #1
 80148bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	2220      	movs	r2, #32
 80148c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2200      	movs	r2, #0
 80148ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80148ce:	2300      	movs	r3, #0
 80148d0:	e000      	b.n	80148d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80148d2:	2302      	movs	r3, #2
  }
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3714      	adds	r7, #20
 80148d8:	46bd      	mov	sp, r7
 80148da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148de:	4770      	bx	lr

080148e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80148e0:	b480      	push	{r7}
 80148e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80148e4:	4b04      	ldr	r3, [pc, #16]	@ (80148f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	46bd      	mov	sp, r7
 80148f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f4:	4770      	bx	lr
 80148f6:	bf00      	nop
 80148f8:	40007000 	.word	0x40007000

080148fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80148fc:	b480      	push	{r7}
 80148fe:	b085      	sub	sp, #20
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801490a:	d130      	bne.n	801496e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 801490c:	4b23      	ldr	r3, [pc, #140]	@ (801499c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014918:	d038      	beq.n	801498c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801491a:	4b20      	ldr	r3, [pc, #128]	@ (801499c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8014922:	4a1e      	ldr	r2, [pc, #120]	@ (801499c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014924:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8014928:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801492a:	4b1d      	ldr	r3, [pc, #116]	@ (80149a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	2232      	movs	r2, #50	@ 0x32
 8014930:	fb02 f303 	mul.w	r3, r2, r3
 8014934:	4a1b      	ldr	r2, [pc, #108]	@ (80149a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8014936:	fba2 2303 	umull	r2, r3, r2, r3
 801493a:	0c9b      	lsrs	r3, r3, #18
 801493c:	3301      	adds	r3, #1
 801493e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8014940:	e002      	b.n	8014948 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	3b01      	subs	r3, #1
 8014946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8014948:	4b14      	ldr	r3, [pc, #80]	@ (801499c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801494a:	695b      	ldr	r3, [r3, #20]
 801494c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014954:	d102      	bne.n	801495c <HAL_PWREx_ControlVoltageScaling+0x60>
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d1f2      	bne.n	8014942 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801495c:	4b0f      	ldr	r3, [pc, #60]	@ (801499c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801495e:	695b      	ldr	r3, [r3, #20]
 8014960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014968:	d110      	bne.n	801498c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 801496a:	2303      	movs	r3, #3
 801496c:	e00f      	b.n	801498e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 801496e:	4b0b      	ldr	r3, [pc, #44]	@ (801499c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801497a:	d007      	beq.n	801498c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801497c:	4b07      	ldr	r3, [pc, #28]	@ (801499c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8014984:	4a05      	ldr	r2, [pc, #20]	@ (801499c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014986:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801498a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 801498c:	2300      	movs	r3, #0
}
 801498e:	4618      	mov	r0, r3
 8014990:	3714      	adds	r7, #20
 8014992:	46bd      	mov	sp, r7
 8014994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014998:	4770      	bx	lr
 801499a:	bf00      	nop
 801499c:	40007000 	.word	0x40007000
 80149a0:	20000030 	.word	0x20000030
 80149a4:	431bde83 	.word	0x431bde83

080149a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b088      	sub	sp, #32
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d101      	bne.n	80149ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80149b6:	2301      	movs	r3, #1
 80149b8:	e3ca      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80149ba:	4b97      	ldr	r3, [pc, #604]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 80149bc:	689b      	ldr	r3, [r3, #8]
 80149be:	f003 030c 	and.w	r3, r3, #12
 80149c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80149c4:	4b94      	ldr	r3, [pc, #592]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 80149c6:	68db      	ldr	r3, [r3, #12]
 80149c8:	f003 0303 	and.w	r3, r3, #3
 80149cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	f003 0310 	and.w	r3, r3, #16
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	f000 80e4 	beq.w	8014ba4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80149dc:	69bb      	ldr	r3, [r7, #24]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d007      	beq.n	80149f2 <HAL_RCC_OscConfig+0x4a>
 80149e2:	69bb      	ldr	r3, [r7, #24]
 80149e4:	2b0c      	cmp	r3, #12
 80149e6:	f040 808b 	bne.w	8014b00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80149ea:	697b      	ldr	r3, [r7, #20]
 80149ec:	2b01      	cmp	r3, #1
 80149ee:	f040 8087 	bne.w	8014b00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80149f2:	4b89      	ldr	r3, [pc, #548]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	f003 0302 	and.w	r3, r3, #2
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d005      	beq.n	8014a0a <HAL_RCC_OscConfig+0x62>
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	699b      	ldr	r3, [r3, #24]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d101      	bne.n	8014a0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8014a06:	2301      	movs	r3, #1
 8014a08:	e3a2      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	6a1a      	ldr	r2, [r3, #32]
 8014a0e:	4b82      	ldr	r3, [pc, #520]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	f003 0308 	and.w	r3, r3, #8
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d004      	beq.n	8014a24 <HAL_RCC_OscConfig+0x7c>
 8014a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014a22:	e005      	b.n	8014a30 <HAL_RCC_OscConfig+0x88>
 8014a24:	4b7c      	ldr	r3, [pc, #496]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014a2a:	091b      	lsrs	r3, r3, #4
 8014a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014a30:	4293      	cmp	r3, r2
 8014a32:	d223      	bcs.n	8014a7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	6a1b      	ldr	r3, [r3, #32]
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f000 fd87 	bl	801554c <RCC_SetFlashLatencyFromMSIRange>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d001      	beq.n	8014a48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8014a44:	2301      	movs	r3, #1
 8014a46:	e383      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014a48:	4b73      	ldr	r3, [pc, #460]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	4a72      	ldr	r2, [pc, #456]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a4e:	f043 0308 	orr.w	r3, r3, #8
 8014a52:	6013      	str	r3, [r2, #0]
 8014a54:	4b70      	ldr	r3, [pc, #448]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	6a1b      	ldr	r3, [r3, #32]
 8014a60:	496d      	ldr	r1, [pc, #436]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a62:	4313      	orrs	r3, r2
 8014a64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014a66:	4b6c      	ldr	r3, [pc, #432]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a68:	685b      	ldr	r3, [r3, #4]
 8014a6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	69db      	ldr	r3, [r3, #28]
 8014a72:	021b      	lsls	r3, r3, #8
 8014a74:	4968      	ldr	r1, [pc, #416]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a76:	4313      	orrs	r3, r2
 8014a78:	604b      	str	r3, [r1, #4]
 8014a7a:	e025      	b.n	8014ac8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014a7c:	4b66      	ldr	r3, [pc, #408]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	4a65      	ldr	r2, [pc, #404]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a82:	f043 0308 	orr.w	r3, r3, #8
 8014a86:	6013      	str	r3, [r2, #0]
 8014a88:	4b63      	ldr	r3, [pc, #396]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	6a1b      	ldr	r3, [r3, #32]
 8014a94:	4960      	ldr	r1, [pc, #384]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a96:	4313      	orrs	r3, r2
 8014a98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014a9c:	685b      	ldr	r3, [r3, #4]
 8014a9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	69db      	ldr	r3, [r3, #28]
 8014aa6:	021b      	lsls	r3, r3, #8
 8014aa8:	495b      	ldr	r1, [pc, #364]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014aaa:	4313      	orrs	r3, r2
 8014aac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014aae:	69bb      	ldr	r3, [r7, #24]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d109      	bne.n	8014ac8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	6a1b      	ldr	r3, [r3, #32]
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f000 fd47 	bl	801554c <RCC_SetFlashLatencyFromMSIRange>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d001      	beq.n	8014ac8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	e343      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8014ac8:	f000 fc4a 	bl	8015360 <HAL_RCC_GetSysClockFreq>
 8014acc:	4602      	mov	r2, r0
 8014ace:	4b52      	ldr	r3, [pc, #328]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014ad0:	689b      	ldr	r3, [r3, #8]
 8014ad2:	091b      	lsrs	r3, r3, #4
 8014ad4:	f003 030f 	and.w	r3, r3, #15
 8014ad8:	4950      	ldr	r1, [pc, #320]	@ (8014c1c <HAL_RCC_OscConfig+0x274>)
 8014ada:	5ccb      	ldrb	r3, [r1, r3]
 8014adc:	f003 031f 	and.w	r3, r3, #31
 8014ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8014ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8014c20 <HAL_RCC_OscConfig+0x278>)
 8014ae6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8014ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8014c24 <HAL_RCC_OscConfig+0x27c>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7ee fa69 	bl	8002fc4 <HAL_InitTick>
 8014af2:	4603      	mov	r3, r0
 8014af4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8014af6:	7bfb      	ldrb	r3, [r7, #15]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d052      	beq.n	8014ba2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8014afc:	7bfb      	ldrb	r3, [r7, #15]
 8014afe:	e327      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	699b      	ldr	r3, [r3, #24]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d032      	beq.n	8014b6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8014b08:	4b43      	ldr	r3, [pc, #268]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	4a42      	ldr	r2, [pc, #264]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014b0e:	f043 0301 	orr.w	r3, r3, #1
 8014b12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8014b14:	f7fd fc88 	bl	8012428 <HAL_GetTick>
 8014b18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8014b1a:	e008      	b.n	8014b2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014b1c:	f7fd fc84 	bl	8012428 <HAL_GetTick>
 8014b20:	4602      	mov	r2, r0
 8014b22:	693b      	ldr	r3, [r7, #16]
 8014b24:	1ad3      	subs	r3, r2, r3
 8014b26:	2b02      	cmp	r3, #2
 8014b28:	d901      	bls.n	8014b2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8014b2a:	2303      	movs	r3, #3
 8014b2c:	e310      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8014b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	f003 0302 	and.w	r3, r3, #2
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d0f0      	beq.n	8014b1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014b3a:	4b37      	ldr	r3, [pc, #220]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	4a36      	ldr	r2, [pc, #216]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014b40:	f043 0308 	orr.w	r3, r3, #8
 8014b44:	6013      	str	r3, [r2, #0]
 8014b46:	4b34      	ldr	r3, [pc, #208]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	6a1b      	ldr	r3, [r3, #32]
 8014b52:	4931      	ldr	r1, [pc, #196]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014b54:	4313      	orrs	r3, r2
 8014b56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014b58:	4b2f      	ldr	r3, [pc, #188]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014b5a:	685b      	ldr	r3, [r3, #4]
 8014b5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	69db      	ldr	r3, [r3, #28]
 8014b64:	021b      	lsls	r3, r3, #8
 8014b66:	492c      	ldr	r1, [pc, #176]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014b68:	4313      	orrs	r3, r2
 8014b6a:	604b      	str	r3, [r1, #4]
 8014b6c:	e01a      	b.n	8014ba4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8014b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	4a29      	ldr	r2, [pc, #164]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014b74:	f023 0301 	bic.w	r3, r3, #1
 8014b78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8014b7a:	f7fd fc55 	bl	8012428 <HAL_GetTick>
 8014b7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8014b80:	e008      	b.n	8014b94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014b82:	f7fd fc51 	bl	8012428 <HAL_GetTick>
 8014b86:	4602      	mov	r2, r0
 8014b88:	693b      	ldr	r3, [r7, #16]
 8014b8a:	1ad3      	subs	r3, r2, r3
 8014b8c:	2b02      	cmp	r3, #2
 8014b8e:	d901      	bls.n	8014b94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8014b90:	2303      	movs	r3, #3
 8014b92:	e2dd      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8014b94:	4b20      	ldr	r3, [pc, #128]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	f003 0302 	and.w	r3, r3, #2
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d1f0      	bne.n	8014b82 <HAL_RCC_OscConfig+0x1da>
 8014ba0:	e000      	b.n	8014ba4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8014ba2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	f003 0301 	and.w	r3, r3, #1
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d074      	beq.n	8014c9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8014bb0:	69bb      	ldr	r3, [r7, #24]
 8014bb2:	2b08      	cmp	r3, #8
 8014bb4:	d005      	beq.n	8014bc2 <HAL_RCC_OscConfig+0x21a>
 8014bb6:	69bb      	ldr	r3, [r7, #24]
 8014bb8:	2b0c      	cmp	r3, #12
 8014bba:	d10e      	bne.n	8014bda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014bbc:	697b      	ldr	r3, [r7, #20]
 8014bbe:	2b03      	cmp	r3, #3
 8014bc0:	d10b      	bne.n	8014bda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014bc2:	4b15      	ldr	r3, [pc, #84]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d064      	beq.n	8014c98 <HAL_RCC_OscConfig+0x2f0>
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	685b      	ldr	r3, [r3, #4]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d160      	bne.n	8014c98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	e2ba      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014be2:	d106      	bne.n	8014bf2 <HAL_RCC_OscConfig+0x24a>
 8014be4:	4b0c      	ldr	r3, [pc, #48]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	4a0b      	ldr	r2, [pc, #44]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014bee:	6013      	str	r3, [r2, #0]
 8014bf0:	e026      	b.n	8014c40 <HAL_RCC_OscConfig+0x298>
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	685b      	ldr	r3, [r3, #4]
 8014bf6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014bfa:	d115      	bne.n	8014c28 <HAL_RCC_OscConfig+0x280>
 8014bfc:	4b06      	ldr	r3, [pc, #24]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	4a05      	ldr	r2, [pc, #20]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014c02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8014c06:	6013      	str	r3, [r2, #0]
 8014c08:	4b03      	ldr	r3, [pc, #12]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	4a02      	ldr	r2, [pc, #8]	@ (8014c18 <HAL_RCC_OscConfig+0x270>)
 8014c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014c12:	6013      	str	r3, [r2, #0]
 8014c14:	e014      	b.n	8014c40 <HAL_RCC_OscConfig+0x298>
 8014c16:	bf00      	nop
 8014c18:	40021000 	.word	0x40021000
 8014c1c:	08025fbc 	.word	0x08025fbc
 8014c20:	20000030 	.word	0x20000030
 8014c24:	20000034 	.word	0x20000034
 8014c28:	4ba0      	ldr	r3, [pc, #640]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	4a9f      	ldr	r2, [pc, #636]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014c32:	6013      	str	r3, [r2, #0]
 8014c34:	4b9d      	ldr	r3, [pc, #628]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	4a9c      	ldr	r2, [pc, #624]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8014c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	685b      	ldr	r3, [r3, #4]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d013      	beq.n	8014c70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014c48:	f7fd fbee 	bl	8012428 <HAL_GetTick>
 8014c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014c4e:	e008      	b.n	8014c62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014c50:	f7fd fbea 	bl	8012428 <HAL_GetTick>
 8014c54:	4602      	mov	r2, r0
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	1ad3      	subs	r3, r2, r3
 8014c5a:	2b64      	cmp	r3, #100	@ 0x64
 8014c5c:	d901      	bls.n	8014c62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8014c5e:	2303      	movs	r3, #3
 8014c60:	e276      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014c62:	4b92      	ldr	r3, [pc, #584]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d0f0      	beq.n	8014c50 <HAL_RCC_OscConfig+0x2a8>
 8014c6e:	e014      	b.n	8014c9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014c70:	f7fd fbda 	bl	8012428 <HAL_GetTick>
 8014c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8014c76:	e008      	b.n	8014c8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014c78:	f7fd fbd6 	bl	8012428 <HAL_GetTick>
 8014c7c:	4602      	mov	r2, r0
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	1ad3      	subs	r3, r2, r3
 8014c82:	2b64      	cmp	r3, #100	@ 0x64
 8014c84:	d901      	bls.n	8014c8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8014c86:	2303      	movs	r3, #3
 8014c88:	e262      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8014c8a:	4b88      	ldr	r3, [pc, #544]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d1f0      	bne.n	8014c78 <HAL_RCC_OscConfig+0x2d0>
 8014c96:	e000      	b.n	8014c9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	f003 0302 	and.w	r3, r3, #2
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d060      	beq.n	8014d68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8014ca6:	69bb      	ldr	r3, [r7, #24]
 8014ca8:	2b04      	cmp	r3, #4
 8014caa:	d005      	beq.n	8014cb8 <HAL_RCC_OscConfig+0x310>
 8014cac:	69bb      	ldr	r3, [r7, #24]
 8014cae:	2b0c      	cmp	r3, #12
 8014cb0:	d119      	bne.n	8014ce6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8014cb2:	697b      	ldr	r3, [r7, #20]
 8014cb4:	2b02      	cmp	r3, #2
 8014cb6:	d116      	bne.n	8014ce6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014cb8:	4b7c      	ldr	r3, [pc, #496]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d005      	beq.n	8014cd0 <HAL_RCC_OscConfig+0x328>
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	68db      	ldr	r3, [r3, #12]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d101      	bne.n	8014cd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8014ccc:	2301      	movs	r3, #1
 8014cce:	e23f      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014cd0:	4b76      	ldr	r3, [pc, #472]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014cd2:	685b      	ldr	r3, [r3, #4]
 8014cd4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	691b      	ldr	r3, [r3, #16]
 8014cdc:	061b      	lsls	r3, r3, #24
 8014cde:	4973      	ldr	r1, [pc, #460]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014ce0:	4313      	orrs	r3, r2
 8014ce2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014ce4:	e040      	b.n	8014d68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	68db      	ldr	r3, [r3, #12]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d023      	beq.n	8014d36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014cee:	4b6f      	ldr	r3, [pc, #444]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	4a6e      	ldr	r2, [pc, #440]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014cfa:	f7fd fb95 	bl	8012428 <HAL_GetTick>
 8014cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014d00:	e008      	b.n	8014d14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014d02:	f7fd fb91 	bl	8012428 <HAL_GetTick>
 8014d06:	4602      	mov	r2, r0
 8014d08:	693b      	ldr	r3, [r7, #16]
 8014d0a:	1ad3      	subs	r3, r2, r3
 8014d0c:	2b02      	cmp	r3, #2
 8014d0e:	d901      	bls.n	8014d14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8014d10:	2303      	movs	r3, #3
 8014d12:	e21d      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014d14:	4b65      	ldr	r3, [pc, #404]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d0f0      	beq.n	8014d02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014d20:	4b62      	ldr	r3, [pc, #392]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014d22:	685b      	ldr	r3, [r3, #4]
 8014d24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	691b      	ldr	r3, [r3, #16]
 8014d2c:	061b      	lsls	r3, r3, #24
 8014d2e:	495f      	ldr	r1, [pc, #380]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014d30:	4313      	orrs	r3, r2
 8014d32:	604b      	str	r3, [r1, #4]
 8014d34:	e018      	b.n	8014d68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014d36:	4b5d      	ldr	r3, [pc, #372]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	4a5c      	ldr	r2, [pc, #368]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014d42:	f7fd fb71 	bl	8012428 <HAL_GetTick>
 8014d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8014d48:	e008      	b.n	8014d5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014d4a:	f7fd fb6d 	bl	8012428 <HAL_GetTick>
 8014d4e:	4602      	mov	r2, r0
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	1ad3      	subs	r3, r2, r3
 8014d54:	2b02      	cmp	r3, #2
 8014d56:	d901      	bls.n	8014d5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8014d58:	2303      	movs	r3, #3
 8014d5a:	e1f9      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8014d5c:	4b53      	ldr	r3, [pc, #332]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d1f0      	bne.n	8014d4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	f003 0308 	and.w	r3, r3, #8
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d03c      	beq.n	8014dee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	695b      	ldr	r3, [r3, #20]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d01c      	beq.n	8014db6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014d82:	4a4a      	ldr	r2, [pc, #296]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014d84:	f043 0301 	orr.w	r3, r3, #1
 8014d88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014d8c:	f7fd fb4c 	bl	8012428 <HAL_GetTick>
 8014d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8014d92:	e008      	b.n	8014da6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014d94:	f7fd fb48 	bl	8012428 <HAL_GetTick>
 8014d98:	4602      	mov	r2, r0
 8014d9a:	693b      	ldr	r3, [r7, #16]
 8014d9c:	1ad3      	subs	r3, r2, r3
 8014d9e:	2b02      	cmp	r3, #2
 8014da0:	d901      	bls.n	8014da6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8014da2:	2303      	movs	r3, #3
 8014da4:	e1d4      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8014da6:	4b41      	ldr	r3, [pc, #260]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014dac:	f003 0302 	and.w	r3, r3, #2
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d0ef      	beq.n	8014d94 <HAL_RCC_OscConfig+0x3ec>
 8014db4:	e01b      	b.n	8014dee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014db6:	4b3d      	ldr	r3, [pc, #244]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014dbe:	f023 0301 	bic.w	r3, r3, #1
 8014dc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014dc6:	f7fd fb2f 	bl	8012428 <HAL_GetTick>
 8014dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8014dcc:	e008      	b.n	8014de0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014dce:	f7fd fb2b 	bl	8012428 <HAL_GetTick>
 8014dd2:	4602      	mov	r2, r0
 8014dd4:	693b      	ldr	r3, [r7, #16]
 8014dd6:	1ad3      	subs	r3, r2, r3
 8014dd8:	2b02      	cmp	r3, #2
 8014dda:	d901      	bls.n	8014de0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8014ddc:	2303      	movs	r3, #3
 8014dde:	e1b7      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8014de0:	4b32      	ldr	r3, [pc, #200]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014de6:	f003 0302 	and.w	r3, r3, #2
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d1ef      	bne.n	8014dce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	f003 0304 	and.w	r3, r3, #4
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	f000 80a6 	beq.w	8014f48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8014e00:	4b2a      	ldr	r3, [pc, #168]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d10d      	bne.n	8014e28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014e0c:	4b27      	ldr	r3, [pc, #156]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014e10:	4a26      	ldr	r2, [pc, #152]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014e16:	6593      	str	r3, [r2, #88]	@ 0x58
 8014e18:	4b24      	ldr	r3, [pc, #144]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014e20:	60bb      	str	r3, [r7, #8]
 8014e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8014e24:	2301      	movs	r3, #1
 8014e26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014e28:	4b21      	ldr	r3, [pc, #132]	@ (8014eb0 <HAL_RCC_OscConfig+0x508>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d118      	bne.n	8014e66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014e34:	4b1e      	ldr	r3, [pc, #120]	@ (8014eb0 <HAL_RCC_OscConfig+0x508>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	4a1d      	ldr	r2, [pc, #116]	@ (8014eb0 <HAL_RCC_OscConfig+0x508>)
 8014e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014e3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014e40:	f7fd faf2 	bl	8012428 <HAL_GetTick>
 8014e44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014e46:	e008      	b.n	8014e5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014e48:	f7fd faee 	bl	8012428 <HAL_GetTick>
 8014e4c:	4602      	mov	r2, r0
 8014e4e:	693b      	ldr	r3, [r7, #16]
 8014e50:	1ad3      	subs	r3, r2, r3
 8014e52:	2b02      	cmp	r3, #2
 8014e54:	d901      	bls.n	8014e5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8014e56:	2303      	movs	r3, #3
 8014e58:	e17a      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014e5a:	4b15      	ldr	r3, [pc, #84]	@ (8014eb0 <HAL_RCC_OscConfig+0x508>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d0f0      	beq.n	8014e48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	689b      	ldr	r3, [r3, #8]
 8014e6a:	2b01      	cmp	r3, #1
 8014e6c:	d108      	bne.n	8014e80 <HAL_RCC_OscConfig+0x4d8>
 8014e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014e74:	4a0d      	ldr	r2, [pc, #52]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014e76:	f043 0301 	orr.w	r3, r3, #1
 8014e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8014e7e:	e029      	b.n	8014ed4 <HAL_RCC_OscConfig+0x52c>
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	689b      	ldr	r3, [r3, #8]
 8014e84:	2b05      	cmp	r3, #5
 8014e86:	d115      	bne.n	8014eb4 <HAL_RCC_OscConfig+0x50c>
 8014e88:	4b08      	ldr	r3, [pc, #32]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014e8e:	4a07      	ldr	r2, [pc, #28]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014e90:	f043 0304 	orr.w	r3, r3, #4
 8014e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8014e98:	4b04      	ldr	r3, [pc, #16]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014e9e:	4a03      	ldr	r2, [pc, #12]	@ (8014eac <HAL_RCC_OscConfig+0x504>)
 8014ea0:	f043 0301 	orr.w	r3, r3, #1
 8014ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8014ea8:	e014      	b.n	8014ed4 <HAL_RCC_OscConfig+0x52c>
 8014eaa:	bf00      	nop
 8014eac:	40021000 	.word	0x40021000
 8014eb0:	40007000 	.word	0x40007000
 8014eb4:	4b9c      	ldr	r3, [pc, #624]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8014eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014eba:	4a9b      	ldr	r2, [pc, #620]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8014ebc:	f023 0301 	bic.w	r3, r3, #1
 8014ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8014ec4:	4b98      	ldr	r3, [pc, #608]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8014ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014eca:	4a97      	ldr	r2, [pc, #604]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8014ecc:	f023 0304 	bic.w	r3, r3, #4
 8014ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	689b      	ldr	r3, [r3, #8]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d016      	beq.n	8014f0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014edc:	f7fd faa4 	bl	8012428 <HAL_GetTick>
 8014ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014ee2:	e00a      	b.n	8014efa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014ee4:	f7fd faa0 	bl	8012428 <HAL_GetTick>
 8014ee8:	4602      	mov	r2, r0
 8014eea:	693b      	ldr	r3, [r7, #16]
 8014eec:	1ad3      	subs	r3, r2, r3
 8014eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014ef2:	4293      	cmp	r3, r2
 8014ef4:	d901      	bls.n	8014efa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8014ef6:	2303      	movs	r3, #3
 8014ef8:	e12a      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014efa:	4b8b      	ldr	r3, [pc, #556]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8014efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014f00:	f003 0302 	and.w	r3, r3, #2
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d0ed      	beq.n	8014ee4 <HAL_RCC_OscConfig+0x53c>
 8014f08:	e015      	b.n	8014f36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014f0a:	f7fd fa8d 	bl	8012428 <HAL_GetTick>
 8014f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8014f10:	e00a      	b.n	8014f28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014f12:	f7fd fa89 	bl	8012428 <HAL_GetTick>
 8014f16:	4602      	mov	r2, r0
 8014f18:	693b      	ldr	r3, [r7, #16]
 8014f1a:	1ad3      	subs	r3, r2, r3
 8014f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014f20:	4293      	cmp	r3, r2
 8014f22:	d901      	bls.n	8014f28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8014f24:	2303      	movs	r3, #3
 8014f26:	e113      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8014f28:	4b7f      	ldr	r3, [pc, #508]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8014f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014f2e:	f003 0302 	and.w	r3, r3, #2
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d1ed      	bne.n	8014f12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014f36:	7ffb      	ldrb	r3, [r7, #31]
 8014f38:	2b01      	cmp	r3, #1
 8014f3a:	d105      	bne.n	8014f48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014f3c:	4b7a      	ldr	r3, [pc, #488]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8014f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014f40:	4a79      	ldr	r2, [pc, #484]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8014f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014f46:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	f000 80fe 	beq.w	801514e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f56:	2b02      	cmp	r3, #2
 8014f58:	f040 80d0 	bne.w	80150fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8014f5c:	4b72      	ldr	r3, [pc, #456]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8014f5e:	68db      	ldr	r3, [r3, #12]
 8014f60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	f003 0203 	and.w	r2, r3, #3
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	d130      	bne.n	8014fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8014f70:	697b      	ldr	r3, [r7, #20]
 8014f72:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f7a:	3b01      	subs	r3, #1
 8014f7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	d127      	bne.n	8014fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8014f82:	697b      	ldr	r3, [r7, #20]
 8014f84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014f8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8014f8e:	429a      	cmp	r2, r3
 8014f90:	d11f      	bne.n	8014fd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8014f92:	697b      	ldr	r3, [r7, #20]
 8014f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8014f9c:	2a07      	cmp	r2, #7
 8014f9e:	bf14      	ite	ne
 8014fa0:	2201      	movne	r2, #1
 8014fa2:	2200      	moveq	r2, #0
 8014fa4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8014fa6:	4293      	cmp	r3, r2
 8014fa8:	d113      	bne.n	8014fd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014fb4:	085b      	lsrs	r3, r3, #1
 8014fb6:	3b01      	subs	r3, #1
 8014fb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d109      	bne.n	8014fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014fc8:	085b      	lsrs	r3, r3, #1
 8014fca:	3b01      	subs	r3, #1
 8014fcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8014fce:	429a      	cmp	r2, r3
 8014fd0:	d06e      	beq.n	80150b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8014fd2:	69bb      	ldr	r3, [r7, #24]
 8014fd4:	2b0c      	cmp	r3, #12
 8014fd6:	d069      	beq.n	80150ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8014fd8:	4b53      	ldr	r3, [pc, #332]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d105      	bne.n	8014ff0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8014fe4:	4b50      	ldr	r3, [pc, #320]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d001      	beq.n	8014ff4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	e0ad      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8014ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	4a4b      	ldr	r2, [pc, #300]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8014ffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8014ffe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8015000:	f7fd fa12 	bl	8012428 <HAL_GetTick>
 8015004:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8015006:	e008      	b.n	801501a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015008:	f7fd fa0e 	bl	8012428 <HAL_GetTick>
 801500c:	4602      	mov	r2, r0
 801500e:	693b      	ldr	r3, [r7, #16]
 8015010:	1ad3      	subs	r3, r2, r3
 8015012:	2b02      	cmp	r3, #2
 8015014:	d901      	bls.n	801501a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8015016:	2303      	movs	r3, #3
 8015018:	e09a      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801501a:	4b43      	ldr	r3, [pc, #268]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015022:	2b00      	cmp	r3, #0
 8015024:	d1f0      	bne.n	8015008 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015026:	4b40      	ldr	r3, [pc, #256]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8015028:	68da      	ldr	r2, [r3, #12]
 801502a:	4b40      	ldr	r3, [pc, #256]	@ (801512c <HAL_RCC_OscConfig+0x784>)
 801502c:	4013      	ands	r3, r2
 801502e:	687a      	ldr	r2, [r7, #4]
 8015030:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8015032:	687a      	ldr	r2, [r7, #4]
 8015034:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015036:	3a01      	subs	r2, #1
 8015038:	0112      	lsls	r2, r2, #4
 801503a:	4311      	orrs	r1, r2
 801503c:	687a      	ldr	r2, [r7, #4]
 801503e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8015040:	0212      	lsls	r2, r2, #8
 8015042:	4311      	orrs	r1, r2
 8015044:	687a      	ldr	r2, [r7, #4]
 8015046:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8015048:	0852      	lsrs	r2, r2, #1
 801504a:	3a01      	subs	r2, #1
 801504c:	0552      	lsls	r2, r2, #21
 801504e:	4311      	orrs	r1, r2
 8015050:	687a      	ldr	r2, [r7, #4]
 8015052:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8015054:	0852      	lsrs	r2, r2, #1
 8015056:	3a01      	subs	r2, #1
 8015058:	0652      	lsls	r2, r2, #25
 801505a:	4311      	orrs	r1, r2
 801505c:	687a      	ldr	r2, [r7, #4]
 801505e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8015060:	0912      	lsrs	r2, r2, #4
 8015062:	0452      	lsls	r2, r2, #17
 8015064:	430a      	orrs	r2, r1
 8015066:	4930      	ldr	r1, [pc, #192]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8015068:	4313      	orrs	r3, r2
 801506a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801506c:	4b2e      	ldr	r3, [pc, #184]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	4a2d      	ldr	r2, [pc, #180]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8015072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8015076:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8015078:	4b2b      	ldr	r3, [pc, #172]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 801507a:	68db      	ldr	r3, [r3, #12]
 801507c:	4a2a      	ldr	r2, [pc, #168]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 801507e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8015082:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8015084:	f7fd f9d0 	bl	8012428 <HAL_GetTick>
 8015088:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801508a:	e008      	b.n	801509e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801508c:	f7fd f9cc 	bl	8012428 <HAL_GetTick>
 8015090:	4602      	mov	r2, r0
 8015092:	693b      	ldr	r3, [r7, #16]
 8015094:	1ad3      	subs	r3, r2, r3
 8015096:	2b02      	cmp	r3, #2
 8015098:	d901      	bls.n	801509e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 801509a:	2303      	movs	r3, #3
 801509c:	e058      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801509e:	4b22      	ldr	r3, [pc, #136]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d0f0      	beq.n	801508c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80150aa:	e050      	b.n	801514e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80150ac:	2301      	movs	r3, #1
 80150ae:	e04f      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80150b0:	4b1d      	ldr	r3, [pc, #116]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d148      	bne.n	801514e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80150bc:	4b1a      	ldr	r3, [pc, #104]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	4a19      	ldr	r2, [pc, #100]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 80150c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80150c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80150c8:	4b17      	ldr	r3, [pc, #92]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 80150ca:	68db      	ldr	r3, [r3, #12]
 80150cc:	4a16      	ldr	r2, [pc, #88]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 80150ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80150d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80150d4:	f7fd f9a8 	bl	8012428 <HAL_GetTick>
 80150d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80150da:	e008      	b.n	80150ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80150dc:	f7fd f9a4 	bl	8012428 <HAL_GetTick>
 80150e0:	4602      	mov	r2, r0
 80150e2:	693b      	ldr	r3, [r7, #16]
 80150e4:	1ad3      	subs	r3, r2, r3
 80150e6:	2b02      	cmp	r3, #2
 80150e8:	d901      	bls.n	80150ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80150ea:	2303      	movs	r3, #3
 80150ec:	e030      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80150ee:	4b0e      	ldr	r3, [pc, #56]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d0f0      	beq.n	80150dc <HAL_RCC_OscConfig+0x734>
 80150fa:	e028      	b.n	801514e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80150fc:	69bb      	ldr	r3, [r7, #24]
 80150fe:	2b0c      	cmp	r3, #12
 8015100:	d023      	beq.n	801514a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015102:	4b09      	ldr	r3, [pc, #36]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	4a08      	ldr	r2, [pc, #32]	@ (8015128 <HAL_RCC_OscConfig+0x780>)
 8015108:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801510c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801510e:	f7fd f98b 	bl	8012428 <HAL_GetTick>
 8015112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8015114:	e00c      	b.n	8015130 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015116:	f7fd f987 	bl	8012428 <HAL_GetTick>
 801511a:	4602      	mov	r2, r0
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	1ad3      	subs	r3, r2, r3
 8015120:	2b02      	cmp	r3, #2
 8015122:	d905      	bls.n	8015130 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8015124:	2303      	movs	r3, #3
 8015126:	e013      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
 8015128:	40021000 	.word	0x40021000
 801512c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8015130:	4b09      	ldr	r3, [pc, #36]	@ (8015158 <HAL_RCC_OscConfig+0x7b0>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015138:	2b00      	cmp	r3, #0
 801513a:	d1ec      	bne.n	8015116 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801513c:	4b06      	ldr	r3, [pc, #24]	@ (8015158 <HAL_RCC_OscConfig+0x7b0>)
 801513e:	68da      	ldr	r2, [r3, #12]
 8015140:	4905      	ldr	r1, [pc, #20]	@ (8015158 <HAL_RCC_OscConfig+0x7b0>)
 8015142:	4b06      	ldr	r3, [pc, #24]	@ (801515c <HAL_RCC_OscConfig+0x7b4>)
 8015144:	4013      	ands	r3, r2
 8015146:	60cb      	str	r3, [r1, #12]
 8015148:	e001      	b.n	801514e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801514a:	2301      	movs	r3, #1
 801514c:	e000      	b.n	8015150 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 801514e:	2300      	movs	r3, #0
}
 8015150:	4618      	mov	r0, r3
 8015152:	3720      	adds	r7, #32
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}
 8015158:	40021000 	.word	0x40021000
 801515c:	feeefffc 	.word	0xfeeefffc

08015160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b084      	sub	sp, #16
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
 8015168:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d101      	bne.n	8015174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8015170:	2301      	movs	r3, #1
 8015172:	e0e7      	b.n	8015344 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8015174:	4b75      	ldr	r3, [pc, #468]	@ (801534c <HAL_RCC_ClockConfig+0x1ec>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	f003 0307 	and.w	r3, r3, #7
 801517c:	683a      	ldr	r2, [r7, #0]
 801517e:	429a      	cmp	r2, r3
 8015180:	d910      	bls.n	80151a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015182:	4b72      	ldr	r3, [pc, #456]	@ (801534c <HAL_RCC_ClockConfig+0x1ec>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	f023 0207 	bic.w	r2, r3, #7
 801518a:	4970      	ldr	r1, [pc, #448]	@ (801534c <HAL_RCC_ClockConfig+0x1ec>)
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	4313      	orrs	r3, r2
 8015190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8015192:	4b6e      	ldr	r3, [pc, #440]	@ (801534c <HAL_RCC_ClockConfig+0x1ec>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	f003 0307 	and.w	r3, r3, #7
 801519a:	683a      	ldr	r2, [r7, #0]
 801519c:	429a      	cmp	r2, r3
 801519e:	d001      	beq.n	80151a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80151a0:	2301      	movs	r3, #1
 80151a2:	e0cf      	b.n	8015344 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	f003 0302 	and.w	r3, r3, #2
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d010      	beq.n	80151d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	689a      	ldr	r2, [r3, #8]
 80151b4:	4b66      	ldr	r3, [pc, #408]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 80151b6:	689b      	ldr	r3, [r3, #8]
 80151b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80151bc:	429a      	cmp	r2, r3
 80151be:	d908      	bls.n	80151d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80151c0:	4b63      	ldr	r3, [pc, #396]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 80151c2:	689b      	ldr	r3, [r3, #8]
 80151c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	689b      	ldr	r3, [r3, #8]
 80151cc:	4960      	ldr	r1, [pc, #384]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 80151ce:	4313      	orrs	r3, r2
 80151d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	f003 0301 	and.w	r3, r3, #1
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d04c      	beq.n	8015278 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	2b03      	cmp	r3, #3
 80151e4:	d107      	bne.n	80151f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80151e6:	4b5a      	ldr	r3, [pc, #360]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d121      	bne.n	8015236 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80151f2:	2301      	movs	r3, #1
 80151f4:	e0a6      	b.n	8015344 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	685b      	ldr	r3, [r3, #4]
 80151fa:	2b02      	cmp	r3, #2
 80151fc:	d107      	bne.n	801520e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80151fe:	4b54      	ldr	r3, [pc, #336]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015206:	2b00      	cmp	r3, #0
 8015208:	d115      	bne.n	8015236 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801520a:	2301      	movs	r3, #1
 801520c:	e09a      	b.n	8015344 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	685b      	ldr	r3, [r3, #4]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d107      	bne.n	8015226 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8015216:	4b4e      	ldr	r3, [pc, #312]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	f003 0302 	and.w	r3, r3, #2
 801521e:	2b00      	cmp	r3, #0
 8015220:	d109      	bne.n	8015236 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8015222:	2301      	movs	r3, #1
 8015224:	e08e      	b.n	8015344 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8015226:	4b4a      	ldr	r3, [pc, #296]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801522e:	2b00      	cmp	r3, #0
 8015230:	d101      	bne.n	8015236 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8015232:	2301      	movs	r3, #1
 8015234:	e086      	b.n	8015344 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8015236:	4b46      	ldr	r3, [pc, #280]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 8015238:	689b      	ldr	r3, [r3, #8]
 801523a:	f023 0203 	bic.w	r2, r3, #3
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	685b      	ldr	r3, [r3, #4]
 8015242:	4943      	ldr	r1, [pc, #268]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 8015244:	4313      	orrs	r3, r2
 8015246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015248:	f7fd f8ee 	bl	8012428 <HAL_GetTick>
 801524c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801524e:	e00a      	b.n	8015266 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015250:	f7fd f8ea 	bl	8012428 <HAL_GetTick>
 8015254:	4602      	mov	r2, r0
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	1ad3      	subs	r3, r2, r3
 801525a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801525e:	4293      	cmp	r3, r2
 8015260:	d901      	bls.n	8015266 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8015262:	2303      	movs	r3, #3
 8015264:	e06e      	b.n	8015344 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015266:	4b3a      	ldr	r3, [pc, #232]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 8015268:	689b      	ldr	r3, [r3, #8]
 801526a:	f003 020c 	and.w	r2, r3, #12
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	009b      	lsls	r3, r3, #2
 8015274:	429a      	cmp	r2, r3
 8015276:	d1eb      	bne.n	8015250 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	f003 0302 	and.w	r3, r3, #2
 8015280:	2b00      	cmp	r3, #0
 8015282:	d010      	beq.n	80152a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	689a      	ldr	r2, [r3, #8]
 8015288:	4b31      	ldr	r3, [pc, #196]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 801528a:	689b      	ldr	r3, [r3, #8]
 801528c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015290:	429a      	cmp	r2, r3
 8015292:	d208      	bcs.n	80152a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015294:	4b2e      	ldr	r3, [pc, #184]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 8015296:	689b      	ldr	r3, [r3, #8]
 8015298:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	689b      	ldr	r3, [r3, #8]
 80152a0:	492b      	ldr	r1, [pc, #172]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 80152a2:	4313      	orrs	r3, r2
 80152a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80152a6:	4b29      	ldr	r3, [pc, #164]	@ (801534c <HAL_RCC_ClockConfig+0x1ec>)
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	f003 0307 	and.w	r3, r3, #7
 80152ae:	683a      	ldr	r2, [r7, #0]
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d210      	bcs.n	80152d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80152b4:	4b25      	ldr	r3, [pc, #148]	@ (801534c <HAL_RCC_ClockConfig+0x1ec>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	f023 0207 	bic.w	r2, r3, #7
 80152bc:	4923      	ldr	r1, [pc, #140]	@ (801534c <HAL_RCC_ClockConfig+0x1ec>)
 80152be:	683b      	ldr	r3, [r7, #0]
 80152c0:	4313      	orrs	r3, r2
 80152c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80152c4:	4b21      	ldr	r3, [pc, #132]	@ (801534c <HAL_RCC_ClockConfig+0x1ec>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	f003 0307 	and.w	r3, r3, #7
 80152cc:	683a      	ldr	r2, [r7, #0]
 80152ce:	429a      	cmp	r2, r3
 80152d0:	d001      	beq.n	80152d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80152d2:	2301      	movs	r3, #1
 80152d4:	e036      	b.n	8015344 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	f003 0304 	and.w	r3, r3, #4
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d008      	beq.n	80152f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80152e2:	4b1b      	ldr	r3, [pc, #108]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 80152e4:	689b      	ldr	r3, [r3, #8]
 80152e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	68db      	ldr	r3, [r3, #12]
 80152ee:	4918      	ldr	r1, [pc, #96]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 80152f0:	4313      	orrs	r3, r2
 80152f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	f003 0308 	and.w	r3, r3, #8
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d009      	beq.n	8015314 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8015300:	4b13      	ldr	r3, [pc, #76]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 8015302:	689b      	ldr	r3, [r3, #8]
 8015304:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	691b      	ldr	r3, [r3, #16]
 801530c:	00db      	lsls	r3, r3, #3
 801530e:	4910      	ldr	r1, [pc, #64]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 8015310:	4313      	orrs	r3, r2
 8015312:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8015314:	f000 f824 	bl	8015360 <HAL_RCC_GetSysClockFreq>
 8015318:	4602      	mov	r2, r0
 801531a:	4b0d      	ldr	r3, [pc, #52]	@ (8015350 <HAL_RCC_ClockConfig+0x1f0>)
 801531c:	689b      	ldr	r3, [r3, #8]
 801531e:	091b      	lsrs	r3, r3, #4
 8015320:	f003 030f 	and.w	r3, r3, #15
 8015324:	490b      	ldr	r1, [pc, #44]	@ (8015354 <HAL_RCC_ClockConfig+0x1f4>)
 8015326:	5ccb      	ldrb	r3, [r1, r3]
 8015328:	f003 031f 	and.w	r3, r3, #31
 801532c:	fa22 f303 	lsr.w	r3, r2, r3
 8015330:	4a09      	ldr	r2, [pc, #36]	@ (8015358 <HAL_RCC_ClockConfig+0x1f8>)
 8015332:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8015334:	4b09      	ldr	r3, [pc, #36]	@ (801535c <HAL_RCC_ClockConfig+0x1fc>)
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	4618      	mov	r0, r3
 801533a:	f7ed fe43 	bl	8002fc4 <HAL_InitTick>
 801533e:	4603      	mov	r3, r0
 8015340:	72fb      	strb	r3, [r7, #11]

  return status;
 8015342:	7afb      	ldrb	r3, [r7, #11]
}
 8015344:	4618      	mov	r0, r3
 8015346:	3710      	adds	r7, #16
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}
 801534c:	40022000 	.word	0x40022000
 8015350:	40021000 	.word	0x40021000
 8015354:	08025fbc 	.word	0x08025fbc
 8015358:	20000030 	.word	0x20000030
 801535c:	20000034 	.word	0x20000034

08015360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015360:	b480      	push	{r7}
 8015362:	b089      	sub	sp, #36	@ 0x24
 8015364:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8015366:	2300      	movs	r3, #0
 8015368:	61fb      	str	r3, [r7, #28]
 801536a:	2300      	movs	r3, #0
 801536c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801536e:	4b3e      	ldr	r3, [pc, #248]	@ (8015468 <HAL_RCC_GetSysClockFreq+0x108>)
 8015370:	689b      	ldr	r3, [r3, #8]
 8015372:	f003 030c 	and.w	r3, r3, #12
 8015376:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8015378:	4b3b      	ldr	r3, [pc, #236]	@ (8015468 <HAL_RCC_GetSysClockFreq+0x108>)
 801537a:	68db      	ldr	r3, [r3, #12]
 801537c:	f003 0303 	and.w	r3, r3, #3
 8015380:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8015382:	693b      	ldr	r3, [r7, #16]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d005      	beq.n	8015394 <HAL_RCC_GetSysClockFreq+0x34>
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	2b0c      	cmp	r3, #12
 801538c:	d121      	bne.n	80153d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	2b01      	cmp	r3, #1
 8015392:	d11e      	bne.n	80153d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8015394:	4b34      	ldr	r3, [pc, #208]	@ (8015468 <HAL_RCC_GetSysClockFreq+0x108>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	f003 0308 	and.w	r3, r3, #8
 801539c:	2b00      	cmp	r3, #0
 801539e:	d107      	bne.n	80153b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80153a0:	4b31      	ldr	r3, [pc, #196]	@ (8015468 <HAL_RCC_GetSysClockFreq+0x108>)
 80153a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80153a6:	0a1b      	lsrs	r3, r3, #8
 80153a8:	f003 030f 	and.w	r3, r3, #15
 80153ac:	61fb      	str	r3, [r7, #28]
 80153ae:	e005      	b.n	80153bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80153b0:	4b2d      	ldr	r3, [pc, #180]	@ (8015468 <HAL_RCC_GetSysClockFreq+0x108>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	091b      	lsrs	r3, r3, #4
 80153b6:	f003 030f 	and.w	r3, r3, #15
 80153ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80153bc:	4a2b      	ldr	r2, [pc, #172]	@ (801546c <HAL_RCC_GetSysClockFreq+0x10c>)
 80153be:	69fb      	ldr	r3, [r7, #28]
 80153c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80153c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d10d      	bne.n	80153e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80153cc:	69fb      	ldr	r3, [r7, #28]
 80153ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80153d0:	e00a      	b.n	80153e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	2b04      	cmp	r3, #4
 80153d6:	d102      	bne.n	80153de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80153d8:	4b25      	ldr	r3, [pc, #148]	@ (8015470 <HAL_RCC_GetSysClockFreq+0x110>)
 80153da:	61bb      	str	r3, [r7, #24]
 80153dc:	e004      	b.n	80153e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	2b08      	cmp	r3, #8
 80153e2:	d101      	bne.n	80153e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80153e4:	4b23      	ldr	r3, [pc, #140]	@ (8015474 <HAL_RCC_GetSysClockFreq+0x114>)
 80153e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80153e8:	693b      	ldr	r3, [r7, #16]
 80153ea:	2b0c      	cmp	r3, #12
 80153ec:	d134      	bne.n	8015458 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80153ee:	4b1e      	ldr	r3, [pc, #120]	@ (8015468 <HAL_RCC_GetSysClockFreq+0x108>)
 80153f0:	68db      	ldr	r3, [r3, #12]
 80153f2:	f003 0303 	and.w	r3, r3, #3
 80153f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	2b02      	cmp	r3, #2
 80153fc:	d003      	beq.n	8015406 <HAL_RCC_GetSysClockFreq+0xa6>
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	2b03      	cmp	r3, #3
 8015402:	d003      	beq.n	801540c <HAL_RCC_GetSysClockFreq+0xac>
 8015404:	e005      	b.n	8015412 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8015406:	4b1a      	ldr	r3, [pc, #104]	@ (8015470 <HAL_RCC_GetSysClockFreq+0x110>)
 8015408:	617b      	str	r3, [r7, #20]
      break;
 801540a:	e005      	b.n	8015418 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 801540c:	4b19      	ldr	r3, [pc, #100]	@ (8015474 <HAL_RCC_GetSysClockFreq+0x114>)
 801540e:	617b      	str	r3, [r7, #20]
      break;
 8015410:	e002      	b.n	8015418 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8015412:	69fb      	ldr	r3, [r7, #28]
 8015414:	617b      	str	r3, [r7, #20]
      break;
 8015416:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8015418:	4b13      	ldr	r3, [pc, #76]	@ (8015468 <HAL_RCC_GetSysClockFreq+0x108>)
 801541a:	68db      	ldr	r3, [r3, #12]
 801541c:	091b      	lsrs	r3, r3, #4
 801541e:	f003 0307 	and.w	r3, r3, #7
 8015422:	3301      	adds	r3, #1
 8015424:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8015426:	4b10      	ldr	r3, [pc, #64]	@ (8015468 <HAL_RCC_GetSysClockFreq+0x108>)
 8015428:	68db      	ldr	r3, [r3, #12]
 801542a:	0a1b      	lsrs	r3, r3, #8
 801542c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015430:	697a      	ldr	r2, [r7, #20]
 8015432:	fb03 f202 	mul.w	r2, r3, r2
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	fbb2 f3f3 	udiv	r3, r2, r3
 801543c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801543e:	4b0a      	ldr	r3, [pc, #40]	@ (8015468 <HAL_RCC_GetSysClockFreq+0x108>)
 8015440:	68db      	ldr	r3, [r3, #12]
 8015442:	0e5b      	lsrs	r3, r3, #25
 8015444:	f003 0303 	and.w	r3, r3, #3
 8015448:	3301      	adds	r3, #1
 801544a:	005b      	lsls	r3, r3, #1
 801544c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801544e:	697a      	ldr	r2, [r7, #20]
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	fbb2 f3f3 	udiv	r3, r2, r3
 8015456:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8015458:	69bb      	ldr	r3, [r7, #24]
}
 801545a:	4618      	mov	r0, r3
 801545c:	3724      	adds	r7, #36	@ 0x24
 801545e:	46bd      	mov	sp, r7
 8015460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015464:	4770      	bx	lr
 8015466:	bf00      	nop
 8015468:	40021000 	.word	0x40021000
 801546c:	08025fd4 	.word	0x08025fd4
 8015470:	00f42400 	.word	0x00f42400
 8015474:	007a1200 	.word	0x007a1200

08015478 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015478:	b480      	push	{r7}
 801547a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801547c:	4b03      	ldr	r3, [pc, #12]	@ (801548c <HAL_RCC_GetHCLKFreq+0x14>)
 801547e:	681b      	ldr	r3, [r3, #0]
}
 8015480:	4618      	mov	r0, r3
 8015482:	46bd      	mov	sp, r7
 8015484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015488:	4770      	bx	lr
 801548a:	bf00      	nop
 801548c:	20000030 	.word	0x20000030

08015490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8015494:	f7ff fff0 	bl	8015478 <HAL_RCC_GetHCLKFreq>
 8015498:	4602      	mov	r2, r0
 801549a:	4b06      	ldr	r3, [pc, #24]	@ (80154b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 801549c:	689b      	ldr	r3, [r3, #8]
 801549e:	0a1b      	lsrs	r3, r3, #8
 80154a0:	f003 0307 	and.w	r3, r3, #7
 80154a4:	4904      	ldr	r1, [pc, #16]	@ (80154b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80154a6:	5ccb      	ldrb	r3, [r1, r3]
 80154a8:	f003 031f 	and.w	r3, r3, #31
 80154ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80154b0:	4618      	mov	r0, r3
 80154b2:	bd80      	pop	{r7, pc}
 80154b4:	40021000 	.word	0x40021000
 80154b8:	08025fcc 	.word	0x08025fcc

080154bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80154c0:	f7ff ffda 	bl	8015478 <HAL_RCC_GetHCLKFreq>
 80154c4:	4602      	mov	r2, r0
 80154c6:	4b06      	ldr	r3, [pc, #24]	@ (80154e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80154c8:	689b      	ldr	r3, [r3, #8]
 80154ca:	0adb      	lsrs	r3, r3, #11
 80154cc:	f003 0307 	and.w	r3, r3, #7
 80154d0:	4904      	ldr	r1, [pc, #16]	@ (80154e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80154d2:	5ccb      	ldrb	r3, [r1, r3]
 80154d4:	f003 031f 	and.w	r3, r3, #31
 80154d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80154dc:	4618      	mov	r0, r3
 80154de:	bd80      	pop	{r7, pc}
 80154e0:	40021000 	.word	0x40021000
 80154e4:	08025fcc 	.word	0x08025fcc

080154e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80154e8:	b480      	push	{r7}
 80154ea:	b083      	sub	sp, #12
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
 80154f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	220f      	movs	r2, #15
 80154f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80154f8:	4b12      	ldr	r3, [pc, #72]	@ (8015544 <HAL_RCC_GetClockConfig+0x5c>)
 80154fa:	689b      	ldr	r3, [r3, #8]
 80154fc:	f003 0203 	and.w	r2, r3, #3
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8015504:	4b0f      	ldr	r3, [pc, #60]	@ (8015544 <HAL_RCC_GetClockConfig+0x5c>)
 8015506:	689b      	ldr	r3, [r3, #8]
 8015508:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8015510:	4b0c      	ldr	r3, [pc, #48]	@ (8015544 <HAL_RCC_GetClockConfig+0x5c>)
 8015512:	689b      	ldr	r3, [r3, #8]
 8015514:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 801551c:	4b09      	ldr	r3, [pc, #36]	@ (8015544 <HAL_RCC_GetClockConfig+0x5c>)
 801551e:	689b      	ldr	r3, [r3, #8]
 8015520:	08db      	lsrs	r3, r3, #3
 8015522:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 801552a:	4b07      	ldr	r3, [pc, #28]	@ (8015548 <HAL_RCC_GetClockConfig+0x60>)
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	f003 0207 	and.w	r2, r3, #7
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	601a      	str	r2, [r3, #0]
}
 8015536:	bf00      	nop
 8015538:	370c      	adds	r7, #12
 801553a:	46bd      	mov	sp, r7
 801553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015540:	4770      	bx	lr
 8015542:	bf00      	nop
 8015544:	40021000 	.word	0x40021000
 8015548:	40022000 	.word	0x40022000

0801554c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b086      	sub	sp, #24
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8015554:	2300      	movs	r3, #0
 8015556:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8015558:	4b2a      	ldr	r3, [pc, #168]	@ (8015604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801555a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801555c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8015560:	2b00      	cmp	r3, #0
 8015562:	d003      	beq.n	801556c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8015564:	f7ff f9bc 	bl	80148e0 <HAL_PWREx_GetVoltageRange>
 8015568:	6178      	str	r0, [r7, #20]
 801556a:	e014      	b.n	8015596 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801556c:	4b25      	ldr	r3, [pc, #148]	@ (8015604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801556e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015570:	4a24      	ldr	r2, [pc, #144]	@ (8015604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015576:	6593      	str	r3, [r2, #88]	@ 0x58
 8015578:	4b22      	ldr	r3, [pc, #136]	@ (8015604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801557a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801557c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8015580:	60fb      	str	r3, [r7, #12]
 8015582:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8015584:	f7ff f9ac 	bl	80148e0 <HAL_PWREx_GetVoltageRange>
 8015588:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801558a:	4b1e      	ldr	r3, [pc, #120]	@ (8015604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801558c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801558e:	4a1d      	ldr	r2, [pc, #116]	@ (8015604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8015594:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801559c:	d10b      	bne.n	80155b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	2b80      	cmp	r3, #128	@ 0x80
 80155a2:	d919      	bls.n	80155d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80155a8:	d902      	bls.n	80155b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80155aa:	2302      	movs	r3, #2
 80155ac:	613b      	str	r3, [r7, #16]
 80155ae:	e013      	b.n	80155d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80155b0:	2301      	movs	r3, #1
 80155b2:	613b      	str	r3, [r7, #16]
 80155b4:	e010      	b.n	80155d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2b80      	cmp	r3, #128	@ 0x80
 80155ba:	d902      	bls.n	80155c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80155bc:	2303      	movs	r3, #3
 80155be:	613b      	str	r3, [r7, #16]
 80155c0:	e00a      	b.n	80155d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	2b80      	cmp	r3, #128	@ 0x80
 80155c6:	d102      	bne.n	80155ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80155c8:	2302      	movs	r3, #2
 80155ca:	613b      	str	r3, [r7, #16]
 80155cc:	e004      	b.n	80155d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	2b70      	cmp	r3, #112	@ 0x70
 80155d2:	d101      	bne.n	80155d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80155d4:	2301      	movs	r3, #1
 80155d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80155d8:	4b0b      	ldr	r3, [pc, #44]	@ (8015608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	f023 0207 	bic.w	r2, r3, #7
 80155e0:	4909      	ldr	r1, [pc, #36]	@ (8015608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80155e2:	693b      	ldr	r3, [r7, #16]
 80155e4:	4313      	orrs	r3, r2
 80155e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80155e8:	4b07      	ldr	r3, [pc, #28]	@ (8015608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	f003 0307 	and.w	r3, r3, #7
 80155f0:	693a      	ldr	r2, [r7, #16]
 80155f2:	429a      	cmp	r2, r3
 80155f4:	d001      	beq.n	80155fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80155f6:	2301      	movs	r3, #1
 80155f8:	e000      	b.n	80155fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80155fa:	2300      	movs	r3, #0
}
 80155fc:	4618      	mov	r0, r3
 80155fe:	3718      	adds	r7, #24
 8015600:	46bd      	mov	sp, r7
 8015602:	bd80      	pop	{r7, pc}
 8015604:	40021000 	.word	0x40021000
 8015608:	40022000 	.word	0x40022000

0801560c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b086      	sub	sp, #24
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8015614:	2300      	movs	r3, #0
 8015616:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8015618:	2300      	movs	r3, #0
 801561a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015624:	2b00      	cmp	r3, #0
 8015626:	d041      	beq.n	80156ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801562c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8015630:	d02a      	beq.n	8015688 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8015632:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8015636:	d824      	bhi.n	8015682 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8015638:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801563c:	d008      	beq.n	8015650 <HAL_RCCEx_PeriphCLKConfig+0x44>
 801563e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015642:	d81e      	bhi.n	8015682 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8015644:	2b00      	cmp	r3, #0
 8015646:	d00a      	beq.n	801565e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8015648:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801564c:	d010      	beq.n	8015670 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801564e:	e018      	b.n	8015682 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8015650:	4b86      	ldr	r3, [pc, #536]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015652:	68db      	ldr	r3, [r3, #12]
 8015654:	4a85      	ldr	r2, [pc, #532]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801565a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801565c:	e015      	b.n	801568a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	3304      	adds	r3, #4
 8015662:	2100      	movs	r1, #0
 8015664:	4618      	mov	r0, r3
 8015666:	f000 fabb 	bl	8015be0 <RCCEx_PLLSAI1_Config>
 801566a:	4603      	mov	r3, r0
 801566c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801566e:	e00c      	b.n	801568a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	3320      	adds	r3, #32
 8015674:	2100      	movs	r1, #0
 8015676:	4618      	mov	r0, r3
 8015678:	f000 fba6 	bl	8015dc8 <RCCEx_PLLSAI2_Config>
 801567c:	4603      	mov	r3, r0
 801567e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8015680:	e003      	b.n	801568a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015682:	2301      	movs	r3, #1
 8015684:	74fb      	strb	r3, [r7, #19]
      break;
 8015686:	e000      	b.n	801568a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8015688:	bf00      	nop
    }

    if(ret == HAL_OK)
 801568a:	7cfb      	ldrb	r3, [r7, #19]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d10b      	bne.n	80156a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015690:	4b76      	ldr	r3, [pc, #472]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015696:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801569e:	4973      	ldr	r1, [pc, #460]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80156a0:	4313      	orrs	r3, r2
 80156a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80156a6:	e001      	b.n	80156ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80156a8:	7cfb      	ldrb	r3, [r7, #19]
 80156aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d041      	beq.n	801573c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80156bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80156c0:	d02a      	beq.n	8015718 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80156c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80156c6:	d824      	bhi.n	8015712 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80156c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80156cc:	d008      	beq.n	80156e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80156ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80156d2:	d81e      	bhi.n	8015712 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d00a      	beq.n	80156ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80156d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80156dc:	d010      	beq.n	8015700 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80156de:	e018      	b.n	8015712 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80156e0:	4b62      	ldr	r3, [pc, #392]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80156e2:	68db      	ldr	r3, [r3, #12]
 80156e4:	4a61      	ldr	r2, [pc, #388]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80156e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80156ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80156ec:	e015      	b.n	801571a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	3304      	adds	r3, #4
 80156f2:	2100      	movs	r1, #0
 80156f4:	4618      	mov	r0, r3
 80156f6:	f000 fa73 	bl	8015be0 <RCCEx_PLLSAI1_Config>
 80156fa:	4603      	mov	r3, r0
 80156fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80156fe:	e00c      	b.n	801571a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	3320      	adds	r3, #32
 8015704:	2100      	movs	r1, #0
 8015706:	4618      	mov	r0, r3
 8015708:	f000 fb5e 	bl	8015dc8 <RCCEx_PLLSAI2_Config>
 801570c:	4603      	mov	r3, r0
 801570e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8015710:	e003      	b.n	801571a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015712:	2301      	movs	r3, #1
 8015714:	74fb      	strb	r3, [r7, #19]
      break;
 8015716:	e000      	b.n	801571a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8015718:	bf00      	nop
    }

    if(ret == HAL_OK)
 801571a:	7cfb      	ldrb	r3, [r7, #19]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d10b      	bne.n	8015738 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8015720:	4b52      	ldr	r3, [pc, #328]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015726:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801572e:	494f      	ldr	r1, [pc, #316]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015730:	4313      	orrs	r3, r2
 8015732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8015736:	e001      	b.n	801573c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015738:	7cfb      	ldrb	r3, [r7, #19]
 801573a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015744:	2b00      	cmp	r3, #0
 8015746:	f000 80a0 	beq.w	801588a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801574a:	2300      	movs	r3, #0
 801574c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801574e:	4b47      	ldr	r3, [pc, #284]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8015756:	2b00      	cmp	r3, #0
 8015758:	d101      	bne.n	801575e <HAL_RCCEx_PeriphCLKConfig+0x152>
 801575a:	2301      	movs	r3, #1
 801575c:	e000      	b.n	8015760 <HAL_RCCEx_PeriphCLKConfig+0x154>
 801575e:	2300      	movs	r3, #0
 8015760:	2b00      	cmp	r3, #0
 8015762:	d00d      	beq.n	8015780 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015764:	4b41      	ldr	r3, [pc, #260]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015768:	4a40      	ldr	r2, [pc, #256]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801576a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801576e:	6593      	str	r3, [r2, #88]	@ 0x58
 8015770:	4b3e      	ldr	r3, [pc, #248]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8015778:	60bb      	str	r3, [r7, #8]
 801577a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801577c:	2301      	movs	r3, #1
 801577e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015780:	4b3b      	ldr	r3, [pc, #236]	@ (8015870 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	4a3a      	ldr	r2, [pc, #232]	@ (8015870 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8015786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801578a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801578c:	f7fc fe4c 	bl	8012428 <HAL_GetTick>
 8015790:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8015792:	e009      	b.n	80157a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015794:	f7fc fe48 	bl	8012428 <HAL_GetTick>
 8015798:	4602      	mov	r2, r0
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	1ad3      	subs	r3, r2, r3
 801579e:	2b02      	cmp	r3, #2
 80157a0:	d902      	bls.n	80157a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80157a2:	2303      	movs	r3, #3
 80157a4:	74fb      	strb	r3, [r7, #19]
        break;
 80157a6:	e005      	b.n	80157b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80157a8:	4b31      	ldr	r3, [pc, #196]	@ (8015870 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d0ef      	beq.n	8015794 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80157b4:	7cfb      	ldrb	r3, [r7, #19]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d15c      	bne.n	8015874 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80157ba:	4b2c      	ldr	r3, [pc, #176]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80157bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80157c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80157c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80157c6:	697b      	ldr	r3, [r7, #20]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d01f      	beq.n	801580c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80157d2:	697a      	ldr	r2, [r7, #20]
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d019      	beq.n	801580c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80157d8:	4b24      	ldr	r3, [pc, #144]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80157da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80157de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80157e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80157e4:	4b21      	ldr	r3, [pc, #132]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80157e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80157ea:	4a20      	ldr	r2, [pc, #128]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80157ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80157f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80157f4:	4b1d      	ldr	r3, [pc, #116]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80157f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80157fa:	4a1c      	ldr	r2, [pc, #112]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80157fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8015804:	4a19      	ldr	r2, [pc, #100]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	f003 0301 	and.w	r3, r3, #1
 8015812:	2b00      	cmp	r3, #0
 8015814:	d016      	beq.n	8015844 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015816:	f7fc fe07 	bl	8012428 <HAL_GetTick>
 801581a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801581c:	e00b      	b.n	8015836 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801581e:	f7fc fe03 	bl	8012428 <HAL_GetTick>
 8015822:	4602      	mov	r2, r0
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	1ad3      	subs	r3, r2, r3
 8015828:	f241 3288 	movw	r2, #5000	@ 0x1388
 801582c:	4293      	cmp	r3, r2
 801582e:	d902      	bls.n	8015836 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8015830:	2303      	movs	r3, #3
 8015832:	74fb      	strb	r3, [r7, #19]
            break;
 8015834:	e006      	b.n	8015844 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015836:	4b0d      	ldr	r3, [pc, #52]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801583c:	f003 0302 	and.w	r3, r3, #2
 8015840:	2b00      	cmp	r3, #0
 8015842:	d0ec      	beq.n	801581e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8015844:	7cfb      	ldrb	r3, [r7, #19]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d10c      	bne.n	8015864 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801584a:	4b08      	ldr	r3, [pc, #32]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801584c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801585a:	4904      	ldr	r1, [pc, #16]	@ (801586c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801585c:	4313      	orrs	r3, r2
 801585e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8015862:	e009      	b.n	8015878 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015864:	7cfb      	ldrb	r3, [r7, #19]
 8015866:	74bb      	strb	r3, [r7, #18]
 8015868:	e006      	b.n	8015878 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 801586a:	bf00      	nop
 801586c:	40021000 	.word	0x40021000
 8015870:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015874:	7cfb      	ldrb	r3, [r7, #19]
 8015876:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8015878:	7c7b      	ldrb	r3, [r7, #17]
 801587a:	2b01      	cmp	r3, #1
 801587c:	d105      	bne.n	801588a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801587e:	4b9e      	ldr	r3, [pc, #632]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015882:	4a9d      	ldr	r2, [pc, #628]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015884:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8015888:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	f003 0301 	and.w	r3, r3, #1
 8015892:	2b00      	cmp	r3, #0
 8015894:	d00a      	beq.n	80158ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015896:	4b98      	ldr	r3, [pc, #608]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801589c:	f023 0203 	bic.w	r2, r3, #3
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158a4:	4994      	ldr	r1, [pc, #592]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80158a6:	4313      	orrs	r3, r2
 80158a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	f003 0302 	and.w	r3, r3, #2
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d00a      	beq.n	80158ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80158b8:	4b8f      	ldr	r3, [pc, #572]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80158ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80158be:	f023 020c 	bic.w	r2, r3, #12
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80158c6:	498c      	ldr	r1, [pc, #560]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80158c8:	4313      	orrs	r3, r2
 80158ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	f003 0304 	and.w	r3, r3, #4
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d00a      	beq.n	80158f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80158da:	4b87      	ldr	r3, [pc, #540]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80158dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80158e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158e8:	4983      	ldr	r1, [pc, #524]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80158ea:	4313      	orrs	r3, r2
 80158ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	f003 0308 	and.w	r3, r3, #8
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d00a      	beq.n	8015912 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80158fc:	4b7e      	ldr	r3, [pc, #504]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80158fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015902:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801590a:	497b      	ldr	r1, [pc, #492]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801590c:	4313      	orrs	r3, r2
 801590e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	f003 0310 	and.w	r3, r3, #16
 801591a:	2b00      	cmp	r3, #0
 801591c:	d00a      	beq.n	8015934 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801591e:	4b76      	ldr	r3, [pc, #472]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015924:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801592c:	4972      	ldr	r1, [pc, #456]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801592e:	4313      	orrs	r3, r2
 8015930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	f003 0320 	and.w	r3, r3, #32
 801593c:	2b00      	cmp	r3, #0
 801593e:	d00a      	beq.n	8015956 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015940:	4b6d      	ldr	r3, [pc, #436]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015946:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801594e:	496a      	ldr	r1, [pc, #424]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015950:	4313      	orrs	r3, r2
 8015952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801595e:	2b00      	cmp	r3, #0
 8015960:	d00a      	beq.n	8015978 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8015962:	4b65      	ldr	r3, [pc, #404]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015968:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015970:	4961      	ldr	r1, [pc, #388]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015972:	4313      	orrs	r3, r2
 8015974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015980:	2b00      	cmp	r3, #0
 8015982:	d00a      	beq.n	801599a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8015984:	4b5c      	ldr	r3, [pc, #368]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801598a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015992:	4959      	ldr	r1, [pc, #356]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015994:	4313      	orrs	r3, r2
 8015996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d00a      	beq.n	80159bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80159a6:	4b54      	ldr	r3, [pc, #336]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80159a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80159ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159b4:	4950      	ldr	r1, [pc, #320]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80159b6:	4313      	orrs	r3, r2
 80159b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d00a      	beq.n	80159de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80159c8:	4b4b      	ldr	r3, [pc, #300]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80159ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80159ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80159d6:	4948      	ldr	r1, [pc, #288]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80159d8:	4313      	orrs	r3, r2
 80159da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d00a      	beq.n	8015a00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80159ea:	4b43      	ldr	r3, [pc, #268]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80159ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80159f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80159f8:	493f      	ldr	r1, [pc, #252]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80159fa:	4313      	orrs	r3, r2
 80159fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d028      	beq.n	8015a5e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015a12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015a1a:	4937      	ldr	r1, [pc, #220]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015a1c:	4313      	orrs	r3, r2
 8015a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015a26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015a2a:	d106      	bne.n	8015a3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015a2c:	4b32      	ldr	r3, [pc, #200]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015a2e:	68db      	ldr	r3, [r3, #12]
 8015a30:	4a31      	ldr	r2, [pc, #196]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015a36:	60d3      	str	r3, [r2, #12]
 8015a38:	e011      	b.n	8015a5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015a3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8015a42:	d10c      	bne.n	8015a5e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	3304      	adds	r3, #4
 8015a48:	2101      	movs	r1, #1
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f000 f8c8 	bl	8015be0 <RCCEx_PLLSAI1_Config>
 8015a50:	4603      	mov	r3, r0
 8015a52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8015a54:	7cfb      	ldrb	r3, [r7, #19]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d001      	beq.n	8015a5e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8015a5a:	7cfb      	ldrb	r3, [r7, #19]
 8015a5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d028      	beq.n	8015abc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8015a6a:	4b23      	ldr	r3, [pc, #140]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015a70:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a78:	491f      	ldr	r1, [pc, #124]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015a7a:	4313      	orrs	r3, r2
 8015a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015a88:	d106      	bne.n	8015a98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015a8c:	68db      	ldr	r3, [r3, #12]
 8015a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015a90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015a94:	60d3      	str	r3, [r2, #12]
 8015a96:	e011      	b.n	8015abc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8015aa0:	d10c      	bne.n	8015abc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	3304      	adds	r3, #4
 8015aa6:	2101      	movs	r1, #1
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f000 f899 	bl	8015be0 <RCCEx_PLLSAI1_Config>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8015ab2:	7cfb      	ldrb	r3, [r7, #19]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d001      	beq.n	8015abc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8015ab8:	7cfb      	ldrb	r3, [r7, #19]
 8015aba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d02b      	beq.n	8015b20 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8015ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015ace:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015ad6:	4908      	ldr	r1, [pc, #32]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015ad8:	4313      	orrs	r3, r2
 8015ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015ae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015ae6:	d109      	bne.n	8015afc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015ae8:	4b03      	ldr	r3, [pc, #12]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015aea:	68db      	ldr	r3, [r3, #12]
 8015aec:	4a02      	ldr	r2, [pc, #8]	@ (8015af8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015af2:	60d3      	str	r3, [r2, #12]
 8015af4:	e014      	b.n	8015b20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8015af6:	bf00      	nop
 8015af8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8015b04:	d10c      	bne.n	8015b20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	3304      	adds	r3, #4
 8015b0a:	2101      	movs	r1, #1
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f000 f867 	bl	8015be0 <RCCEx_PLLSAI1_Config>
 8015b12:	4603      	mov	r3, r0
 8015b14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8015b16:	7cfb      	ldrb	r3, [r7, #19]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d001      	beq.n	8015b20 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8015b1c:	7cfb      	ldrb	r3, [r7, #19]
 8015b1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d02f      	beq.n	8015b8c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8015b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8015b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015b32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b3a:	4928      	ldr	r1, [pc, #160]	@ (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8015b3c:	4313      	orrs	r3, r2
 8015b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015b4a:	d10d      	bne.n	8015b68 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	3304      	adds	r3, #4
 8015b50:	2102      	movs	r1, #2
 8015b52:	4618      	mov	r0, r3
 8015b54:	f000 f844 	bl	8015be0 <RCCEx_PLLSAI1_Config>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8015b5c:	7cfb      	ldrb	r3, [r7, #19]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d014      	beq.n	8015b8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8015b62:	7cfb      	ldrb	r3, [r7, #19]
 8015b64:	74bb      	strb	r3, [r7, #18]
 8015b66:	e011      	b.n	8015b8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015b70:	d10c      	bne.n	8015b8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	3320      	adds	r3, #32
 8015b76:	2102      	movs	r1, #2
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f000 f925 	bl	8015dc8 <RCCEx_PLLSAI2_Config>
 8015b7e:	4603      	mov	r3, r0
 8015b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8015b82:	7cfb      	ldrb	r3, [r7, #19]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d001      	beq.n	8015b8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8015b88:	7cfb      	ldrb	r3, [r7, #19]
 8015b8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d00a      	beq.n	8015bae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8015b98:	4b10      	ldr	r3, [pc, #64]	@ (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8015b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015b9e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015ba6:	490d      	ldr	r1, [pc, #52]	@ (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8015ba8:	4313      	orrs	r3, r2
 8015baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d00b      	beq.n	8015bd2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8015bba:	4b08      	ldr	r3, [pc, #32]	@ (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8015bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015bc0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015bca:	4904      	ldr	r1, [pc, #16]	@ (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8015bcc:	4313      	orrs	r3, r2
 8015bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8015bd2:	7cbb      	ldrb	r3, [r7, #18]
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3718      	adds	r7, #24
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}
 8015bdc:	40021000 	.word	0x40021000

08015be0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b084      	sub	sp, #16
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015bea:	2300      	movs	r3, #0
 8015bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8015bee:	4b75      	ldr	r3, [pc, #468]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015bf0:	68db      	ldr	r3, [r3, #12]
 8015bf2:	f003 0303 	and.w	r3, r3, #3
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d018      	beq.n	8015c2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8015bfa:	4b72      	ldr	r3, [pc, #456]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015bfc:	68db      	ldr	r3, [r3, #12]
 8015bfe:	f003 0203 	and.w	r2, r3, #3
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	429a      	cmp	r2, r3
 8015c08:	d10d      	bne.n	8015c26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	681b      	ldr	r3, [r3, #0]
       ||
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d009      	beq.n	8015c26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8015c12:	4b6c      	ldr	r3, [pc, #432]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015c14:	68db      	ldr	r3, [r3, #12]
 8015c16:	091b      	lsrs	r3, r3, #4
 8015c18:	f003 0307 	and.w	r3, r3, #7
 8015c1c:	1c5a      	adds	r2, r3, #1
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	685b      	ldr	r3, [r3, #4]
       ||
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d047      	beq.n	8015cb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8015c26:	2301      	movs	r3, #1
 8015c28:	73fb      	strb	r3, [r7, #15]
 8015c2a:	e044      	b.n	8015cb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	2b03      	cmp	r3, #3
 8015c32:	d018      	beq.n	8015c66 <RCCEx_PLLSAI1_Config+0x86>
 8015c34:	2b03      	cmp	r3, #3
 8015c36:	d825      	bhi.n	8015c84 <RCCEx_PLLSAI1_Config+0xa4>
 8015c38:	2b01      	cmp	r3, #1
 8015c3a:	d002      	beq.n	8015c42 <RCCEx_PLLSAI1_Config+0x62>
 8015c3c:	2b02      	cmp	r3, #2
 8015c3e:	d009      	beq.n	8015c54 <RCCEx_PLLSAI1_Config+0x74>
 8015c40:	e020      	b.n	8015c84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8015c42:	4b60      	ldr	r3, [pc, #384]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	f003 0302 	and.w	r3, r3, #2
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d11d      	bne.n	8015c8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8015c4e:	2301      	movs	r3, #1
 8015c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015c52:	e01a      	b.n	8015c8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8015c54:	4b5b      	ldr	r3, [pc, #364]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d116      	bne.n	8015c8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8015c60:	2301      	movs	r3, #1
 8015c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015c64:	e013      	b.n	8015c8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8015c66:	4b57      	ldr	r3, [pc, #348]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d10f      	bne.n	8015c92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8015c72:	4b54      	ldr	r3, [pc, #336]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d109      	bne.n	8015c92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8015c7e:	2301      	movs	r3, #1
 8015c80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015c82:	e006      	b.n	8015c92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8015c84:	2301      	movs	r3, #1
 8015c86:	73fb      	strb	r3, [r7, #15]
      break;
 8015c88:	e004      	b.n	8015c94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8015c8a:	bf00      	nop
 8015c8c:	e002      	b.n	8015c94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8015c8e:	bf00      	nop
 8015c90:	e000      	b.n	8015c94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8015c92:	bf00      	nop
    }

    if(status == HAL_OK)
 8015c94:	7bfb      	ldrb	r3, [r7, #15]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d10d      	bne.n	8015cb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8015c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015c9c:	68db      	ldr	r3, [r3, #12]
 8015c9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	6819      	ldr	r1, [r3, #0]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	685b      	ldr	r3, [r3, #4]
 8015caa:	3b01      	subs	r3, #1
 8015cac:	011b      	lsls	r3, r3, #4
 8015cae:	430b      	orrs	r3, r1
 8015cb0:	4944      	ldr	r1, [pc, #272]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015cb2:	4313      	orrs	r3, r2
 8015cb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8015cb6:	7bfb      	ldrb	r3, [r7, #15]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d17d      	bne.n	8015db8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8015cbc:	4b41      	ldr	r3, [pc, #260]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	4a40      	ldr	r2, [pc, #256]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015cc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8015cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015cc8:	f7fc fbae 	bl	8012428 <HAL_GetTick>
 8015ccc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8015cce:	e009      	b.n	8015ce4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015cd0:	f7fc fbaa 	bl	8012428 <HAL_GetTick>
 8015cd4:	4602      	mov	r2, r0
 8015cd6:	68bb      	ldr	r3, [r7, #8]
 8015cd8:	1ad3      	subs	r3, r2, r3
 8015cda:	2b02      	cmp	r3, #2
 8015cdc:	d902      	bls.n	8015ce4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8015cde:	2303      	movs	r3, #3
 8015ce0:	73fb      	strb	r3, [r7, #15]
        break;
 8015ce2:	e005      	b.n	8015cf0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8015ce4:	4b37      	ldr	r3, [pc, #220]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d1ef      	bne.n	8015cd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8015cf0:	7bfb      	ldrb	r3, [r7, #15]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d160      	bne.n	8015db8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d111      	bne.n	8015d20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8015cfc:	4b31      	ldr	r3, [pc, #196]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015cfe:	691b      	ldr	r3, [r3, #16]
 8015d00:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8015d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015d08:	687a      	ldr	r2, [r7, #4]
 8015d0a:	6892      	ldr	r2, [r2, #8]
 8015d0c:	0211      	lsls	r1, r2, #8
 8015d0e:	687a      	ldr	r2, [r7, #4]
 8015d10:	68d2      	ldr	r2, [r2, #12]
 8015d12:	0912      	lsrs	r2, r2, #4
 8015d14:	0452      	lsls	r2, r2, #17
 8015d16:	430a      	orrs	r2, r1
 8015d18:	492a      	ldr	r1, [pc, #168]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015d1a:	4313      	orrs	r3, r2
 8015d1c:	610b      	str	r3, [r1, #16]
 8015d1e:	e027      	b.n	8015d70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8015d20:	683b      	ldr	r3, [r7, #0]
 8015d22:	2b01      	cmp	r3, #1
 8015d24:	d112      	bne.n	8015d4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8015d26:	4b27      	ldr	r3, [pc, #156]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015d28:	691b      	ldr	r3, [r3, #16]
 8015d2a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8015d2e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8015d32:	687a      	ldr	r2, [r7, #4]
 8015d34:	6892      	ldr	r2, [r2, #8]
 8015d36:	0211      	lsls	r1, r2, #8
 8015d38:	687a      	ldr	r2, [r7, #4]
 8015d3a:	6912      	ldr	r2, [r2, #16]
 8015d3c:	0852      	lsrs	r2, r2, #1
 8015d3e:	3a01      	subs	r2, #1
 8015d40:	0552      	lsls	r2, r2, #21
 8015d42:	430a      	orrs	r2, r1
 8015d44:	491f      	ldr	r1, [pc, #124]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015d46:	4313      	orrs	r3, r2
 8015d48:	610b      	str	r3, [r1, #16]
 8015d4a:	e011      	b.n	8015d70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8015d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015d4e:	691b      	ldr	r3, [r3, #16]
 8015d50:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8015d54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8015d58:	687a      	ldr	r2, [r7, #4]
 8015d5a:	6892      	ldr	r2, [r2, #8]
 8015d5c:	0211      	lsls	r1, r2, #8
 8015d5e:	687a      	ldr	r2, [r7, #4]
 8015d60:	6952      	ldr	r2, [r2, #20]
 8015d62:	0852      	lsrs	r2, r2, #1
 8015d64:	3a01      	subs	r2, #1
 8015d66:	0652      	lsls	r2, r2, #25
 8015d68:	430a      	orrs	r2, r1
 8015d6a:	4916      	ldr	r1, [pc, #88]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015d6c:	4313      	orrs	r3, r2
 8015d6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8015d70:	4b14      	ldr	r3, [pc, #80]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	4a13      	ldr	r2, [pc, #76]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015d76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8015d7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015d7c:	f7fc fb54 	bl	8012428 <HAL_GetTick>
 8015d80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8015d82:	e009      	b.n	8015d98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8015d84:	f7fc fb50 	bl	8012428 <HAL_GetTick>
 8015d88:	4602      	mov	r2, r0
 8015d8a:	68bb      	ldr	r3, [r7, #8]
 8015d8c:	1ad3      	subs	r3, r2, r3
 8015d8e:	2b02      	cmp	r3, #2
 8015d90:	d902      	bls.n	8015d98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8015d92:	2303      	movs	r3, #3
 8015d94:	73fb      	strb	r3, [r7, #15]
          break;
 8015d96:	e005      	b.n	8015da4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8015d98:	4b0a      	ldr	r3, [pc, #40]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d0ef      	beq.n	8015d84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8015da4:	7bfb      	ldrb	r3, [r7, #15]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d106      	bne.n	8015db8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8015daa:	4b06      	ldr	r3, [pc, #24]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015dac:	691a      	ldr	r2, [r3, #16]
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	699b      	ldr	r3, [r3, #24]
 8015db2:	4904      	ldr	r1, [pc, #16]	@ (8015dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015db4:	4313      	orrs	r3, r2
 8015db6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8015db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dba:	4618      	mov	r0, r3
 8015dbc:	3710      	adds	r7, #16
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}
 8015dc2:	bf00      	nop
 8015dc4:	40021000 	.word	0x40021000

08015dc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8015dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015dd8:	68db      	ldr	r3, [r3, #12]
 8015dda:	f003 0303 	and.w	r3, r3, #3
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d018      	beq.n	8015e14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8015de2:	4b67      	ldr	r3, [pc, #412]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015de4:	68db      	ldr	r3, [r3, #12]
 8015de6:	f003 0203 	and.w	r2, r3, #3
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	429a      	cmp	r2, r3
 8015df0:	d10d      	bne.n	8015e0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	681b      	ldr	r3, [r3, #0]
       ||
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d009      	beq.n	8015e0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8015dfa:	4b61      	ldr	r3, [pc, #388]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015dfc:	68db      	ldr	r3, [r3, #12]
 8015dfe:	091b      	lsrs	r3, r3, #4
 8015e00:	f003 0307 	and.w	r3, r3, #7
 8015e04:	1c5a      	adds	r2, r3, #1
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	685b      	ldr	r3, [r3, #4]
       ||
 8015e0a:	429a      	cmp	r2, r3
 8015e0c:	d047      	beq.n	8015e9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8015e0e:	2301      	movs	r3, #1
 8015e10:	73fb      	strb	r3, [r7, #15]
 8015e12:	e044      	b.n	8015e9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	2b03      	cmp	r3, #3
 8015e1a:	d018      	beq.n	8015e4e <RCCEx_PLLSAI2_Config+0x86>
 8015e1c:	2b03      	cmp	r3, #3
 8015e1e:	d825      	bhi.n	8015e6c <RCCEx_PLLSAI2_Config+0xa4>
 8015e20:	2b01      	cmp	r3, #1
 8015e22:	d002      	beq.n	8015e2a <RCCEx_PLLSAI2_Config+0x62>
 8015e24:	2b02      	cmp	r3, #2
 8015e26:	d009      	beq.n	8015e3c <RCCEx_PLLSAI2_Config+0x74>
 8015e28:	e020      	b.n	8015e6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8015e2a:	4b55      	ldr	r3, [pc, #340]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	f003 0302 	and.w	r3, r3, #2
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d11d      	bne.n	8015e72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8015e36:	2301      	movs	r3, #1
 8015e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015e3a:	e01a      	b.n	8015e72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8015e3c:	4b50      	ldr	r3, [pc, #320]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d116      	bne.n	8015e76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8015e48:	2301      	movs	r3, #1
 8015e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015e4c:	e013      	b.n	8015e76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8015e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d10f      	bne.n	8015e7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8015e5a:	4b49      	ldr	r3, [pc, #292]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d109      	bne.n	8015e7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8015e66:	2301      	movs	r3, #1
 8015e68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015e6a:	e006      	b.n	8015e7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8015e6c:	2301      	movs	r3, #1
 8015e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8015e70:	e004      	b.n	8015e7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8015e72:	bf00      	nop
 8015e74:	e002      	b.n	8015e7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8015e76:	bf00      	nop
 8015e78:	e000      	b.n	8015e7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8015e7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8015e7c:	7bfb      	ldrb	r3, [r7, #15]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d10d      	bne.n	8015e9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8015e82:	4b3f      	ldr	r3, [pc, #252]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015e84:	68db      	ldr	r3, [r3, #12]
 8015e86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	6819      	ldr	r1, [r3, #0]
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	685b      	ldr	r3, [r3, #4]
 8015e92:	3b01      	subs	r3, #1
 8015e94:	011b      	lsls	r3, r3, #4
 8015e96:	430b      	orrs	r3, r1
 8015e98:	4939      	ldr	r1, [pc, #228]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015e9a:	4313      	orrs	r3, r2
 8015e9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8015e9e:	7bfb      	ldrb	r3, [r7, #15]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d167      	bne.n	8015f74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8015ea4:	4b36      	ldr	r3, [pc, #216]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	4a35      	ldr	r2, [pc, #212]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8015eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015eb0:	f7fc faba 	bl	8012428 <HAL_GetTick>
 8015eb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8015eb6:	e009      	b.n	8015ecc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8015eb8:	f7fc fab6 	bl	8012428 <HAL_GetTick>
 8015ebc:	4602      	mov	r2, r0
 8015ebe:	68bb      	ldr	r3, [r7, #8]
 8015ec0:	1ad3      	subs	r3, r2, r3
 8015ec2:	2b02      	cmp	r3, #2
 8015ec4:	d902      	bls.n	8015ecc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8015ec6:	2303      	movs	r3, #3
 8015ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8015eca:	e005      	b.n	8015ed8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8015ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d1ef      	bne.n	8015eb8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8015ed8:	7bfb      	ldrb	r3, [r7, #15]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d14a      	bne.n	8015f74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d111      	bne.n	8015f08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8015ee4:	4b26      	ldr	r3, [pc, #152]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015ee6:	695b      	ldr	r3, [r3, #20]
 8015ee8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8015eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015ef0:	687a      	ldr	r2, [r7, #4]
 8015ef2:	6892      	ldr	r2, [r2, #8]
 8015ef4:	0211      	lsls	r1, r2, #8
 8015ef6:	687a      	ldr	r2, [r7, #4]
 8015ef8:	68d2      	ldr	r2, [r2, #12]
 8015efa:	0912      	lsrs	r2, r2, #4
 8015efc:	0452      	lsls	r2, r2, #17
 8015efe:	430a      	orrs	r2, r1
 8015f00:	491f      	ldr	r1, [pc, #124]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015f02:	4313      	orrs	r3, r2
 8015f04:	614b      	str	r3, [r1, #20]
 8015f06:	e011      	b.n	8015f2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8015f08:	4b1d      	ldr	r3, [pc, #116]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015f0a:	695b      	ldr	r3, [r3, #20]
 8015f0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8015f10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8015f14:	687a      	ldr	r2, [r7, #4]
 8015f16:	6892      	ldr	r2, [r2, #8]
 8015f18:	0211      	lsls	r1, r2, #8
 8015f1a:	687a      	ldr	r2, [r7, #4]
 8015f1c:	6912      	ldr	r2, [r2, #16]
 8015f1e:	0852      	lsrs	r2, r2, #1
 8015f20:	3a01      	subs	r2, #1
 8015f22:	0652      	lsls	r2, r2, #25
 8015f24:	430a      	orrs	r2, r1
 8015f26:	4916      	ldr	r1, [pc, #88]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015f28:	4313      	orrs	r3, r2
 8015f2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8015f2c:	4b14      	ldr	r3, [pc, #80]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	4a13      	ldr	r2, [pc, #76]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015f36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015f38:	f7fc fa76 	bl	8012428 <HAL_GetTick>
 8015f3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8015f3e:	e009      	b.n	8015f54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8015f40:	f7fc fa72 	bl	8012428 <HAL_GetTick>
 8015f44:	4602      	mov	r2, r0
 8015f46:	68bb      	ldr	r3, [r7, #8]
 8015f48:	1ad3      	subs	r3, r2, r3
 8015f4a:	2b02      	cmp	r3, #2
 8015f4c:	d902      	bls.n	8015f54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8015f4e:	2303      	movs	r3, #3
 8015f50:	73fb      	strb	r3, [r7, #15]
          break;
 8015f52:	e005      	b.n	8015f60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8015f54:	4b0a      	ldr	r3, [pc, #40]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d0ef      	beq.n	8015f40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8015f60:	7bfb      	ldrb	r3, [r7, #15]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d106      	bne.n	8015f74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8015f66:	4b06      	ldr	r3, [pc, #24]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015f68:	695a      	ldr	r2, [r3, #20]
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	695b      	ldr	r3, [r3, #20]
 8015f6e:	4904      	ldr	r1, [pc, #16]	@ (8015f80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015f70:	4313      	orrs	r3, r2
 8015f72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8015f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f76:	4618      	mov	r0, r3
 8015f78:	3710      	adds	r7, #16
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	bd80      	pop	{r7, pc}
 8015f7e:	bf00      	nop
 8015f80:	40021000 	.word	0x40021000

08015f84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b084      	sub	sp, #16
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d079      	beq.n	801608a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8015f9c:	b2db      	uxtb	r3, r3
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d106      	bne.n	8015fb0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f7ec ff2e 	bl	8002e0c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	2202      	movs	r2, #2
 8015fb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	68db      	ldr	r3, [r3, #12]
 8015fbe:	f003 0310 	and.w	r3, r3, #16
 8015fc2:	2b10      	cmp	r3, #16
 8015fc4:	d058      	beq.n	8016078 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	22ca      	movs	r2, #202	@ 0xca
 8015fcc:	625a      	str	r2, [r3, #36]	@ 0x24
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	2253      	movs	r2, #83	@ 0x53
 8015fd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8015fd6:	6878      	ldr	r0, [r7, #4]
 8015fd8:	f000 fb7a 	bl	80166d0 <RTC_EnterInitMode>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8015fe0:	7bfb      	ldrb	r3, [r7, #15]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d127      	bne.n	8016036 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	689b      	ldr	r3, [r3, #8]
 8015fec:	687a      	ldr	r2, [r7, #4]
 8015fee:	6812      	ldr	r2, [r2, #0]
 8015ff0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015ff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015ff8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	6899      	ldr	r1, [r3, #8]
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	685a      	ldr	r2, [r3, #4]
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	691b      	ldr	r3, [r3, #16]
 8016008:	431a      	orrs	r2, r3
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	699b      	ldr	r3, [r3, #24]
 801600e:	431a      	orrs	r2, r3
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	430a      	orrs	r2, r1
 8016016:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	687a      	ldr	r2, [r7, #4]
 801601e:	68d2      	ldr	r2, [r2, #12]
 8016020:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	6919      	ldr	r1, [r3, #16]
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	689b      	ldr	r3, [r3, #8]
 801602c:	041a      	lsls	r2, r3, #16
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	430a      	orrs	r2, r1
 8016034:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	f000 fb7e 	bl	8016738 <RTC_ExitInitMode>
 801603c:	4603      	mov	r3, r0
 801603e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8016040:	7bfb      	ldrb	r3, [r7, #15]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d113      	bne.n	801606e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	f022 0203 	bic.w	r2, r2, #3
 8016054:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	69da      	ldr	r2, [r3, #28]
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	695b      	ldr	r3, [r3, #20]
 8016064:	431a      	orrs	r2, r3
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	430a      	orrs	r2, r1
 801606c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	22ff      	movs	r2, #255	@ 0xff
 8016074:	625a      	str	r2, [r3, #36]	@ 0x24
 8016076:	e001      	b.n	801607c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8016078:	2300      	movs	r3, #0
 801607a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 801607c:	7bfb      	ldrb	r3, [r7, #15]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d103      	bne.n	801608a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2201      	movs	r2, #1
 8016086:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 801608a:	7bfb      	ldrb	r3, [r7, #15]
}
 801608c:	4618      	mov	r0, r3
 801608e:	3710      	adds	r7, #16
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}

08016094 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016094:	b590      	push	{r4, r7, lr}
 8016096:	b087      	sub	sp, #28
 8016098:	af00      	add	r7, sp, #0
 801609a:	60f8      	str	r0, [r7, #12]
 801609c:	60b9      	str	r1, [r7, #8]
 801609e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160a6:	2b01      	cmp	r3, #1
 80160a8:	d101      	bne.n	80160ae <HAL_RTC_SetTime+0x1a>
 80160aa:	2302      	movs	r3, #2
 80160ac:	e08b      	b.n	80161c6 <HAL_RTC_SetTime+0x132>
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	2201      	movs	r2, #1
 80160b2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	2202      	movs	r2, #2
 80160ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	22ca      	movs	r2, #202	@ 0xca
 80160c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	2253      	movs	r2, #83	@ 0x53
 80160cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80160ce:	68f8      	ldr	r0, [r7, #12]
 80160d0:	f000 fafe 	bl	80166d0 <RTC_EnterInitMode>
 80160d4:	4603      	mov	r3, r0
 80160d6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80160d8:	7cfb      	ldrb	r3, [r7, #19]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d163      	bne.n	80161a6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d126      	bne.n	8016132 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	689b      	ldr	r3, [r3, #8]
 80160ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d102      	bne.n	80160f8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80160f2:	68bb      	ldr	r3, [r7, #8]
 80160f4:	2200      	movs	r2, #0
 80160f6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80160f8:	68bb      	ldr	r3, [r7, #8]
 80160fa:	781b      	ldrb	r3, [r3, #0]
 80160fc:	4618      	mov	r0, r3
 80160fe:	f000 fb59 	bl	80167b4 <RTC_ByteToBcd2>
 8016102:	4603      	mov	r3, r0
 8016104:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016106:	68bb      	ldr	r3, [r7, #8]
 8016108:	785b      	ldrb	r3, [r3, #1]
 801610a:	4618      	mov	r0, r3
 801610c:	f000 fb52 	bl	80167b4 <RTC_ByteToBcd2>
 8016110:	4603      	mov	r3, r0
 8016112:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8016114:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8016116:	68bb      	ldr	r3, [r7, #8]
 8016118:	789b      	ldrb	r3, [r3, #2]
 801611a:	4618      	mov	r0, r3
 801611c:	f000 fb4a 	bl	80167b4 <RTC_ByteToBcd2>
 8016120:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016122:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8016126:	68bb      	ldr	r3, [r7, #8]
 8016128:	78db      	ldrb	r3, [r3, #3]
 801612a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 801612c:	4313      	orrs	r3, r2
 801612e:	617b      	str	r3, [r7, #20]
 8016130:	e018      	b.n	8016164 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	689b      	ldr	r3, [r3, #8]
 8016138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801613c:	2b00      	cmp	r3, #0
 801613e:	d102      	bne.n	8016146 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	2200      	movs	r2, #0
 8016144:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8016146:	68bb      	ldr	r3, [r7, #8]
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	785b      	ldrb	r3, [r3, #1]
 8016150:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8016152:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8016154:	68ba      	ldr	r2, [r7, #8]
 8016156:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016158:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	78db      	ldrb	r3, [r3, #3]
 801615e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8016160:	4313      	orrs	r3, r2
 8016162:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	681a      	ldr	r2, [r3, #0]
 8016168:	697b      	ldr	r3, [r7, #20]
 801616a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 801616e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8016172:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	689a      	ldr	r2, [r3, #8]
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8016182:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	6899      	ldr	r1, [r3, #8]
 801618a:	68bb      	ldr	r3, [r7, #8]
 801618c:	68da      	ldr	r2, [r3, #12]
 801618e:	68bb      	ldr	r3, [r7, #8]
 8016190:	691b      	ldr	r3, [r3, #16]
 8016192:	431a      	orrs	r2, r3
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	430a      	orrs	r2, r1
 801619a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801619c:	68f8      	ldr	r0, [r7, #12]
 801619e:	f000 facb 	bl	8016738 <RTC_ExitInitMode>
 80161a2:	4603      	mov	r3, r0
 80161a4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	22ff      	movs	r2, #255	@ 0xff
 80161ac:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80161ae:	7cfb      	ldrb	r3, [r7, #19]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d103      	bne.n	80161bc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	2201      	movs	r2, #1
 80161b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	2200      	movs	r2, #0
 80161c0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80161c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80161c6:	4618      	mov	r0, r3
 80161c8:	371c      	adds	r7, #28
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd90      	pop	{r4, r7, pc}

080161ce <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80161ce:	b580      	push	{r7, lr}
 80161d0:	b086      	sub	sp, #24
 80161d2:	af00      	add	r7, sp, #0
 80161d4:	60f8      	str	r0, [r7, #12]
 80161d6:	60b9      	str	r1, [r7, #8]
 80161d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80161e0:	68bb      	ldr	r3, [r7, #8]
 80161e2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	691b      	ldr	r3, [r3, #16]
 80161ea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80161ee:	68bb      	ldr	r3, [r7, #8]
 80161f0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80161fc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8016200:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8016202:	697b      	ldr	r3, [r7, #20]
 8016204:	0c1b      	lsrs	r3, r3, #16
 8016206:	b2db      	uxtb	r3, r3
 8016208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801620c:	b2da      	uxtb	r2, r3
 801620e:	68bb      	ldr	r3, [r7, #8]
 8016210:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8016212:	697b      	ldr	r3, [r7, #20]
 8016214:	0a1b      	lsrs	r3, r3, #8
 8016216:	b2db      	uxtb	r3, r3
 8016218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801621c:	b2da      	uxtb	r2, r3
 801621e:	68bb      	ldr	r3, [r7, #8]
 8016220:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8016222:	697b      	ldr	r3, [r7, #20]
 8016224:	b2db      	uxtb	r3, r3
 8016226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801622a:	b2da      	uxtb	r2, r3
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8016230:	697b      	ldr	r3, [r7, #20]
 8016232:	0d9b      	lsrs	r3, r3, #22
 8016234:	b2db      	uxtb	r3, r3
 8016236:	f003 0301 	and.w	r3, r3, #1
 801623a:	b2da      	uxtb	r2, r3
 801623c:	68bb      	ldr	r3, [r7, #8]
 801623e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d11a      	bne.n	801627c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8016246:	68bb      	ldr	r3, [r7, #8]
 8016248:	781b      	ldrb	r3, [r3, #0]
 801624a:	4618      	mov	r0, r3
 801624c:	f000 fad2 	bl	80167f4 <RTC_Bcd2ToByte>
 8016250:	4603      	mov	r3, r0
 8016252:	461a      	mov	r2, r3
 8016254:	68bb      	ldr	r3, [r7, #8]
 8016256:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8016258:	68bb      	ldr	r3, [r7, #8]
 801625a:	785b      	ldrb	r3, [r3, #1]
 801625c:	4618      	mov	r0, r3
 801625e:	f000 fac9 	bl	80167f4 <RTC_Bcd2ToByte>
 8016262:	4603      	mov	r3, r0
 8016264:	461a      	mov	r2, r3
 8016266:	68bb      	ldr	r3, [r7, #8]
 8016268:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801626a:	68bb      	ldr	r3, [r7, #8]
 801626c:	789b      	ldrb	r3, [r3, #2]
 801626e:	4618      	mov	r0, r3
 8016270:	f000 fac0 	bl	80167f4 <RTC_Bcd2ToByte>
 8016274:	4603      	mov	r3, r0
 8016276:	461a      	mov	r2, r3
 8016278:	68bb      	ldr	r3, [r7, #8]
 801627a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801627c:	2300      	movs	r3, #0
}
 801627e:	4618      	mov	r0, r3
 8016280:	3718      	adds	r7, #24
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}

08016286 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016286:	b590      	push	{r4, r7, lr}
 8016288:	b087      	sub	sp, #28
 801628a:	af00      	add	r7, sp, #0
 801628c:	60f8      	str	r0, [r7, #12]
 801628e:	60b9      	str	r1, [r7, #8]
 8016290:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016298:	2b01      	cmp	r3, #1
 801629a:	d101      	bne.n	80162a0 <HAL_RTC_SetDate+0x1a>
 801629c:	2302      	movs	r3, #2
 801629e:	e075      	b.n	801638c <HAL_RTC_SetDate+0x106>
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	2201      	movs	r2, #1
 80162a4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	2202      	movs	r2, #2
 80162ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d10e      	bne.n	80162d4 <HAL_RTC_SetDate+0x4e>
 80162b6:	68bb      	ldr	r3, [r7, #8]
 80162b8:	785b      	ldrb	r3, [r3, #1]
 80162ba:	f003 0310 	and.w	r3, r3, #16
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d008      	beq.n	80162d4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80162c2:	68bb      	ldr	r3, [r7, #8]
 80162c4:	785b      	ldrb	r3, [r3, #1]
 80162c6:	f023 0310 	bic.w	r3, r3, #16
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	330a      	adds	r3, #10
 80162ce:	b2da      	uxtb	r2, r3
 80162d0:	68bb      	ldr	r3, [r7, #8]
 80162d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d11c      	bne.n	8016314 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80162da:	68bb      	ldr	r3, [r7, #8]
 80162dc:	78db      	ldrb	r3, [r3, #3]
 80162de:	4618      	mov	r0, r3
 80162e0:	f000 fa68 	bl	80167b4 <RTC_ByteToBcd2>
 80162e4:	4603      	mov	r3, r0
 80162e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	785b      	ldrb	r3, [r3, #1]
 80162ec:	4618      	mov	r0, r3
 80162ee:	f000 fa61 	bl	80167b4 <RTC_ByteToBcd2>
 80162f2:	4603      	mov	r3, r0
 80162f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80162f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80162f8:	68bb      	ldr	r3, [r7, #8]
 80162fa:	789b      	ldrb	r3, [r3, #2]
 80162fc:	4618      	mov	r0, r3
 80162fe:	f000 fa59 	bl	80167b4 <RTC_ByteToBcd2>
 8016302:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016304:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8016308:	68bb      	ldr	r3, [r7, #8]
 801630a:	781b      	ldrb	r3, [r3, #0]
 801630c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801630e:	4313      	orrs	r3, r2
 8016310:	617b      	str	r3, [r7, #20]
 8016312:	e00e      	b.n	8016332 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8016314:	68bb      	ldr	r3, [r7, #8]
 8016316:	78db      	ldrb	r3, [r3, #3]
 8016318:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 801631a:	68bb      	ldr	r3, [r7, #8]
 801631c:	785b      	ldrb	r3, [r3, #1]
 801631e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8016320:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8016322:	68ba      	ldr	r2, [r7, #8]
 8016324:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8016326:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8016328:	68bb      	ldr	r3, [r7, #8]
 801632a:	781b      	ldrb	r3, [r3, #0]
 801632c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801632e:	4313      	orrs	r3, r2
 8016330:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	22ca      	movs	r2, #202	@ 0xca
 8016338:	625a      	str	r2, [r3, #36]	@ 0x24
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	2253      	movs	r2, #83	@ 0x53
 8016340:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016342:	68f8      	ldr	r0, [r7, #12]
 8016344:	f000 f9c4 	bl	80166d0 <RTC_EnterInitMode>
 8016348:	4603      	mov	r3, r0
 801634a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 801634c:	7cfb      	ldrb	r3, [r7, #19]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d10c      	bne.n	801636c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	681a      	ldr	r2, [r3, #0]
 8016356:	697b      	ldr	r3, [r7, #20]
 8016358:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801635c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8016360:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8016362:	68f8      	ldr	r0, [r7, #12]
 8016364:	f000 f9e8 	bl	8016738 <RTC_ExitInitMode>
 8016368:	4603      	mov	r3, r0
 801636a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	22ff      	movs	r2, #255	@ 0xff
 8016372:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8016374:	7cfb      	ldrb	r3, [r7, #19]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d103      	bne.n	8016382 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	2201      	movs	r2, #1
 801637e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	2200      	movs	r2, #0
 8016386:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 801638a:	7cfb      	ldrb	r3, [r7, #19]
}
 801638c:	4618      	mov	r0, r3
 801638e:	371c      	adds	r7, #28
 8016390:	46bd      	mov	sp, r7
 8016392:	bd90      	pop	{r4, r7, pc}

08016394 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b086      	sub	sp, #24
 8016398:	af00      	add	r7, sp, #0
 801639a:	60f8      	str	r0, [r7, #12]
 801639c:	60b9      	str	r1, [r7, #8]
 801639e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	685b      	ldr	r3, [r3, #4]
 80163a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80163aa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80163ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80163b0:	697b      	ldr	r3, [r7, #20]
 80163b2:	0c1b      	lsrs	r3, r3, #16
 80163b4:	b2da      	uxtb	r2, r3
 80163b6:	68bb      	ldr	r3, [r7, #8]
 80163b8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80163ba:	697b      	ldr	r3, [r7, #20]
 80163bc:	0a1b      	lsrs	r3, r3, #8
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	f003 031f 	and.w	r3, r3, #31
 80163c4:	b2da      	uxtb	r2, r3
 80163c6:	68bb      	ldr	r3, [r7, #8]
 80163c8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80163ca:	697b      	ldr	r3, [r7, #20]
 80163cc:	b2db      	uxtb	r3, r3
 80163ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80163d2:	b2da      	uxtb	r2, r3
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80163d8:	697b      	ldr	r3, [r7, #20]
 80163da:	0b5b      	lsrs	r3, r3, #13
 80163dc:	b2db      	uxtb	r3, r3
 80163de:	f003 0307 	and.w	r3, r3, #7
 80163e2:	b2da      	uxtb	r2, r3
 80163e4:	68bb      	ldr	r3, [r7, #8]
 80163e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d11a      	bne.n	8016424 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80163ee:	68bb      	ldr	r3, [r7, #8]
 80163f0:	78db      	ldrb	r3, [r3, #3]
 80163f2:	4618      	mov	r0, r3
 80163f4:	f000 f9fe 	bl	80167f4 <RTC_Bcd2ToByte>
 80163f8:	4603      	mov	r3, r0
 80163fa:	461a      	mov	r2, r3
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8016400:	68bb      	ldr	r3, [r7, #8]
 8016402:	785b      	ldrb	r3, [r3, #1]
 8016404:	4618      	mov	r0, r3
 8016406:	f000 f9f5 	bl	80167f4 <RTC_Bcd2ToByte>
 801640a:	4603      	mov	r3, r0
 801640c:	461a      	mov	r2, r3
 801640e:	68bb      	ldr	r3, [r7, #8]
 8016410:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8016412:	68bb      	ldr	r3, [r7, #8]
 8016414:	789b      	ldrb	r3, [r3, #2]
 8016416:	4618      	mov	r0, r3
 8016418:	f000 f9ec 	bl	80167f4 <RTC_Bcd2ToByte>
 801641c:	4603      	mov	r3, r0
 801641e:	461a      	mov	r2, r3
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8016424:	2300      	movs	r3, #0
}
 8016426:	4618      	mov	r0, r3
 8016428:	3718      	adds	r7, #24
 801642a:	46bd      	mov	sp, r7
 801642c:	bd80      	pop	{r7, pc}

0801642e <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 801642e:	b590      	push	{r4, r7, lr}
 8016430:	b089      	sub	sp, #36	@ 0x24
 8016432:	af00      	add	r7, sp, #0
 8016434:	60f8      	str	r0, [r7, #12]
 8016436:	60b9      	str	r1, [r7, #8]
 8016438:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016440:	2b01      	cmp	r3, #1
 8016442:	d101      	bne.n	8016448 <HAL_RTC_SetAlarm+0x1a>
 8016444:	2302      	movs	r3, #2
 8016446:	e11b      	b.n	8016680 <HAL_RTC_SetAlarm+0x252>
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	2201      	movs	r2, #1
 801644c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	2202      	movs	r2, #2
 8016454:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d137      	bne.n	80164ce <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	689b      	ldr	r3, [r3, #8]
 8016464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016468:	2b00      	cmp	r3, #0
 801646a:	d102      	bne.n	8016472 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 801646c:	68bb      	ldr	r3, [r7, #8]
 801646e:	2200      	movs	r2, #0
 8016470:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8016472:	68bb      	ldr	r3, [r7, #8]
 8016474:	781b      	ldrb	r3, [r3, #0]
 8016476:	4618      	mov	r0, r3
 8016478:	f000 f99c 	bl	80167b4 <RTC_ByteToBcd2>
 801647c:	4603      	mov	r3, r0
 801647e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	785b      	ldrb	r3, [r3, #1]
 8016484:	4618      	mov	r0, r3
 8016486:	f000 f995 	bl	80167b4 <RTC_ByteToBcd2>
 801648a:	4603      	mov	r3, r0
 801648c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801648e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8016490:	68bb      	ldr	r3, [r7, #8]
 8016492:	789b      	ldrb	r3, [r3, #2]
 8016494:	4618      	mov	r0, r3
 8016496:	f000 f98d 	bl	80167b4 <RTC_ByteToBcd2>
 801649a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801649c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80164a0:	68bb      	ldr	r3, [r7, #8]
 80164a2:	78db      	ldrb	r3, [r3, #3]
 80164a4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80164a6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80164aa:	68bb      	ldr	r3, [r7, #8]
 80164ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80164b0:	4618      	mov	r0, r3
 80164b2:	f000 f97f 	bl	80167b4 <RTC_ByteToBcd2>
 80164b6:	4603      	mov	r3, r0
 80164b8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80164ba:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80164be:	68bb      	ldr	r3, [r7, #8]
 80164c0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80164c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80164c4:	68bb      	ldr	r3, [r7, #8]
 80164c6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80164c8:	4313      	orrs	r3, r2
 80164ca:	61fb      	str	r3, [r7, #28]
 80164cc:	e023      	b.n	8016516 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	689b      	ldr	r3, [r3, #8]
 80164d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d102      	bne.n	80164e2 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80164dc:	68bb      	ldr	r3, [r7, #8]
 80164de:	2200      	movs	r2, #0
 80164e0:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80164e2:	68bb      	ldr	r3, [r7, #8]
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80164e8:	68bb      	ldr	r3, [r7, #8]
 80164ea:	785b      	ldrb	r3, [r3, #1]
 80164ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80164ee:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80164f0:	68ba      	ldr	r2, [r7, #8]
 80164f2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80164f4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80164f6:	68bb      	ldr	r3, [r7, #8]
 80164f8:	78db      	ldrb	r3, [r3, #3]
 80164fa:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80164fc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80164fe:	68bb      	ldr	r3, [r7, #8]
 8016500:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8016504:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8016506:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8016508:	68bb      	ldr	r3, [r7, #8]
 801650a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801650c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8016512:	4313      	orrs	r3, r2
 8016514:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	685a      	ldr	r2, [r3, #4]
 801651a:	68bb      	ldr	r3, [r7, #8]
 801651c:	69db      	ldr	r3, [r3, #28]
 801651e:	4313      	orrs	r3, r2
 8016520:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	22ca      	movs	r2, #202	@ 0xca
 8016528:	625a      	str	r2, [r3, #36]	@ 0x24
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	2253      	movs	r2, #83	@ 0x53
 8016530:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8016532:	68bb      	ldr	r3, [r7, #8]
 8016534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801653a:	d14a      	bne.n	80165d2 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	689a      	ldr	r2, [r3, #8]
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801654a:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	68db      	ldr	r3, [r3, #12]
 8016552:	b2da      	uxtb	r2, r3
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 801655c:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	689a      	ldr	r2, [r3, #8]
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801656c:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 801656e:	f7fb ff5b 	bl	8012428 <HAL_GetTick>
 8016572:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8016574:	e015      	b.n	80165a2 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016576:	f7fb ff57 	bl	8012428 <HAL_GetTick>
 801657a:	4602      	mov	r2, r0
 801657c:	693b      	ldr	r3, [r7, #16]
 801657e:	1ad3      	subs	r3, r2, r3
 8016580:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016584:	d90d      	bls.n	80165a2 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	22ff      	movs	r2, #255	@ 0xff
 801658c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	2203      	movs	r2, #3
 8016592:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	2200      	movs	r2, #0
 801659a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 801659e:	2303      	movs	r3, #3
 80165a0:	e06e      	b.n	8016680 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	68db      	ldr	r3, [r3, #12]
 80165a8:	f003 0301 	and.w	r3, r3, #1
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d0e2      	beq.n	8016576 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	69fa      	ldr	r2, [r7, #28]
 80165b6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	69ba      	ldr	r2, [r7, #24]
 80165be:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	689a      	ldr	r2, [r3, #8]
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80165ce:	609a      	str	r2, [r3, #8]
 80165d0:	e049      	b.n	8016666 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	689a      	ldr	r2, [r3, #8]
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80165e0:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	68db      	ldr	r3, [r3, #12]
 80165e8:	b2da      	uxtb	r2, r3
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80165f2:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	689a      	ldr	r2, [r3, #8]
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8016602:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8016604:	f7fb ff10 	bl	8012428 <HAL_GetTick>
 8016608:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 801660a:	e015      	b.n	8016638 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801660c:	f7fb ff0c 	bl	8012428 <HAL_GetTick>
 8016610:	4602      	mov	r2, r0
 8016612:	697b      	ldr	r3, [r7, #20]
 8016614:	1ad3      	subs	r3, r2, r3
 8016616:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801661a:	d90d      	bls.n	8016638 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	22ff      	movs	r2, #255	@ 0xff
 8016622:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	2203      	movs	r2, #3
 8016628:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	2200      	movs	r2, #0
 8016630:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8016634:	2303      	movs	r3, #3
 8016636:	e023      	b.n	8016680 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	68db      	ldr	r3, [r3, #12]
 801663e:	f003 0302 	and.w	r3, r3, #2
 8016642:	2b00      	cmp	r3, #0
 8016644:	d0e2      	beq.n	801660c <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	69fa      	ldr	r2, [r7, #28]
 801664c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	69ba      	ldr	r2, [r7, #24]
 8016654:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	689a      	ldr	r2, [r3, #8]
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016664:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	22ff      	movs	r2, #255	@ 0xff
 801666c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	2201      	movs	r2, #1
 8016672:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	2200      	movs	r2, #0
 801667a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 801667e:	2300      	movs	r3, #0
}
 8016680:	4618      	mov	r0, r3
 8016682:	3724      	adds	r7, #36	@ 0x24
 8016684:	46bd      	mov	sp, r7
 8016686:	bd90      	pop	{r4, r7, pc}

08016688 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b084      	sub	sp, #16
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	4a0d      	ldr	r2, [pc, #52]	@ (80166cc <HAL_RTC_WaitForSynchro+0x44>)
 8016696:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8016698:	f7fb fec6 	bl	8012428 <HAL_GetTick>
 801669c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801669e:	e009      	b.n	80166b4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80166a0:	f7fb fec2 	bl	8012428 <HAL_GetTick>
 80166a4:	4602      	mov	r2, r0
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	1ad3      	subs	r3, r2, r3
 80166aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80166ae:	d901      	bls.n	80166b4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80166b0:	2303      	movs	r3, #3
 80166b2:	e007      	b.n	80166c4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	68db      	ldr	r3, [r3, #12]
 80166ba:	f003 0320 	and.w	r3, r3, #32
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d0ee      	beq.n	80166a0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80166c2:	2300      	movs	r3, #0
}
 80166c4:	4618      	mov	r0, r3
 80166c6:	3710      	adds	r7, #16
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}
 80166cc:	0003ff5f 	.word	0x0003ff5f

080166d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b084      	sub	sp, #16
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80166d8:	2300      	movs	r3, #0
 80166da:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	68db      	ldr	r3, [r3, #12]
 80166e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d120      	bne.n	801672c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	f04f 32ff 	mov.w	r2, #4294967295
 80166f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80166f4:	f7fb fe98 	bl	8012428 <HAL_GetTick>
 80166f8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80166fa:	e00d      	b.n	8016718 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80166fc:	f7fb fe94 	bl	8012428 <HAL_GetTick>
 8016700:	4602      	mov	r2, r0
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	1ad3      	subs	r3, r2, r3
 8016706:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801670a:	d905      	bls.n	8016718 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 801670c:	2303      	movs	r3, #3
 801670e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2203      	movs	r2, #3
 8016714:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	68db      	ldr	r3, [r3, #12]
 801671e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016722:	2b00      	cmp	r3, #0
 8016724:	d102      	bne.n	801672c <RTC_EnterInitMode+0x5c>
 8016726:	7bfb      	ldrb	r3, [r7, #15]
 8016728:	2b03      	cmp	r3, #3
 801672a:	d1e7      	bne.n	80166fc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 801672c:	7bfb      	ldrb	r3, [r7, #15]
}
 801672e:	4618      	mov	r0, r3
 8016730:	3710      	adds	r7, #16
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}
	...

08016738 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b084      	sub	sp, #16
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016740:	2300      	movs	r3, #0
 8016742:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8016744:	4b1a      	ldr	r3, [pc, #104]	@ (80167b0 <RTC_ExitInitMode+0x78>)
 8016746:	68db      	ldr	r3, [r3, #12]
 8016748:	4a19      	ldr	r2, [pc, #100]	@ (80167b0 <RTC_ExitInitMode+0x78>)
 801674a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801674e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8016750:	4b17      	ldr	r3, [pc, #92]	@ (80167b0 <RTC_ExitInitMode+0x78>)
 8016752:	689b      	ldr	r3, [r3, #8]
 8016754:	f003 0320 	and.w	r3, r3, #32
 8016758:	2b00      	cmp	r3, #0
 801675a:	d10c      	bne.n	8016776 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f7ff ff93 	bl	8016688 <HAL_RTC_WaitForSynchro>
 8016762:	4603      	mov	r3, r0
 8016764:	2b00      	cmp	r3, #0
 8016766:	d01e      	beq.n	80167a6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2203      	movs	r2, #3
 801676c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8016770:	2303      	movs	r3, #3
 8016772:	73fb      	strb	r3, [r7, #15]
 8016774:	e017      	b.n	80167a6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8016776:	4b0e      	ldr	r3, [pc, #56]	@ (80167b0 <RTC_ExitInitMode+0x78>)
 8016778:	689b      	ldr	r3, [r3, #8]
 801677a:	4a0d      	ldr	r2, [pc, #52]	@ (80167b0 <RTC_ExitInitMode+0x78>)
 801677c:	f023 0320 	bic.w	r3, r3, #32
 8016780:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8016782:	6878      	ldr	r0, [r7, #4]
 8016784:	f7ff ff80 	bl	8016688 <HAL_RTC_WaitForSynchro>
 8016788:	4603      	mov	r3, r0
 801678a:	2b00      	cmp	r3, #0
 801678c:	d005      	beq.n	801679a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	2203      	movs	r2, #3
 8016792:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8016796:	2303      	movs	r3, #3
 8016798:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801679a:	4b05      	ldr	r3, [pc, #20]	@ (80167b0 <RTC_ExitInitMode+0x78>)
 801679c:	689b      	ldr	r3, [r3, #8]
 801679e:	4a04      	ldr	r2, [pc, #16]	@ (80167b0 <RTC_ExitInitMode+0x78>)
 80167a0:	f043 0320 	orr.w	r3, r3, #32
 80167a4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80167a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80167a8:	4618      	mov	r0, r3
 80167aa:	3710      	adds	r7, #16
 80167ac:	46bd      	mov	sp, r7
 80167ae:	bd80      	pop	{r7, pc}
 80167b0:	40002800 	.word	0x40002800

080167b4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80167b4:	b480      	push	{r7}
 80167b6:	b085      	sub	sp, #20
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	4603      	mov	r3, r0
 80167bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80167be:	2300      	movs	r3, #0
 80167c0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80167c2:	79fb      	ldrb	r3, [r7, #7]
 80167c4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80167c6:	e005      	b.n	80167d4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	3301      	adds	r3, #1
 80167cc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80167ce:	7afb      	ldrb	r3, [r7, #11]
 80167d0:	3b0a      	subs	r3, #10
 80167d2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80167d4:	7afb      	ldrb	r3, [r7, #11]
 80167d6:	2b09      	cmp	r3, #9
 80167d8:	d8f6      	bhi.n	80167c8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	b2db      	uxtb	r3, r3
 80167de:	011b      	lsls	r3, r3, #4
 80167e0:	b2da      	uxtb	r2, r3
 80167e2:	7afb      	ldrb	r3, [r7, #11]
 80167e4:	4313      	orrs	r3, r2
 80167e6:	b2db      	uxtb	r3, r3
}
 80167e8:	4618      	mov	r0, r3
 80167ea:	3714      	adds	r7, #20
 80167ec:	46bd      	mov	sp, r7
 80167ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f2:	4770      	bx	lr

080167f4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80167f4:	b480      	push	{r7}
 80167f6:	b085      	sub	sp, #20
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	4603      	mov	r3, r0
 80167fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80167fe:	79fb      	ldrb	r3, [r7, #7]
 8016800:	091b      	lsrs	r3, r3, #4
 8016802:	b2db      	uxtb	r3, r3
 8016804:	461a      	mov	r2, r3
 8016806:	0092      	lsls	r2, r2, #2
 8016808:	4413      	add	r3, r2
 801680a:	005b      	lsls	r3, r3, #1
 801680c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801680e:	79fb      	ldrb	r3, [r7, #7]
 8016810:	f003 030f 	and.w	r3, r3, #15
 8016814:	b2da      	uxtb	r2, r3
 8016816:	7bfb      	ldrb	r3, [r7, #15]
 8016818:	4413      	add	r3, r2
 801681a:	b2db      	uxtb	r3, r3
}
 801681c:	4618      	mov	r0, r3
 801681e:	3714      	adds	r7, #20
 8016820:	46bd      	mov	sp, r7
 8016822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016826:	4770      	bx	lr

08016828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b082      	sub	sp, #8
 801682c:	af00      	add	r7, sp, #0
 801682e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d101      	bne.n	801683a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016836:	2301      	movs	r3, #1
 8016838:	e049      	b.n	80168ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016840:	b2db      	uxtb	r3, r3
 8016842:	2b00      	cmp	r3, #0
 8016844:	d106      	bne.n	8016854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	2200      	movs	r2, #0
 801684a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801684e:	6878      	ldr	r0, [r7, #4]
 8016850:	f7ec fe0c 	bl	800346c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	2202      	movs	r2, #2
 8016858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	681a      	ldr	r2, [r3, #0]
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	3304      	adds	r3, #4
 8016864:	4619      	mov	r1, r3
 8016866:	4610      	mov	r0, r2
 8016868:	f000 fc02 	bl	8017070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	2201      	movs	r2, #1
 8016870:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	2201      	movs	r2, #1
 8016878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	2201      	movs	r2, #1
 8016880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	2201      	movs	r2, #1
 8016888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	2201      	movs	r2, #1
 8016890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	2201      	movs	r2, #1
 8016898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2201      	movs	r2, #1
 80168a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2201      	movs	r2, #1
 80168a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	2201      	movs	r2, #1
 80168b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	2201      	movs	r2, #1
 80168b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	2201      	movs	r2, #1
 80168c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	2201      	movs	r2, #1
 80168c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80168cc:	2300      	movs	r3, #0
}
 80168ce:	4618      	mov	r0, r3
 80168d0:	3708      	adds	r7, #8
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bd80      	pop	{r7, pc}
	...

080168d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80168d8:	b480      	push	{r7}
 80168da:	b085      	sub	sp, #20
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80168e6:	b2db      	uxtb	r3, r3
 80168e8:	2b01      	cmp	r3, #1
 80168ea:	d001      	beq.n	80168f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80168ec:	2301      	movs	r3, #1
 80168ee:	e04f      	b.n	8016990 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2202      	movs	r2, #2
 80168f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	68da      	ldr	r2, [r3, #12]
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	f042 0201 	orr.w	r2, r2, #1
 8016906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	4a23      	ldr	r2, [pc, #140]	@ (801699c <HAL_TIM_Base_Start_IT+0xc4>)
 801690e:	4293      	cmp	r3, r2
 8016910:	d01d      	beq.n	801694e <HAL_TIM_Base_Start_IT+0x76>
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801691a:	d018      	beq.n	801694e <HAL_TIM_Base_Start_IT+0x76>
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	4a1f      	ldr	r2, [pc, #124]	@ (80169a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8016922:	4293      	cmp	r3, r2
 8016924:	d013      	beq.n	801694e <HAL_TIM_Base_Start_IT+0x76>
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	4a1e      	ldr	r2, [pc, #120]	@ (80169a4 <HAL_TIM_Base_Start_IT+0xcc>)
 801692c:	4293      	cmp	r3, r2
 801692e:	d00e      	beq.n	801694e <HAL_TIM_Base_Start_IT+0x76>
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	4a1c      	ldr	r2, [pc, #112]	@ (80169a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8016936:	4293      	cmp	r3, r2
 8016938:	d009      	beq.n	801694e <HAL_TIM_Base_Start_IT+0x76>
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	4a1b      	ldr	r2, [pc, #108]	@ (80169ac <HAL_TIM_Base_Start_IT+0xd4>)
 8016940:	4293      	cmp	r3, r2
 8016942:	d004      	beq.n	801694e <HAL_TIM_Base_Start_IT+0x76>
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	4a19      	ldr	r2, [pc, #100]	@ (80169b0 <HAL_TIM_Base_Start_IT+0xd8>)
 801694a:	4293      	cmp	r3, r2
 801694c:	d115      	bne.n	801697a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	689a      	ldr	r2, [r3, #8]
 8016954:	4b17      	ldr	r3, [pc, #92]	@ (80169b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8016956:	4013      	ands	r3, r2
 8016958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	2b06      	cmp	r3, #6
 801695e:	d015      	beq.n	801698c <HAL_TIM_Base_Start_IT+0xb4>
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016966:	d011      	beq.n	801698c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	681a      	ldr	r2, [r3, #0]
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	f042 0201 	orr.w	r2, r2, #1
 8016976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016978:	e008      	b.n	801698c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	681a      	ldr	r2, [r3, #0]
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	f042 0201 	orr.w	r2, r2, #1
 8016988:	601a      	str	r2, [r3, #0]
 801698a:	e000      	b.n	801698e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801698c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801698e:	2300      	movs	r3, #0
}
 8016990:	4618      	mov	r0, r3
 8016992:	3714      	adds	r7, #20
 8016994:	46bd      	mov	sp, r7
 8016996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699a:	4770      	bx	lr
 801699c:	40012c00 	.word	0x40012c00
 80169a0:	40000400 	.word	0x40000400
 80169a4:	40000800 	.word	0x40000800
 80169a8:	40000c00 	.word	0x40000c00
 80169ac:	40013400 	.word	0x40013400
 80169b0:	40014000 	.word	0x40014000
 80169b4:	00010007 	.word	0x00010007

080169b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80169b8:	b480      	push	{r7}
 80169ba:	b083      	sub	sp, #12
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	68da      	ldr	r2, [r3, #12]
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	f022 0201 	bic.w	r2, r2, #1
 80169ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	6a1a      	ldr	r2, [r3, #32]
 80169d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80169da:	4013      	ands	r3, r2
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d10f      	bne.n	8016a00 <HAL_TIM_Base_Stop_IT+0x48>
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	6a1a      	ldr	r2, [r3, #32]
 80169e6:	f240 4344 	movw	r3, #1092	@ 0x444
 80169ea:	4013      	ands	r3, r2
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d107      	bne.n	8016a00 <HAL_TIM_Base_Stop_IT+0x48>
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	681a      	ldr	r2, [r3, #0]
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	f022 0201 	bic.w	r2, r2, #1
 80169fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2201      	movs	r2, #1
 8016a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8016a08:	2300      	movs	r3, #0
}
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	370c      	adds	r7, #12
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a14:	4770      	bx	lr

08016a16 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8016a16:	b580      	push	{r7, lr}
 8016a18:	b086      	sub	sp, #24
 8016a1a:	af00      	add	r7, sp, #0
 8016a1c:	6078      	str	r0, [r7, #4]
 8016a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d101      	bne.n	8016a2a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8016a26:	2301      	movs	r3, #1
 8016a28:	e097      	b.n	8016b5a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016a30:	b2db      	uxtb	r3, r3
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d106      	bne.n	8016a44 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	2200      	movs	r2, #0
 8016a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8016a3e:	6878      	ldr	r0, [r7, #4]
 8016a40:	f7ec fd38 	bl	80034b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	2202      	movs	r2, #2
 8016a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	689b      	ldr	r3, [r3, #8]
 8016a52:	687a      	ldr	r2, [r7, #4]
 8016a54:	6812      	ldr	r2, [r2, #0]
 8016a56:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8016a5a:	f023 0307 	bic.w	r3, r3, #7
 8016a5e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	681a      	ldr	r2, [r3, #0]
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	3304      	adds	r3, #4
 8016a68:	4619      	mov	r1, r3
 8016a6a:	4610      	mov	r0, r2
 8016a6c:	f000 fb00 	bl	8017070 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	689b      	ldr	r3, [r3, #8]
 8016a76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	699b      	ldr	r3, [r3, #24]
 8016a7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	6a1b      	ldr	r3, [r3, #32]
 8016a86:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8016a88:	683b      	ldr	r3, [r7, #0]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	697a      	ldr	r2, [r7, #20]
 8016a8e:	4313      	orrs	r3, r2
 8016a90:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8016a92:	693b      	ldr	r3, [r7, #16]
 8016a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016a98:	f023 0303 	bic.w	r3, r3, #3
 8016a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	689a      	ldr	r2, [r3, #8]
 8016aa2:	683b      	ldr	r3, [r7, #0]
 8016aa4:	699b      	ldr	r3, [r3, #24]
 8016aa6:	021b      	lsls	r3, r3, #8
 8016aa8:	4313      	orrs	r3, r2
 8016aaa:	693a      	ldr	r2, [r7, #16]
 8016aac:	4313      	orrs	r3, r2
 8016aae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8016ab0:	693b      	ldr	r3, [r7, #16]
 8016ab2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8016ab6:	f023 030c 	bic.w	r3, r3, #12
 8016aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8016abc:	693b      	ldr	r3, [r7, #16]
 8016abe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8016ac2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8016ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8016ac8:	683b      	ldr	r3, [r7, #0]
 8016aca:	68da      	ldr	r2, [r3, #12]
 8016acc:	683b      	ldr	r3, [r7, #0]
 8016ace:	69db      	ldr	r3, [r3, #28]
 8016ad0:	021b      	lsls	r3, r3, #8
 8016ad2:	4313      	orrs	r3, r2
 8016ad4:	693a      	ldr	r2, [r7, #16]
 8016ad6:	4313      	orrs	r3, r2
 8016ad8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8016ada:	683b      	ldr	r3, [r7, #0]
 8016adc:	691b      	ldr	r3, [r3, #16]
 8016ade:	011a      	lsls	r2, r3, #4
 8016ae0:	683b      	ldr	r3, [r7, #0]
 8016ae2:	6a1b      	ldr	r3, [r3, #32]
 8016ae4:	031b      	lsls	r3, r3, #12
 8016ae6:	4313      	orrs	r3, r2
 8016ae8:	693a      	ldr	r2, [r7, #16]
 8016aea:	4313      	orrs	r3, r2
 8016aec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8016af4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8016afc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	685a      	ldr	r2, [r3, #4]
 8016b02:	683b      	ldr	r3, [r7, #0]
 8016b04:	695b      	ldr	r3, [r3, #20]
 8016b06:	011b      	lsls	r3, r3, #4
 8016b08:	4313      	orrs	r3, r2
 8016b0a:	68fa      	ldr	r2, [r7, #12]
 8016b0c:	4313      	orrs	r3, r2
 8016b0e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	697a      	ldr	r2, [r7, #20]
 8016b16:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	693a      	ldr	r2, [r7, #16]
 8016b1e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	68fa      	ldr	r2, [r7, #12]
 8016b26:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	2201      	movs	r2, #1
 8016b2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2201      	movs	r2, #1
 8016b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	2201      	movs	r2, #1
 8016b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	2201      	movs	r2, #1
 8016b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	2201      	movs	r2, #1
 8016b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	2201      	movs	r2, #1
 8016b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016b58:	2300      	movs	r3, #0
}
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	3718      	adds	r7, #24
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bd80      	pop	{r7, pc}

08016b62 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016b62:	b580      	push	{r7, lr}
 8016b64:	b084      	sub	sp, #16
 8016b66:	af00      	add	r7, sp, #0
 8016b68:	6078      	str	r0, [r7, #4]
 8016b6a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8016b72:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8016b7a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016b82:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016b8a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8016b8c:	683b      	ldr	r3, [r7, #0]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d110      	bne.n	8016bb4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8016b92:	7bfb      	ldrb	r3, [r7, #15]
 8016b94:	2b01      	cmp	r3, #1
 8016b96:	d102      	bne.n	8016b9e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8016b98:	7b7b      	ldrb	r3, [r7, #13]
 8016b9a:	2b01      	cmp	r3, #1
 8016b9c:	d001      	beq.n	8016ba2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	e069      	b.n	8016c76 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	2202      	movs	r2, #2
 8016ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	2202      	movs	r2, #2
 8016bae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016bb2:	e031      	b.n	8016c18 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	2b04      	cmp	r3, #4
 8016bb8:	d110      	bne.n	8016bdc <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8016bba:	7bbb      	ldrb	r3, [r7, #14]
 8016bbc:	2b01      	cmp	r3, #1
 8016bbe:	d102      	bne.n	8016bc6 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8016bc0:	7b3b      	ldrb	r3, [r7, #12]
 8016bc2:	2b01      	cmp	r3, #1
 8016bc4:	d001      	beq.n	8016bca <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8016bc6:	2301      	movs	r3, #1
 8016bc8:	e055      	b.n	8016c76 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	2202      	movs	r2, #2
 8016bce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	2202      	movs	r2, #2
 8016bd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016bda:	e01d      	b.n	8016c18 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8016bdc:	7bfb      	ldrb	r3, [r7, #15]
 8016bde:	2b01      	cmp	r3, #1
 8016be0:	d108      	bne.n	8016bf4 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8016be2:	7bbb      	ldrb	r3, [r7, #14]
 8016be4:	2b01      	cmp	r3, #1
 8016be6:	d105      	bne.n	8016bf4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8016be8:	7b7b      	ldrb	r3, [r7, #13]
 8016bea:	2b01      	cmp	r3, #1
 8016bec:	d102      	bne.n	8016bf4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8016bee:	7b3b      	ldrb	r3, [r7, #12]
 8016bf0:	2b01      	cmp	r3, #1
 8016bf2:	d001      	beq.n	8016bf8 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	e03e      	b.n	8016c76 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	2202      	movs	r2, #2
 8016bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	2202      	movs	r2, #2
 8016c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	2202      	movs	r2, #2
 8016c0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2202      	movs	r2, #2
 8016c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8016c18:	683b      	ldr	r3, [r7, #0]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d003      	beq.n	8016c26 <HAL_TIM_Encoder_Start+0xc4>
 8016c1e:	683b      	ldr	r3, [r7, #0]
 8016c20:	2b04      	cmp	r3, #4
 8016c22:	d008      	beq.n	8016c36 <HAL_TIM_Encoder_Start+0xd4>
 8016c24:	e00f      	b.n	8016c46 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	2201      	movs	r2, #1
 8016c2c:	2100      	movs	r1, #0
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f000 fb5e 	bl	80172f0 <TIM_CCxChannelCmd>
      break;
 8016c34:	e016      	b.n	8016c64 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	2201      	movs	r2, #1
 8016c3c:	2104      	movs	r1, #4
 8016c3e:	4618      	mov	r0, r3
 8016c40:	f000 fb56 	bl	80172f0 <TIM_CCxChannelCmd>
      break;
 8016c44:	e00e      	b.n	8016c64 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	2201      	movs	r2, #1
 8016c4c:	2100      	movs	r1, #0
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f000 fb4e 	bl	80172f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	2201      	movs	r2, #1
 8016c5a:	2104      	movs	r1, #4
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f000 fb47 	bl	80172f0 <TIM_CCxChannelCmd>
      break;
 8016c62:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	681a      	ldr	r2, [r3, #0]
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	f042 0201 	orr.w	r2, r2, #1
 8016c72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8016c74:	2300      	movs	r3, #0
}
 8016c76:	4618      	mov	r0, r3
 8016c78:	3710      	adds	r7, #16
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}

08016c7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016c7e:	b580      	push	{r7, lr}
 8016c80:	b084      	sub	sp, #16
 8016c82:	af00      	add	r7, sp, #0
 8016c84:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	68db      	ldr	r3, [r3, #12]
 8016c8c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	691b      	ldr	r3, [r3, #16]
 8016c94:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8016c96:	68bb      	ldr	r3, [r7, #8]
 8016c98:	f003 0302 	and.w	r3, r3, #2
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d020      	beq.n	8016ce2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	f003 0302 	and.w	r3, r3, #2
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d01b      	beq.n	8016ce2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	f06f 0202 	mvn.w	r2, #2
 8016cb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	2201      	movs	r2, #1
 8016cb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	699b      	ldr	r3, [r3, #24]
 8016cc0:	f003 0303 	and.w	r3, r3, #3
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d003      	beq.n	8016cd0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016cc8:	6878      	ldr	r0, [r7, #4]
 8016cca:	f000 f9b2 	bl	8017032 <HAL_TIM_IC_CaptureCallback>
 8016cce:	e005      	b.n	8016cdc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016cd0:	6878      	ldr	r0, [r7, #4]
 8016cd2:	f000 f9a4 	bl	801701e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016cd6:	6878      	ldr	r0, [r7, #4]
 8016cd8:	f000 f9b5 	bl	8017046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	2200      	movs	r2, #0
 8016ce0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8016ce2:	68bb      	ldr	r3, [r7, #8]
 8016ce4:	f003 0304 	and.w	r3, r3, #4
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d020      	beq.n	8016d2e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	f003 0304 	and.w	r3, r3, #4
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d01b      	beq.n	8016d2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	f06f 0204 	mvn.w	r2, #4
 8016cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	2202      	movs	r2, #2
 8016d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	699b      	ldr	r3, [r3, #24]
 8016d0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d003      	beq.n	8016d1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016d14:	6878      	ldr	r0, [r7, #4]
 8016d16:	f000 f98c 	bl	8017032 <HAL_TIM_IC_CaptureCallback>
 8016d1a:	e005      	b.n	8016d28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016d1c:	6878      	ldr	r0, [r7, #4]
 8016d1e:	f000 f97e 	bl	801701e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016d22:	6878      	ldr	r0, [r7, #4]
 8016d24:	f000 f98f 	bl	8017046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8016d2e:	68bb      	ldr	r3, [r7, #8]
 8016d30:	f003 0308 	and.w	r3, r3, #8
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d020      	beq.n	8016d7a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	f003 0308 	and.w	r3, r3, #8
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d01b      	beq.n	8016d7a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	f06f 0208 	mvn.w	r2, #8
 8016d4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	2204      	movs	r2, #4
 8016d50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	69db      	ldr	r3, [r3, #28]
 8016d58:	f003 0303 	and.w	r3, r3, #3
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d003      	beq.n	8016d68 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016d60:	6878      	ldr	r0, [r7, #4]
 8016d62:	f000 f966 	bl	8017032 <HAL_TIM_IC_CaptureCallback>
 8016d66:	e005      	b.n	8016d74 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016d68:	6878      	ldr	r0, [r7, #4]
 8016d6a:	f000 f958 	bl	801701e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016d6e:	6878      	ldr	r0, [r7, #4]
 8016d70:	f000 f969 	bl	8017046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	2200      	movs	r2, #0
 8016d78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8016d7a:	68bb      	ldr	r3, [r7, #8]
 8016d7c:	f003 0310 	and.w	r3, r3, #16
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d020      	beq.n	8016dc6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	f003 0310 	and.w	r3, r3, #16
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d01b      	beq.n	8016dc6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	f06f 0210 	mvn.w	r2, #16
 8016d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	2208      	movs	r2, #8
 8016d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	69db      	ldr	r3, [r3, #28]
 8016da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d003      	beq.n	8016db4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016dac:	6878      	ldr	r0, [r7, #4]
 8016dae:	f000 f940 	bl	8017032 <HAL_TIM_IC_CaptureCallback>
 8016db2:	e005      	b.n	8016dc0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f000 f932 	bl	801701e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016dba:	6878      	ldr	r0, [r7, #4]
 8016dbc:	f000 f943 	bl	8017046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8016dc6:	68bb      	ldr	r3, [r7, #8]
 8016dc8:	f003 0301 	and.w	r3, r3, #1
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d00c      	beq.n	8016dea <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	f003 0301 	and.w	r3, r3, #1
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d007      	beq.n	8016dea <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	f06f 0201 	mvn.w	r2, #1
 8016de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016de4:	6878      	ldr	r0, [r7, #4]
 8016de6:	f7eb fdcd 	bl	8002984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016dea:	68bb      	ldr	r3, [r7, #8]
 8016dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d104      	bne.n	8016dfe <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d00c      	beq.n	8016e18 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d007      	beq.n	8016e18 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8016e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016e12:	6878      	ldr	r0, [r7, #4]
 8016e14:	f000 fb24 	bl	8017460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8016e18:	68bb      	ldr	r3, [r7, #8]
 8016e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d00c      	beq.n	8016e3c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d007      	beq.n	8016e3c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016e36:	6878      	ldr	r0, [r7, #4]
 8016e38:	f000 fb1c 	bl	8017474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016e3c:	68bb      	ldr	r3, [r7, #8]
 8016e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d00c      	beq.n	8016e60 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d007      	beq.n	8016e60 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016e5a:	6878      	ldr	r0, [r7, #4]
 8016e5c:	f000 f8fd 	bl	801705a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	f003 0320 	and.w	r3, r3, #32
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d00c      	beq.n	8016e84 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	f003 0320 	and.w	r3, r3, #32
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d007      	beq.n	8016e84 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	f06f 0220 	mvn.w	r2, #32
 8016e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016e7e:	6878      	ldr	r0, [r7, #4]
 8016e80:	f000 fae4 	bl	801744c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016e84:	bf00      	nop
 8016e86:	3710      	adds	r7, #16
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	bd80      	pop	{r7, pc}

08016e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b084      	sub	sp, #16
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
 8016e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016e96:	2300      	movs	r3, #0
 8016e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016ea0:	2b01      	cmp	r3, #1
 8016ea2:	d101      	bne.n	8016ea8 <HAL_TIM_ConfigClockSource+0x1c>
 8016ea4:	2302      	movs	r3, #2
 8016ea6:	e0b6      	b.n	8017016 <HAL_TIM_ConfigClockSource+0x18a>
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	2201      	movs	r2, #1
 8016eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2202      	movs	r2, #2
 8016eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	689b      	ldr	r3, [r3, #8]
 8016ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016ec0:	68bb      	ldr	r3, [r7, #8]
 8016ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016ec6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8016eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016ecc:	68bb      	ldr	r3, [r7, #8]
 8016ece:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016ed2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	68ba      	ldr	r2, [r7, #8]
 8016eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016ee4:	d03e      	beq.n	8016f64 <HAL_TIM_ConfigClockSource+0xd8>
 8016ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016eea:	f200 8087 	bhi.w	8016ffc <HAL_TIM_ConfigClockSource+0x170>
 8016eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016ef2:	f000 8086 	beq.w	8017002 <HAL_TIM_ConfigClockSource+0x176>
 8016ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016efa:	d87f      	bhi.n	8016ffc <HAL_TIM_ConfigClockSource+0x170>
 8016efc:	2b70      	cmp	r3, #112	@ 0x70
 8016efe:	d01a      	beq.n	8016f36 <HAL_TIM_ConfigClockSource+0xaa>
 8016f00:	2b70      	cmp	r3, #112	@ 0x70
 8016f02:	d87b      	bhi.n	8016ffc <HAL_TIM_ConfigClockSource+0x170>
 8016f04:	2b60      	cmp	r3, #96	@ 0x60
 8016f06:	d050      	beq.n	8016faa <HAL_TIM_ConfigClockSource+0x11e>
 8016f08:	2b60      	cmp	r3, #96	@ 0x60
 8016f0a:	d877      	bhi.n	8016ffc <HAL_TIM_ConfigClockSource+0x170>
 8016f0c:	2b50      	cmp	r3, #80	@ 0x50
 8016f0e:	d03c      	beq.n	8016f8a <HAL_TIM_ConfigClockSource+0xfe>
 8016f10:	2b50      	cmp	r3, #80	@ 0x50
 8016f12:	d873      	bhi.n	8016ffc <HAL_TIM_ConfigClockSource+0x170>
 8016f14:	2b40      	cmp	r3, #64	@ 0x40
 8016f16:	d058      	beq.n	8016fca <HAL_TIM_ConfigClockSource+0x13e>
 8016f18:	2b40      	cmp	r3, #64	@ 0x40
 8016f1a:	d86f      	bhi.n	8016ffc <HAL_TIM_ConfigClockSource+0x170>
 8016f1c:	2b30      	cmp	r3, #48	@ 0x30
 8016f1e:	d064      	beq.n	8016fea <HAL_TIM_ConfigClockSource+0x15e>
 8016f20:	2b30      	cmp	r3, #48	@ 0x30
 8016f22:	d86b      	bhi.n	8016ffc <HAL_TIM_ConfigClockSource+0x170>
 8016f24:	2b20      	cmp	r3, #32
 8016f26:	d060      	beq.n	8016fea <HAL_TIM_ConfigClockSource+0x15e>
 8016f28:	2b20      	cmp	r3, #32
 8016f2a:	d867      	bhi.n	8016ffc <HAL_TIM_ConfigClockSource+0x170>
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d05c      	beq.n	8016fea <HAL_TIM_ConfigClockSource+0x15e>
 8016f30:	2b10      	cmp	r3, #16
 8016f32:	d05a      	beq.n	8016fea <HAL_TIM_ConfigClockSource+0x15e>
 8016f34:	e062      	b.n	8016ffc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016f3e:	683b      	ldr	r3, [r7, #0]
 8016f40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016f46:	f000 f9b3 	bl	80172b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	689b      	ldr	r3, [r3, #8]
 8016f50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016f52:	68bb      	ldr	r3, [r7, #8]
 8016f54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8016f58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	68ba      	ldr	r2, [r7, #8]
 8016f60:	609a      	str	r2, [r3, #8]
      break;
 8016f62:	e04f      	b.n	8017004 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016f74:	f000 f99c 	bl	80172b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	689a      	ldr	r2, [r3, #8]
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016f86:	609a      	str	r2, [r3, #8]
      break;
 8016f88:	e03c      	b.n	8017004 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016f8e:	683b      	ldr	r3, [r7, #0]
 8016f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016f92:	683b      	ldr	r3, [r7, #0]
 8016f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016f96:	461a      	mov	r2, r3
 8016f98:	f000 f910 	bl	80171bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	2150      	movs	r1, #80	@ 0x50
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f000 f969 	bl	801727a <TIM_ITRx_SetConfig>
      break;
 8016fa8:	e02c      	b.n	8017004 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016fae:	683b      	ldr	r3, [r7, #0]
 8016fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016fb2:	683b      	ldr	r3, [r7, #0]
 8016fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016fb6:	461a      	mov	r2, r3
 8016fb8:	f000 f92f 	bl	801721a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	2160      	movs	r1, #96	@ 0x60
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f000 f959 	bl	801727a <TIM_ITRx_SetConfig>
      break;
 8016fc8:	e01c      	b.n	8017004 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016fce:	683b      	ldr	r3, [r7, #0]
 8016fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016fd6:	461a      	mov	r2, r3
 8016fd8:	f000 f8f0 	bl	80171bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	2140      	movs	r1, #64	@ 0x40
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f000 f949 	bl	801727a <TIM_ITRx_SetConfig>
      break;
 8016fe8:	e00c      	b.n	8017004 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681a      	ldr	r2, [r3, #0]
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	4619      	mov	r1, r3
 8016ff4:	4610      	mov	r0, r2
 8016ff6:	f000 f940 	bl	801727a <TIM_ITRx_SetConfig>
      break;
 8016ffa:	e003      	b.n	8017004 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8016ffc:	2301      	movs	r3, #1
 8016ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8017000:	e000      	b.n	8017004 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8017002:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	2201      	movs	r2, #1
 8017008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2200      	movs	r2, #0
 8017010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8017014:	7bfb      	ldrb	r3, [r7, #15]
}
 8017016:	4618      	mov	r0, r3
 8017018:	3710      	adds	r7, #16
 801701a:	46bd      	mov	sp, r7
 801701c:	bd80      	pop	{r7, pc}

0801701e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801701e:	b480      	push	{r7}
 8017020:	b083      	sub	sp, #12
 8017022:	af00      	add	r7, sp, #0
 8017024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017026:	bf00      	nop
 8017028:	370c      	adds	r7, #12
 801702a:	46bd      	mov	sp, r7
 801702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017030:	4770      	bx	lr

08017032 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017032:	b480      	push	{r7}
 8017034:	b083      	sub	sp, #12
 8017036:	af00      	add	r7, sp, #0
 8017038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801703a:	bf00      	nop
 801703c:	370c      	adds	r7, #12
 801703e:	46bd      	mov	sp, r7
 8017040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017044:	4770      	bx	lr

08017046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017046:	b480      	push	{r7}
 8017048:	b083      	sub	sp, #12
 801704a:	af00      	add	r7, sp, #0
 801704c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801704e:	bf00      	nop
 8017050:	370c      	adds	r7, #12
 8017052:	46bd      	mov	sp, r7
 8017054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017058:	4770      	bx	lr

0801705a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801705a:	b480      	push	{r7}
 801705c:	b083      	sub	sp, #12
 801705e:	af00      	add	r7, sp, #0
 8017060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017062:	bf00      	nop
 8017064:	370c      	adds	r7, #12
 8017066:	46bd      	mov	sp, r7
 8017068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706c:	4770      	bx	lr
	...

08017070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017070:	b480      	push	{r7}
 8017072:	b085      	sub	sp, #20
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
 8017078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	4a46      	ldr	r2, [pc, #280]	@ (801719c <TIM_Base_SetConfig+0x12c>)
 8017084:	4293      	cmp	r3, r2
 8017086:	d013      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801708e:	d00f      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	4a43      	ldr	r2, [pc, #268]	@ (80171a0 <TIM_Base_SetConfig+0x130>)
 8017094:	4293      	cmp	r3, r2
 8017096:	d00b      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	4a42      	ldr	r2, [pc, #264]	@ (80171a4 <TIM_Base_SetConfig+0x134>)
 801709c:	4293      	cmp	r3, r2
 801709e:	d007      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	4a41      	ldr	r2, [pc, #260]	@ (80171a8 <TIM_Base_SetConfig+0x138>)
 80170a4:	4293      	cmp	r3, r2
 80170a6:	d003      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	4a40      	ldr	r2, [pc, #256]	@ (80171ac <TIM_Base_SetConfig+0x13c>)
 80170ac:	4293      	cmp	r3, r2
 80170ae:	d108      	bne.n	80170c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80170b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80170b8:	683b      	ldr	r3, [r7, #0]
 80170ba:	685b      	ldr	r3, [r3, #4]
 80170bc:	68fa      	ldr	r2, [r7, #12]
 80170be:	4313      	orrs	r3, r2
 80170c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	4a35      	ldr	r2, [pc, #212]	@ (801719c <TIM_Base_SetConfig+0x12c>)
 80170c6:	4293      	cmp	r3, r2
 80170c8:	d01f      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80170d0:	d01b      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	4a32      	ldr	r2, [pc, #200]	@ (80171a0 <TIM_Base_SetConfig+0x130>)
 80170d6:	4293      	cmp	r3, r2
 80170d8:	d017      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	4a31      	ldr	r2, [pc, #196]	@ (80171a4 <TIM_Base_SetConfig+0x134>)
 80170de:	4293      	cmp	r3, r2
 80170e0:	d013      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	4a30      	ldr	r2, [pc, #192]	@ (80171a8 <TIM_Base_SetConfig+0x138>)
 80170e6:	4293      	cmp	r3, r2
 80170e8:	d00f      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	4a2f      	ldr	r2, [pc, #188]	@ (80171ac <TIM_Base_SetConfig+0x13c>)
 80170ee:	4293      	cmp	r3, r2
 80170f0:	d00b      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	4a2e      	ldr	r2, [pc, #184]	@ (80171b0 <TIM_Base_SetConfig+0x140>)
 80170f6:	4293      	cmp	r3, r2
 80170f8:	d007      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	4a2d      	ldr	r2, [pc, #180]	@ (80171b4 <TIM_Base_SetConfig+0x144>)
 80170fe:	4293      	cmp	r3, r2
 8017100:	d003      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	4a2c      	ldr	r2, [pc, #176]	@ (80171b8 <TIM_Base_SetConfig+0x148>)
 8017106:	4293      	cmp	r3, r2
 8017108:	d108      	bne.n	801711c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017112:	683b      	ldr	r3, [r7, #0]
 8017114:	68db      	ldr	r3, [r3, #12]
 8017116:	68fa      	ldr	r2, [r7, #12]
 8017118:	4313      	orrs	r3, r2
 801711a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8017122:	683b      	ldr	r3, [r7, #0]
 8017124:	695b      	ldr	r3, [r3, #20]
 8017126:	4313      	orrs	r3, r2
 8017128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	68fa      	ldr	r2, [r7, #12]
 801712e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	689a      	ldr	r2, [r3, #8]
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017138:	683b      	ldr	r3, [r7, #0]
 801713a:	681a      	ldr	r2, [r3, #0]
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	4a16      	ldr	r2, [pc, #88]	@ (801719c <TIM_Base_SetConfig+0x12c>)
 8017144:	4293      	cmp	r3, r2
 8017146:	d00f      	beq.n	8017168 <TIM_Base_SetConfig+0xf8>
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	4a18      	ldr	r2, [pc, #96]	@ (80171ac <TIM_Base_SetConfig+0x13c>)
 801714c:	4293      	cmp	r3, r2
 801714e:	d00b      	beq.n	8017168 <TIM_Base_SetConfig+0xf8>
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	4a17      	ldr	r2, [pc, #92]	@ (80171b0 <TIM_Base_SetConfig+0x140>)
 8017154:	4293      	cmp	r3, r2
 8017156:	d007      	beq.n	8017168 <TIM_Base_SetConfig+0xf8>
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	4a16      	ldr	r2, [pc, #88]	@ (80171b4 <TIM_Base_SetConfig+0x144>)
 801715c:	4293      	cmp	r3, r2
 801715e:	d003      	beq.n	8017168 <TIM_Base_SetConfig+0xf8>
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	4a15      	ldr	r2, [pc, #84]	@ (80171b8 <TIM_Base_SetConfig+0x148>)
 8017164:	4293      	cmp	r3, r2
 8017166:	d103      	bne.n	8017170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	691a      	ldr	r2, [r3, #16]
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	2201      	movs	r2, #1
 8017174:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	691b      	ldr	r3, [r3, #16]
 801717a:	f003 0301 	and.w	r3, r3, #1
 801717e:	2b01      	cmp	r3, #1
 8017180:	d105      	bne.n	801718e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	691b      	ldr	r3, [r3, #16]
 8017186:	f023 0201 	bic.w	r2, r3, #1
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	611a      	str	r2, [r3, #16]
  }
}
 801718e:	bf00      	nop
 8017190:	3714      	adds	r7, #20
 8017192:	46bd      	mov	sp, r7
 8017194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017198:	4770      	bx	lr
 801719a:	bf00      	nop
 801719c:	40012c00 	.word	0x40012c00
 80171a0:	40000400 	.word	0x40000400
 80171a4:	40000800 	.word	0x40000800
 80171a8:	40000c00 	.word	0x40000c00
 80171ac:	40013400 	.word	0x40013400
 80171b0:	40014000 	.word	0x40014000
 80171b4:	40014400 	.word	0x40014400
 80171b8:	40014800 	.word	0x40014800

080171bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80171bc:	b480      	push	{r7}
 80171be:	b087      	sub	sp, #28
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	60f8      	str	r0, [r7, #12]
 80171c4:	60b9      	str	r1, [r7, #8]
 80171c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	6a1b      	ldr	r3, [r3, #32]
 80171cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	6a1b      	ldr	r3, [r3, #32]
 80171d2:	f023 0201 	bic.w	r2, r3, #1
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	699b      	ldr	r3, [r3, #24]
 80171de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80171e0:	693b      	ldr	r3, [r7, #16]
 80171e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80171e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	011b      	lsls	r3, r3, #4
 80171ec:	693a      	ldr	r2, [r7, #16]
 80171ee:	4313      	orrs	r3, r2
 80171f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80171f2:	697b      	ldr	r3, [r7, #20]
 80171f4:	f023 030a 	bic.w	r3, r3, #10
 80171f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80171fa:	697a      	ldr	r2, [r7, #20]
 80171fc:	68bb      	ldr	r3, [r7, #8]
 80171fe:	4313      	orrs	r3, r2
 8017200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	693a      	ldr	r2, [r7, #16]
 8017206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	697a      	ldr	r2, [r7, #20]
 801720c:	621a      	str	r2, [r3, #32]
}
 801720e:	bf00      	nop
 8017210:	371c      	adds	r7, #28
 8017212:	46bd      	mov	sp, r7
 8017214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017218:	4770      	bx	lr

0801721a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801721a:	b480      	push	{r7}
 801721c:	b087      	sub	sp, #28
 801721e:	af00      	add	r7, sp, #0
 8017220:	60f8      	str	r0, [r7, #12]
 8017222:	60b9      	str	r1, [r7, #8]
 8017224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	6a1b      	ldr	r3, [r3, #32]
 801722a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	6a1b      	ldr	r3, [r3, #32]
 8017230:	f023 0210 	bic.w	r2, r3, #16
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	699b      	ldr	r3, [r3, #24]
 801723c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801723e:	693b      	ldr	r3, [r7, #16]
 8017240:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017244:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	031b      	lsls	r3, r3, #12
 801724a:	693a      	ldr	r2, [r7, #16]
 801724c:	4313      	orrs	r3, r2
 801724e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017250:	697b      	ldr	r3, [r7, #20]
 8017252:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017256:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017258:	68bb      	ldr	r3, [r7, #8]
 801725a:	011b      	lsls	r3, r3, #4
 801725c:	697a      	ldr	r2, [r7, #20]
 801725e:	4313      	orrs	r3, r2
 8017260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	693a      	ldr	r2, [r7, #16]
 8017266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	697a      	ldr	r2, [r7, #20]
 801726c:	621a      	str	r2, [r3, #32]
}
 801726e:	bf00      	nop
 8017270:	371c      	adds	r7, #28
 8017272:	46bd      	mov	sp, r7
 8017274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017278:	4770      	bx	lr

0801727a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801727a:	b480      	push	{r7}
 801727c:	b085      	sub	sp, #20
 801727e:	af00      	add	r7, sp, #0
 8017280:	6078      	str	r0, [r7, #4]
 8017282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	689b      	ldr	r3, [r3, #8]
 8017288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017292:	683a      	ldr	r2, [r7, #0]
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	4313      	orrs	r3, r2
 8017298:	f043 0307 	orr.w	r3, r3, #7
 801729c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	68fa      	ldr	r2, [r7, #12]
 80172a2:	609a      	str	r2, [r3, #8]
}
 80172a4:	bf00      	nop
 80172a6:	3714      	adds	r7, #20
 80172a8:	46bd      	mov	sp, r7
 80172aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ae:	4770      	bx	lr

080172b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80172b0:	b480      	push	{r7}
 80172b2:	b087      	sub	sp, #28
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	60f8      	str	r0, [r7, #12]
 80172b8:	60b9      	str	r1, [r7, #8]
 80172ba:	607a      	str	r2, [r7, #4]
 80172bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	689b      	ldr	r3, [r3, #8]
 80172c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80172c4:	697b      	ldr	r3, [r7, #20]
 80172c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80172ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80172cc:	683b      	ldr	r3, [r7, #0]
 80172ce:	021a      	lsls	r2, r3, #8
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	431a      	orrs	r2, r3
 80172d4:	68bb      	ldr	r3, [r7, #8]
 80172d6:	4313      	orrs	r3, r2
 80172d8:	697a      	ldr	r2, [r7, #20]
 80172da:	4313      	orrs	r3, r2
 80172dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	697a      	ldr	r2, [r7, #20]
 80172e2:	609a      	str	r2, [r3, #8]
}
 80172e4:	bf00      	nop
 80172e6:	371c      	adds	r7, #28
 80172e8:	46bd      	mov	sp, r7
 80172ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ee:	4770      	bx	lr

080172f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80172f0:	b480      	push	{r7}
 80172f2:	b087      	sub	sp, #28
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	60f8      	str	r0, [r7, #12]
 80172f8:	60b9      	str	r1, [r7, #8]
 80172fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80172fc:	68bb      	ldr	r3, [r7, #8]
 80172fe:	f003 031f 	and.w	r3, r3, #31
 8017302:	2201      	movs	r2, #1
 8017304:	fa02 f303 	lsl.w	r3, r2, r3
 8017308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	6a1a      	ldr	r2, [r3, #32]
 801730e:	697b      	ldr	r3, [r7, #20]
 8017310:	43db      	mvns	r3, r3
 8017312:	401a      	ands	r2, r3
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	6a1a      	ldr	r2, [r3, #32]
 801731c:	68bb      	ldr	r3, [r7, #8]
 801731e:	f003 031f 	and.w	r3, r3, #31
 8017322:	6879      	ldr	r1, [r7, #4]
 8017324:	fa01 f303 	lsl.w	r3, r1, r3
 8017328:	431a      	orrs	r2, r3
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	621a      	str	r2, [r3, #32]
}
 801732e:	bf00      	nop
 8017330:	371c      	adds	r7, #28
 8017332:	46bd      	mov	sp, r7
 8017334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017338:	4770      	bx	lr
	...

0801733c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801733c:	b480      	push	{r7}
 801733e:	b085      	sub	sp, #20
 8017340:	af00      	add	r7, sp, #0
 8017342:	6078      	str	r0, [r7, #4]
 8017344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801734c:	2b01      	cmp	r3, #1
 801734e:	d101      	bne.n	8017354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017350:	2302      	movs	r3, #2
 8017352:	e068      	b.n	8017426 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	2201      	movs	r2, #1
 8017358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	2202      	movs	r2, #2
 8017360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	685b      	ldr	r3, [r3, #4]
 801736a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	689b      	ldr	r3, [r3, #8]
 8017372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	4a2e      	ldr	r2, [pc, #184]	@ (8017434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801737a:	4293      	cmp	r3, r2
 801737c:	d004      	beq.n	8017388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	4a2d      	ldr	r2, [pc, #180]	@ (8017438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8017384:	4293      	cmp	r3, r2
 8017386:	d108      	bne.n	801739a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801738e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	685b      	ldr	r3, [r3, #4]
 8017394:	68fa      	ldr	r2, [r7, #12]
 8017396:	4313      	orrs	r3, r2
 8017398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80173a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80173a2:	683b      	ldr	r3, [r7, #0]
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	68fa      	ldr	r2, [r7, #12]
 80173a8:	4313      	orrs	r3, r2
 80173aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	68fa      	ldr	r2, [r7, #12]
 80173b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	4a1e      	ldr	r2, [pc, #120]	@ (8017434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80173ba:	4293      	cmp	r3, r2
 80173bc:	d01d      	beq.n	80173fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80173c6:	d018      	beq.n	80173fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	4a1b      	ldr	r2, [pc, #108]	@ (801743c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80173ce:	4293      	cmp	r3, r2
 80173d0:	d013      	beq.n	80173fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	4a1a      	ldr	r2, [pc, #104]	@ (8017440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80173d8:	4293      	cmp	r3, r2
 80173da:	d00e      	beq.n	80173fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	4a18      	ldr	r2, [pc, #96]	@ (8017444 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80173e2:	4293      	cmp	r3, r2
 80173e4:	d009      	beq.n	80173fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	4a13      	ldr	r2, [pc, #76]	@ (8017438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80173ec:	4293      	cmp	r3, r2
 80173ee:	d004      	beq.n	80173fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	4a14      	ldr	r2, [pc, #80]	@ (8017448 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80173f6:	4293      	cmp	r3, r2
 80173f8:	d10c      	bne.n	8017414 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80173fa:	68bb      	ldr	r3, [r7, #8]
 80173fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	689b      	ldr	r3, [r3, #8]
 8017406:	68ba      	ldr	r2, [r7, #8]
 8017408:	4313      	orrs	r3, r2
 801740a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	68ba      	ldr	r2, [r7, #8]
 8017412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	2201      	movs	r2, #1
 8017418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	2200      	movs	r2, #0
 8017420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017424:	2300      	movs	r3, #0
}
 8017426:	4618      	mov	r0, r3
 8017428:	3714      	adds	r7, #20
 801742a:	46bd      	mov	sp, r7
 801742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017430:	4770      	bx	lr
 8017432:	bf00      	nop
 8017434:	40012c00 	.word	0x40012c00
 8017438:	40013400 	.word	0x40013400
 801743c:	40000400 	.word	0x40000400
 8017440:	40000800 	.word	0x40000800
 8017444:	40000c00 	.word	0x40000c00
 8017448:	40014000 	.word	0x40014000

0801744c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801744c:	b480      	push	{r7}
 801744e:	b083      	sub	sp, #12
 8017450:	af00      	add	r7, sp, #0
 8017452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017454:	bf00      	nop
 8017456:	370c      	adds	r7, #12
 8017458:	46bd      	mov	sp, r7
 801745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801745e:	4770      	bx	lr

08017460 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017460:	b480      	push	{r7}
 8017462:	b083      	sub	sp, #12
 8017464:	af00      	add	r7, sp, #0
 8017466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017468:	bf00      	nop
 801746a:	370c      	adds	r7, #12
 801746c:	46bd      	mov	sp, r7
 801746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017472:	4770      	bx	lr

08017474 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017474:	b480      	push	{r7}
 8017476:	b083      	sub	sp, #12
 8017478:	af00      	add	r7, sp, #0
 801747a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801747c:	bf00      	nop
 801747e:	370c      	adds	r7, #12
 8017480:	46bd      	mov	sp, r7
 8017482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017486:	4770      	bx	lr

08017488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b082      	sub	sp, #8
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d101      	bne.n	801749a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017496:	2301      	movs	r3, #1
 8017498:	e040      	b.n	801751c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d106      	bne.n	80174b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	2200      	movs	r2, #0
 80174a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f7ec f8a4 	bl	80035f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	2224      	movs	r2, #36	@ 0x24
 80174b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	681a      	ldr	r2, [r3, #0]
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	f022 0201 	bic.w	r2, r2, #1
 80174c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d002      	beq.n	80174d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80174ce:	6878      	ldr	r0, [r7, #4]
 80174d0:	f000 fedc 	bl	801828c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80174d4:	6878      	ldr	r0, [r7, #4]
 80174d6:	f000 fc21 	bl	8017d1c <UART_SetConfig>
 80174da:	4603      	mov	r3, r0
 80174dc:	2b01      	cmp	r3, #1
 80174de:	d101      	bne.n	80174e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80174e0:	2301      	movs	r3, #1
 80174e2:	e01b      	b.n	801751c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	685a      	ldr	r2, [r3, #4]
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80174f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	689a      	ldr	r2, [r3, #8]
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017502:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	681a      	ldr	r2, [r3, #0]
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	f042 0201 	orr.w	r2, r2, #1
 8017512:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017514:	6878      	ldr	r0, [r7, #4]
 8017516:	f000 ff5b 	bl	80183d0 <UART_CheckIdleState>
 801751a:	4603      	mov	r3, r0
}
 801751c:	4618      	mov	r0, r3
 801751e:	3708      	adds	r7, #8
 8017520:	46bd      	mov	sp, r7
 8017522:	bd80      	pop	{r7, pc}

08017524 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017524:	b580      	push	{r7, lr}
 8017526:	b08a      	sub	sp, #40	@ 0x28
 8017528:	af02      	add	r7, sp, #8
 801752a:	60f8      	str	r0, [r7, #12]
 801752c:	60b9      	str	r1, [r7, #8]
 801752e:	603b      	str	r3, [r7, #0]
 8017530:	4613      	mov	r3, r2
 8017532:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017538:	2b20      	cmp	r3, #32
 801753a:	d177      	bne.n	801762c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801753c:	68bb      	ldr	r3, [r7, #8]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d002      	beq.n	8017548 <HAL_UART_Transmit+0x24>
 8017542:	88fb      	ldrh	r3, [r7, #6]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d101      	bne.n	801754c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8017548:	2301      	movs	r3, #1
 801754a:	e070      	b.n	801762e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	2200      	movs	r2, #0
 8017550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	2221      	movs	r2, #33	@ 0x21
 8017558:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801755a:	f7fa ff65 	bl	8012428 <HAL_GetTick>
 801755e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	88fa      	ldrh	r2, [r7, #6]
 8017564:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	88fa      	ldrh	r2, [r7, #6]
 801756c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	689b      	ldr	r3, [r3, #8]
 8017574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017578:	d108      	bne.n	801758c <HAL_UART_Transmit+0x68>
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	691b      	ldr	r3, [r3, #16]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d104      	bne.n	801758c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8017582:	2300      	movs	r3, #0
 8017584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017586:	68bb      	ldr	r3, [r7, #8]
 8017588:	61bb      	str	r3, [r7, #24]
 801758a:	e003      	b.n	8017594 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801758c:	68bb      	ldr	r3, [r7, #8]
 801758e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017590:	2300      	movs	r3, #0
 8017592:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017594:	e02f      	b.n	80175f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	9300      	str	r3, [sp, #0]
 801759a:	697b      	ldr	r3, [r7, #20]
 801759c:	2200      	movs	r2, #0
 801759e:	2180      	movs	r1, #128	@ 0x80
 80175a0:	68f8      	ldr	r0, [r7, #12]
 80175a2:	f000 ffbd 	bl	8018520 <UART_WaitOnFlagUntilTimeout>
 80175a6:	4603      	mov	r3, r0
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d004      	beq.n	80175b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	2220      	movs	r2, #32
 80175b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80175b2:	2303      	movs	r3, #3
 80175b4:	e03b      	b.n	801762e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80175b6:	69fb      	ldr	r3, [r7, #28]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d10b      	bne.n	80175d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80175bc:	69bb      	ldr	r3, [r7, #24]
 80175be:	881a      	ldrh	r2, [r3, #0]
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80175c8:	b292      	uxth	r2, r2
 80175ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80175cc:	69bb      	ldr	r3, [r7, #24]
 80175ce:	3302      	adds	r3, #2
 80175d0:	61bb      	str	r3, [r7, #24]
 80175d2:	e007      	b.n	80175e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80175d4:	69fb      	ldr	r3, [r7, #28]
 80175d6:	781a      	ldrb	r2, [r3, #0]
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80175de:	69fb      	ldr	r3, [r7, #28]
 80175e0:	3301      	adds	r3, #1
 80175e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80175ea:	b29b      	uxth	r3, r3
 80175ec:	3b01      	subs	r3, #1
 80175ee:	b29a      	uxth	r2, r3
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d1c9      	bne.n	8017596 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017602:	683b      	ldr	r3, [r7, #0]
 8017604:	9300      	str	r3, [sp, #0]
 8017606:	697b      	ldr	r3, [r7, #20]
 8017608:	2200      	movs	r2, #0
 801760a:	2140      	movs	r1, #64	@ 0x40
 801760c:	68f8      	ldr	r0, [r7, #12]
 801760e:	f000 ff87 	bl	8018520 <UART_WaitOnFlagUntilTimeout>
 8017612:	4603      	mov	r3, r0
 8017614:	2b00      	cmp	r3, #0
 8017616:	d004      	beq.n	8017622 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	2220      	movs	r2, #32
 801761c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801761e:	2303      	movs	r3, #3
 8017620:	e005      	b.n	801762e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	2220      	movs	r2, #32
 8017626:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8017628:	2300      	movs	r3, #0
 801762a:	e000      	b.n	801762e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801762c:	2302      	movs	r3, #2
  }
}
 801762e:	4618      	mov	r0, r3
 8017630:	3720      	adds	r7, #32
 8017632:	46bd      	mov	sp, r7
 8017634:	bd80      	pop	{r7, pc}
	...

08017638 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b08a      	sub	sp, #40	@ 0x28
 801763c:	af00      	add	r7, sp, #0
 801763e:	60f8      	str	r0, [r7, #12]
 8017640:	60b9      	str	r1, [r7, #8]
 8017642:	4613      	mov	r3, r2
 8017644:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801764c:	2b20      	cmp	r3, #32
 801764e:	d137      	bne.n	80176c0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8017650:	68bb      	ldr	r3, [r7, #8]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d002      	beq.n	801765c <HAL_UART_Receive_IT+0x24>
 8017656:	88fb      	ldrh	r3, [r7, #6]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d101      	bne.n	8017660 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801765c:	2301      	movs	r3, #1
 801765e:	e030      	b.n	80176c2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	2200      	movs	r2, #0
 8017664:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	4a18      	ldr	r2, [pc, #96]	@ (80176cc <HAL_UART_Receive_IT+0x94>)
 801766c:	4293      	cmp	r3, r2
 801766e:	d01f      	beq.n	80176b0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	685b      	ldr	r3, [r3, #4]
 8017676:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801767a:	2b00      	cmp	r3, #0
 801767c:	d018      	beq.n	80176b0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017684:	697b      	ldr	r3, [r7, #20]
 8017686:	e853 3f00 	ldrex	r3, [r3]
 801768a:	613b      	str	r3, [r7, #16]
   return(result);
 801768c:	693b      	ldr	r3, [r7, #16]
 801768e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8017692:	627b      	str	r3, [r7, #36]	@ 0x24
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	461a      	mov	r2, r3
 801769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801769c:	623b      	str	r3, [r7, #32]
 801769e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176a0:	69f9      	ldr	r1, [r7, #28]
 80176a2:	6a3a      	ldr	r2, [r7, #32]
 80176a4:	e841 2300 	strex	r3, r2, [r1]
 80176a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80176aa:	69bb      	ldr	r3, [r7, #24]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d1e6      	bne.n	801767e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80176b0:	88fb      	ldrh	r3, [r7, #6]
 80176b2:	461a      	mov	r2, r3
 80176b4:	68b9      	ldr	r1, [r7, #8]
 80176b6:	68f8      	ldr	r0, [r7, #12]
 80176b8:	f000 ffa0 	bl	80185fc <UART_Start_Receive_IT>
 80176bc:	4603      	mov	r3, r0
 80176be:	e000      	b.n	80176c2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80176c0:	2302      	movs	r3, #2
  }
}
 80176c2:	4618      	mov	r0, r3
 80176c4:	3728      	adds	r7, #40	@ 0x28
 80176c6:	46bd      	mov	sp, r7
 80176c8:	bd80      	pop	{r7, pc}
 80176ca:	bf00      	nop
 80176cc:	40008000 	.word	0x40008000

080176d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b0ba      	sub	sp, #232	@ 0xe8
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	69db      	ldr	r3, [r3, #28]
 80176de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	689b      	ldr	r3, [r3, #8]
 80176f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80176f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80176fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80176fe:	4013      	ands	r3, r2
 8017700:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8017704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017708:	2b00      	cmp	r3, #0
 801770a:	d115      	bne.n	8017738 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801770c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017710:	f003 0320 	and.w	r3, r3, #32
 8017714:	2b00      	cmp	r3, #0
 8017716:	d00f      	beq.n	8017738 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801771c:	f003 0320 	and.w	r3, r3, #32
 8017720:	2b00      	cmp	r3, #0
 8017722:	d009      	beq.n	8017738 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017728:	2b00      	cmp	r3, #0
 801772a:	f000 82ca 	beq.w	8017cc2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017732:	6878      	ldr	r0, [r7, #4]
 8017734:	4798      	blx	r3
      }
      return;
 8017736:	e2c4      	b.n	8017cc2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8017738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801773c:	2b00      	cmp	r3, #0
 801773e:	f000 8117 	beq.w	8017970 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8017742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017746:	f003 0301 	and.w	r3, r3, #1
 801774a:	2b00      	cmp	r3, #0
 801774c:	d106      	bne.n	801775c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801774e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8017752:	4b85      	ldr	r3, [pc, #532]	@ (8017968 <HAL_UART_IRQHandler+0x298>)
 8017754:	4013      	ands	r3, r2
 8017756:	2b00      	cmp	r3, #0
 8017758:	f000 810a 	beq.w	8017970 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801775c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017760:	f003 0301 	and.w	r3, r3, #1
 8017764:	2b00      	cmp	r3, #0
 8017766:	d011      	beq.n	801778c <HAL_UART_IRQHandler+0xbc>
 8017768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801776c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017770:	2b00      	cmp	r3, #0
 8017772:	d00b      	beq.n	801778c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	2201      	movs	r2, #1
 801777a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017782:	f043 0201 	orr.w	r2, r3, #1
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801778c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017790:	f003 0302 	and.w	r3, r3, #2
 8017794:	2b00      	cmp	r3, #0
 8017796:	d011      	beq.n	80177bc <HAL_UART_IRQHandler+0xec>
 8017798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801779c:	f003 0301 	and.w	r3, r3, #1
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d00b      	beq.n	80177bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	2202      	movs	r2, #2
 80177aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80177b2:	f043 0204 	orr.w	r2, r3, #4
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80177bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80177c0:	f003 0304 	and.w	r3, r3, #4
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d011      	beq.n	80177ec <HAL_UART_IRQHandler+0x11c>
 80177c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80177cc:	f003 0301 	and.w	r3, r3, #1
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d00b      	beq.n	80177ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	2204      	movs	r2, #4
 80177da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80177e2:	f043 0202 	orr.w	r2, r3, #2
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80177ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80177f0:	f003 0308 	and.w	r3, r3, #8
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d017      	beq.n	8017828 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80177f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80177fc:	f003 0320 	and.w	r3, r3, #32
 8017800:	2b00      	cmp	r3, #0
 8017802:	d105      	bne.n	8017810 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8017804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017808:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801780c:	2b00      	cmp	r3, #0
 801780e:	d00b      	beq.n	8017828 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	2208      	movs	r2, #8
 8017816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801781e:	f043 0208 	orr.w	r2, r3, #8
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801782c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017830:	2b00      	cmp	r3, #0
 8017832:	d012      	beq.n	801785a <HAL_UART_IRQHandler+0x18a>
 8017834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017838:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801783c:	2b00      	cmp	r3, #0
 801783e:	d00c      	beq.n	801785a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017848:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017850:	f043 0220 	orr.w	r2, r3, #32
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017860:	2b00      	cmp	r3, #0
 8017862:	f000 8230 	beq.w	8017cc6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8017866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801786a:	f003 0320 	and.w	r3, r3, #32
 801786e:	2b00      	cmp	r3, #0
 8017870:	d00d      	beq.n	801788e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017876:	f003 0320 	and.w	r3, r3, #32
 801787a:	2b00      	cmp	r3, #0
 801787c:	d007      	beq.n	801788e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017882:	2b00      	cmp	r3, #0
 8017884:	d003      	beq.n	801788e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801788a:	6878      	ldr	r0, [r7, #4]
 801788c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017894:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	689b      	ldr	r3, [r3, #8]
 801789e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80178a2:	2b40      	cmp	r3, #64	@ 0x40
 80178a4:	d005      	beq.n	80178b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80178a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80178aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d04f      	beq.n	8017952 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f000 ff68 	bl	8018788 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	689b      	ldr	r3, [r3, #8]
 80178be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80178c2:	2b40      	cmp	r3, #64	@ 0x40
 80178c4:	d141      	bne.n	801794a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	3308      	adds	r3, #8
 80178cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80178d4:	e853 3f00 	ldrex	r3, [r3]
 80178d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80178dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80178e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80178e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	3308      	adds	r3, #8
 80178ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80178f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80178f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80178fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8017902:	e841 2300 	strex	r3, r2, [r1]
 8017906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801790a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801790e:	2b00      	cmp	r3, #0
 8017910:	d1d9      	bne.n	80178c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017916:	2b00      	cmp	r3, #0
 8017918:	d013      	beq.n	8017942 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801791e:	4a13      	ldr	r2, [pc, #76]	@ (801796c <HAL_UART_IRQHandler+0x29c>)
 8017920:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017926:	4618      	mov	r0, r3
 8017928:	f7fb fe4e 	bl	80135c8 <HAL_DMA_Abort_IT>
 801792c:	4603      	mov	r3, r0
 801792e:	2b00      	cmp	r3, #0
 8017930:	d017      	beq.n	8017962 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017938:	687a      	ldr	r2, [r7, #4]
 801793a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801793c:	4610      	mov	r0, r2
 801793e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017940:	e00f      	b.n	8017962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017942:	6878      	ldr	r0, [r7, #4]
 8017944:	f000 f9d4 	bl	8017cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017948:	e00b      	b.n	8017962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	f000 f9d0 	bl	8017cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017950:	e007      	b.n	8017962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017952:	6878      	ldr	r0, [r7, #4]
 8017954:	f000 f9cc 	bl	8017cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	2200      	movs	r2, #0
 801795c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8017960:	e1b1      	b.n	8017cc6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017962:	bf00      	nop
    return;
 8017964:	e1af      	b.n	8017cc6 <HAL_UART_IRQHandler+0x5f6>
 8017966:	bf00      	nop
 8017968:	04000120 	.word	0x04000120
 801796c:	08018851 	.word	0x08018851

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017974:	2b01      	cmp	r3, #1
 8017976:	f040 816a 	bne.w	8017c4e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801797a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801797e:	f003 0310 	and.w	r3, r3, #16
 8017982:	2b00      	cmp	r3, #0
 8017984:	f000 8163 	beq.w	8017c4e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801798c:	f003 0310 	and.w	r3, r3, #16
 8017990:	2b00      	cmp	r3, #0
 8017992:	f000 815c 	beq.w	8017c4e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	2210      	movs	r2, #16
 801799c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	689b      	ldr	r3, [r3, #8]
 80179a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80179a8:	2b40      	cmp	r3, #64	@ 0x40
 80179aa:	f040 80d4 	bne.w	8017b56 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	685b      	ldr	r3, [r3, #4]
 80179b6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80179ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80179be:	2b00      	cmp	r3, #0
 80179c0:	f000 80ad 	beq.w	8017b1e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80179ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80179ce:	429a      	cmp	r2, r3
 80179d0:	f080 80a5 	bcs.w	8017b1e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80179da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	f003 0320 	and.w	r3, r3, #32
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	f040 8086 	bne.w	8017afc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80179fc:	e853 3f00 	ldrex	r3, [r3]
 8017a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8017a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	461a      	mov	r2, r3
 8017a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017a1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8017a1e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8017a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8017a2a:	e841 2300 	strex	r3, r2, [r1]
 8017a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8017a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d1da      	bne.n	80179f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	3308      	adds	r3, #8
 8017a40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017a44:	e853 3f00 	ldrex	r3, [r3]
 8017a48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8017a4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017a4c:	f023 0301 	bic.w	r3, r3, #1
 8017a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	3308      	adds	r3, #8
 8017a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8017a5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8017a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8017a66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017a6a:	e841 2300 	strex	r3, r2, [r1]
 8017a6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8017a70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d1e1      	bne.n	8017a3a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	3308      	adds	r3, #8
 8017a7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017a80:	e853 3f00 	ldrex	r3, [r3]
 8017a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8017a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	3308      	adds	r3, #8
 8017a96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8017a9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8017a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8017aa0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8017aa2:	e841 2300 	strex	r3, r2, [r1]
 8017aa6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8017aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d1e3      	bne.n	8017a76 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	2220      	movs	r2, #32
 8017ab2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	2200      	movs	r2, #0
 8017aba:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ac4:	e853 3f00 	ldrex	r3, [r3]
 8017ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8017aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017acc:	f023 0310 	bic.w	r3, r3, #16
 8017ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	461a      	mov	r2, r3
 8017ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017ade:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017ae0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ae2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017ae4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017ae6:	e841 2300 	strex	r3, r2, [r1]
 8017aea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8017aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d1e4      	bne.n	8017abc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017af6:	4618      	mov	r0, r3
 8017af8:	f7fb fd28 	bl	801354c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	2202      	movs	r2, #2
 8017b00:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8017b0e:	b29b      	uxth	r3, r3
 8017b10:	1ad3      	subs	r3, r2, r3
 8017b12:	b29b      	uxth	r3, r3
 8017b14:	4619      	mov	r1, r3
 8017b16:	6878      	ldr	r0, [r7, #4]
 8017b18:	f000 f8f4 	bl	8017d04 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8017b1c:	e0d5      	b.n	8017cca <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8017b24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017b28:	429a      	cmp	r2, r3
 8017b2a:	f040 80ce 	bne.w	8017cca <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	f003 0320 	and.w	r3, r3, #32
 8017b3a:	2b20      	cmp	r3, #32
 8017b3c:	f040 80c5 	bne.w	8017cca <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	2202      	movs	r2, #2
 8017b44:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8017b4c:	4619      	mov	r1, r3
 8017b4e:	6878      	ldr	r0, [r7, #4]
 8017b50:	f000 f8d8 	bl	8017d04 <HAL_UARTEx_RxEventCallback>
      return;
 8017b54:	e0b9      	b.n	8017cca <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8017b62:	b29b      	uxth	r3, r3
 8017b64:	1ad3      	subs	r3, r2, r3
 8017b66:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8017b70:	b29b      	uxth	r3, r3
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	f000 80ab 	beq.w	8017cce <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8017b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	f000 80a6 	beq.w	8017cce <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b8a:	e853 3f00 	ldrex	r3, [r3]
 8017b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017b96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	461a      	mov	r2, r3
 8017ba0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8017ba6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ba8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017bac:	e841 2300 	strex	r3, r2, [r1]
 8017bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d1e4      	bne.n	8017b82 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	3308      	adds	r3, #8
 8017bbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bc2:	e853 3f00 	ldrex	r3, [r3]
 8017bc6:	623b      	str	r3, [r7, #32]
   return(result);
 8017bc8:	6a3b      	ldr	r3, [r7, #32]
 8017bca:	f023 0301 	bic.w	r3, r3, #1
 8017bce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	3308      	adds	r3, #8
 8017bd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8017bdc:	633a      	str	r2, [r7, #48]	@ 0x30
 8017bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017be0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017be4:	e841 2300 	strex	r3, r2, [r1]
 8017be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d1e3      	bne.n	8017bb8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	2220      	movs	r2, #32
 8017bf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	2200      	movs	r2, #0
 8017c02:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c0a:	693b      	ldr	r3, [r7, #16]
 8017c0c:	e853 3f00 	ldrex	r3, [r3]
 8017c10:	60fb      	str	r3, [r7, #12]
   return(result);
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	f023 0310 	bic.w	r3, r3, #16
 8017c18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	461a      	mov	r2, r3
 8017c22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8017c26:	61fb      	str	r3, [r7, #28]
 8017c28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c2a:	69b9      	ldr	r1, [r7, #24]
 8017c2c:	69fa      	ldr	r2, [r7, #28]
 8017c2e:	e841 2300 	strex	r3, r2, [r1]
 8017c32:	617b      	str	r3, [r7, #20]
   return(result);
 8017c34:	697b      	ldr	r3, [r7, #20]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d1e4      	bne.n	8017c04 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	2202      	movs	r2, #2
 8017c3e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017c44:	4619      	mov	r1, r3
 8017c46:	6878      	ldr	r0, [r7, #4]
 8017c48:	f000 f85c 	bl	8017d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017c4c:	e03f      	b.n	8017cce <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d00e      	beq.n	8017c78 <HAL_UART_IRQHandler+0x5a8>
 8017c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d008      	beq.n	8017c78 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8017c6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8017c70:	6878      	ldr	r0, [r7, #4]
 8017c72:	f000 ffe9 	bl	8018c48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017c76:	e02d      	b.n	8017cd4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d00e      	beq.n	8017ca2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d008      	beq.n	8017ca2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d01c      	beq.n	8017cd2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c9c:	6878      	ldr	r0, [r7, #4]
 8017c9e:	4798      	blx	r3
    }
    return;
 8017ca0:	e017      	b.n	8017cd2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d012      	beq.n	8017cd4 <HAL_UART_IRQHandler+0x604>
 8017cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d00c      	beq.n	8017cd4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8017cba:	6878      	ldr	r0, [r7, #4]
 8017cbc:	f000 fdde 	bl	801887c <UART_EndTransmit_IT>
    return;
 8017cc0:	e008      	b.n	8017cd4 <HAL_UART_IRQHandler+0x604>
      return;
 8017cc2:	bf00      	nop
 8017cc4:	e006      	b.n	8017cd4 <HAL_UART_IRQHandler+0x604>
    return;
 8017cc6:	bf00      	nop
 8017cc8:	e004      	b.n	8017cd4 <HAL_UART_IRQHandler+0x604>
      return;
 8017cca:	bf00      	nop
 8017ccc:	e002      	b.n	8017cd4 <HAL_UART_IRQHandler+0x604>
      return;
 8017cce:	bf00      	nop
 8017cd0:	e000      	b.n	8017cd4 <HAL_UART_IRQHandler+0x604>
    return;
 8017cd2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8017cd4:	37e8      	adds	r7, #232	@ 0xe8
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}
 8017cda:	bf00      	nop

08017cdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017cdc:	b480      	push	{r7}
 8017cde:	b083      	sub	sp, #12
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017ce4:	bf00      	nop
 8017ce6:	370c      	adds	r7, #12
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cee:	4770      	bx	lr

08017cf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017cf0:	b480      	push	{r7}
 8017cf2:	b083      	sub	sp, #12
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8017cf8:	bf00      	nop
 8017cfa:	370c      	adds	r7, #12
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d02:	4770      	bx	lr

08017d04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017d04:	b480      	push	{r7}
 8017d06:	b083      	sub	sp, #12
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	6078      	str	r0, [r7, #4]
 8017d0c:	460b      	mov	r3, r1
 8017d0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017d10:	bf00      	nop
 8017d12:	370c      	adds	r7, #12
 8017d14:	46bd      	mov	sp, r7
 8017d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1a:	4770      	bx	lr

08017d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017d20:	b08a      	sub	sp, #40	@ 0x28
 8017d22:	af00      	add	r7, sp, #0
 8017d24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017d26:	2300      	movs	r3, #0
 8017d28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	689a      	ldr	r2, [r3, #8]
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	691b      	ldr	r3, [r3, #16]
 8017d34:	431a      	orrs	r2, r3
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	695b      	ldr	r3, [r3, #20]
 8017d3a:	431a      	orrs	r2, r3
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	69db      	ldr	r3, [r3, #28]
 8017d40:	4313      	orrs	r3, r2
 8017d42:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	681a      	ldr	r2, [r3, #0]
 8017d4a:	4ba4      	ldr	r3, [pc, #656]	@ (8017fdc <UART_SetConfig+0x2c0>)
 8017d4c:	4013      	ands	r3, r2
 8017d4e:	68fa      	ldr	r2, [r7, #12]
 8017d50:	6812      	ldr	r2, [r2, #0]
 8017d52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017d54:	430b      	orrs	r3, r1
 8017d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	685b      	ldr	r3, [r3, #4]
 8017d5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	68da      	ldr	r2, [r3, #12]
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	430a      	orrs	r2, r1
 8017d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	699b      	ldr	r3, [r3, #24]
 8017d72:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	4a99      	ldr	r2, [pc, #612]	@ (8017fe0 <UART_SetConfig+0x2c4>)
 8017d7a:	4293      	cmp	r3, r2
 8017d7c:	d004      	beq.n	8017d88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	6a1b      	ldr	r3, [r3, #32]
 8017d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017d84:	4313      	orrs	r3, r2
 8017d86:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	689b      	ldr	r3, [r3, #8]
 8017d8e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017d98:	430a      	orrs	r2, r1
 8017d9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	4a90      	ldr	r2, [pc, #576]	@ (8017fe4 <UART_SetConfig+0x2c8>)
 8017da2:	4293      	cmp	r3, r2
 8017da4:	d126      	bne.n	8017df4 <UART_SetConfig+0xd8>
 8017da6:	4b90      	ldr	r3, [pc, #576]	@ (8017fe8 <UART_SetConfig+0x2cc>)
 8017da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017dac:	f003 0303 	and.w	r3, r3, #3
 8017db0:	2b03      	cmp	r3, #3
 8017db2:	d81b      	bhi.n	8017dec <UART_SetConfig+0xd0>
 8017db4:	a201      	add	r2, pc, #4	@ (adr r2, 8017dbc <UART_SetConfig+0xa0>)
 8017db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017dba:	bf00      	nop
 8017dbc:	08017dcd 	.word	0x08017dcd
 8017dc0:	08017ddd 	.word	0x08017ddd
 8017dc4:	08017dd5 	.word	0x08017dd5
 8017dc8:	08017de5 	.word	0x08017de5
 8017dcc:	2301      	movs	r3, #1
 8017dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017dd2:	e116      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017dd4:	2302      	movs	r3, #2
 8017dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017dda:	e112      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017ddc:	2304      	movs	r3, #4
 8017dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017de2:	e10e      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017de4:	2308      	movs	r3, #8
 8017de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017dea:	e10a      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017dec:	2310      	movs	r3, #16
 8017dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017df2:	e106      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	4a7c      	ldr	r2, [pc, #496]	@ (8017fec <UART_SetConfig+0x2d0>)
 8017dfa:	4293      	cmp	r3, r2
 8017dfc:	d138      	bne.n	8017e70 <UART_SetConfig+0x154>
 8017dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8017fe8 <UART_SetConfig+0x2cc>)
 8017e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017e04:	f003 030c 	and.w	r3, r3, #12
 8017e08:	2b0c      	cmp	r3, #12
 8017e0a:	d82d      	bhi.n	8017e68 <UART_SetConfig+0x14c>
 8017e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8017e14 <UART_SetConfig+0xf8>)
 8017e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e12:	bf00      	nop
 8017e14:	08017e49 	.word	0x08017e49
 8017e18:	08017e69 	.word	0x08017e69
 8017e1c:	08017e69 	.word	0x08017e69
 8017e20:	08017e69 	.word	0x08017e69
 8017e24:	08017e59 	.word	0x08017e59
 8017e28:	08017e69 	.word	0x08017e69
 8017e2c:	08017e69 	.word	0x08017e69
 8017e30:	08017e69 	.word	0x08017e69
 8017e34:	08017e51 	.word	0x08017e51
 8017e38:	08017e69 	.word	0x08017e69
 8017e3c:	08017e69 	.word	0x08017e69
 8017e40:	08017e69 	.word	0x08017e69
 8017e44:	08017e61 	.word	0x08017e61
 8017e48:	2300      	movs	r3, #0
 8017e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017e4e:	e0d8      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017e50:	2302      	movs	r3, #2
 8017e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017e56:	e0d4      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017e58:	2304      	movs	r3, #4
 8017e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017e5e:	e0d0      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017e60:	2308      	movs	r3, #8
 8017e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017e66:	e0cc      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017e68:	2310      	movs	r3, #16
 8017e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017e6e:	e0c8      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	4a5e      	ldr	r2, [pc, #376]	@ (8017ff0 <UART_SetConfig+0x2d4>)
 8017e76:	4293      	cmp	r3, r2
 8017e78:	d125      	bne.n	8017ec6 <UART_SetConfig+0x1aa>
 8017e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8017fe8 <UART_SetConfig+0x2cc>)
 8017e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017e80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8017e84:	2b30      	cmp	r3, #48	@ 0x30
 8017e86:	d016      	beq.n	8017eb6 <UART_SetConfig+0x19a>
 8017e88:	2b30      	cmp	r3, #48	@ 0x30
 8017e8a:	d818      	bhi.n	8017ebe <UART_SetConfig+0x1a2>
 8017e8c:	2b20      	cmp	r3, #32
 8017e8e:	d00a      	beq.n	8017ea6 <UART_SetConfig+0x18a>
 8017e90:	2b20      	cmp	r3, #32
 8017e92:	d814      	bhi.n	8017ebe <UART_SetConfig+0x1a2>
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d002      	beq.n	8017e9e <UART_SetConfig+0x182>
 8017e98:	2b10      	cmp	r3, #16
 8017e9a:	d008      	beq.n	8017eae <UART_SetConfig+0x192>
 8017e9c:	e00f      	b.n	8017ebe <UART_SetConfig+0x1a2>
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017ea4:	e0ad      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017ea6:	2302      	movs	r3, #2
 8017ea8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017eac:	e0a9      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017eae:	2304      	movs	r3, #4
 8017eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017eb4:	e0a5      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017eb6:	2308      	movs	r3, #8
 8017eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017ebc:	e0a1      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017ebe:	2310      	movs	r3, #16
 8017ec0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017ec4:	e09d      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	4a4a      	ldr	r2, [pc, #296]	@ (8017ff4 <UART_SetConfig+0x2d8>)
 8017ecc:	4293      	cmp	r3, r2
 8017ece:	d125      	bne.n	8017f1c <UART_SetConfig+0x200>
 8017ed0:	4b45      	ldr	r3, [pc, #276]	@ (8017fe8 <UART_SetConfig+0x2cc>)
 8017ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017ed6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8017eda:	2bc0      	cmp	r3, #192	@ 0xc0
 8017edc:	d016      	beq.n	8017f0c <UART_SetConfig+0x1f0>
 8017ede:	2bc0      	cmp	r3, #192	@ 0xc0
 8017ee0:	d818      	bhi.n	8017f14 <UART_SetConfig+0x1f8>
 8017ee2:	2b80      	cmp	r3, #128	@ 0x80
 8017ee4:	d00a      	beq.n	8017efc <UART_SetConfig+0x1e0>
 8017ee6:	2b80      	cmp	r3, #128	@ 0x80
 8017ee8:	d814      	bhi.n	8017f14 <UART_SetConfig+0x1f8>
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d002      	beq.n	8017ef4 <UART_SetConfig+0x1d8>
 8017eee:	2b40      	cmp	r3, #64	@ 0x40
 8017ef0:	d008      	beq.n	8017f04 <UART_SetConfig+0x1e8>
 8017ef2:	e00f      	b.n	8017f14 <UART_SetConfig+0x1f8>
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017efa:	e082      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017efc:	2302      	movs	r3, #2
 8017efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017f02:	e07e      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017f04:	2304      	movs	r3, #4
 8017f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017f0a:	e07a      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017f0c:	2308      	movs	r3, #8
 8017f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017f12:	e076      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017f14:	2310      	movs	r3, #16
 8017f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017f1a:	e072      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	4a35      	ldr	r2, [pc, #212]	@ (8017ff8 <UART_SetConfig+0x2dc>)
 8017f22:	4293      	cmp	r3, r2
 8017f24:	d12a      	bne.n	8017f7c <UART_SetConfig+0x260>
 8017f26:	4b30      	ldr	r3, [pc, #192]	@ (8017fe8 <UART_SetConfig+0x2cc>)
 8017f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8017f30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8017f34:	d01a      	beq.n	8017f6c <UART_SetConfig+0x250>
 8017f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8017f3a:	d81b      	bhi.n	8017f74 <UART_SetConfig+0x258>
 8017f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017f40:	d00c      	beq.n	8017f5c <UART_SetConfig+0x240>
 8017f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017f46:	d815      	bhi.n	8017f74 <UART_SetConfig+0x258>
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d003      	beq.n	8017f54 <UART_SetConfig+0x238>
 8017f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017f50:	d008      	beq.n	8017f64 <UART_SetConfig+0x248>
 8017f52:	e00f      	b.n	8017f74 <UART_SetConfig+0x258>
 8017f54:	2300      	movs	r3, #0
 8017f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017f5a:	e052      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017f5c:	2302      	movs	r3, #2
 8017f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017f62:	e04e      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017f64:	2304      	movs	r3, #4
 8017f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017f6a:	e04a      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017f6c:	2308      	movs	r3, #8
 8017f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017f72:	e046      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017f74:	2310      	movs	r3, #16
 8017f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017f7a:	e042      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	4a17      	ldr	r2, [pc, #92]	@ (8017fe0 <UART_SetConfig+0x2c4>)
 8017f82:	4293      	cmp	r3, r2
 8017f84:	d13a      	bne.n	8017ffc <UART_SetConfig+0x2e0>
 8017f86:	4b18      	ldr	r3, [pc, #96]	@ (8017fe8 <UART_SetConfig+0x2cc>)
 8017f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8017f90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8017f94:	d01a      	beq.n	8017fcc <UART_SetConfig+0x2b0>
 8017f96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8017f9a:	d81b      	bhi.n	8017fd4 <UART_SetConfig+0x2b8>
 8017f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017fa0:	d00c      	beq.n	8017fbc <UART_SetConfig+0x2a0>
 8017fa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017fa6:	d815      	bhi.n	8017fd4 <UART_SetConfig+0x2b8>
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d003      	beq.n	8017fb4 <UART_SetConfig+0x298>
 8017fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017fb0:	d008      	beq.n	8017fc4 <UART_SetConfig+0x2a8>
 8017fb2:	e00f      	b.n	8017fd4 <UART_SetConfig+0x2b8>
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017fba:	e022      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017fbc:	2302      	movs	r3, #2
 8017fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017fc2:	e01e      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017fc4:	2304      	movs	r3, #4
 8017fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017fca:	e01a      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017fcc:	2308      	movs	r3, #8
 8017fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017fd2:	e016      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017fd4:	2310      	movs	r3, #16
 8017fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017fda:	e012      	b.n	8018002 <UART_SetConfig+0x2e6>
 8017fdc:	efff69f3 	.word	0xefff69f3
 8017fe0:	40008000 	.word	0x40008000
 8017fe4:	40013800 	.word	0x40013800
 8017fe8:	40021000 	.word	0x40021000
 8017fec:	40004400 	.word	0x40004400
 8017ff0:	40004800 	.word	0x40004800
 8017ff4:	40004c00 	.word	0x40004c00
 8017ff8:	40005000 	.word	0x40005000
 8017ffc:	2310      	movs	r3, #16
 8017ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	4a9f      	ldr	r2, [pc, #636]	@ (8018284 <UART_SetConfig+0x568>)
 8018008:	4293      	cmp	r3, r2
 801800a:	d17a      	bne.n	8018102 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801800c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018010:	2b08      	cmp	r3, #8
 8018012:	d824      	bhi.n	801805e <UART_SetConfig+0x342>
 8018014:	a201      	add	r2, pc, #4	@ (adr r2, 801801c <UART_SetConfig+0x300>)
 8018016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801801a:	bf00      	nop
 801801c:	08018041 	.word	0x08018041
 8018020:	0801805f 	.word	0x0801805f
 8018024:	08018049 	.word	0x08018049
 8018028:	0801805f 	.word	0x0801805f
 801802c:	0801804f 	.word	0x0801804f
 8018030:	0801805f 	.word	0x0801805f
 8018034:	0801805f 	.word	0x0801805f
 8018038:	0801805f 	.word	0x0801805f
 801803c:	08018057 	.word	0x08018057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018040:	f7fd fa26 	bl	8015490 <HAL_RCC_GetPCLK1Freq>
 8018044:	61f8      	str	r0, [r7, #28]
        break;
 8018046:	e010      	b.n	801806a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018048:	4b8f      	ldr	r3, [pc, #572]	@ (8018288 <UART_SetConfig+0x56c>)
 801804a:	61fb      	str	r3, [r7, #28]
        break;
 801804c:	e00d      	b.n	801806a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801804e:	f7fd f987 	bl	8015360 <HAL_RCC_GetSysClockFreq>
 8018052:	61f8      	str	r0, [r7, #28]
        break;
 8018054:	e009      	b.n	801806a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801805a:	61fb      	str	r3, [r7, #28]
        break;
 801805c:	e005      	b.n	801806a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 801805e:	2300      	movs	r3, #0
 8018060:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8018062:	2301      	movs	r3, #1
 8018064:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8018068:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801806a:	69fb      	ldr	r3, [r7, #28]
 801806c:	2b00      	cmp	r3, #0
 801806e:	f000 80fb 	beq.w	8018268 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	685a      	ldr	r2, [r3, #4]
 8018076:	4613      	mov	r3, r2
 8018078:	005b      	lsls	r3, r3, #1
 801807a:	4413      	add	r3, r2
 801807c:	69fa      	ldr	r2, [r7, #28]
 801807e:	429a      	cmp	r2, r3
 8018080:	d305      	bcc.n	801808e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	685b      	ldr	r3, [r3, #4]
 8018086:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8018088:	69fa      	ldr	r2, [r7, #28]
 801808a:	429a      	cmp	r2, r3
 801808c:	d903      	bls.n	8018096 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 801808e:	2301      	movs	r3, #1
 8018090:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8018094:	e0e8      	b.n	8018268 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8018096:	69fb      	ldr	r3, [r7, #28]
 8018098:	2200      	movs	r2, #0
 801809a:	461c      	mov	r4, r3
 801809c:	4615      	mov	r5, r2
 801809e:	f04f 0200 	mov.w	r2, #0
 80180a2:	f04f 0300 	mov.w	r3, #0
 80180a6:	022b      	lsls	r3, r5, #8
 80180a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80180ac:	0222      	lsls	r2, r4, #8
 80180ae:	68f9      	ldr	r1, [r7, #12]
 80180b0:	6849      	ldr	r1, [r1, #4]
 80180b2:	0849      	lsrs	r1, r1, #1
 80180b4:	2000      	movs	r0, #0
 80180b6:	4688      	mov	r8, r1
 80180b8:	4681      	mov	r9, r0
 80180ba:	eb12 0a08 	adds.w	sl, r2, r8
 80180be:	eb43 0b09 	adc.w	fp, r3, r9
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	685b      	ldr	r3, [r3, #4]
 80180c6:	2200      	movs	r2, #0
 80180c8:	603b      	str	r3, [r7, #0]
 80180ca:	607a      	str	r2, [r7, #4]
 80180cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80180d0:	4650      	mov	r0, sl
 80180d2:	4659      	mov	r1, fp
 80180d4:	f7e8 fe38 	bl	8000d48 <__aeabi_uldivmod>
 80180d8:	4602      	mov	r2, r0
 80180da:	460b      	mov	r3, r1
 80180dc:	4613      	mov	r3, r2
 80180de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80180e0:	69bb      	ldr	r3, [r7, #24]
 80180e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80180e6:	d308      	bcc.n	80180fa <UART_SetConfig+0x3de>
 80180e8:	69bb      	ldr	r3, [r7, #24]
 80180ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80180ee:	d204      	bcs.n	80180fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	69ba      	ldr	r2, [r7, #24]
 80180f6:	60da      	str	r2, [r3, #12]
 80180f8:	e0b6      	b.n	8018268 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80180fa:	2301      	movs	r3, #1
 80180fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8018100:	e0b2      	b.n	8018268 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	69db      	ldr	r3, [r3, #28]
 8018106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801810a:	d15e      	bne.n	80181ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 801810c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018110:	2b08      	cmp	r3, #8
 8018112:	d828      	bhi.n	8018166 <UART_SetConfig+0x44a>
 8018114:	a201      	add	r2, pc, #4	@ (adr r2, 801811c <UART_SetConfig+0x400>)
 8018116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801811a:	bf00      	nop
 801811c:	08018141 	.word	0x08018141
 8018120:	08018149 	.word	0x08018149
 8018124:	08018151 	.word	0x08018151
 8018128:	08018167 	.word	0x08018167
 801812c:	08018157 	.word	0x08018157
 8018130:	08018167 	.word	0x08018167
 8018134:	08018167 	.word	0x08018167
 8018138:	08018167 	.word	0x08018167
 801813c:	0801815f 	.word	0x0801815f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018140:	f7fd f9a6 	bl	8015490 <HAL_RCC_GetPCLK1Freq>
 8018144:	61f8      	str	r0, [r7, #28]
        break;
 8018146:	e014      	b.n	8018172 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018148:	f7fd f9b8 	bl	80154bc <HAL_RCC_GetPCLK2Freq>
 801814c:	61f8      	str	r0, [r7, #28]
        break;
 801814e:	e010      	b.n	8018172 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018150:	4b4d      	ldr	r3, [pc, #308]	@ (8018288 <UART_SetConfig+0x56c>)
 8018152:	61fb      	str	r3, [r7, #28]
        break;
 8018154:	e00d      	b.n	8018172 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018156:	f7fd f903 	bl	8015360 <HAL_RCC_GetSysClockFreq>
 801815a:	61f8      	str	r0, [r7, #28]
        break;
 801815c:	e009      	b.n	8018172 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801815e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018162:	61fb      	str	r3, [r7, #28]
        break;
 8018164:	e005      	b.n	8018172 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8018166:	2300      	movs	r3, #0
 8018168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801816a:	2301      	movs	r3, #1
 801816c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8018170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018172:	69fb      	ldr	r3, [r7, #28]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d077      	beq.n	8018268 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8018178:	69fb      	ldr	r3, [r7, #28]
 801817a:	005a      	lsls	r2, r3, #1
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	685b      	ldr	r3, [r3, #4]
 8018180:	085b      	lsrs	r3, r3, #1
 8018182:	441a      	add	r2, r3
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	685b      	ldr	r3, [r3, #4]
 8018188:	fbb2 f3f3 	udiv	r3, r2, r3
 801818c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801818e:	69bb      	ldr	r3, [r7, #24]
 8018190:	2b0f      	cmp	r3, #15
 8018192:	d916      	bls.n	80181c2 <UART_SetConfig+0x4a6>
 8018194:	69bb      	ldr	r3, [r7, #24]
 8018196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801819a:	d212      	bcs.n	80181c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801819c:	69bb      	ldr	r3, [r7, #24]
 801819e:	b29b      	uxth	r3, r3
 80181a0:	f023 030f 	bic.w	r3, r3, #15
 80181a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80181a6:	69bb      	ldr	r3, [r7, #24]
 80181a8:	085b      	lsrs	r3, r3, #1
 80181aa:	b29b      	uxth	r3, r3
 80181ac:	f003 0307 	and.w	r3, r3, #7
 80181b0:	b29a      	uxth	r2, r3
 80181b2:	8afb      	ldrh	r3, [r7, #22]
 80181b4:	4313      	orrs	r3, r2
 80181b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	8afa      	ldrh	r2, [r7, #22]
 80181be:	60da      	str	r2, [r3, #12]
 80181c0:	e052      	b.n	8018268 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80181c2:	2301      	movs	r3, #1
 80181c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80181c8:	e04e      	b.n	8018268 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80181ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80181ce:	2b08      	cmp	r3, #8
 80181d0:	d827      	bhi.n	8018222 <UART_SetConfig+0x506>
 80181d2:	a201      	add	r2, pc, #4	@ (adr r2, 80181d8 <UART_SetConfig+0x4bc>)
 80181d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181d8:	080181fd 	.word	0x080181fd
 80181dc:	08018205 	.word	0x08018205
 80181e0:	0801820d 	.word	0x0801820d
 80181e4:	08018223 	.word	0x08018223
 80181e8:	08018213 	.word	0x08018213
 80181ec:	08018223 	.word	0x08018223
 80181f0:	08018223 	.word	0x08018223
 80181f4:	08018223 	.word	0x08018223
 80181f8:	0801821b 	.word	0x0801821b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80181fc:	f7fd f948 	bl	8015490 <HAL_RCC_GetPCLK1Freq>
 8018200:	61f8      	str	r0, [r7, #28]
        break;
 8018202:	e014      	b.n	801822e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018204:	f7fd f95a 	bl	80154bc <HAL_RCC_GetPCLK2Freq>
 8018208:	61f8      	str	r0, [r7, #28]
        break;
 801820a:	e010      	b.n	801822e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801820c:	4b1e      	ldr	r3, [pc, #120]	@ (8018288 <UART_SetConfig+0x56c>)
 801820e:	61fb      	str	r3, [r7, #28]
        break;
 8018210:	e00d      	b.n	801822e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018212:	f7fd f8a5 	bl	8015360 <HAL_RCC_GetSysClockFreq>
 8018216:	61f8      	str	r0, [r7, #28]
        break;
 8018218:	e009      	b.n	801822e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801821a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801821e:	61fb      	str	r3, [r7, #28]
        break;
 8018220:	e005      	b.n	801822e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8018222:	2300      	movs	r3, #0
 8018224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8018226:	2301      	movs	r3, #1
 8018228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801822c:	bf00      	nop
    }

    if (pclk != 0U)
 801822e:	69fb      	ldr	r3, [r7, #28]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d019      	beq.n	8018268 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	685b      	ldr	r3, [r3, #4]
 8018238:	085a      	lsrs	r2, r3, #1
 801823a:	69fb      	ldr	r3, [r7, #28]
 801823c:	441a      	add	r2, r3
 801823e:	68fb      	ldr	r3, [r7, #12]
 8018240:	685b      	ldr	r3, [r3, #4]
 8018242:	fbb2 f3f3 	udiv	r3, r2, r3
 8018246:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018248:	69bb      	ldr	r3, [r7, #24]
 801824a:	2b0f      	cmp	r3, #15
 801824c:	d909      	bls.n	8018262 <UART_SetConfig+0x546>
 801824e:	69bb      	ldr	r3, [r7, #24]
 8018250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018254:	d205      	bcs.n	8018262 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018256:	69bb      	ldr	r3, [r7, #24]
 8018258:	b29a      	uxth	r2, r3
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	60da      	str	r2, [r3, #12]
 8018260:	e002      	b.n	8018268 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8018262:	2301      	movs	r3, #1
 8018264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	2200      	movs	r2, #0
 801826c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	2200      	movs	r2, #0
 8018272:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8018274:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8018278:	4618      	mov	r0, r3
 801827a:	3728      	adds	r7, #40	@ 0x28
 801827c:	46bd      	mov	sp, r7
 801827e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018282:	bf00      	nop
 8018284:	40008000 	.word	0x40008000
 8018288:	00f42400 	.word	0x00f42400

0801828c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801828c:	b480      	push	{r7}
 801828e:	b083      	sub	sp, #12
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018298:	f003 0308 	and.w	r3, r3, #8
 801829c:	2b00      	cmp	r3, #0
 801829e:	d00a      	beq.n	80182b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	685b      	ldr	r3, [r3, #4]
 80182a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	430a      	orrs	r2, r1
 80182b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182ba:	f003 0301 	and.w	r3, r3, #1
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d00a      	beq.n	80182d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	685b      	ldr	r3, [r3, #4]
 80182c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	430a      	orrs	r2, r1
 80182d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182dc:	f003 0302 	and.w	r3, r3, #2
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d00a      	beq.n	80182fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	685b      	ldr	r3, [r3, #4]
 80182ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	430a      	orrs	r2, r1
 80182f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182fe:	f003 0304 	and.w	r3, r3, #4
 8018302:	2b00      	cmp	r3, #0
 8018304:	d00a      	beq.n	801831c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	685b      	ldr	r3, [r3, #4]
 801830c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	430a      	orrs	r2, r1
 801831a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018320:	f003 0310 	and.w	r3, r3, #16
 8018324:	2b00      	cmp	r3, #0
 8018326:	d00a      	beq.n	801833e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	689b      	ldr	r3, [r3, #8]
 801832e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	430a      	orrs	r2, r1
 801833c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018342:	f003 0320 	and.w	r3, r3, #32
 8018346:	2b00      	cmp	r3, #0
 8018348:	d00a      	beq.n	8018360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	689b      	ldr	r3, [r3, #8]
 8018350:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	430a      	orrs	r2, r1
 801835e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018368:	2b00      	cmp	r3, #0
 801836a:	d01a      	beq.n	80183a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	685b      	ldr	r3, [r3, #4]
 8018372:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	430a      	orrs	r2, r1
 8018380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801838a:	d10a      	bne.n	80183a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	685b      	ldr	r3, [r3, #4]
 8018392:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	430a      	orrs	r2, r1
 80183a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d00a      	beq.n	80183c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	685b      	ldr	r3, [r3, #4]
 80183b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	430a      	orrs	r2, r1
 80183c2:	605a      	str	r2, [r3, #4]
  }
}
 80183c4:	bf00      	nop
 80183c6:	370c      	adds	r7, #12
 80183c8:	46bd      	mov	sp, r7
 80183ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ce:	4770      	bx	lr

080183d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b098      	sub	sp, #96	@ 0x60
 80183d4:	af02      	add	r7, sp, #8
 80183d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	2200      	movs	r2, #0
 80183dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80183e0:	f7fa f822 	bl	8012428 <HAL_GetTick>
 80183e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	f003 0308 	and.w	r3, r3, #8
 80183f0:	2b08      	cmp	r3, #8
 80183f2:	d12e      	bne.n	8018452 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80183f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80183f8:	9300      	str	r3, [sp, #0]
 80183fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80183fc:	2200      	movs	r2, #0
 80183fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8018402:	6878      	ldr	r0, [r7, #4]
 8018404:	f000 f88c 	bl	8018520 <UART_WaitOnFlagUntilTimeout>
 8018408:	4603      	mov	r3, r0
 801840a:	2b00      	cmp	r3, #0
 801840c:	d021      	beq.n	8018452 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018416:	e853 3f00 	ldrex	r3, [r3]
 801841a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801841c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801841e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018422:	653b      	str	r3, [r7, #80]	@ 0x50
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	461a      	mov	r2, r3
 801842a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801842c:	647b      	str	r3, [r7, #68]	@ 0x44
 801842e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018434:	e841 2300 	strex	r3, r2, [r1]
 8018438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801843a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801843c:	2b00      	cmp	r3, #0
 801843e:	d1e6      	bne.n	801840e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	2220      	movs	r2, #32
 8018444:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	2200      	movs	r2, #0
 801844a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801844e:	2303      	movs	r3, #3
 8018450:	e062      	b.n	8018518 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	f003 0304 	and.w	r3, r3, #4
 801845c:	2b04      	cmp	r3, #4
 801845e:	d149      	bne.n	80184f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018460:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8018464:	9300      	str	r3, [sp, #0]
 8018466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018468:	2200      	movs	r2, #0
 801846a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801846e:	6878      	ldr	r0, [r7, #4]
 8018470:	f000 f856 	bl	8018520 <UART_WaitOnFlagUntilTimeout>
 8018474:	4603      	mov	r3, r0
 8018476:	2b00      	cmp	r3, #0
 8018478:	d03c      	beq.n	80184f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018482:	e853 3f00 	ldrex	r3, [r3]
 8018486:	623b      	str	r3, [r7, #32]
   return(result);
 8018488:	6a3b      	ldr	r3, [r7, #32]
 801848a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801848e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	461a      	mov	r2, r3
 8018496:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018498:	633b      	str	r3, [r7, #48]	@ 0x30
 801849a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801849c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801849e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80184a0:	e841 2300 	strex	r3, r2, [r1]
 80184a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80184a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d1e6      	bne.n	801847a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	3308      	adds	r3, #8
 80184b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80184b4:	693b      	ldr	r3, [r7, #16]
 80184b6:	e853 3f00 	ldrex	r3, [r3]
 80184ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	f023 0301 	bic.w	r3, r3, #1
 80184c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	3308      	adds	r3, #8
 80184ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80184cc:	61fa      	str	r2, [r7, #28]
 80184ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80184d0:	69b9      	ldr	r1, [r7, #24]
 80184d2:	69fa      	ldr	r2, [r7, #28]
 80184d4:	e841 2300 	strex	r3, r2, [r1]
 80184d8:	617b      	str	r3, [r7, #20]
   return(result);
 80184da:	697b      	ldr	r3, [r7, #20]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d1e5      	bne.n	80184ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	2220      	movs	r2, #32
 80184e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	2200      	movs	r2, #0
 80184ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80184f0:	2303      	movs	r3, #3
 80184f2:	e011      	b.n	8018518 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	2220      	movs	r2, #32
 80184f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	2220      	movs	r2, #32
 80184fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	2200      	movs	r2, #0
 8018506:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	2200      	movs	r2, #0
 801850c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	2200      	movs	r2, #0
 8018512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8018516:	2300      	movs	r3, #0
}
 8018518:	4618      	mov	r0, r3
 801851a:	3758      	adds	r7, #88	@ 0x58
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}

08018520 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018520:	b580      	push	{r7, lr}
 8018522:	b084      	sub	sp, #16
 8018524:	af00      	add	r7, sp, #0
 8018526:	60f8      	str	r0, [r7, #12]
 8018528:	60b9      	str	r1, [r7, #8]
 801852a:	603b      	str	r3, [r7, #0]
 801852c:	4613      	mov	r3, r2
 801852e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018530:	e04f      	b.n	80185d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018532:	69bb      	ldr	r3, [r7, #24]
 8018534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018538:	d04b      	beq.n	80185d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801853a:	f7f9 ff75 	bl	8012428 <HAL_GetTick>
 801853e:	4602      	mov	r2, r0
 8018540:	683b      	ldr	r3, [r7, #0]
 8018542:	1ad3      	subs	r3, r2, r3
 8018544:	69ba      	ldr	r2, [r7, #24]
 8018546:	429a      	cmp	r2, r3
 8018548:	d302      	bcc.n	8018550 <UART_WaitOnFlagUntilTimeout+0x30>
 801854a:	69bb      	ldr	r3, [r7, #24]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d101      	bne.n	8018554 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8018550:	2303      	movs	r3, #3
 8018552:	e04e      	b.n	80185f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	f003 0304 	and.w	r3, r3, #4
 801855e:	2b00      	cmp	r3, #0
 8018560:	d037      	beq.n	80185d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8018562:	68bb      	ldr	r3, [r7, #8]
 8018564:	2b80      	cmp	r3, #128	@ 0x80
 8018566:	d034      	beq.n	80185d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8018568:	68bb      	ldr	r3, [r7, #8]
 801856a:	2b40      	cmp	r3, #64	@ 0x40
 801856c:	d031      	beq.n	80185d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	69db      	ldr	r3, [r3, #28]
 8018574:	f003 0308 	and.w	r3, r3, #8
 8018578:	2b08      	cmp	r3, #8
 801857a:	d110      	bne.n	801859e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	2208      	movs	r2, #8
 8018582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8018584:	68f8      	ldr	r0, [r7, #12]
 8018586:	f000 f8ff 	bl	8018788 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	2208      	movs	r2, #8
 801858e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	2200      	movs	r2, #0
 8018596:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801859a:	2301      	movs	r3, #1
 801859c:	e029      	b.n	80185f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	69db      	ldr	r3, [r3, #28]
 80185a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80185a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80185ac:	d111      	bne.n	80185d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80185b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80185b8:	68f8      	ldr	r0, [r7, #12]
 80185ba:	f000 f8e5 	bl	8018788 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	2220      	movs	r2, #32
 80185c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	2200      	movs	r2, #0
 80185ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80185ce:	2303      	movs	r3, #3
 80185d0:	e00f      	b.n	80185f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	69da      	ldr	r2, [r3, #28]
 80185d8:	68bb      	ldr	r3, [r7, #8]
 80185da:	4013      	ands	r3, r2
 80185dc:	68ba      	ldr	r2, [r7, #8]
 80185de:	429a      	cmp	r2, r3
 80185e0:	bf0c      	ite	eq
 80185e2:	2301      	moveq	r3, #1
 80185e4:	2300      	movne	r3, #0
 80185e6:	b2db      	uxtb	r3, r3
 80185e8:	461a      	mov	r2, r3
 80185ea:	79fb      	ldrb	r3, [r7, #7]
 80185ec:	429a      	cmp	r2, r3
 80185ee:	d0a0      	beq.n	8018532 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80185f0:	2300      	movs	r3, #0
}
 80185f2:	4618      	mov	r0, r3
 80185f4:	3710      	adds	r7, #16
 80185f6:	46bd      	mov	sp, r7
 80185f8:	bd80      	pop	{r7, pc}
	...

080185fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80185fc:	b480      	push	{r7}
 80185fe:	b097      	sub	sp, #92	@ 0x5c
 8018600:	af00      	add	r7, sp, #0
 8018602:	60f8      	str	r0, [r7, #12]
 8018604:	60b9      	str	r1, [r7, #8]
 8018606:	4613      	mov	r3, r2
 8018608:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	68ba      	ldr	r2, [r7, #8]
 801860e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	88fa      	ldrh	r2, [r7, #6]
 8018614:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	88fa      	ldrh	r2, [r7, #6]
 801861c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	2200      	movs	r2, #0
 8018624:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8018626:	68fb      	ldr	r3, [r7, #12]
 8018628:	689b      	ldr	r3, [r3, #8]
 801862a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801862e:	d10e      	bne.n	801864e <UART_Start_Receive_IT+0x52>
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	691b      	ldr	r3, [r3, #16]
 8018634:	2b00      	cmp	r3, #0
 8018636:	d105      	bne.n	8018644 <UART_Start_Receive_IT+0x48>
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801863e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8018642:	e02d      	b.n	80186a0 <UART_Start_Receive_IT+0xa4>
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	22ff      	movs	r2, #255	@ 0xff
 8018648:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801864c:	e028      	b.n	80186a0 <UART_Start_Receive_IT+0xa4>
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	689b      	ldr	r3, [r3, #8]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d10d      	bne.n	8018672 <UART_Start_Receive_IT+0x76>
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	691b      	ldr	r3, [r3, #16]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d104      	bne.n	8018668 <UART_Start_Receive_IT+0x6c>
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	22ff      	movs	r2, #255	@ 0xff
 8018662:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8018666:	e01b      	b.n	80186a0 <UART_Start_Receive_IT+0xa4>
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	227f      	movs	r2, #127	@ 0x7f
 801866c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8018670:	e016      	b.n	80186a0 <UART_Start_Receive_IT+0xa4>
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	689b      	ldr	r3, [r3, #8]
 8018676:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801867a:	d10d      	bne.n	8018698 <UART_Start_Receive_IT+0x9c>
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	691b      	ldr	r3, [r3, #16]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d104      	bne.n	801868e <UART_Start_Receive_IT+0x92>
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	227f      	movs	r2, #127	@ 0x7f
 8018688:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801868c:	e008      	b.n	80186a0 <UART_Start_Receive_IT+0xa4>
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	223f      	movs	r2, #63	@ 0x3f
 8018692:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8018696:	e003      	b.n	80186a0 <UART_Start_Receive_IT+0xa4>
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	2200      	movs	r2, #0
 801869c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	2200      	movs	r2, #0
 80186a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	2222      	movs	r2, #34	@ 0x22
 80186ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	3308      	adds	r3, #8
 80186b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186ba:	e853 3f00 	ldrex	r3, [r3]
 80186be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80186c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186c2:	f043 0301 	orr.w	r3, r3, #1
 80186c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	3308      	adds	r3, #8
 80186ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80186d0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80186d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80186d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80186d8:	e841 2300 	strex	r3, r2, [r1]
 80186dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80186de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d1e5      	bne.n	80186b0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	689b      	ldr	r3, [r3, #8]
 80186e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80186ec:	d107      	bne.n	80186fe <UART_Start_Receive_IT+0x102>
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	691b      	ldr	r3, [r3, #16]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d103      	bne.n	80186fe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	4a21      	ldr	r2, [pc, #132]	@ (8018780 <UART_Start_Receive_IT+0x184>)
 80186fa:	669a      	str	r2, [r3, #104]	@ 0x68
 80186fc:	e002      	b.n	8018704 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	4a20      	ldr	r2, [pc, #128]	@ (8018784 <UART_Start_Receive_IT+0x188>)
 8018702:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	691b      	ldr	r3, [r3, #16]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d019      	beq.n	8018740 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018714:	e853 3f00 	ldrex	r3, [r3]
 8018718:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801871a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801871c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8018720:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	461a      	mov	r2, r3
 8018728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801872a:	637b      	str	r3, [r7, #52]	@ 0x34
 801872c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801872e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018730:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018732:	e841 2300 	strex	r3, r2, [r1]
 8018736:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8018738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801873a:	2b00      	cmp	r3, #0
 801873c:	d1e6      	bne.n	801870c <UART_Start_Receive_IT+0x110>
 801873e:	e018      	b.n	8018772 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018746:	697b      	ldr	r3, [r7, #20]
 8018748:	e853 3f00 	ldrex	r3, [r3]
 801874c:	613b      	str	r3, [r7, #16]
   return(result);
 801874e:	693b      	ldr	r3, [r7, #16]
 8018750:	f043 0320 	orr.w	r3, r3, #32
 8018754:	653b      	str	r3, [r7, #80]	@ 0x50
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	461a      	mov	r2, r3
 801875c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801875e:	623b      	str	r3, [r7, #32]
 8018760:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018762:	69f9      	ldr	r1, [r7, #28]
 8018764:	6a3a      	ldr	r2, [r7, #32]
 8018766:	e841 2300 	strex	r3, r2, [r1]
 801876a:	61bb      	str	r3, [r7, #24]
   return(result);
 801876c:	69bb      	ldr	r3, [r7, #24]
 801876e:	2b00      	cmp	r3, #0
 8018770:	d1e6      	bne.n	8018740 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8018772:	2300      	movs	r3, #0
}
 8018774:	4618      	mov	r0, r3
 8018776:	375c      	adds	r7, #92	@ 0x5c
 8018778:	46bd      	mov	sp, r7
 801877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801877e:	4770      	bx	lr
 8018780:	08018a8d 	.word	0x08018a8d
 8018784:	080188d1 	.word	0x080188d1

08018788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018788:	b480      	push	{r7}
 801878a:	b095      	sub	sp, #84	@ 0x54
 801878c:	af00      	add	r7, sp, #0
 801878e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018798:	e853 3f00 	ldrex	r3, [r3]
 801879c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80187a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	461a      	mov	r2, r3
 80187ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80187ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80187b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80187b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80187b6:	e841 2300 	strex	r3, r2, [r1]
 80187ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80187bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d1e6      	bne.n	8018790 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	3308      	adds	r3, #8
 80187c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187ca:	6a3b      	ldr	r3, [r7, #32]
 80187cc:	e853 3f00 	ldrex	r3, [r3]
 80187d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80187d2:	69fb      	ldr	r3, [r7, #28]
 80187d4:	f023 0301 	bic.w	r3, r3, #1
 80187d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	3308      	adds	r3, #8
 80187e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80187e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80187e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80187e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80187ea:	e841 2300 	strex	r3, r2, [r1]
 80187ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80187f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d1e5      	bne.n	80187c2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80187fa:	2b01      	cmp	r3, #1
 80187fc:	d118      	bne.n	8018830 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	e853 3f00 	ldrex	r3, [r3]
 801880a:	60bb      	str	r3, [r7, #8]
   return(result);
 801880c:	68bb      	ldr	r3, [r7, #8]
 801880e:	f023 0310 	bic.w	r3, r3, #16
 8018812:	647b      	str	r3, [r7, #68]	@ 0x44
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	461a      	mov	r2, r3
 801881a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801881c:	61bb      	str	r3, [r7, #24]
 801881e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018820:	6979      	ldr	r1, [r7, #20]
 8018822:	69ba      	ldr	r2, [r7, #24]
 8018824:	e841 2300 	strex	r3, r2, [r1]
 8018828:	613b      	str	r3, [r7, #16]
   return(result);
 801882a:	693b      	ldr	r3, [r7, #16]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d1e6      	bne.n	80187fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	2220      	movs	r2, #32
 8018834:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	2200      	movs	r2, #0
 801883c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	2200      	movs	r2, #0
 8018842:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8018844:	bf00      	nop
 8018846:	3754      	adds	r7, #84	@ 0x54
 8018848:	46bd      	mov	sp, r7
 801884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801884e:	4770      	bx	lr

08018850 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018850:	b580      	push	{r7, lr}
 8018852:	b084      	sub	sp, #16
 8018854:	af00      	add	r7, sp, #0
 8018856:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801885c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	2200      	movs	r2, #0
 8018862:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	2200      	movs	r2, #0
 801886a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801886e:	68f8      	ldr	r0, [r7, #12]
 8018870:	f7ff fa3e 	bl	8017cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018874:	bf00      	nop
 8018876:	3710      	adds	r7, #16
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}

0801887c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b088      	sub	sp, #32
 8018880:	af00      	add	r7, sp, #0
 8018882:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	e853 3f00 	ldrex	r3, [r3]
 8018890:	60bb      	str	r3, [r7, #8]
   return(result);
 8018892:	68bb      	ldr	r3, [r7, #8]
 8018894:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018898:	61fb      	str	r3, [r7, #28]
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	461a      	mov	r2, r3
 80188a0:	69fb      	ldr	r3, [r7, #28]
 80188a2:	61bb      	str	r3, [r7, #24]
 80188a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80188a6:	6979      	ldr	r1, [r7, #20]
 80188a8:	69ba      	ldr	r2, [r7, #24]
 80188aa:	e841 2300 	strex	r3, r2, [r1]
 80188ae:	613b      	str	r3, [r7, #16]
   return(result);
 80188b0:	693b      	ldr	r3, [r7, #16]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d1e6      	bne.n	8018884 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	2220      	movs	r2, #32
 80188ba:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	2200      	movs	r2, #0
 80188c0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80188c2:	6878      	ldr	r0, [r7, #4]
 80188c4:	f7ff fa0a 	bl	8017cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80188c8:	bf00      	nop
 80188ca:	3720      	adds	r7, #32
 80188cc:	46bd      	mov	sp, r7
 80188ce:	bd80      	pop	{r7, pc}

080188d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b09c      	sub	sp, #112	@ 0x70
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80188de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80188e8:	2b22      	cmp	r3, #34	@ 0x22
 80188ea:	f040 80be 	bne.w	8018a6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80188f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80188f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80188fc:	b2d9      	uxtb	r1, r3
 80188fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8018902:	b2da      	uxtb	r2, r3
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018908:	400a      	ands	r2, r1
 801890a:	b2d2      	uxtb	r2, r2
 801890c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018912:	1c5a      	adds	r2, r3, #1
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801891e:	b29b      	uxth	r3, r3
 8018920:	3b01      	subs	r3, #1
 8018922:	b29a      	uxth	r2, r3
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8018930:	b29b      	uxth	r3, r3
 8018932:	2b00      	cmp	r3, #0
 8018934:	f040 80a3 	bne.w	8018a7e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801893e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018940:	e853 3f00 	ldrex	r3, [r3]
 8018944:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8018946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018948:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801894c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	461a      	mov	r2, r3
 8018954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018956:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018958:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801895a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801895c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801895e:	e841 2300 	strex	r3, r2, [r1]
 8018962:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8018964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018966:	2b00      	cmp	r3, #0
 8018968:	d1e6      	bne.n	8018938 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	3308      	adds	r3, #8
 8018970:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018974:	e853 3f00 	ldrex	r3, [r3]
 8018978:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801897a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801897c:	f023 0301 	bic.w	r3, r3, #1
 8018980:	667b      	str	r3, [r7, #100]	@ 0x64
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	3308      	adds	r3, #8
 8018988:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801898a:	647a      	str	r2, [r7, #68]	@ 0x44
 801898c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801898e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018990:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018992:	e841 2300 	strex	r3, r2, [r1]
 8018996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801899a:	2b00      	cmp	r3, #0
 801899c:	d1e5      	bne.n	801896a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	2220      	movs	r2, #32
 80189a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	2200      	movs	r2, #0
 80189aa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	2200      	movs	r2, #0
 80189b0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	4a34      	ldr	r2, [pc, #208]	@ (8018a88 <UART_RxISR_8BIT+0x1b8>)
 80189b8:	4293      	cmp	r3, r2
 80189ba:	d01f      	beq.n	80189fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	685b      	ldr	r3, [r3, #4]
 80189c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d018      	beq.n	80189fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80189d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189d2:	e853 3f00 	ldrex	r3, [r3]
 80189d6:	623b      	str	r3, [r7, #32]
   return(result);
 80189d8:	6a3b      	ldr	r3, [r7, #32]
 80189da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80189de:	663b      	str	r3, [r7, #96]	@ 0x60
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	461a      	mov	r2, r3
 80189e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80189e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80189ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80189ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80189ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80189f0:	e841 2300 	strex	r3, r2, [r1]
 80189f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80189f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d1e6      	bne.n	80189ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018a00:	2b01      	cmp	r3, #1
 8018a02:	d12e      	bne.n	8018a62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	2200      	movs	r2, #0
 8018a08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018a10:	693b      	ldr	r3, [r7, #16]
 8018a12:	e853 3f00 	ldrex	r3, [r3]
 8018a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	f023 0310 	bic.w	r3, r3, #16
 8018a1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	461a      	mov	r2, r3
 8018a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018a28:	61fb      	str	r3, [r7, #28]
 8018a2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018a2c:	69b9      	ldr	r1, [r7, #24]
 8018a2e:	69fa      	ldr	r2, [r7, #28]
 8018a30:	e841 2300 	strex	r3, r2, [r1]
 8018a34:	617b      	str	r3, [r7, #20]
   return(result);
 8018a36:	697b      	ldr	r3, [r7, #20]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d1e6      	bne.n	8018a0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	69db      	ldr	r3, [r3, #28]
 8018a42:	f003 0310 	and.w	r3, r3, #16
 8018a46:	2b10      	cmp	r3, #16
 8018a48:	d103      	bne.n	8018a52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	2210      	movs	r2, #16
 8018a50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8018a58:	4619      	mov	r1, r3
 8018a5a:	6878      	ldr	r0, [r7, #4]
 8018a5c:	f7ff f952 	bl	8017d04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018a60:	e00d      	b.n	8018a7e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8018a62:	6878      	ldr	r0, [r7, #4]
 8018a64:	f7ea f930 	bl	8002cc8 <HAL_UART_RxCpltCallback>
}
 8018a68:	e009      	b.n	8018a7e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	8b1b      	ldrh	r3, [r3, #24]
 8018a70:	b29a      	uxth	r2, r3
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	f042 0208 	orr.w	r2, r2, #8
 8018a7a:	b292      	uxth	r2, r2
 8018a7c:	831a      	strh	r2, [r3, #24]
}
 8018a7e:	bf00      	nop
 8018a80:	3770      	adds	r7, #112	@ 0x70
 8018a82:	46bd      	mov	sp, r7
 8018a84:	bd80      	pop	{r7, pc}
 8018a86:	bf00      	nop
 8018a88:	40008000 	.word	0x40008000

08018a8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b09c      	sub	sp, #112	@ 0x70
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018a9a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018aa4:	2b22      	cmp	r3, #34	@ 0x22
 8018aa6:	f040 80be 	bne.w	8018c26 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018ab0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8018aba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8018abe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8018ac2:	4013      	ands	r3, r2
 8018ac4:	b29a      	uxth	r2, r3
 8018ac6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018ac8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ace:	1c9a      	adds	r2, r3, #2
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8018ada:	b29b      	uxth	r3, r3
 8018adc:	3b01      	subs	r3, #1
 8018ade:	b29a      	uxth	r2, r3
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8018aec:	b29b      	uxth	r3, r3
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	f040 80a3 	bne.w	8018c3a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018afc:	e853 3f00 	ldrex	r3, [r3]
 8018b00:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8018b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018b04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8018b08:	667b      	str	r3, [r7, #100]	@ 0x64
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	461a      	mov	r2, r3
 8018b10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018b12:	657b      	str	r3, [r7, #84]	@ 0x54
 8018b14:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8018b18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018b1a:	e841 2300 	strex	r3, r2, [r1]
 8018b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8018b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d1e6      	bne.n	8018af4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	3308      	adds	r3, #8
 8018b2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b30:	e853 3f00 	ldrex	r3, [r3]
 8018b34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8018b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b38:	f023 0301 	bic.w	r3, r3, #1
 8018b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	3308      	adds	r3, #8
 8018b44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8018b46:	643a      	str	r2, [r7, #64]	@ 0x40
 8018b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018b4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018b4e:	e841 2300 	strex	r3, r2, [r1]
 8018b52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8018b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d1e5      	bne.n	8018b26 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2220      	movs	r2, #32
 8018b5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	2200      	movs	r2, #0
 8018b66:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	2200      	movs	r2, #0
 8018b6c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	4a34      	ldr	r2, [pc, #208]	@ (8018c44 <UART_RxISR_16BIT+0x1b8>)
 8018b74:	4293      	cmp	r3, r2
 8018b76:	d01f      	beq.n	8018bb8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	685b      	ldr	r3, [r3, #4]
 8018b7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d018      	beq.n	8018bb8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018b8c:	6a3b      	ldr	r3, [r7, #32]
 8018b8e:	e853 3f00 	ldrex	r3, [r3]
 8018b92:	61fb      	str	r3, [r7, #28]
   return(result);
 8018b94:	69fb      	ldr	r3, [r7, #28]
 8018b96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8018b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	461a      	mov	r2, r3
 8018ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018ba6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018ba8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018bac:	e841 2300 	strex	r3, r2, [r1]
 8018bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8018bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d1e6      	bne.n	8018b86 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018bbc:	2b01      	cmp	r3, #1
 8018bbe:	d12e      	bne.n	8018c1e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	2200      	movs	r2, #0
 8018bc4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018bcc:	68fb      	ldr	r3, [r7, #12]
 8018bce:	e853 3f00 	ldrex	r3, [r3]
 8018bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8018bd4:	68bb      	ldr	r3, [r7, #8]
 8018bd6:	f023 0310 	bic.w	r3, r3, #16
 8018bda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	461a      	mov	r2, r3
 8018be2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018be4:	61bb      	str	r3, [r7, #24]
 8018be6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018be8:	6979      	ldr	r1, [r7, #20]
 8018bea:	69ba      	ldr	r2, [r7, #24]
 8018bec:	e841 2300 	strex	r3, r2, [r1]
 8018bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8018bf2:	693b      	ldr	r3, [r7, #16]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d1e6      	bne.n	8018bc6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	69db      	ldr	r3, [r3, #28]
 8018bfe:	f003 0310 	and.w	r3, r3, #16
 8018c02:	2b10      	cmp	r3, #16
 8018c04:	d103      	bne.n	8018c0e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	2210      	movs	r2, #16
 8018c0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8018c14:	4619      	mov	r1, r3
 8018c16:	6878      	ldr	r0, [r7, #4]
 8018c18:	f7ff f874 	bl	8017d04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018c1c:	e00d      	b.n	8018c3a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8018c1e:	6878      	ldr	r0, [r7, #4]
 8018c20:	f7ea f852 	bl	8002cc8 <HAL_UART_RxCpltCallback>
}
 8018c24:	e009      	b.n	8018c3a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	8b1b      	ldrh	r3, [r3, #24]
 8018c2c:	b29a      	uxth	r2, r3
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	f042 0208 	orr.w	r2, r2, #8
 8018c36:	b292      	uxth	r2, r2
 8018c38:	831a      	strh	r2, [r3, #24]
}
 8018c3a:	bf00      	nop
 8018c3c:	3770      	adds	r7, #112	@ 0x70
 8018c3e:	46bd      	mov	sp, r7
 8018c40:	bd80      	pop	{r7, pc}
 8018c42:	bf00      	nop
 8018c44:	40008000 	.word	0x40008000

08018c48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018c48:	b480      	push	{r7}
 8018c4a:	b083      	sub	sp, #12
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018c50:	bf00      	nop
 8018c52:	370c      	adds	r7, #12
 8018c54:	46bd      	mov	sp, r7
 8018c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c5a:	4770      	bx	lr

08018c5c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8018c5c:	b480      	push	{r7}
 8018c5e:	b085      	sub	sp, #20
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	4603      	mov	r3, r0
 8018c64:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8018c66:	2300      	movs	r3, #0
 8018c68:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8018c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018c6e:	2b84      	cmp	r3, #132	@ 0x84
 8018c70:	d005      	beq.n	8018c7e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8018c72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	4413      	add	r3, r2
 8018c7a:	3303      	adds	r3, #3
 8018c7c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8018c7e:	68fb      	ldr	r3, [r7, #12]
}
 8018c80:	4618      	mov	r0, r3
 8018c82:	3714      	adds	r7, #20
 8018c84:	46bd      	mov	sp, r7
 8018c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8a:	4770      	bx	lr

08018c8c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8018c90:	f001 fb82 	bl	801a398 <vTaskStartScheduler>
  
  return osOK;
 8018c94:	2300      	movs	r3, #0
}
 8018c96:	4618      	mov	r0, r3
 8018c98:	bd80      	pop	{r7, pc}

08018c9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8018c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c9c:	b089      	sub	sp, #36	@ 0x24
 8018c9e:	af04      	add	r7, sp, #16
 8018ca0:	6078      	str	r0, [r7, #4]
 8018ca2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	695b      	ldr	r3, [r3, #20]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d020      	beq.n	8018cee <osThreadCreate+0x54>
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	699b      	ldr	r3, [r3, #24]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d01c      	beq.n	8018cee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	685c      	ldr	r4, [r3, #4]
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	691e      	ldr	r6, [r3, #16]
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	f7ff ffc8 	bl	8018c5c <makeFreeRtosPriority>
 8018ccc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	695b      	ldr	r3, [r3, #20]
 8018cd2:	687a      	ldr	r2, [r7, #4]
 8018cd4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018cd6:	9202      	str	r2, [sp, #8]
 8018cd8:	9301      	str	r3, [sp, #4]
 8018cda:	9100      	str	r1, [sp, #0]
 8018cdc:	683b      	ldr	r3, [r7, #0]
 8018cde:	4632      	mov	r2, r6
 8018ce0:	4629      	mov	r1, r5
 8018ce2:	4620      	mov	r0, r4
 8018ce4:	f001 f972 	bl	8019fcc <xTaskCreateStatic>
 8018ce8:	4603      	mov	r3, r0
 8018cea:	60fb      	str	r3, [r7, #12]
 8018cec:	e01c      	b.n	8018d28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	685c      	ldr	r4, [r3, #4]
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018cfa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018d02:	4618      	mov	r0, r3
 8018d04:	f7ff ffaa 	bl	8018c5c <makeFreeRtosPriority>
 8018d08:	4602      	mov	r2, r0
 8018d0a:	f107 030c 	add.w	r3, r7, #12
 8018d0e:	9301      	str	r3, [sp, #4]
 8018d10:	9200      	str	r2, [sp, #0]
 8018d12:	683b      	ldr	r3, [r7, #0]
 8018d14:	4632      	mov	r2, r6
 8018d16:	4629      	mov	r1, r5
 8018d18:	4620      	mov	r0, r4
 8018d1a:	f001 f9b7 	bl	801a08c <xTaskCreate>
 8018d1e:	4603      	mov	r3, r0
 8018d20:	2b01      	cmp	r3, #1
 8018d22:	d001      	beq.n	8018d28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8018d24:	2300      	movs	r3, #0
 8018d26:	e000      	b.n	8018d2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8018d28:	68fb      	ldr	r3, [r7, #12]
}
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	3714      	adds	r7, #20
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018d32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8018d32:	b580      	push	{r7, lr}
 8018d34:	b084      	sub	sp, #16
 8018d36:	af00      	add	r7, sp, #0
 8018d38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d001      	beq.n	8018d48 <osDelay+0x16>
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	e000      	b.n	8018d4a <osDelay+0x18>
 8018d48:	2301      	movs	r3, #1
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f001 faee 	bl	801a32c <vTaskDelay>
  
  return osOK;
 8018d50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8018d52:	4618      	mov	r0, r3
 8018d54:	3710      	adds	r7, #16
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bd80      	pop	{r7, pc}

08018d5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018d5a:	b480      	push	{r7}
 8018d5c:	b083      	sub	sp, #12
 8018d5e:	af00      	add	r7, sp, #0
 8018d60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	f103 0208 	add.w	r2, r3, #8
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8018d72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	f103 0208 	add.w	r2, r3, #8
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	f103 0208 	add.w	r2, r3, #8
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018d8e:	bf00      	nop
 8018d90:	370c      	adds	r7, #12
 8018d92:	46bd      	mov	sp, r7
 8018d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d98:	4770      	bx	lr

08018d9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018d9a:	b480      	push	{r7}
 8018d9c:	b083      	sub	sp, #12
 8018d9e:	af00      	add	r7, sp, #0
 8018da0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	2200      	movs	r2, #0
 8018da6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018da8:	bf00      	nop
 8018daa:	370c      	adds	r7, #12
 8018dac:	46bd      	mov	sp, r7
 8018dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db2:	4770      	bx	lr

08018db4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018db4:	b480      	push	{r7}
 8018db6:	b085      	sub	sp, #20
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
 8018dbc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	685b      	ldr	r3, [r3, #4]
 8018dc2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018dc4:	683b      	ldr	r3, [r7, #0]
 8018dc6:	68fa      	ldr	r2, [r7, #12]
 8018dc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	689a      	ldr	r2, [r3, #8]
 8018dce:	683b      	ldr	r3, [r7, #0]
 8018dd0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	689b      	ldr	r3, [r3, #8]
 8018dd6:	683a      	ldr	r2, [r7, #0]
 8018dd8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	683a      	ldr	r2, [r7, #0]
 8018dde:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018de0:	683b      	ldr	r3, [r7, #0]
 8018de2:	687a      	ldr	r2, [r7, #4]
 8018de4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	1c5a      	adds	r2, r3, #1
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	601a      	str	r2, [r3, #0]
}
 8018df0:	bf00      	nop
 8018df2:	3714      	adds	r7, #20
 8018df4:	46bd      	mov	sp, r7
 8018df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfa:	4770      	bx	lr

08018dfc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018dfc:	b480      	push	{r7}
 8018dfe:	b085      	sub	sp, #20
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
 8018e04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018e06:	683b      	ldr	r3, [r7, #0]
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018e0c:	68bb      	ldr	r3, [r7, #8]
 8018e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e12:	d103      	bne.n	8018e1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	691b      	ldr	r3, [r3, #16]
 8018e18:	60fb      	str	r3, [r7, #12]
 8018e1a:	e00c      	b.n	8018e36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	3308      	adds	r3, #8
 8018e20:	60fb      	str	r3, [r7, #12]
 8018e22:	e002      	b.n	8018e2a <vListInsert+0x2e>
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	685b      	ldr	r3, [r3, #4]
 8018e28:	60fb      	str	r3, [r7, #12]
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	685b      	ldr	r3, [r3, #4]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	68ba      	ldr	r2, [r7, #8]
 8018e32:	429a      	cmp	r2, r3
 8018e34:	d2f6      	bcs.n	8018e24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	685a      	ldr	r2, [r3, #4]
 8018e3a:	683b      	ldr	r3, [r7, #0]
 8018e3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018e3e:	683b      	ldr	r3, [r7, #0]
 8018e40:	685b      	ldr	r3, [r3, #4]
 8018e42:	683a      	ldr	r2, [r7, #0]
 8018e44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018e46:	683b      	ldr	r3, [r7, #0]
 8018e48:	68fa      	ldr	r2, [r7, #12]
 8018e4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	683a      	ldr	r2, [r7, #0]
 8018e50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018e52:	683b      	ldr	r3, [r7, #0]
 8018e54:	687a      	ldr	r2, [r7, #4]
 8018e56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	1c5a      	adds	r2, r3, #1
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	601a      	str	r2, [r3, #0]
}
 8018e62:	bf00      	nop
 8018e64:	3714      	adds	r7, #20
 8018e66:	46bd      	mov	sp, r7
 8018e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e6c:	4770      	bx	lr

08018e6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018e6e:	b480      	push	{r7}
 8018e70:	b085      	sub	sp, #20
 8018e72:	af00      	add	r7, sp, #0
 8018e74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	691b      	ldr	r3, [r3, #16]
 8018e7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	685b      	ldr	r3, [r3, #4]
 8018e80:	687a      	ldr	r2, [r7, #4]
 8018e82:	6892      	ldr	r2, [r2, #8]
 8018e84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	689b      	ldr	r3, [r3, #8]
 8018e8a:	687a      	ldr	r2, [r7, #4]
 8018e8c:	6852      	ldr	r2, [r2, #4]
 8018e8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	685b      	ldr	r3, [r3, #4]
 8018e94:	687a      	ldr	r2, [r7, #4]
 8018e96:	429a      	cmp	r2, r3
 8018e98:	d103      	bne.n	8018ea2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	689a      	ldr	r2, [r3, #8]
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	2200      	movs	r2, #0
 8018ea6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	1e5a      	subs	r2, r3, #1
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	681b      	ldr	r3, [r3, #0]
}
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	3714      	adds	r7, #20
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec0:	4770      	bx	lr
	...

08018ec4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018ec4:	b580      	push	{r7, lr}
 8018ec6:	b084      	sub	sp, #16
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	6078      	str	r0, [r7, #4]
 8018ecc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d10b      	bne.n	8018ef0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018edc:	f383 8811 	msr	BASEPRI, r3
 8018ee0:	f3bf 8f6f 	isb	sy
 8018ee4:	f3bf 8f4f 	dsb	sy
 8018ee8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8018eea:	bf00      	nop
 8018eec:	bf00      	nop
 8018eee:	e7fd      	b.n	8018eec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8018ef0:	f002 fe6a 	bl	801bbc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018ef4:	68fb      	ldr	r3, [r7, #12]
 8018ef6:	681a      	ldr	r2, [r3, #0]
 8018ef8:	68fb      	ldr	r3, [r7, #12]
 8018efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018efc:	68f9      	ldr	r1, [r7, #12]
 8018efe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8018f00:	fb01 f303 	mul.w	r3, r1, r3
 8018f04:	441a      	add	r2, r3
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	681a      	ldr	r2, [r3, #0]
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	681a      	ldr	r2, [r3, #0]
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018f20:	3b01      	subs	r3, #1
 8018f22:	68f9      	ldr	r1, [r7, #12]
 8018f24:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8018f26:	fb01 f303 	mul.w	r3, r1, r3
 8018f2a:	441a      	add	r2, r3
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	22ff      	movs	r2, #255	@ 0xff
 8018f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	22ff      	movs	r2, #255	@ 0xff
 8018f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8018f40:	683b      	ldr	r3, [r7, #0]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d114      	bne.n	8018f70 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	691b      	ldr	r3, [r3, #16]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d01a      	beq.n	8018f84 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	3310      	adds	r3, #16
 8018f52:	4618      	mov	r0, r3
 8018f54:	f001 fcbc 	bl	801a8d0 <xTaskRemoveFromEventList>
 8018f58:	4603      	mov	r3, r0
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d012      	beq.n	8018f84 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8018f94 <xQueueGenericReset+0xd0>)
 8018f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018f64:	601a      	str	r2, [r3, #0]
 8018f66:	f3bf 8f4f 	dsb	sy
 8018f6a:	f3bf 8f6f 	isb	sy
 8018f6e:	e009      	b.n	8018f84 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	3310      	adds	r3, #16
 8018f74:	4618      	mov	r0, r3
 8018f76:	f7ff fef0 	bl	8018d5a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	3324      	adds	r3, #36	@ 0x24
 8018f7e:	4618      	mov	r0, r3
 8018f80:	f7ff feeb 	bl	8018d5a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018f84:	f002 fe52 	bl	801bc2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018f88:	2301      	movs	r3, #1
}
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	3710      	adds	r7, #16
 8018f8e:	46bd      	mov	sp, r7
 8018f90:	bd80      	pop	{r7, pc}
 8018f92:	bf00      	nop
 8018f94:	e000ed04 	.word	0xe000ed04

08018f98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b08e      	sub	sp, #56	@ 0x38
 8018f9c:	af02      	add	r7, sp, #8
 8018f9e:	60f8      	str	r0, [r7, #12]
 8018fa0:	60b9      	str	r1, [r7, #8]
 8018fa2:	607a      	str	r2, [r7, #4]
 8018fa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d10b      	bne.n	8018fc4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8018fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fb0:	f383 8811 	msr	BASEPRI, r3
 8018fb4:	f3bf 8f6f 	isb	sy
 8018fb8:	f3bf 8f4f 	dsb	sy
 8018fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8018fbe:	bf00      	nop
 8018fc0:	bf00      	nop
 8018fc2:	e7fd      	b.n	8018fc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018fc4:	683b      	ldr	r3, [r7, #0]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d10b      	bne.n	8018fe2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8018fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fce:	f383 8811 	msr	BASEPRI, r3
 8018fd2:	f3bf 8f6f 	isb	sy
 8018fd6:	f3bf 8f4f 	dsb	sy
 8018fda:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8018fdc:	bf00      	nop
 8018fde:	bf00      	nop
 8018fe0:	e7fd      	b.n	8018fde <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d002      	beq.n	8018fee <xQueueGenericCreateStatic+0x56>
 8018fe8:	68bb      	ldr	r3, [r7, #8]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d001      	beq.n	8018ff2 <xQueueGenericCreateStatic+0x5a>
 8018fee:	2301      	movs	r3, #1
 8018ff0:	e000      	b.n	8018ff4 <xQueueGenericCreateStatic+0x5c>
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d10b      	bne.n	8019010 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8018ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ffc:	f383 8811 	msr	BASEPRI, r3
 8019000:	f3bf 8f6f 	isb	sy
 8019004:	f3bf 8f4f 	dsb	sy
 8019008:	623b      	str	r3, [r7, #32]
}
 801900a:	bf00      	nop
 801900c:	bf00      	nop
 801900e:	e7fd      	b.n	801900c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d102      	bne.n	801901c <xQueueGenericCreateStatic+0x84>
 8019016:	68bb      	ldr	r3, [r7, #8]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d101      	bne.n	8019020 <xQueueGenericCreateStatic+0x88>
 801901c:	2301      	movs	r3, #1
 801901e:	e000      	b.n	8019022 <xQueueGenericCreateStatic+0x8a>
 8019020:	2300      	movs	r3, #0
 8019022:	2b00      	cmp	r3, #0
 8019024:	d10b      	bne.n	801903e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8019026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801902a:	f383 8811 	msr	BASEPRI, r3
 801902e:	f3bf 8f6f 	isb	sy
 8019032:	f3bf 8f4f 	dsb	sy
 8019036:	61fb      	str	r3, [r7, #28]
}
 8019038:	bf00      	nop
 801903a:	bf00      	nop
 801903c:	e7fd      	b.n	801903a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801903e:	2348      	movs	r3, #72	@ 0x48
 8019040:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019042:	697b      	ldr	r3, [r7, #20]
 8019044:	2b48      	cmp	r3, #72	@ 0x48
 8019046:	d00b      	beq.n	8019060 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8019048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801904c:	f383 8811 	msr	BASEPRI, r3
 8019050:	f3bf 8f6f 	isb	sy
 8019054:	f3bf 8f4f 	dsb	sy
 8019058:	61bb      	str	r3, [r7, #24]
}
 801905a:	bf00      	nop
 801905c:	bf00      	nop
 801905e:	e7fd      	b.n	801905c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019060:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019062:	683b      	ldr	r3, [r7, #0]
 8019064:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8019066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019068:	2b00      	cmp	r3, #0
 801906a:	d00d      	beq.n	8019088 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801906c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801906e:	2201      	movs	r2, #1
 8019070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019074:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8019078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801907a:	9300      	str	r3, [sp, #0]
 801907c:	4613      	mov	r3, r2
 801907e:	687a      	ldr	r2, [r7, #4]
 8019080:	68b9      	ldr	r1, [r7, #8]
 8019082:	68f8      	ldr	r0, [r7, #12]
 8019084:	f000 f840 	bl	8019108 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801908a:	4618      	mov	r0, r3
 801908c:	3730      	adds	r7, #48	@ 0x30
 801908e:	46bd      	mov	sp, r7
 8019090:	bd80      	pop	{r7, pc}

08019092 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8019092:	b580      	push	{r7, lr}
 8019094:	b08a      	sub	sp, #40	@ 0x28
 8019096:	af02      	add	r7, sp, #8
 8019098:	60f8      	str	r0, [r7, #12]
 801909a:	60b9      	str	r1, [r7, #8]
 801909c:	4613      	mov	r3, r2
 801909e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d10b      	bne.n	80190be <xQueueGenericCreate+0x2c>
	__asm volatile
 80190a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190aa:	f383 8811 	msr	BASEPRI, r3
 80190ae:	f3bf 8f6f 	isb	sy
 80190b2:	f3bf 8f4f 	dsb	sy
 80190b6:	613b      	str	r3, [r7, #16]
}
 80190b8:	bf00      	nop
 80190ba:	bf00      	nop
 80190bc:	e7fd      	b.n	80190ba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	68ba      	ldr	r2, [r7, #8]
 80190c2:	fb02 f303 	mul.w	r3, r2, r3
 80190c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80190c8:	69fb      	ldr	r3, [r7, #28]
 80190ca:	3348      	adds	r3, #72	@ 0x48
 80190cc:	4618      	mov	r0, r3
 80190ce:	f002 fe9d 	bl	801be0c <pvPortMalloc>
 80190d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80190d4:	69bb      	ldr	r3, [r7, #24]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d011      	beq.n	80190fe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80190da:	69bb      	ldr	r3, [r7, #24]
 80190dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80190de:	697b      	ldr	r3, [r7, #20]
 80190e0:	3348      	adds	r3, #72	@ 0x48
 80190e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80190e4:	69bb      	ldr	r3, [r7, #24]
 80190e6:	2200      	movs	r2, #0
 80190e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80190ec:	79fa      	ldrb	r2, [r7, #7]
 80190ee:	69bb      	ldr	r3, [r7, #24]
 80190f0:	9300      	str	r3, [sp, #0]
 80190f2:	4613      	mov	r3, r2
 80190f4:	697a      	ldr	r2, [r7, #20]
 80190f6:	68b9      	ldr	r1, [r7, #8]
 80190f8:	68f8      	ldr	r0, [r7, #12]
 80190fa:	f000 f805 	bl	8019108 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80190fe:	69bb      	ldr	r3, [r7, #24]
	}
 8019100:	4618      	mov	r0, r3
 8019102:	3720      	adds	r7, #32
 8019104:	46bd      	mov	sp, r7
 8019106:	bd80      	pop	{r7, pc}

08019108 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019108:	b580      	push	{r7, lr}
 801910a:	b084      	sub	sp, #16
 801910c:	af00      	add	r7, sp, #0
 801910e:	60f8      	str	r0, [r7, #12]
 8019110:	60b9      	str	r1, [r7, #8]
 8019112:	607a      	str	r2, [r7, #4]
 8019114:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8019116:	68bb      	ldr	r3, [r7, #8]
 8019118:	2b00      	cmp	r3, #0
 801911a:	d103      	bne.n	8019124 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801911c:	69bb      	ldr	r3, [r7, #24]
 801911e:	69ba      	ldr	r2, [r7, #24]
 8019120:	601a      	str	r2, [r3, #0]
 8019122:	e002      	b.n	801912a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019124:	69bb      	ldr	r3, [r7, #24]
 8019126:	687a      	ldr	r2, [r7, #4]
 8019128:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801912a:	69bb      	ldr	r3, [r7, #24]
 801912c:	68fa      	ldr	r2, [r7, #12]
 801912e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019130:	69bb      	ldr	r3, [r7, #24]
 8019132:	68ba      	ldr	r2, [r7, #8]
 8019134:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019136:	2101      	movs	r1, #1
 8019138:	69b8      	ldr	r0, [r7, #24]
 801913a:	f7ff fec3 	bl	8018ec4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801913e:	bf00      	nop
 8019140:	3710      	adds	r7, #16
 8019142:	46bd      	mov	sp, r7
 8019144:	bd80      	pop	{r7, pc}
	...

08019148 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b08e      	sub	sp, #56	@ 0x38
 801914c:	af00      	add	r7, sp, #0
 801914e:	60f8      	str	r0, [r7, #12]
 8019150:	60b9      	str	r1, [r7, #8]
 8019152:	607a      	str	r2, [r7, #4]
 8019154:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8019156:	2300      	movs	r3, #0
 8019158:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801915e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019160:	2b00      	cmp	r3, #0
 8019162:	d10b      	bne.n	801917c <xQueueGenericSend+0x34>
	__asm volatile
 8019164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019168:	f383 8811 	msr	BASEPRI, r3
 801916c:	f3bf 8f6f 	isb	sy
 8019170:	f3bf 8f4f 	dsb	sy
 8019174:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8019176:	bf00      	nop
 8019178:	bf00      	nop
 801917a:	e7fd      	b.n	8019178 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801917c:	68bb      	ldr	r3, [r7, #8]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d103      	bne.n	801918a <xQueueGenericSend+0x42>
 8019182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019186:	2b00      	cmp	r3, #0
 8019188:	d101      	bne.n	801918e <xQueueGenericSend+0x46>
 801918a:	2301      	movs	r3, #1
 801918c:	e000      	b.n	8019190 <xQueueGenericSend+0x48>
 801918e:	2300      	movs	r3, #0
 8019190:	2b00      	cmp	r3, #0
 8019192:	d10b      	bne.n	80191ac <xQueueGenericSend+0x64>
	__asm volatile
 8019194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019198:	f383 8811 	msr	BASEPRI, r3
 801919c:	f3bf 8f6f 	isb	sy
 80191a0:	f3bf 8f4f 	dsb	sy
 80191a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80191a6:	bf00      	nop
 80191a8:	bf00      	nop
 80191aa:	e7fd      	b.n	80191a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80191ac:	683b      	ldr	r3, [r7, #0]
 80191ae:	2b02      	cmp	r3, #2
 80191b0:	d103      	bne.n	80191ba <xQueueGenericSend+0x72>
 80191b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80191b6:	2b01      	cmp	r3, #1
 80191b8:	d101      	bne.n	80191be <xQueueGenericSend+0x76>
 80191ba:	2301      	movs	r3, #1
 80191bc:	e000      	b.n	80191c0 <xQueueGenericSend+0x78>
 80191be:	2300      	movs	r3, #0
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d10b      	bne.n	80191dc <xQueueGenericSend+0x94>
	__asm volatile
 80191c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191c8:	f383 8811 	msr	BASEPRI, r3
 80191cc:	f3bf 8f6f 	isb	sy
 80191d0:	f3bf 8f4f 	dsb	sy
 80191d4:	623b      	str	r3, [r7, #32]
}
 80191d6:	bf00      	nop
 80191d8:	bf00      	nop
 80191da:	e7fd      	b.n	80191d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80191dc:	f001 fd4e 	bl	801ac7c <xTaskGetSchedulerState>
 80191e0:	4603      	mov	r3, r0
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d102      	bne.n	80191ec <xQueueGenericSend+0xa4>
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d101      	bne.n	80191f0 <xQueueGenericSend+0xa8>
 80191ec:	2301      	movs	r3, #1
 80191ee:	e000      	b.n	80191f2 <xQueueGenericSend+0xaa>
 80191f0:	2300      	movs	r3, #0
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d10b      	bne.n	801920e <xQueueGenericSend+0xc6>
	__asm volatile
 80191f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191fa:	f383 8811 	msr	BASEPRI, r3
 80191fe:	f3bf 8f6f 	isb	sy
 8019202:	f3bf 8f4f 	dsb	sy
 8019206:	61fb      	str	r3, [r7, #28]
}
 8019208:	bf00      	nop
 801920a:	bf00      	nop
 801920c:	e7fd      	b.n	801920a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801920e:	f002 fcdb 	bl	801bbc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801921a:	429a      	cmp	r2, r3
 801921c:	d302      	bcc.n	8019224 <xQueueGenericSend+0xdc>
 801921e:	683b      	ldr	r3, [r7, #0]
 8019220:	2b02      	cmp	r3, #2
 8019222:	d129      	bne.n	8019278 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019224:	683a      	ldr	r2, [r7, #0]
 8019226:	68b9      	ldr	r1, [r7, #8]
 8019228:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801922a:	f000 fa0f 	bl	801964c <prvCopyDataToQueue>
 801922e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019234:	2b00      	cmp	r3, #0
 8019236:	d010      	beq.n	801925a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801923a:	3324      	adds	r3, #36	@ 0x24
 801923c:	4618      	mov	r0, r3
 801923e:	f001 fb47 	bl	801a8d0 <xTaskRemoveFromEventList>
 8019242:	4603      	mov	r3, r0
 8019244:	2b00      	cmp	r3, #0
 8019246:	d013      	beq.n	8019270 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019248:	4b3f      	ldr	r3, [pc, #252]	@ (8019348 <xQueueGenericSend+0x200>)
 801924a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801924e:	601a      	str	r2, [r3, #0]
 8019250:	f3bf 8f4f 	dsb	sy
 8019254:	f3bf 8f6f 	isb	sy
 8019258:	e00a      	b.n	8019270 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801925a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801925c:	2b00      	cmp	r3, #0
 801925e:	d007      	beq.n	8019270 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8019260:	4b39      	ldr	r3, [pc, #228]	@ (8019348 <xQueueGenericSend+0x200>)
 8019262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019266:	601a      	str	r2, [r3, #0]
 8019268:	f3bf 8f4f 	dsb	sy
 801926c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019270:	f002 fcdc 	bl	801bc2c <vPortExitCritical>
				return pdPASS;
 8019274:	2301      	movs	r3, #1
 8019276:	e063      	b.n	8019340 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d103      	bne.n	8019286 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801927e:	f002 fcd5 	bl	801bc2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8019282:	2300      	movs	r3, #0
 8019284:	e05c      	b.n	8019340 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019288:	2b00      	cmp	r3, #0
 801928a:	d106      	bne.n	801929a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801928c:	f107 0314 	add.w	r3, r7, #20
 8019290:	4618      	mov	r0, r3
 8019292:	f001 fb81 	bl	801a998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019296:	2301      	movs	r3, #1
 8019298:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801929a:	f002 fcc7 	bl	801bc2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801929e:	f001 f8eb 	bl	801a478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80192a2:	f002 fc91 	bl	801bbc8 <vPortEnterCritical>
 80192a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80192ac:	b25b      	sxtb	r3, r3
 80192ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192b2:	d103      	bne.n	80192bc <xQueueGenericSend+0x174>
 80192b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192b6:	2200      	movs	r2, #0
 80192b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80192bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80192c2:	b25b      	sxtb	r3, r3
 80192c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192c8:	d103      	bne.n	80192d2 <xQueueGenericSend+0x18a>
 80192ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192cc:	2200      	movs	r2, #0
 80192ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80192d2:	f002 fcab 	bl	801bc2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80192d6:	1d3a      	adds	r2, r7, #4
 80192d8:	f107 0314 	add.w	r3, r7, #20
 80192dc:	4611      	mov	r1, r2
 80192de:	4618      	mov	r0, r3
 80192e0:	f001 fb70 	bl	801a9c4 <xTaskCheckForTimeOut>
 80192e4:	4603      	mov	r3, r0
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d124      	bne.n	8019334 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80192ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80192ec:	f000 faa6 	bl	801983c <prvIsQueueFull>
 80192f0:	4603      	mov	r3, r0
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d018      	beq.n	8019328 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80192f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192f8:	3310      	adds	r3, #16
 80192fa:	687a      	ldr	r2, [r7, #4]
 80192fc:	4611      	mov	r1, r2
 80192fe:	4618      	mov	r0, r3
 8019300:	f001 fa94 	bl	801a82c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019306:	f000 fa31 	bl	801976c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801930a:	f001 f8c3 	bl	801a494 <xTaskResumeAll>
 801930e:	4603      	mov	r3, r0
 8019310:	2b00      	cmp	r3, #0
 8019312:	f47f af7c 	bne.w	801920e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8019316:	4b0c      	ldr	r3, [pc, #48]	@ (8019348 <xQueueGenericSend+0x200>)
 8019318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801931c:	601a      	str	r2, [r3, #0]
 801931e:	f3bf 8f4f 	dsb	sy
 8019322:	f3bf 8f6f 	isb	sy
 8019326:	e772      	b.n	801920e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019328:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801932a:	f000 fa1f 	bl	801976c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801932e:	f001 f8b1 	bl	801a494 <xTaskResumeAll>
 8019332:	e76c      	b.n	801920e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019336:	f000 fa19 	bl	801976c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801933a:	f001 f8ab 	bl	801a494 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801933e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019340:	4618      	mov	r0, r3
 8019342:	3738      	adds	r7, #56	@ 0x38
 8019344:	46bd      	mov	sp, r7
 8019346:	bd80      	pop	{r7, pc}
 8019348:	e000ed04 	.word	0xe000ed04

0801934c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b090      	sub	sp, #64	@ 0x40
 8019350:	af00      	add	r7, sp, #0
 8019352:	60f8      	str	r0, [r7, #12]
 8019354:	60b9      	str	r1, [r7, #8]
 8019356:	607a      	str	r2, [r7, #4]
 8019358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801935e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019360:	2b00      	cmp	r3, #0
 8019362:	d10b      	bne.n	801937c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8019364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019368:	f383 8811 	msr	BASEPRI, r3
 801936c:	f3bf 8f6f 	isb	sy
 8019370:	f3bf 8f4f 	dsb	sy
 8019374:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8019376:	bf00      	nop
 8019378:	bf00      	nop
 801937a:	e7fd      	b.n	8019378 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801937c:	68bb      	ldr	r3, [r7, #8]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d103      	bne.n	801938a <xQueueGenericSendFromISR+0x3e>
 8019382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019386:	2b00      	cmp	r3, #0
 8019388:	d101      	bne.n	801938e <xQueueGenericSendFromISR+0x42>
 801938a:	2301      	movs	r3, #1
 801938c:	e000      	b.n	8019390 <xQueueGenericSendFromISR+0x44>
 801938e:	2300      	movs	r3, #0
 8019390:	2b00      	cmp	r3, #0
 8019392:	d10b      	bne.n	80193ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8019394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019398:	f383 8811 	msr	BASEPRI, r3
 801939c:	f3bf 8f6f 	isb	sy
 80193a0:	f3bf 8f4f 	dsb	sy
 80193a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80193a6:	bf00      	nop
 80193a8:	bf00      	nop
 80193aa:	e7fd      	b.n	80193a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80193ac:	683b      	ldr	r3, [r7, #0]
 80193ae:	2b02      	cmp	r3, #2
 80193b0:	d103      	bne.n	80193ba <xQueueGenericSendFromISR+0x6e>
 80193b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80193b6:	2b01      	cmp	r3, #1
 80193b8:	d101      	bne.n	80193be <xQueueGenericSendFromISR+0x72>
 80193ba:	2301      	movs	r3, #1
 80193bc:	e000      	b.n	80193c0 <xQueueGenericSendFromISR+0x74>
 80193be:	2300      	movs	r3, #0
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d10b      	bne.n	80193dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80193c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193c8:	f383 8811 	msr	BASEPRI, r3
 80193cc:	f3bf 8f6f 	isb	sy
 80193d0:	f3bf 8f4f 	dsb	sy
 80193d4:	623b      	str	r3, [r7, #32]
}
 80193d6:	bf00      	nop
 80193d8:	bf00      	nop
 80193da:	e7fd      	b.n	80193d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80193dc:	f002 fcd4 	bl	801bd88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80193e0:	f3ef 8211 	mrs	r2, BASEPRI
 80193e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193e8:	f383 8811 	msr	BASEPRI, r3
 80193ec:	f3bf 8f6f 	isb	sy
 80193f0:	f3bf 8f4f 	dsb	sy
 80193f4:	61fa      	str	r2, [r7, #28]
 80193f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80193f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80193fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80193fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019404:	429a      	cmp	r2, r3
 8019406:	d302      	bcc.n	801940e <xQueueGenericSendFromISR+0xc2>
 8019408:	683b      	ldr	r3, [r7, #0]
 801940a:	2b02      	cmp	r3, #2
 801940c:	d12f      	bne.n	801946e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801940e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019410:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019414:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801941a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801941c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801941e:	683a      	ldr	r2, [r7, #0]
 8019420:	68b9      	ldr	r1, [r7, #8]
 8019422:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019424:	f000 f912 	bl	801964c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019428:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801942c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019430:	d112      	bne.n	8019458 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019436:	2b00      	cmp	r3, #0
 8019438:	d016      	beq.n	8019468 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801943a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801943c:	3324      	adds	r3, #36	@ 0x24
 801943e:	4618      	mov	r0, r3
 8019440:	f001 fa46 	bl	801a8d0 <xTaskRemoveFromEventList>
 8019444:	4603      	mov	r3, r0
 8019446:	2b00      	cmp	r3, #0
 8019448:	d00e      	beq.n	8019468 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d00b      	beq.n	8019468 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	2201      	movs	r2, #1
 8019454:	601a      	str	r2, [r3, #0]
 8019456:	e007      	b.n	8019468 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019458:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801945c:	3301      	adds	r3, #1
 801945e:	b2db      	uxtb	r3, r3
 8019460:	b25a      	sxtb	r2, r3
 8019462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8019468:	2301      	movs	r3, #1
 801946a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 801946c:	e001      	b.n	8019472 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801946e:	2300      	movs	r3, #0
 8019470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019474:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019476:	697b      	ldr	r3, [r7, #20]
 8019478:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801947c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801947e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8019480:	4618      	mov	r0, r3
 8019482:	3740      	adds	r7, #64	@ 0x40
 8019484:	46bd      	mov	sp, r7
 8019486:	bd80      	pop	{r7, pc}

08019488 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b08c      	sub	sp, #48	@ 0x30
 801948c:	af00      	add	r7, sp, #0
 801948e:	60f8      	str	r0, [r7, #12]
 8019490:	60b9      	str	r1, [r7, #8]
 8019492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8019494:	2300      	movs	r3, #0
 8019496:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801949c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d10b      	bne.n	80194ba <xQueueReceive+0x32>
	__asm volatile
 80194a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194a6:	f383 8811 	msr	BASEPRI, r3
 80194aa:	f3bf 8f6f 	isb	sy
 80194ae:	f3bf 8f4f 	dsb	sy
 80194b2:	623b      	str	r3, [r7, #32]
}
 80194b4:	bf00      	nop
 80194b6:	bf00      	nop
 80194b8:	e7fd      	b.n	80194b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80194ba:	68bb      	ldr	r3, [r7, #8]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d103      	bne.n	80194c8 <xQueueReceive+0x40>
 80194c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d101      	bne.n	80194cc <xQueueReceive+0x44>
 80194c8:	2301      	movs	r3, #1
 80194ca:	e000      	b.n	80194ce <xQueueReceive+0x46>
 80194cc:	2300      	movs	r3, #0
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d10b      	bne.n	80194ea <xQueueReceive+0x62>
	__asm volatile
 80194d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194d6:	f383 8811 	msr	BASEPRI, r3
 80194da:	f3bf 8f6f 	isb	sy
 80194de:	f3bf 8f4f 	dsb	sy
 80194e2:	61fb      	str	r3, [r7, #28]
}
 80194e4:	bf00      	nop
 80194e6:	bf00      	nop
 80194e8:	e7fd      	b.n	80194e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80194ea:	f001 fbc7 	bl	801ac7c <xTaskGetSchedulerState>
 80194ee:	4603      	mov	r3, r0
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d102      	bne.n	80194fa <xQueueReceive+0x72>
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d101      	bne.n	80194fe <xQueueReceive+0x76>
 80194fa:	2301      	movs	r3, #1
 80194fc:	e000      	b.n	8019500 <xQueueReceive+0x78>
 80194fe:	2300      	movs	r3, #0
 8019500:	2b00      	cmp	r3, #0
 8019502:	d10b      	bne.n	801951c <xQueueReceive+0x94>
	__asm volatile
 8019504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019508:	f383 8811 	msr	BASEPRI, r3
 801950c:	f3bf 8f6f 	isb	sy
 8019510:	f3bf 8f4f 	dsb	sy
 8019514:	61bb      	str	r3, [r7, #24]
}
 8019516:	bf00      	nop
 8019518:	bf00      	nop
 801951a:	e7fd      	b.n	8019518 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801951c:	f002 fb54 	bl	801bbc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019524:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019528:	2b00      	cmp	r3, #0
 801952a:	d01f      	beq.n	801956c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801952c:	68b9      	ldr	r1, [r7, #8]
 801952e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019530:	f000 f8f6 	bl	8019720 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019536:	1e5a      	subs	r2, r3, #1
 8019538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801953a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801953c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801953e:	691b      	ldr	r3, [r3, #16]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d00f      	beq.n	8019564 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019546:	3310      	adds	r3, #16
 8019548:	4618      	mov	r0, r3
 801954a:	f001 f9c1 	bl	801a8d0 <xTaskRemoveFromEventList>
 801954e:	4603      	mov	r3, r0
 8019550:	2b00      	cmp	r3, #0
 8019552:	d007      	beq.n	8019564 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019554:	4b3c      	ldr	r3, [pc, #240]	@ (8019648 <xQueueReceive+0x1c0>)
 8019556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801955a:	601a      	str	r2, [r3, #0]
 801955c:	f3bf 8f4f 	dsb	sy
 8019560:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019564:	f002 fb62 	bl	801bc2c <vPortExitCritical>
				return pdPASS;
 8019568:	2301      	movs	r3, #1
 801956a:	e069      	b.n	8019640 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d103      	bne.n	801957a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019572:	f002 fb5b 	bl	801bc2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019576:	2300      	movs	r3, #0
 8019578:	e062      	b.n	8019640 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801957a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801957c:	2b00      	cmp	r3, #0
 801957e:	d106      	bne.n	801958e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019580:	f107 0310 	add.w	r3, r7, #16
 8019584:	4618      	mov	r0, r3
 8019586:	f001 fa07 	bl	801a998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801958a:	2301      	movs	r3, #1
 801958c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801958e:	f002 fb4d 	bl	801bc2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019592:	f000 ff71 	bl	801a478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019596:	f002 fb17 	bl	801bbc8 <vPortEnterCritical>
 801959a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801959c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80195a0:	b25b      	sxtb	r3, r3
 80195a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195a6:	d103      	bne.n	80195b0 <xQueueReceive+0x128>
 80195a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195aa:	2200      	movs	r2, #0
 80195ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80195b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80195b6:	b25b      	sxtb	r3, r3
 80195b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195bc:	d103      	bne.n	80195c6 <xQueueReceive+0x13e>
 80195be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195c0:	2200      	movs	r2, #0
 80195c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80195c6:	f002 fb31 	bl	801bc2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80195ca:	1d3a      	adds	r2, r7, #4
 80195cc:	f107 0310 	add.w	r3, r7, #16
 80195d0:	4611      	mov	r1, r2
 80195d2:	4618      	mov	r0, r3
 80195d4:	f001 f9f6 	bl	801a9c4 <xTaskCheckForTimeOut>
 80195d8:	4603      	mov	r3, r0
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d123      	bne.n	8019626 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80195de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80195e0:	f000 f916 	bl	8019810 <prvIsQueueEmpty>
 80195e4:	4603      	mov	r3, r0
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d017      	beq.n	801961a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80195ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195ec:	3324      	adds	r3, #36	@ 0x24
 80195ee:	687a      	ldr	r2, [r7, #4]
 80195f0:	4611      	mov	r1, r2
 80195f2:	4618      	mov	r0, r3
 80195f4:	f001 f91a 	bl	801a82c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80195f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80195fa:	f000 f8b7 	bl	801976c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80195fe:	f000 ff49 	bl	801a494 <xTaskResumeAll>
 8019602:	4603      	mov	r3, r0
 8019604:	2b00      	cmp	r3, #0
 8019606:	d189      	bne.n	801951c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8019608:	4b0f      	ldr	r3, [pc, #60]	@ (8019648 <xQueueReceive+0x1c0>)
 801960a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801960e:	601a      	str	r2, [r3, #0]
 8019610:	f3bf 8f4f 	dsb	sy
 8019614:	f3bf 8f6f 	isb	sy
 8019618:	e780      	b.n	801951c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801961a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801961c:	f000 f8a6 	bl	801976c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019620:	f000 ff38 	bl	801a494 <xTaskResumeAll>
 8019624:	e77a      	b.n	801951c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8019626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019628:	f000 f8a0 	bl	801976c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801962c:	f000 ff32 	bl	801a494 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019630:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019632:	f000 f8ed 	bl	8019810 <prvIsQueueEmpty>
 8019636:	4603      	mov	r3, r0
 8019638:	2b00      	cmp	r3, #0
 801963a:	f43f af6f 	beq.w	801951c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801963e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019640:	4618      	mov	r0, r3
 8019642:	3730      	adds	r7, #48	@ 0x30
 8019644:	46bd      	mov	sp, r7
 8019646:	bd80      	pop	{r7, pc}
 8019648:	e000ed04 	.word	0xe000ed04

0801964c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b086      	sub	sp, #24
 8019650:	af00      	add	r7, sp, #0
 8019652:	60f8      	str	r0, [r7, #12]
 8019654:	60b9      	str	r1, [r7, #8]
 8019656:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8019658:	2300      	movs	r3, #0
 801965a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019660:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019666:	2b00      	cmp	r3, #0
 8019668:	d10d      	bne.n	8019686 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	2b00      	cmp	r3, #0
 8019670:	d14d      	bne.n	801970e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019672:	68fb      	ldr	r3, [r7, #12]
 8019674:	689b      	ldr	r3, [r3, #8]
 8019676:	4618      	mov	r0, r3
 8019678:	f001 fb1e 	bl	801acb8 <xTaskPriorityDisinherit>
 801967c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	2200      	movs	r2, #0
 8019682:	609a      	str	r2, [r3, #8]
 8019684:	e043      	b.n	801970e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	2b00      	cmp	r3, #0
 801968a:	d119      	bne.n	80196c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	6858      	ldr	r0, [r3, #4]
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019694:	461a      	mov	r2, r3
 8019696:	68b9      	ldr	r1, [r7, #8]
 8019698:	f005 fd95 	bl	801f1c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	685a      	ldr	r2, [r3, #4]
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80196a4:	441a      	add	r2, r3
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	685a      	ldr	r2, [r3, #4]
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	689b      	ldr	r3, [r3, #8]
 80196b2:	429a      	cmp	r2, r3
 80196b4:	d32b      	bcc.n	801970e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	681a      	ldr	r2, [r3, #0]
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	605a      	str	r2, [r3, #4]
 80196be:	e026      	b.n	801970e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	68d8      	ldr	r0, [r3, #12]
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80196c8:	461a      	mov	r2, r3
 80196ca:	68b9      	ldr	r1, [r7, #8]
 80196cc:	f005 fd7b 	bl	801f1c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	68da      	ldr	r2, [r3, #12]
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80196d8:	425b      	negs	r3, r3
 80196da:	441a      	add	r2, r3
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	68da      	ldr	r2, [r3, #12]
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	429a      	cmp	r2, r3
 80196ea:	d207      	bcs.n	80196fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	689a      	ldr	r2, [r3, #8]
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80196f4:	425b      	negs	r3, r3
 80196f6:	441a      	add	r2, r3
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	2b02      	cmp	r3, #2
 8019700:	d105      	bne.n	801970e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019702:	693b      	ldr	r3, [r7, #16]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d002      	beq.n	801970e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8019708:	693b      	ldr	r3, [r7, #16]
 801970a:	3b01      	subs	r3, #1
 801970c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801970e:	693b      	ldr	r3, [r7, #16]
 8019710:	1c5a      	adds	r2, r3, #1
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8019716:	697b      	ldr	r3, [r7, #20]
}
 8019718:	4618      	mov	r0, r3
 801971a:	3718      	adds	r7, #24
 801971c:	46bd      	mov	sp, r7
 801971e:	bd80      	pop	{r7, pc}

08019720 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8019720:	b580      	push	{r7, lr}
 8019722:	b082      	sub	sp, #8
 8019724:	af00      	add	r7, sp, #0
 8019726:	6078      	str	r0, [r7, #4]
 8019728:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801972e:	2b00      	cmp	r3, #0
 8019730:	d018      	beq.n	8019764 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	68da      	ldr	r2, [r3, #12]
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801973a:	441a      	add	r2, r3
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	68da      	ldr	r2, [r3, #12]
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	689b      	ldr	r3, [r3, #8]
 8019748:	429a      	cmp	r2, r3
 801974a:	d303      	bcc.n	8019754 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	681a      	ldr	r2, [r3, #0]
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	68d9      	ldr	r1, [r3, #12]
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801975c:	461a      	mov	r2, r3
 801975e:	6838      	ldr	r0, [r7, #0]
 8019760:	f005 fd31 	bl	801f1c6 <memcpy>
	}
}
 8019764:	bf00      	nop
 8019766:	3708      	adds	r7, #8
 8019768:	46bd      	mov	sp, r7
 801976a:	bd80      	pop	{r7, pc}

0801976c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801976c:	b580      	push	{r7, lr}
 801976e:	b084      	sub	sp, #16
 8019770:	af00      	add	r7, sp, #0
 8019772:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019774:	f002 fa28 	bl	801bbc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801977e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019780:	e011      	b.n	80197a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019786:	2b00      	cmp	r3, #0
 8019788:	d012      	beq.n	80197b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	3324      	adds	r3, #36	@ 0x24
 801978e:	4618      	mov	r0, r3
 8019790:	f001 f89e 	bl	801a8d0 <xTaskRemoveFromEventList>
 8019794:	4603      	mov	r3, r0
 8019796:	2b00      	cmp	r3, #0
 8019798:	d001      	beq.n	801979e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801979a:	f001 f977 	bl	801aa8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801979e:	7bfb      	ldrb	r3, [r7, #15]
 80197a0:	3b01      	subs	r3, #1
 80197a2:	b2db      	uxtb	r3, r3
 80197a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80197a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	dce9      	bgt.n	8019782 <prvUnlockQueue+0x16>
 80197ae:	e000      	b.n	80197b2 <prvUnlockQueue+0x46>
					break;
 80197b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	22ff      	movs	r2, #255	@ 0xff
 80197b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80197ba:	f002 fa37 	bl	801bc2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80197be:	f002 fa03 	bl	801bbc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80197c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80197ca:	e011      	b.n	80197f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	691b      	ldr	r3, [r3, #16]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d012      	beq.n	80197fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	3310      	adds	r3, #16
 80197d8:	4618      	mov	r0, r3
 80197da:	f001 f879 	bl	801a8d0 <xTaskRemoveFromEventList>
 80197de:	4603      	mov	r3, r0
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d001      	beq.n	80197e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80197e4:	f001 f952 	bl	801aa8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80197e8:	7bbb      	ldrb	r3, [r7, #14]
 80197ea:	3b01      	subs	r3, #1
 80197ec:	b2db      	uxtb	r3, r3
 80197ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80197f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	dce9      	bgt.n	80197cc <prvUnlockQueue+0x60>
 80197f8:	e000      	b.n	80197fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80197fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	22ff      	movs	r2, #255	@ 0xff
 8019800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8019804:	f002 fa12 	bl	801bc2c <vPortExitCritical>
}
 8019808:	bf00      	nop
 801980a:	3710      	adds	r7, #16
 801980c:	46bd      	mov	sp, r7
 801980e:	bd80      	pop	{r7, pc}

08019810 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019810:	b580      	push	{r7, lr}
 8019812:	b084      	sub	sp, #16
 8019814:	af00      	add	r7, sp, #0
 8019816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019818:	f002 f9d6 	bl	801bbc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019820:	2b00      	cmp	r3, #0
 8019822:	d102      	bne.n	801982a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019824:	2301      	movs	r3, #1
 8019826:	60fb      	str	r3, [r7, #12]
 8019828:	e001      	b.n	801982e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801982a:	2300      	movs	r3, #0
 801982c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801982e:	f002 f9fd 	bl	801bc2c <vPortExitCritical>

	return xReturn;
 8019832:	68fb      	ldr	r3, [r7, #12]
}
 8019834:	4618      	mov	r0, r3
 8019836:	3710      	adds	r7, #16
 8019838:	46bd      	mov	sp, r7
 801983a:	bd80      	pop	{r7, pc}

0801983c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b084      	sub	sp, #16
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019844:	f002 f9c0 	bl	801bbc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019850:	429a      	cmp	r2, r3
 8019852:	d102      	bne.n	801985a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019854:	2301      	movs	r3, #1
 8019856:	60fb      	str	r3, [r7, #12]
 8019858:	e001      	b.n	801985e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801985a:	2300      	movs	r3, #0
 801985c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801985e:	f002 f9e5 	bl	801bc2c <vPortExitCritical>

	return xReturn;
 8019862:	68fb      	ldr	r3, [r7, #12]
}
 8019864:	4618      	mov	r0, r3
 8019866:	3710      	adds	r7, #16
 8019868:	46bd      	mov	sp, r7
 801986a:	bd80      	pop	{r7, pc}

0801986c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801986c:	b480      	push	{r7}
 801986e:	b085      	sub	sp, #20
 8019870:	af00      	add	r7, sp, #0
 8019872:	6078      	str	r0, [r7, #4]
 8019874:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019876:	2300      	movs	r3, #0
 8019878:	60fb      	str	r3, [r7, #12]
 801987a:	e014      	b.n	80198a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801987c:	4a0f      	ldr	r2, [pc, #60]	@ (80198bc <vQueueAddToRegistry+0x50>)
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019884:	2b00      	cmp	r3, #0
 8019886:	d10b      	bne.n	80198a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8019888:	490c      	ldr	r1, [pc, #48]	@ (80198bc <vQueueAddToRegistry+0x50>)
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	683a      	ldr	r2, [r7, #0]
 801988e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019892:	4a0a      	ldr	r2, [pc, #40]	@ (80198bc <vQueueAddToRegistry+0x50>)
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	00db      	lsls	r3, r3, #3
 8019898:	4413      	add	r3, r2
 801989a:	687a      	ldr	r2, [r7, #4]
 801989c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801989e:	e006      	b.n	80198ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	3301      	adds	r3, #1
 80198a4:	60fb      	str	r3, [r7, #12]
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	2b07      	cmp	r3, #7
 80198aa:	d9e7      	bls.n	801987c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80198ac:	bf00      	nop
 80198ae:	bf00      	nop
 80198b0:	3714      	adds	r7, #20
 80198b2:	46bd      	mov	sp, r7
 80198b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b8:	4770      	bx	lr
 80198ba:	bf00      	nop
 80198bc:	200014ac 	.word	0x200014ac

080198c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b086      	sub	sp, #24
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	60f8      	str	r0, [r7, #12]
 80198c8:	60b9      	str	r1, [r7, #8]
 80198ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80198cc:	68fb      	ldr	r3, [r7, #12]
 80198ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80198d0:	f002 f97a 	bl	801bbc8 <vPortEnterCritical>
 80198d4:	697b      	ldr	r3, [r7, #20]
 80198d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80198da:	b25b      	sxtb	r3, r3
 80198dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198e0:	d103      	bne.n	80198ea <vQueueWaitForMessageRestricted+0x2a>
 80198e2:	697b      	ldr	r3, [r7, #20]
 80198e4:	2200      	movs	r2, #0
 80198e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80198ea:	697b      	ldr	r3, [r7, #20]
 80198ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80198f0:	b25b      	sxtb	r3, r3
 80198f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198f6:	d103      	bne.n	8019900 <vQueueWaitForMessageRestricted+0x40>
 80198f8:	697b      	ldr	r3, [r7, #20]
 80198fa:	2200      	movs	r2, #0
 80198fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8019900:	f002 f994 	bl	801bc2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019904:	697b      	ldr	r3, [r7, #20]
 8019906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019908:	2b00      	cmp	r3, #0
 801990a:	d106      	bne.n	801991a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801990c:	697b      	ldr	r3, [r7, #20]
 801990e:	3324      	adds	r3, #36	@ 0x24
 8019910:	687a      	ldr	r2, [r7, #4]
 8019912:	68b9      	ldr	r1, [r7, #8]
 8019914:	4618      	mov	r0, r3
 8019916:	f000 ffaf 	bl	801a878 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801991a:	6978      	ldr	r0, [r7, #20]
 801991c:	f7ff ff26 	bl	801976c <prvUnlockQueue>
	}
 8019920:	bf00      	nop
 8019922:	3718      	adds	r7, #24
 8019924:	46bd      	mov	sp, r7
 8019926:	bd80      	pop	{r7, pc}

08019928 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8019928:	b580      	push	{r7, lr}
 801992a:	b08c      	sub	sp, #48	@ 0x30
 801992c:	af02      	add	r7, sp, #8
 801992e:	60f8      	str	r0, [r7, #12]
 8019930:	60b9      	str	r1, [r7, #8]
 8019932:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	2b01      	cmp	r3, #1
 8019938:	d111      	bne.n	801995e <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 801993a:	2301      	movs	r3, #1
 801993c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	2b04      	cmp	r3, #4
 8019944:	d81d      	bhi.n	8019982 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8019946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801994a:	f383 8811 	msr	BASEPRI, r3
 801994e:	f3bf 8f6f 	isb	sy
 8019952:	f3bf 8f4f 	dsb	sy
 8019956:	61fb      	str	r3, [r7, #28]
}
 8019958:	bf00      	nop
 801995a:	bf00      	nop
 801995c:	e7fd      	b.n	801995a <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 801995e:	2300      	movs	r3, #0
 8019960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d10b      	bne.n	8019982 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 801996a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801996e:	f383 8811 	msr	BASEPRI, r3
 8019972:	f3bf 8f6f 	isb	sy
 8019976:	f3bf 8f4f 	dsb	sy
 801997a:	61bb      	str	r3, [r7, #24]
}
 801997c:	bf00      	nop
 801997e:	bf00      	nop
 8019980:	e7fd      	b.n	801997e <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8019982:	68ba      	ldr	r2, [r7, #8]
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	429a      	cmp	r2, r3
 8019988:	d90b      	bls.n	80199a2 <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 801998a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801998e:	f383 8811 	msr	BASEPRI, r3
 8019992:	f3bf 8f6f 	isb	sy
 8019996:	f3bf 8f4f 	dsb	sy
 801999a:	617b      	str	r3, [r7, #20]
}
 801999c:	bf00      	nop
 801999e:	bf00      	nop
 80199a0:	e7fd      	b.n	801999e <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80199a2:	68bb      	ldr	r3, [r7, #8]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d101      	bne.n	80199ac <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80199a8:	2301      	movs	r3, #1
 80199aa:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	3301      	adds	r3, #1
 80199b0:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	3320      	adds	r3, #32
 80199b6:	4618      	mov	r0, r3
 80199b8:	f002 fa28 	bl	801be0c <pvPortMalloc>
 80199bc:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80199be:	6a3b      	ldr	r3, [r7, #32]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d00a      	beq.n	80199da <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80199c4:	6a3b      	ldr	r3, [r7, #32]
 80199c6:	f103 0120 	add.w	r1, r3, #32
 80199ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80199ce:	9300      	str	r3, [sp, #0]
 80199d0:	68bb      	ldr	r3, [r7, #8]
 80199d2:	68fa      	ldr	r2, [r7, #12]
 80199d4:	6a38      	ldr	r0, [r7, #32]
 80199d6:	f000 fac5 	bl	8019f64 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80199da:	6a3b      	ldr	r3, [r7, #32]
	}
 80199dc:	4618      	mov	r0, r3
 80199de:	3728      	adds	r7, #40	@ 0x28
 80199e0:	46bd      	mov	sp, r7
 80199e2:	bd80      	pop	{r7, pc}

080199e4 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80199e4:	b480      	push	{r7}
 80199e6:	b087      	sub	sp, #28
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80199f0:	693b      	ldr	r3, [r7, #16]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d10b      	bne.n	8019a0e <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 80199f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199fa:	f383 8811 	msr	BASEPRI, r3
 80199fe:	f3bf 8f6f 	isb	sy
 8019a02:	f3bf 8f4f 	dsb	sy
 8019a06:	60fb      	str	r3, [r7, #12]
}
 8019a08:	bf00      	nop
 8019a0a:	bf00      	nop
 8019a0c:	e7fd      	b.n	8019a0a <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8019a0e:	693b      	ldr	r3, [r7, #16]
 8019a10:	689a      	ldr	r2, [r3, #8]
 8019a12:	693b      	ldr	r3, [r7, #16]
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	4413      	add	r3, r2
 8019a18:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8019a1a:	693b      	ldr	r3, [r7, #16]
 8019a1c:	685b      	ldr	r3, [r3, #4]
 8019a1e:	697a      	ldr	r2, [r7, #20]
 8019a20:	1ad3      	subs	r3, r2, r3
 8019a22:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8019a24:	697b      	ldr	r3, [r7, #20]
 8019a26:	3b01      	subs	r3, #1
 8019a28:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8019a2a:	693b      	ldr	r3, [r7, #16]
 8019a2c:	689b      	ldr	r3, [r3, #8]
 8019a2e:	697a      	ldr	r2, [r7, #20]
 8019a30:	429a      	cmp	r2, r3
 8019a32:	d304      	bcc.n	8019a3e <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8019a34:	693b      	ldr	r3, [r7, #16]
 8019a36:	689b      	ldr	r3, [r3, #8]
 8019a38:	697a      	ldr	r2, [r7, #20]
 8019a3a:	1ad3      	subs	r3, r2, r3
 8019a3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8019a3e:	697b      	ldr	r3, [r7, #20]
}
 8019a40:	4618      	mov	r0, r3
 8019a42:	371c      	adds	r7, #28
 8019a44:	46bd      	mov	sp, r7
 8019a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a4a:	4770      	bx	lr

08019a4c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	b090      	sub	sp, #64	@ 0x40
 8019a50:	af02      	add	r7, sp, #8
 8019a52:	60f8      	str	r0, [r7, #12]
 8019a54:	60b9      	str	r1, [r7, #8]
 8019a56:	607a      	str	r2, [r7, #4]
 8019a58:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 8019a62:	68bb      	ldr	r3, [r7, #8]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d10b      	bne.n	8019a80 <xStreamBufferSendFromISR+0x34>
	__asm volatile
 8019a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a6c:	f383 8811 	msr	BASEPRI, r3
 8019a70:	f3bf 8f6f 	isb	sy
 8019a74:	f3bf 8f4f 	dsb	sy
 8019a78:	623b      	str	r3, [r7, #32]
}
 8019a7a:	bf00      	nop
 8019a7c:	bf00      	nop
 8019a7e:	e7fd      	b.n	8019a7c <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8019a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d10b      	bne.n	8019a9e <xStreamBufferSendFromISR+0x52>
	__asm volatile
 8019a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a8a:	f383 8811 	msr	BASEPRI, r3
 8019a8e:	f3bf 8f6f 	isb	sy
 8019a92:	f3bf 8f4f 	dsb	sy
 8019a96:	61fb      	str	r3, [r7, #28]
}
 8019a98:	bf00      	nop
 8019a9a:	bf00      	nop
 8019a9c:	e7fd      	b.n	8019a9a <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8019a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019aa0:	7f1b      	ldrb	r3, [r3, #28]
 8019aa2:	f003 0301 	and.w	r3, r3, #1
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d002      	beq.n	8019ab0 <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8019aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019aac:	3304      	adds	r3, #4
 8019aae:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8019ab0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019ab2:	f7ff ff97 	bl	80199e4 <xStreamBufferSpacesAvailable>
 8019ab6:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8019ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019aba:	9300      	str	r3, [sp, #0]
 8019abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019abe:	687a      	ldr	r2, [r7, #4]
 8019ac0:	68b9      	ldr	r1, [r7, #8]
 8019ac2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019ac4:	f000 f835 	bl	8019b32 <prvWriteMessageToBuffer>
 8019ac8:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8019aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d02b      	beq.n	8019b28 <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8019ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019ad2:	f000 fa27 	bl	8019f24 <prvBytesInBuffer>
 8019ad6:	4602      	mov	r2, r0
 8019ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ada:	68db      	ldr	r3, [r3, #12]
 8019adc:	429a      	cmp	r2, r3
 8019ade:	d323      	bcc.n	8019b28 <xStreamBufferSendFromISR+0xdc>
	__asm volatile
 8019ae0:	f3ef 8211 	mrs	r2, BASEPRI
 8019ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ae8:	f383 8811 	msr	BASEPRI, r3
 8019aec:	f3bf 8f6f 	isb	sy
 8019af0:	f3bf 8f4f 	dsb	sy
 8019af4:	61ba      	str	r2, [r7, #24]
 8019af6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8019af8:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8019afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8019afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019afe:	691b      	ldr	r3, [r3, #16]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d00b      	beq.n	8019b1c <xStreamBufferSendFromISR+0xd0>
 8019b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b06:	6918      	ldr	r0, [r3, #16]
 8019b08:	683b      	ldr	r3, [r7, #0]
 8019b0a:	9300      	str	r3, [sp, #0]
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	2200      	movs	r2, #0
 8019b10:	2100      	movs	r1, #0
 8019b12:	f001 fa7b 	bl	801b00c <xTaskGenericNotifyFromISR>
 8019b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b18:	2200      	movs	r2, #0
 8019b1a:	611a      	str	r2, [r3, #16]
 8019b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b1e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8019b20:	693b      	ldr	r3, [r7, #16]
 8019b22:	f383 8811 	msr	BASEPRI, r3
}
 8019b26:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8019b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	3738      	adds	r7, #56	@ 0x38
 8019b2e:	46bd      	mov	sp, r7
 8019b30:	bd80      	pop	{r7, pc}

08019b32 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8019b32:	b580      	push	{r7, lr}
 8019b34:	b086      	sub	sp, #24
 8019b36:	af00      	add	r7, sp, #0
 8019b38:	60f8      	str	r0, [r7, #12]
 8019b3a:	60b9      	str	r1, [r7, #8]
 8019b3c:	607a      	str	r2, [r7, #4]
 8019b3e:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8019b40:	683b      	ldr	r3, [r7, #0]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d102      	bne.n	8019b4c <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8019b46:	2300      	movs	r3, #0
 8019b48:	617b      	str	r3, [r7, #20]
 8019b4a:	e01d      	b.n	8019b88 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	7f1b      	ldrb	r3, [r3, #28]
 8019b50:	f003 0301 	and.w	r3, r3, #1
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d108      	bne.n	8019b6a <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8019b58:	2301      	movs	r3, #1
 8019b5a:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8019b5c:	687a      	ldr	r2, [r7, #4]
 8019b5e:	683b      	ldr	r3, [r7, #0]
 8019b60:	4293      	cmp	r3, r2
 8019b62:	bf28      	it	cs
 8019b64:	4613      	movcs	r3, r2
 8019b66:	607b      	str	r3, [r7, #4]
 8019b68:	e00e      	b.n	8019b88 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8019b6a:	683a      	ldr	r2, [r7, #0]
 8019b6c:	6a3b      	ldr	r3, [r7, #32]
 8019b6e:	429a      	cmp	r2, r3
 8019b70:	d308      	bcc.n	8019b84 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8019b72:	2301      	movs	r3, #1
 8019b74:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8019b76:	1d3b      	adds	r3, r7, #4
 8019b78:	2204      	movs	r2, #4
 8019b7a:	4619      	mov	r1, r3
 8019b7c:	68f8      	ldr	r0, [r7, #12]
 8019b7e:	f000 f8df 	bl	8019d40 <prvWriteBytesToBuffer>
 8019b82:	e001      	b.n	8019b88 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8019b84:	2300      	movs	r3, #0
 8019b86:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8019b88:	697b      	ldr	r3, [r7, #20]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d007      	beq.n	8019b9e <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	461a      	mov	r2, r3
 8019b92:	68b9      	ldr	r1, [r7, #8]
 8019b94:	68f8      	ldr	r0, [r7, #12]
 8019b96:	f000 f8d3 	bl	8019d40 <prvWriteBytesToBuffer>
 8019b9a:	6138      	str	r0, [r7, #16]
 8019b9c:	e001      	b.n	8019ba2 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8019ba2:	693b      	ldr	r3, [r7, #16]
}
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	3718      	adds	r7, #24
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bd80      	pop	{r7, pc}

08019bac <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b08e      	sub	sp, #56	@ 0x38
 8019bb0:	af02      	add	r7, sp, #8
 8019bb2:	60f8      	str	r0, [r7, #12]
 8019bb4:	60b9      	str	r1, [r7, #8]
 8019bb6:	607a      	str	r2, [r7, #4]
 8019bb8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8019bc2:	68bb      	ldr	r3, [r7, #8]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d10b      	bne.n	8019be0 <xStreamBufferReceive+0x34>
	__asm volatile
 8019bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019bcc:	f383 8811 	msr	BASEPRI, r3
 8019bd0:	f3bf 8f6f 	isb	sy
 8019bd4:	f3bf 8f4f 	dsb	sy
 8019bd8:	61fb      	str	r3, [r7, #28]
}
 8019bda:	bf00      	nop
 8019bdc:	bf00      	nop
 8019bde:	e7fd      	b.n	8019bdc <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8019be0:	6a3b      	ldr	r3, [r7, #32]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d10b      	bne.n	8019bfe <xStreamBufferReceive+0x52>
	__asm volatile
 8019be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019bea:	f383 8811 	msr	BASEPRI, r3
 8019bee:	f3bf 8f6f 	isb	sy
 8019bf2:	f3bf 8f4f 	dsb	sy
 8019bf6:	61bb      	str	r3, [r7, #24]
}
 8019bf8:	bf00      	nop
 8019bfa:	bf00      	nop
 8019bfc:	e7fd      	b.n	8019bfa <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8019bfe:	6a3b      	ldr	r3, [r7, #32]
 8019c00:	7f1b      	ldrb	r3, [r3, #28]
 8019c02:	f003 0301 	and.w	r3, r3, #1
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d002      	beq.n	8019c10 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8019c0a:	2304      	movs	r3, #4
 8019c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8019c0e:	e001      	b.n	8019c14 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8019c10:	2300      	movs	r3, #0
 8019c12:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8019c14:	683b      	ldr	r3, [r7, #0]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d035      	beq.n	8019c86 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8019c1a:	f001 ffd5 	bl	801bbc8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8019c1e:	6a38      	ldr	r0, [r7, #32]
 8019c20:	f000 f980 	bl	8019f24 <prvBytesInBuffer>
 8019c24:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8019c26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c2a:	429a      	cmp	r2, r3
 8019c2c:	d817      	bhi.n	8019c5e <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8019c2e:	2000      	movs	r0, #0
 8019c30:	f001 fad2 	bl	801b1d8 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8019c34:	6a3b      	ldr	r3, [r7, #32]
 8019c36:	691b      	ldr	r3, [r3, #16]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d00b      	beq.n	8019c54 <xStreamBufferReceive+0xa8>
	__asm volatile
 8019c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c40:	f383 8811 	msr	BASEPRI, r3
 8019c44:	f3bf 8f6f 	isb	sy
 8019c48:	f3bf 8f4f 	dsb	sy
 8019c4c:	617b      	str	r3, [r7, #20]
}
 8019c4e:	bf00      	nop
 8019c50:	bf00      	nop
 8019c52:	e7fd      	b.n	8019c50 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8019c54:	f001 f802 	bl	801ac5c <xTaskGetCurrentTaskHandle>
 8019c58:	4602      	mov	r2, r0
 8019c5a:	6a3b      	ldr	r3, [r7, #32]
 8019c5c:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8019c5e:	f001 ffe5 	bl	801bc2c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8019c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c66:	429a      	cmp	r2, r3
 8019c68:	d811      	bhi.n	8019c8e <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8019c6a:	683b      	ldr	r3, [r7, #0]
 8019c6c:	2200      	movs	r2, #0
 8019c6e:	2100      	movs	r1, #0
 8019c70:	2000      	movs	r0, #0
 8019c72:	f001 f8a9 	bl	801adc8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8019c76:	6a3b      	ldr	r3, [r7, #32]
 8019c78:	2200      	movs	r2, #0
 8019c7a:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8019c7c:	6a38      	ldr	r0, [r7, #32]
 8019c7e:	f000 f951 	bl	8019f24 <prvBytesInBuffer>
 8019c82:	62b8      	str	r0, [r7, #40]	@ 0x28
 8019c84:	e003      	b.n	8019c8e <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8019c86:	6a38      	ldr	r0, [r7, #32]
 8019c88:	f000 f94c 	bl	8019f24 <prvBytesInBuffer>
 8019c8c:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8019c8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c92:	429a      	cmp	r2, r3
 8019c94:	d91d      	bls.n	8019cd2 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8019c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c98:	9300      	str	r3, [sp, #0]
 8019c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c9c:	687a      	ldr	r2, [r7, #4]
 8019c9e:	68b9      	ldr	r1, [r7, #8]
 8019ca0:	6a38      	ldr	r0, [r7, #32]
 8019ca2:	f000 f81b 	bl	8019cdc <prvReadMessageFromBuffer>
 8019ca6:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8019ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d011      	beq.n	8019cd2 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8019cae:	f000 fbe3 	bl	801a478 <vTaskSuspendAll>
 8019cb2:	6a3b      	ldr	r3, [r7, #32]
 8019cb4:	695b      	ldr	r3, [r3, #20]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d009      	beq.n	8019cce <xStreamBufferReceive+0x122>
 8019cba:	6a3b      	ldr	r3, [r7, #32]
 8019cbc:	6958      	ldr	r0, [r3, #20]
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	2200      	movs	r2, #0
 8019cc2:	2100      	movs	r1, #0
 8019cc4:	f001 f8e0 	bl	801ae88 <xTaskGenericNotify>
 8019cc8:	6a3b      	ldr	r3, [r7, #32]
 8019cca:	2200      	movs	r2, #0
 8019ccc:	615a      	str	r2, [r3, #20]
 8019cce:	f000 fbe1 	bl	801a494 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8019cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	3730      	adds	r7, #48	@ 0x30
 8019cd8:	46bd      	mov	sp, r7
 8019cda:	bd80      	pop	{r7, pc}

08019cdc <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8019cdc:	b580      	push	{r7, lr}
 8019cde:	b088      	sub	sp, #32
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	60f8      	str	r0, [r7, #12]
 8019ce4:	60b9      	str	r1, [r7, #8]
 8019ce6:	607a      	str	r2, [r7, #4]
 8019ce8:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8019cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d019      	beq.n	8019d24 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8019cf6:	f107 0110 	add.w	r1, r7, #16
 8019cfa:	683b      	ldr	r3, [r7, #0]
 8019cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019cfe:	68f8      	ldr	r0, [r7, #12]
 8019d00:	f000 f893 	bl	8019e2a <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8019d04:	693b      	ldr	r3, [r7, #16]
 8019d06:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8019d08:	683a      	ldr	r2, [r7, #0]
 8019d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d0c:	1ad3      	subs	r3, r2, r3
 8019d0e:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8019d10:	69fa      	ldr	r2, [r7, #28]
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	429a      	cmp	r2, r3
 8019d16:	d907      	bls.n	8019d28 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	69ba      	ldr	r2, [r7, #24]
 8019d1c:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8019d1e:	2300      	movs	r3, #0
 8019d20:	61fb      	str	r3, [r7, #28]
 8019d22:	e001      	b.n	8019d28 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8019d28:	683b      	ldr	r3, [r7, #0]
 8019d2a:	69fa      	ldr	r2, [r7, #28]
 8019d2c:	68b9      	ldr	r1, [r7, #8]
 8019d2e:	68f8      	ldr	r0, [r7, #12]
 8019d30:	f000 f87b 	bl	8019e2a <prvReadBytesFromBuffer>
 8019d34:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8019d36:	697b      	ldr	r3, [r7, #20]
}
 8019d38:	4618      	mov	r0, r3
 8019d3a:	3720      	adds	r7, #32
 8019d3c:	46bd      	mov	sp, r7
 8019d3e:	bd80      	pop	{r7, pc}

08019d40 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8019d40:	b580      	push	{r7, lr}
 8019d42:	b08a      	sub	sp, #40	@ 0x28
 8019d44:	af00      	add	r7, sp, #0
 8019d46:	60f8      	str	r0, [r7, #12]
 8019d48:	60b9      	str	r1, [r7, #8]
 8019d4a:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d10b      	bne.n	8019d6a <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8019d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d56:	f383 8811 	msr	BASEPRI, r3
 8019d5a:	f3bf 8f6f 	isb	sy
 8019d5e:	f3bf 8f4f 	dsb	sy
 8019d62:	61fb      	str	r3, [r7, #28]
}
 8019d64:	bf00      	nop
 8019d66:	bf00      	nop
 8019d68:	e7fd      	b.n	8019d66 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	685b      	ldr	r3, [r3, #4]
 8019d6e:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	689a      	ldr	r2, [r3, #8]
 8019d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d76:	1ad3      	subs	r3, r2, r3
 8019d78:	687a      	ldr	r2, [r7, #4]
 8019d7a:	4293      	cmp	r3, r2
 8019d7c:	bf28      	it	cs
 8019d7e:	4613      	movcs	r3, r2
 8019d80:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8019d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d84:	6a3b      	ldr	r3, [r7, #32]
 8019d86:	441a      	add	r2, r3
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	689b      	ldr	r3, [r3, #8]
 8019d8c:	429a      	cmp	r2, r3
 8019d8e:	d90b      	bls.n	8019da8 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 8019d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d94:	f383 8811 	msr	BASEPRI, r3
 8019d98:	f3bf 8f6f 	isb	sy
 8019d9c:	f3bf 8f4f 	dsb	sy
 8019da0:	61bb      	str	r3, [r7, #24]
}
 8019da2:	bf00      	nop
 8019da4:	bf00      	nop
 8019da6:	e7fd      	b.n	8019da4 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	699a      	ldr	r2, [r3, #24]
 8019dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dae:	4413      	add	r3, r2
 8019db0:	6a3a      	ldr	r2, [r7, #32]
 8019db2:	68b9      	ldr	r1, [r7, #8]
 8019db4:	4618      	mov	r0, r3
 8019db6:	f005 fa06 	bl	801f1c6 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8019dba:	687a      	ldr	r2, [r7, #4]
 8019dbc:	6a3b      	ldr	r3, [r7, #32]
 8019dbe:	429a      	cmp	r2, r3
 8019dc0:	d91d      	bls.n	8019dfe <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8019dc2:	687a      	ldr	r2, [r7, #4]
 8019dc4:	6a3b      	ldr	r3, [r7, #32]
 8019dc6:	1ad2      	subs	r2, r2, r3
 8019dc8:	68fb      	ldr	r3, [r7, #12]
 8019dca:	689b      	ldr	r3, [r3, #8]
 8019dcc:	429a      	cmp	r2, r3
 8019dce:	d90b      	bls.n	8019de8 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 8019dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019dd4:	f383 8811 	msr	BASEPRI, r3
 8019dd8:	f3bf 8f6f 	isb	sy
 8019ddc:	f3bf 8f4f 	dsb	sy
 8019de0:	617b      	str	r3, [r7, #20]
}
 8019de2:	bf00      	nop
 8019de4:	bf00      	nop
 8019de6:	e7fd      	b.n	8019de4 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	6998      	ldr	r0, [r3, #24]
 8019dec:	68ba      	ldr	r2, [r7, #8]
 8019dee:	6a3b      	ldr	r3, [r7, #32]
 8019df0:	18d1      	adds	r1, r2, r3
 8019df2:	687a      	ldr	r2, [r7, #4]
 8019df4:	6a3b      	ldr	r3, [r7, #32]
 8019df6:	1ad3      	subs	r3, r2, r3
 8019df8:	461a      	mov	r2, r3
 8019dfa:	f005 f9e4 	bl	801f1c6 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8019dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	4413      	add	r3, r2
 8019e04:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	689b      	ldr	r3, [r3, #8]
 8019e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019e0c:	429a      	cmp	r2, r3
 8019e0e:	d304      	bcc.n	8019e1a <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	689b      	ldr	r3, [r3, #8]
 8019e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019e16:	1ad3      	subs	r3, r2, r3
 8019e18:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8019e1a:	68fb      	ldr	r3, [r7, #12]
 8019e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019e1e:	605a      	str	r2, [r3, #4]

	return xCount;
 8019e20:	687b      	ldr	r3, [r7, #4]
}
 8019e22:	4618      	mov	r0, r3
 8019e24:	3728      	adds	r7, #40	@ 0x28
 8019e26:	46bd      	mov	sp, r7
 8019e28:	bd80      	pop	{r7, pc}

08019e2a <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8019e2a:	b580      	push	{r7, lr}
 8019e2c:	b08a      	sub	sp, #40	@ 0x28
 8019e2e:	af00      	add	r7, sp, #0
 8019e30:	60f8      	str	r0, [r7, #12]
 8019e32:	60b9      	str	r1, [r7, #8]
 8019e34:	607a      	str	r2, [r7, #4]
 8019e36:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8019e38:	687a      	ldr	r2, [r7, #4]
 8019e3a:	683b      	ldr	r3, [r7, #0]
 8019e3c:	4293      	cmp	r3, r2
 8019e3e:	bf28      	it	cs
 8019e40:	4613      	movcs	r3, r2
 8019e42:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8019e44:	6a3b      	ldr	r3, [r7, #32]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d067      	beq.n	8019f1a <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	689a      	ldr	r2, [r3, #8]
 8019e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e56:	1ad3      	subs	r3, r2, r3
 8019e58:	6a3a      	ldr	r2, [r7, #32]
 8019e5a:	4293      	cmp	r3, r2
 8019e5c:	bf28      	it	cs
 8019e5e:	4613      	movcs	r3, r2
 8019e60:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8019e62:	69fa      	ldr	r2, [r7, #28]
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	429a      	cmp	r2, r3
 8019e68:	d90b      	bls.n	8019e82 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8019e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e6e:	f383 8811 	msr	BASEPRI, r3
 8019e72:	f3bf 8f6f 	isb	sy
 8019e76:	f3bf 8f4f 	dsb	sy
 8019e7a:	61bb      	str	r3, [r7, #24]
}
 8019e7c:	bf00      	nop
 8019e7e:	bf00      	nop
 8019e80:	e7fd      	b.n	8019e7e <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8019e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019e84:	69fb      	ldr	r3, [r7, #28]
 8019e86:	441a      	add	r2, r3
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	689b      	ldr	r3, [r3, #8]
 8019e8c:	429a      	cmp	r2, r3
 8019e8e:	d90b      	bls.n	8019ea8 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 8019e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e94:	f383 8811 	msr	BASEPRI, r3
 8019e98:	f3bf 8f6f 	isb	sy
 8019e9c:	f3bf 8f4f 	dsb	sy
 8019ea0:	617b      	str	r3, [r7, #20]
}
 8019ea2:	bf00      	nop
 8019ea4:	bf00      	nop
 8019ea6:	e7fd      	b.n	8019ea4 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	699a      	ldr	r2, [r3, #24]
 8019eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eae:	4413      	add	r3, r2
 8019eb0:	69fa      	ldr	r2, [r7, #28]
 8019eb2:	4619      	mov	r1, r3
 8019eb4:	68b8      	ldr	r0, [r7, #8]
 8019eb6:	f005 f986 	bl	801f1c6 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8019eba:	6a3a      	ldr	r2, [r7, #32]
 8019ebc:	69fb      	ldr	r3, [r7, #28]
 8019ebe:	429a      	cmp	r2, r3
 8019ec0:	d91a      	bls.n	8019ef8 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8019ec2:	6a3a      	ldr	r2, [r7, #32]
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	429a      	cmp	r2, r3
 8019ec8:	d90b      	bls.n	8019ee2 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8019eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ece:	f383 8811 	msr	BASEPRI, r3
 8019ed2:	f3bf 8f6f 	isb	sy
 8019ed6:	f3bf 8f4f 	dsb	sy
 8019eda:	613b      	str	r3, [r7, #16]
}
 8019edc:	bf00      	nop
 8019ede:	bf00      	nop
 8019ee0:	e7fd      	b.n	8019ede <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019ee2:	68ba      	ldr	r2, [r7, #8]
 8019ee4:	69fb      	ldr	r3, [r7, #28]
 8019ee6:	18d0      	adds	r0, r2, r3
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	6999      	ldr	r1, [r3, #24]
 8019eec:	6a3a      	ldr	r2, [r7, #32]
 8019eee:	69fb      	ldr	r3, [r7, #28]
 8019ef0:	1ad3      	subs	r3, r2, r3
 8019ef2:	461a      	mov	r2, r3
 8019ef4:	f005 f967 	bl	801f1c6 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8019ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019efa:	6a3b      	ldr	r3, [r7, #32]
 8019efc:	4413      	add	r3, r2
 8019efe:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8019f00:	68fb      	ldr	r3, [r7, #12]
 8019f02:	689b      	ldr	r3, [r3, #8]
 8019f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019f06:	429a      	cmp	r2, r3
 8019f08:	d304      	bcc.n	8019f14 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	689b      	ldr	r3, [r3, #8]
 8019f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019f10:	1ad3      	subs	r3, r2, r3
 8019f12:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019f18:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8019f1a:	6a3b      	ldr	r3, [r7, #32]
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	3728      	adds	r7, #40	@ 0x28
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bd80      	pop	{r7, pc}

08019f24 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8019f24:	b480      	push	{r7}
 8019f26:	b085      	sub	sp, #20
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	689a      	ldr	r2, [r3, #8]
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	685b      	ldr	r3, [r3, #4]
 8019f34:	4413      	add	r3, r2
 8019f36:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	68fa      	ldr	r2, [r7, #12]
 8019f3e:	1ad3      	subs	r3, r2, r3
 8019f40:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	689b      	ldr	r3, [r3, #8]
 8019f46:	68fa      	ldr	r2, [r7, #12]
 8019f48:	429a      	cmp	r2, r3
 8019f4a:	d304      	bcc.n	8019f56 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	689b      	ldr	r3, [r3, #8]
 8019f50:	68fa      	ldr	r2, [r7, #12]
 8019f52:	1ad3      	subs	r3, r2, r3
 8019f54:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8019f56:	68fb      	ldr	r3, [r7, #12]
}
 8019f58:	4618      	mov	r0, r3
 8019f5a:	3714      	adds	r7, #20
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f62:	4770      	bx	lr

08019f64 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b086      	sub	sp, #24
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	60f8      	str	r0, [r7, #12]
 8019f6c:	60b9      	str	r1, [r7, #8]
 8019f6e:	607a      	str	r2, [r7, #4]
 8019f70:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8019f72:	2355      	movs	r3, #85	@ 0x55
 8019f74:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8019f76:	687a      	ldr	r2, [r7, #4]
 8019f78:	6979      	ldr	r1, [r7, #20]
 8019f7a:	68b8      	ldr	r0, [r7, #8]
 8019f7c:	f004 f89b 	bl	801e0b6 <memset>
 8019f80:	4602      	mov	r2, r0
 8019f82:	68bb      	ldr	r3, [r7, #8]
 8019f84:	4293      	cmp	r3, r2
 8019f86:	d00b      	beq.n	8019fa0 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 8019f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f8c:	f383 8811 	msr	BASEPRI, r3
 8019f90:	f3bf 8f6f 	isb	sy
 8019f94:	f3bf 8f4f 	dsb	sy
 8019f98:	613b      	str	r3, [r7, #16]
}
 8019f9a:	bf00      	nop
 8019f9c:	bf00      	nop
 8019f9e:	e7fd      	b.n	8019f9c <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8019fa0:	2220      	movs	r2, #32
 8019fa2:	2100      	movs	r1, #0
 8019fa4:	68f8      	ldr	r0, [r7, #12]
 8019fa6:	f004 f886 	bl	801e0b6 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	68ba      	ldr	r2, [r7, #8]
 8019fae:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	687a      	ldr	r2, [r7, #4]
 8019fb4:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	683a      	ldr	r2, [r7, #0]
 8019fba:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8019fc2:	771a      	strb	r2, [r3, #28]
}
 8019fc4:	bf00      	nop
 8019fc6:	3718      	adds	r7, #24
 8019fc8:	46bd      	mov	sp, r7
 8019fca:	bd80      	pop	{r7, pc}

08019fcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b08e      	sub	sp, #56	@ 0x38
 8019fd0:	af04      	add	r7, sp, #16
 8019fd2:	60f8      	str	r0, [r7, #12]
 8019fd4:	60b9      	str	r1, [r7, #8]
 8019fd6:	607a      	str	r2, [r7, #4]
 8019fd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8019fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d10b      	bne.n	8019ff8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8019fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fe4:	f383 8811 	msr	BASEPRI, r3
 8019fe8:	f3bf 8f6f 	isb	sy
 8019fec:	f3bf 8f4f 	dsb	sy
 8019ff0:	623b      	str	r3, [r7, #32]
}
 8019ff2:	bf00      	nop
 8019ff4:	bf00      	nop
 8019ff6:	e7fd      	b.n	8019ff4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8019ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d10b      	bne.n	801a016 <xTaskCreateStatic+0x4a>
	__asm volatile
 8019ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a002:	f383 8811 	msr	BASEPRI, r3
 801a006:	f3bf 8f6f 	isb	sy
 801a00a:	f3bf 8f4f 	dsb	sy
 801a00e:	61fb      	str	r3, [r7, #28]
}
 801a010:	bf00      	nop
 801a012:	bf00      	nop
 801a014:	e7fd      	b.n	801a012 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801a016:	23a0      	movs	r3, #160	@ 0xa0
 801a018:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801a01a:	693b      	ldr	r3, [r7, #16]
 801a01c:	2ba0      	cmp	r3, #160	@ 0xa0
 801a01e:	d00b      	beq.n	801a038 <xTaskCreateStatic+0x6c>
	__asm volatile
 801a020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a024:	f383 8811 	msr	BASEPRI, r3
 801a028:	f3bf 8f6f 	isb	sy
 801a02c:	f3bf 8f4f 	dsb	sy
 801a030:	61bb      	str	r3, [r7, #24]
}
 801a032:	bf00      	nop
 801a034:	bf00      	nop
 801a036:	e7fd      	b.n	801a034 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801a038:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801a03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d01e      	beq.n	801a07e <xTaskCreateStatic+0xb2>
 801a040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a042:	2b00      	cmp	r3, #0
 801a044:	d01b      	beq.n	801a07e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a048:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a04c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a04e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a052:	2202      	movs	r2, #2
 801a054:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801a058:	2300      	movs	r3, #0
 801a05a:	9303      	str	r3, [sp, #12]
 801a05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a05e:	9302      	str	r3, [sp, #8]
 801a060:	f107 0314 	add.w	r3, r7, #20
 801a064:	9301      	str	r3, [sp, #4]
 801a066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a068:	9300      	str	r3, [sp, #0]
 801a06a:	683b      	ldr	r3, [r7, #0]
 801a06c:	687a      	ldr	r2, [r7, #4]
 801a06e:	68b9      	ldr	r1, [r7, #8]
 801a070:	68f8      	ldr	r0, [r7, #12]
 801a072:	f000 f851 	bl	801a118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a076:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a078:	f000 f8ee 	bl	801a258 <prvAddNewTaskToReadyList>
 801a07c:	e001      	b.n	801a082 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801a07e:	2300      	movs	r3, #0
 801a080:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801a082:	697b      	ldr	r3, [r7, #20]
	}
 801a084:	4618      	mov	r0, r3
 801a086:	3728      	adds	r7, #40	@ 0x28
 801a088:	46bd      	mov	sp, r7
 801a08a:	bd80      	pop	{r7, pc}

0801a08c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801a08c:	b580      	push	{r7, lr}
 801a08e:	b08c      	sub	sp, #48	@ 0x30
 801a090:	af04      	add	r7, sp, #16
 801a092:	60f8      	str	r0, [r7, #12]
 801a094:	60b9      	str	r1, [r7, #8]
 801a096:	603b      	str	r3, [r7, #0]
 801a098:	4613      	mov	r3, r2
 801a09a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a09c:	88fb      	ldrh	r3, [r7, #6]
 801a09e:	009b      	lsls	r3, r3, #2
 801a0a0:	4618      	mov	r0, r3
 801a0a2:	f001 feb3 	bl	801be0c <pvPortMalloc>
 801a0a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801a0a8:	697b      	ldr	r3, [r7, #20]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d00e      	beq.n	801a0cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a0ae:	20a0      	movs	r0, #160	@ 0xa0
 801a0b0:	f001 feac 	bl	801be0c <pvPortMalloc>
 801a0b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801a0b6:	69fb      	ldr	r3, [r7, #28]
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d003      	beq.n	801a0c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801a0bc:	69fb      	ldr	r3, [r7, #28]
 801a0be:	697a      	ldr	r2, [r7, #20]
 801a0c0:	631a      	str	r2, [r3, #48]	@ 0x30
 801a0c2:	e005      	b.n	801a0d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801a0c4:	6978      	ldr	r0, [r7, #20]
 801a0c6:	f001 ff6f 	bl	801bfa8 <vPortFree>
 801a0ca:	e001      	b.n	801a0d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801a0d0:	69fb      	ldr	r3, [r7, #28]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d017      	beq.n	801a106 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801a0d6:	69fb      	ldr	r3, [r7, #28]
 801a0d8:	2200      	movs	r2, #0
 801a0da:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a0de:	88fa      	ldrh	r2, [r7, #6]
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	9303      	str	r3, [sp, #12]
 801a0e4:	69fb      	ldr	r3, [r7, #28]
 801a0e6:	9302      	str	r3, [sp, #8]
 801a0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a0ea:	9301      	str	r3, [sp, #4]
 801a0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0ee:	9300      	str	r3, [sp, #0]
 801a0f0:	683b      	ldr	r3, [r7, #0]
 801a0f2:	68b9      	ldr	r1, [r7, #8]
 801a0f4:	68f8      	ldr	r0, [r7, #12]
 801a0f6:	f000 f80f 	bl	801a118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a0fa:	69f8      	ldr	r0, [r7, #28]
 801a0fc:	f000 f8ac 	bl	801a258 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a100:	2301      	movs	r3, #1
 801a102:	61bb      	str	r3, [r7, #24]
 801a104:	e002      	b.n	801a10c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a106:	f04f 33ff 	mov.w	r3, #4294967295
 801a10a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801a10c:	69bb      	ldr	r3, [r7, #24]
	}
 801a10e:	4618      	mov	r0, r3
 801a110:	3720      	adds	r7, #32
 801a112:	46bd      	mov	sp, r7
 801a114:	bd80      	pop	{r7, pc}
	...

0801a118 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b088      	sub	sp, #32
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	60f8      	str	r0, [r7, #12]
 801a120:	60b9      	str	r1, [r7, #8]
 801a122:	607a      	str	r2, [r7, #4]
 801a124:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801a126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801a130:	3b01      	subs	r3, #1
 801a132:	009b      	lsls	r3, r3, #2
 801a134:	4413      	add	r3, r2
 801a136:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801a138:	69bb      	ldr	r3, [r7, #24]
 801a13a:	f023 0307 	bic.w	r3, r3, #7
 801a13e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801a140:	69bb      	ldr	r3, [r7, #24]
 801a142:	f003 0307 	and.w	r3, r3, #7
 801a146:	2b00      	cmp	r3, #0
 801a148:	d00b      	beq.n	801a162 <prvInitialiseNewTask+0x4a>
	__asm volatile
 801a14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a14e:	f383 8811 	msr	BASEPRI, r3
 801a152:	f3bf 8f6f 	isb	sy
 801a156:	f3bf 8f4f 	dsb	sy
 801a15a:	617b      	str	r3, [r7, #20]
}
 801a15c:	bf00      	nop
 801a15e:	bf00      	nop
 801a160:	e7fd      	b.n	801a15e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801a162:	68bb      	ldr	r3, [r7, #8]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d01f      	beq.n	801a1a8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a168:	2300      	movs	r3, #0
 801a16a:	61fb      	str	r3, [r7, #28]
 801a16c:	e012      	b.n	801a194 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801a16e:	68ba      	ldr	r2, [r7, #8]
 801a170:	69fb      	ldr	r3, [r7, #28]
 801a172:	4413      	add	r3, r2
 801a174:	7819      	ldrb	r1, [r3, #0]
 801a176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a178:	69fb      	ldr	r3, [r7, #28]
 801a17a:	4413      	add	r3, r2
 801a17c:	3334      	adds	r3, #52	@ 0x34
 801a17e:	460a      	mov	r2, r1
 801a180:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801a182:	68ba      	ldr	r2, [r7, #8]
 801a184:	69fb      	ldr	r3, [r7, #28]
 801a186:	4413      	add	r3, r2
 801a188:	781b      	ldrb	r3, [r3, #0]
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d006      	beq.n	801a19c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a18e:	69fb      	ldr	r3, [r7, #28]
 801a190:	3301      	adds	r3, #1
 801a192:	61fb      	str	r3, [r7, #28]
 801a194:	69fb      	ldr	r3, [r7, #28]
 801a196:	2b0f      	cmp	r3, #15
 801a198:	d9e9      	bls.n	801a16e <prvInitialiseNewTask+0x56>
 801a19a:	e000      	b.n	801a19e <prvInitialiseNewTask+0x86>
			{
				break;
 801a19c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1a0:	2200      	movs	r2, #0
 801a1a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801a1a6:	e003      	b.n	801a1b0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801a1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801a1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1b2:	2b06      	cmp	r3, #6
 801a1b4:	d901      	bls.n	801a1ba <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801a1b6:	2306      	movs	r3, #6
 801a1b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801a1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a1be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801a1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a1c4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801a1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1c8:	2200      	movs	r2, #0
 801a1ca:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801a1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1ce:	3304      	adds	r3, #4
 801a1d0:	4618      	mov	r0, r3
 801a1d2:	f7fe fde2 	bl	8018d9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801a1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1d8:	3318      	adds	r3, #24
 801a1da:	4618      	mov	r0, r3
 801a1dc:	f7fe fddd 	bl	8018d9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801a1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a1e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1e8:	f1c3 0207 	rsb	r2, r3, #7
 801a1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801a1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a1f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801a1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1f8:	2200      	movs	r2, #0
 801a1fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a200:	2200      	movs	r2, #0
 801a202:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801a206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a208:	334c      	adds	r3, #76	@ 0x4c
 801a20a:	224c      	movs	r2, #76	@ 0x4c
 801a20c:	2100      	movs	r1, #0
 801a20e:	4618      	mov	r0, r3
 801a210:	f003 ff51 	bl	801e0b6 <memset>
 801a214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a216:	4a0d      	ldr	r2, [pc, #52]	@ (801a24c <prvInitialiseNewTask+0x134>)
 801a218:	651a      	str	r2, [r3, #80]	@ 0x50
 801a21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a21c:	4a0c      	ldr	r2, [pc, #48]	@ (801a250 <prvInitialiseNewTask+0x138>)
 801a21e:	655a      	str	r2, [r3, #84]	@ 0x54
 801a220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a222:	4a0c      	ldr	r2, [pc, #48]	@ (801a254 <prvInitialiseNewTask+0x13c>)
 801a224:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801a226:	683a      	ldr	r2, [r7, #0]
 801a228:	68f9      	ldr	r1, [r7, #12]
 801a22a:	69b8      	ldr	r0, [r7, #24]
 801a22c:	f001 fb9e 	bl	801b96c <pxPortInitialiseStack>
 801a230:	4602      	mov	r2, r0
 801a232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a234:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801a236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d002      	beq.n	801a242 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801a23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a23e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a240:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a242:	bf00      	nop
 801a244:	3720      	adds	r7, #32
 801a246:	46bd      	mov	sp, r7
 801a248:	bd80      	pop	{r7, pc}
 801a24a:	bf00      	nop
 801a24c:	20006564 	.word	0x20006564
 801a250:	200065cc 	.word	0x200065cc
 801a254:	20006634 	.word	0x20006634

0801a258 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801a258:	b580      	push	{r7, lr}
 801a25a:	b082      	sub	sp, #8
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801a260:	f001 fcb2 	bl	801bbc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801a264:	4b2a      	ldr	r3, [pc, #168]	@ (801a310 <prvAddNewTaskToReadyList+0xb8>)
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	3301      	adds	r3, #1
 801a26a:	4a29      	ldr	r2, [pc, #164]	@ (801a310 <prvAddNewTaskToReadyList+0xb8>)
 801a26c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801a26e:	4b29      	ldr	r3, [pc, #164]	@ (801a314 <prvAddNewTaskToReadyList+0xbc>)
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	2b00      	cmp	r3, #0
 801a274:	d109      	bne.n	801a28a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801a276:	4a27      	ldr	r2, [pc, #156]	@ (801a314 <prvAddNewTaskToReadyList+0xbc>)
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801a27c:	4b24      	ldr	r3, [pc, #144]	@ (801a310 <prvAddNewTaskToReadyList+0xb8>)
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	2b01      	cmp	r3, #1
 801a282:	d110      	bne.n	801a2a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801a284:	f000 fc26 	bl	801aad4 <prvInitialiseTaskLists>
 801a288:	e00d      	b.n	801a2a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801a28a:	4b23      	ldr	r3, [pc, #140]	@ (801a318 <prvAddNewTaskToReadyList+0xc0>)
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d109      	bne.n	801a2a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801a292:	4b20      	ldr	r3, [pc, #128]	@ (801a314 <prvAddNewTaskToReadyList+0xbc>)
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a29c:	429a      	cmp	r2, r3
 801a29e:	d802      	bhi.n	801a2a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801a2a0:	4a1c      	ldr	r2, [pc, #112]	@ (801a314 <prvAddNewTaskToReadyList+0xbc>)
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801a2a6:	4b1d      	ldr	r3, [pc, #116]	@ (801a31c <prvAddNewTaskToReadyList+0xc4>)
 801a2a8:	681b      	ldr	r3, [r3, #0]
 801a2aa:	3301      	adds	r3, #1
 801a2ac:	4a1b      	ldr	r2, [pc, #108]	@ (801a31c <prvAddNewTaskToReadyList+0xc4>)
 801a2ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a2b4:	2201      	movs	r2, #1
 801a2b6:	409a      	lsls	r2, r3
 801a2b8:	4b19      	ldr	r3, [pc, #100]	@ (801a320 <prvAddNewTaskToReadyList+0xc8>)
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	4313      	orrs	r3, r2
 801a2be:	4a18      	ldr	r2, [pc, #96]	@ (801a320 <prvAddNewTaskToReadyList+0xc8>)
 801a2c0:	6013      	str	r3, [r2, #0]
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a2c6:	4613      	mov	r3, r2
 801a2c8:	009b      	lsls	r3, r3, #2
 801a2ca:	4413      	add	r3, r2
 801a2cc:	009b      	lsls	r3, r3, #2
 801a2ce:	4a15      	ldr	r2, [pc, #84]	@ (801a324 <prvAddNewTaskToReadyList+0xcc>)
 801a2d0:	441a      	add	r2, r3
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	3304      	adds	r3, #4
 801a2d6:	4619      	mov	r1, r3
 801a2d8:	4610      	mov	r0, r2
 801a2da:	f7fe fd6b 	bl	8018db4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801a2de:	f001 fca5 	bl	801bc2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801a2e2:	4b0d      	ldr	r3, [pc, #52]	@ (801a318 <prvAddNewTaskToReadyList+0xc0>)
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d00e      	beq.n	801a308 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801a2ea:	4b0a      	ldr	r3, [pc, #40]	@ (801a314 <prvAddNewTaskToReadyList+0xbc>)
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a2f4:	429a      	cmp	r2, r3
 801a2f6:	d207      	bcs.n	801a308 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801a2f8:	4b0b      	ldr	r3, [pc, #44]	@ (801a328 <prvAddNewTaskToReadyList+0xd0>)
 801a2fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a2fe:	601a      	str	r2, [r3, #0]
 801a300:	f3bf 8f4f 	dsb	sy
 801a304:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a308:	bf00      	nop
 801a30a:	3708      	adds	r7, #8
 801a30c:	46bd      	mov	sp, r7
 801a30e:	bd80      	pop	{r7, pc}
 801a310:	200015ec 	.word	0x200015ec
 801a314:	200014ec 	.word	0x200014ec
 801a318:	200015f8 	.word	0x200015f8
 801a31c:	20001608 	.word	0x20001608
 801a320:	200015f4 	.word	0x200015f4
 801a324:	200014f0 	.word	0x200014f0
 801a328:	e000ed04 	.word	0xe000ed04

0801a32c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	b084      	sub	sp, #16
 801a330:	af00      	add	r7, sp, #0
 801a332:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801a334:	2300      	movs	r3, #0
 801a336:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d018      	beq.n	801a370 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801a33e:	4b14      	ldr	r3, [pc, #80]	@ (801a390 <vTaskDelay+0x64>)
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d00b      	beq.n	801a35e <vTaskDelay+0x32>
	__asm volatile
 801a346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a34a:	f383 8811 	msr	BASEPRI, r3
 801a34e:	f3bf 8f6f 	isb	sy
 801a352:	f3bf 8f4f 	dsb	sy
 801a356:	60bb      	str	r3, [r7, #8]
}
 801a358:	bf00      	nop
 801a35a:	bf00      	nop
 801a35c:	e7fd      	b.n	801a35a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801a35e:	f000 f88b 	bl	801a478 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801a362:	2100      	movs	r1, #0
 801a364:	6878      	ldr	r0, [r7, #4]
 801a366:	f000 ff5d 	bl	801b224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801a36a:	f000 f893 	bl	801a494 <xTaskResumeAll>
 801a36e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	2b00      	cmp	r3, #0
 801a374:	d107      	bne.n	801a386 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801a376:	4b07      	ldr	r3, [pc, #28]	@ (801a394 <vTaskDelay+0x68>)
 801a378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a37c:	601a      	str	r2, [r3, #0]
 801a37e:	f3bf 8f4f 	dsb	sy
 801a382:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a386:	bf00      	nop
 801a388:	3710      	adds	r7, #16
 801a38a:	46bd      	mov	sp, r7
 801a38c:	bd80      	pop	{r7, pc}
 801a38e:	bf00      	nop
 801a390:	20001614 	.word	0x20001614
 801a394:	e000ed04 	.word	0xe000ed04

0801a398 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b08a      	sub	sp, #40	@ 0x28
 801a39c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801a39e:	2300      	movs	r3, #0
 801a3a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801a3a2:	2300      	movs	r3, #0
 801a3a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801a3a6:	463a      	mov	r2, r7
 801a3a8:	1d39      	adds	r1, r7, #4
 801a3aa:	f107 0308 	add.w	r3, r7, #8
 801a3ae:	4618      	mov	r0, r3
 801a3b0:	f7e7 fd68 	bl	8001e84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801a3b4:	6839      	ldr	r1, [r7, #0]
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	68ba      	ldr	r2, [r7, #8]
 801a3ba:	9202      	str	r2, [sp, #8]
 801a3bc:	9301      	str	r3, [sp, #4]
 801a3be:	2300      	movs	r3, #0
 801a3c0:	9300      	str	r3, [sp, #0]
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	460a      	mov	r2, r1
 801a3c6:	4924      	ldr	r1, [pc, #144]	@ (801a458 <vTaskStartScheduler+0xc0>)
 801a3c8:	4824      	ldr	r0, [pc, #144]	@ (801a45c <vTaskStartScheduler+0xc4>)
 801a3ca:	f7ff fdff 	bl	8019fcc <xTaskCreateStatic>
 801a3ce:	4603      	mov	r3, r0
 801a3d0:	4a23      	ldr	r2, [pc, #140]	@ (801a460 <vTaskStartScheduler+0xc8>)
 801a3d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801a3d4:	4b22      	ldr	r3, [pc, #136]	@ (801a460 <vTaskStartScheduler+0xc8>)
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d002      	beq.n	801a3e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801a3dc:	2301      	movs	r3, #1
 801a3de:	617b      	str	r3, [r7, #20]
 801a3e0:	e001      	b.n	801a3e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801a3e2:	2300      	movs	r3, #0
 801a3e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801a3e6:	697b      	ldr	r3, [r7, #20]
 801a3e8:	2b01      	cmp	r3, #1
 801a3ea:	d102      	bne.n	801a3f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801a3ec:	f000 ff80 	bl	801b2f0 <xTimerCreateTimerTask>
 801a3f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801a3f2:	697b      	ldr	r3, [r7, #20]
 801a3f4:	2b01      	cmp	r3, #1
 801a3f6:	d11b      	bne.n	801a430 <vTaskStartScheduler+0x98>
	__asm volatile
 801a3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a3fc:	f383 8811 	msr	BASEPRI, r3
 801a400:	f3bf 8f6f 	isb	sy
 801a404:	f3bf 8f4f 	dsb	sy
 801a408:	613b      	str	r3, [r7, #16]
}
 801a40a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801a40c:	4b15      	ldr	r3, [pc, #84]	@ (801a464 <vTaskStartScheduler+0xcc>)
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	334c      	adds	r3, #76	@ 0x4c
 801a412:	4a15      	ldr	r2, [pc, #84]	@ (801a468 <vTaskStartScheduler+0xd0>)
 801a414:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801a416:	4b15      	ldr	r3, [pc, #84]	@ (801a46c <vTaskStartScheduler+0xd4>)
 801a418:	f04f 32ff 	mov.w	r2, #4294967295
 801a41c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a41e:	4b14      	ldr	r3, [pc, #80]	@ (801a470 <vTaskStartScheduler+0xd8>)
 801a420:	2201      	movs	r2, #1
 801a422:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a424:	4b13      	ldr	r3, [pc, #76]	@ (801a474 <vTaskStartScheduler+0xdc>)
 801a426:	2200      	movs	r2, #0
 801a428:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801a42a:	f001 fb29 	bl	801ba80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801a42e:	e00f      	b.n	801a450 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a430:	697b      	ldr	r3, [r7, #20]
 801a432:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a436:	d10b      	bne.n	801a450 <vTaskStartScheduler+0xb8>
	__asm volatile
 801a438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a43c:	f383 8811 	msr	BASEPRI, r3
 801a440:	f3bf 8f6f 	isb	sy
 801a444:	f3bf 8f4f 	dsb	sy
 801a448:	60fb      	str	r3, [r7, #12]
}
 801a44a:	bf00      	nop
 801a44c:	bf00      	nop
 801a44e:	e7fd      	b.n	801a44c <vTaskStartScheduler+0xb4>
}
 801a450:	bf00      	nop
 801a452:	3718      	adds	r7, #24
 801a454:	46bd      	mov	sp, r7
 801a456:	bd80      	pop	{r7, pc}
 801a458:	08025f98 	.word	0x08025f98
 801a45c:	0801aaa5 	.word	0x0801aaa5
 801a460:	20001610 	.word	0x20001610
 801a464:	200014ec 	.word	0x200014ec
 801a468:	200001c0 	.word	0x200001c0
 801a46c:	2000160c 	.word	0x2000160c
 801a470:	200015f8 	.word	0x200015f8
 801a474:	200015f0 	.word	0x200015f0

0801a478 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a478:	b480      	push	{r7}
 801a47a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801a47c:	4b04      	ldr	r3, [pc, #16]	@ (801a490 <vTaskSuspendAll+0x18>)
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	3301      	adds	r3, #1
 801a482:	4a03      	ldr	r2, [pc, #12]	@ (801a490 <vTaskSuspendAll+0x18>)
 801a484:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801a486:	bf00      	nop
 801a488:	46bd      	mov	sp, r7
 801a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a48e:	4770      	bx	lr
 801a490:	20001614 	.word	0x20001614

0801a494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a494:	b580      	push	{r7, lr}
 801a496:	b084      	sub	sp, #16
 801a498:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a49a:	2300      	movs	r3, #0
 801a49c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a49e:	2300      	movs	r3, #0
 801a4a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a4a2:	4b42      	ldr	r3, [pc, #264]	@ (801a5ac <xTaskResumeAll+0x118>)
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d10b      	bne.n	801a4c2 <xTaskResumeAll+0x2e>
	__asm volatile
 801a4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4ae:	f383 8811 	msr	BASEPRI, r3
 801a4b2:	f3bf 8f6f 	isb	sy
 801a4b6:	f3bf 8f4f 	dsb	sy
 801a4ba:	603b      	str	r3, [r7, #0]
}
 801a4bc:	bf00      	nop
 801a4be:	bf00      	nop
 801a4c0:	e7fd      	b.n	801a4be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a4c2:	f001 fb81 	bl	801bbc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a4c6:	4b39      	ldr	r3, [pc, #228]	@ (801a5ac <xTaskResumeAll+0x118>)
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	3b01      	subs	r3, #1
 801a4cc:	4a37      	ldr	r2, [pc, #220]	@ (801a5ac <xTaskResumeAll+0x118>)
 801a4ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a4d0:	4b36      	ldr	r3, [pc, #216]	@ (801a5ac <xTaskResumeAll+0x118>)
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d161      	bne.n	801a59c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a4d8:	4b35      	ldr	r3, [pc, #212]	@ (801a5b0 <xTaskResumeAll+0x11c>)
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d05d      	beq.n	801a59c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a4e0:	e02e      	b.n	801a540 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a4e2:	4b34      	ldr	r3, [pc, #208]	@ (801a5b4 <xTaskResumeAll+0x120>)
 801a4e4:	68db      	ldr	r3, [r3, #12]
 801a4e6:	68db      	ldr	r3, [r3, #12]
 801a4e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	3318      	adds	r3, #24
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	f7fe fcbd 	bl	8018e6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	3304      	adds	r3, #4
 801a4f8:	4618      	mov	r0, r3
 801a4fa:	f7fe fcb8 	bl	8018e6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a4fe:	68fb      	ldr	r3, [r7, #12]
 801a500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a502:	2201      	movs	r2, #1
 801a504:	409a      	lsls	r2, r3
 801a506:	4b2c      	ldr	r3, [pc, #176]	@ (801a5b8 <xTaskResumeAll+0x124>)
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	4313      	orrs	r3, r2
 801a50c:	4a2a      	ldr	r2, [pc, #168]	@ (801a5b8 <xTaskResumeAll+0x124>)
 801a50e:	6013      	str	r3, [r2, #0]
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a514:	4613      	mov	r3, r2
 801a516:	009b      	lsls	r3, r3, #2
 801a518:	4413      	add	r3, r2
 801a51a:	009b      	lsls	r3, r3, #2
 801a51c:	4a27      	ldr	r2, [pc, #156]	@ (801a5bc <xTaskResumeAll+0x128>)
 801a51e:	441a      	add	r2, r3
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	3304      	adds	r3, #4
 801a524:	4619      	mov	r1, r3
 801a526:	4610      	mov	r0, r2
 801a528:	f7fe fc44 	bl	8018db4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a530:	4b23      	ldr	r3, [pc, #140]	@ (801a5c0 <xTaskResumeAll+0x12c>)
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a536:	429a      	cmp	r2, r3
 801a538:	d302      	bcc.n	801a540 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801a53a:	4b22      	ldr	r3, [pc, #136]	@ (801a5c4 <xTaskResumeAll+0x130>)
 801a53c:	2201      	movs	r2, #1
 801a53e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a540:	4b1c      	ldr	r3, [pc, #112]	@ (801a5b4 <xTaskResumeAll+0x120>)
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	2b00      	cmp	r3, #0
 801a546:	d1cc      	bne.n	801a4e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d001      	beq.n	801a552 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a54e:	f000 fb65 	bl	801ac1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801a552:	4b1d      	ldr	r3, [pc, #116]	@ (801a5c8 <xTaskResumeAll+0x134>)
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d010      	beq.n	801a580 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a55e:	f000 f847 	bl	801a5f0 <xTaskIncrementTick>
 801a562:	4603      	mov	r3, r0
 801a564:	2b00      	cmp	r3, #0
 801a566:	d002      	beq.n	801a56e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801a568:	4b16      	ldr	r3, [pc, #88]	@ (801a5c4 <xTaskResumeAll+0x130>)
 801a56a:	2201      	movs	r2, #1
 801a56c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	3b01      	subs	r3, #1
 801a572:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	2b00      	cmp	r3, #0
 801a578:	d1f1      	bne.n	801a55e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801a57a:	4b13      	ldr	r3, [pc, #76]	@ (801a5c8 <xTaskResumeAll+0x134>)
 801a57c:	2200      	movs	r2, #0
 801a57e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a580:	4b10      	ldr	r3, [pc, #64]	@ (801a5c4 <xTaskResumeAll+0x130>)
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	2b00      	cmp	r3, #0
 801a586:	d009      	beq.n	801a59c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a588:	2301      	movs	r3, #1
 801a58a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a58c:	4b0f      	ldr	r3, [pc, #60]	@ (801a5cc <xTaskResumeAll+0x138>)
 801a58e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a592:	601a      	str	r2, [r3, #0]
 801a594:	f3bf 8f4f 	dsb	sy
 801a598:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a59c:	f001 fb46 	bl	801bc2c <vPortExitCritical>

	return xAlreadyYielded;
 801a5a0:	68bb      	ldr	r3, [r7, #8]
}
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	3710      	adds	r7, #16
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	bd80      	pop	{r7, pc}
 801a5aa:	bf00      	nop
 801a5ac:	20001614 	.word	0x20001614
 801a5b0:	200015ec 	.word	0x200015ec
 801a5b4:	200015ac 	.word	0x200015ac
 801a5b8:	200015f4 	.word	0x200015f4
 801a5bc:	200014f0 	.word	0x200014f0
 801a5c0:	200014ec 	.word	0x200014ec
 801a5c4:	20001600 	.word	0x20001600
 801a5c8:	200015fc 	.word	0x200015fc
 801a5cc:	e000ed04 	.word	0xe000ed04

0801a5d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a5d0:	b480      	push	{r7}
 801a5d2:	b083      	sub	sp, #12
 801a5d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a5d6:	4b05      	ldr	r3, [pc, #20]	@ (801a5ec <xTaskGetTickCount+0x1c>)
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a5dc:	687b      	ldr	r3, [r7, #4]
}
 801a5de:	4618      	mov	r0, r3
 801a5e0:	370c      	adds	r7, #12
 801a5e2:	46bd      	mov	sp, r7
 801a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5e8:	4770      	bx	lr
 801a5ea:	bf00      	nop
 801a5ec:	200015f0 	.word	0x200015f0

0801a5f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a5f0:	b580      	push	{r7, lr}
 801a5f2:	b086      	sub	sp, #24
 801a5f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a5f6:	2300      	movs	r3, #0
 801a5f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a5fa:	4b4f      	ldr	r3, [pc, #316]	@ (801a738 <xTaskIncrementTick+0x148>)
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	f040 808f 	bne.w	801a722 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a604:	4b4d      	ldr	r3, [pc, #308]	@ (801a73c <xTaskIncrementTick+0x14c>)
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	3301      	adds	r3, #1
 801a60a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a60c:	4a4b      	ldr	r2, [pc, #300]	@ (801a73c <xTaskIncrementTick+0x14c>)
 801a60e:	693b      	ldr	r3, [r7, #16]
 801a610:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a612:	693b      	ldr	r3, [r7, #16]
 801a614:	2b00      	cmp	r3, #0
 801a616:	d121      	bne.n	801a65c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801a618:	4b49      	ldr	r3, [pc, #292]	@ (801a740 <xTaskIncrementTick+0x150>)
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d00b      	beq.n	801a63a <xTaskIncrementTick+0x4a>
	__asm volatile
 801a622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a626:	f383 8811 	msr	BASEPRI, r3
 801a62a:	f3bf 8f6f 	isb	sy
 801a62e:	f3bf 8f4f 	dsb	sy
 801a632:	603b      	str	r3, [r7, #0]
}
 801a634:	bf00      	nop
 801a636:	bf00      	nop
 801a638:	e7fd      	b.n	801a636 <xTaskIncrementTick+0x46>
 801a63a:	4b41      	ldr	r3, [pc, #260]	@ (801a740 <xTaskIncrementTick+0x150>)
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	60fb      	str	r3, [r7, #12]
 801a640:	4b40      	ldr	r3, [pc, #256]	@ (801a744 <xTaskIncrementTick+0x154>)
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	4a3e      	ldr	r2, [pc, #248]	@ (801a740 <xTaskIncrementTick+0x150>)
 801a646:	6013      	str	r3, [r2, #0]
 801a648:	4a3e      	ldr	r2, [pc, #248]	@ (801a744 <xTaskIncrementTick+0x154>)
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	6013      	str	r3, [r2, #0]
 801a64e:	4b3e      	ldr	r3, [pc, #248]	@ (801a748 <xTaskIncrementTick+0x158>)
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	3301      	adds	r3, #1
 801a654:	4a3c      	ldr	r2, [pc, #240]	@ (801a748 <xTaskIncrementTick+0x158>)
 801a656:	6013      	str	r3, [r2, #0]
 801a658:	f000 fae0 	bl	801ac1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a65c:	4b3b      	ldr	r3, [pc, #236]	@ (801a74c <xTaskIncrementTick+0x15c>)
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	693a      	ldr	r2, [r7, #16]
 801a662:	429a      	cmp	r2, r3
 801a664:	d348      	bcc.n	801a6f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a666:	4b36      	ldr	r3, [pc, #216]	@ (801a740 <xTaskIncrementTick+0x150>)
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d104      	bne.n	801a67a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a670:	4b36      	ldr	r3, [pc, #216]	@ (801a74c <xTaskIncrementTick+0x15c>)
 801a672:	f04f 32ff 	mov.w	r2, #4294967295
 801a676:	601a      	str	r2, [r3, #0]
					break;
 801a678:	e03e      	b.n	801a6f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a67a:	4b31      	ldr	r3, [pc, #196]	@ (801a740 <xTaskIncrementTick+0x150>)
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	68db      	ldr	r3, [r3, #12]
 801a680:	68db      	ldr	r3, [r3, #12]
 801a682:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a684:	68bb      	ldr	r3, [r7, #8]
 801a686:	685b      	ldr	r3, [r3, #4]
 801a688:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a68a:	693a      	ldr	r2, [r7, #16]
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	429a      	cmp	r2, r3
 801a690:	d203      	bcs.n	801a69a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a692:	4a2e      	ldr	r2, [pc, #184]	@ (801a74c <xTaskIncrementTick+0x15c>)
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a698:	e02e      	b.n	801a6f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a69a:	68bb      	ldr	r3, [r7, #8]
 801a69c:	3304      	adds	r3, #4
 801a69e:	4618      	mov	r0, r3
 801a6a0:	f7fe fbe5 	bl	8018e6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d004      	beq.n	801a6b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a6ac:	68bb      	ldr	r3, [r7, #8]
 801a6ae:	3318      	adds	r3, #24
 801a6b0:	4618      	mov	r0, r3
 801a6b2:	f7fe fbdc 	bl	8018e6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a6b6:	68bb      	ldr	r3, [r7, #8]
 801a6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a6ba:	2201      	movs	r2, #1
 801a6bc:	409a      	lsls	r2, r3
 801a6be:	4b24      	ldr	r3, [pc, #144]	@ (801a750 <xTaskIncrementTick+0x160>)
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	4313      	orrs	r3, r2
 801a6c4:	4a22      	ldr	r2, [pc, #136]	@ (801a750 <xTaskIncrementTick+0x160>)
 801a6c6:	6013      	str	r3, [r2, #0]
 801a6c8:	68bb      	ldr	r3, [r7, #8]
 801a6ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a6cc:	4613      	mov	r3, r2
 801a6ce:	009b      	lsls	r3, r3, #2
 801a6d0:	4413      	add	r3, r2
 801a6d2:	009b      	lsls	r3, r3, #2
 801a6d4:	4a1f      	ldr	r2, [pc, #124]	@ (801a754 <xTaskIncrementTick+0x164>)
 801a6d6:	441a      	add	r2, r3
 801a6d8:	68bb      	ldr	r3, [r7, #8]
 801a6da:	3304      	adds	r3, #4
 801a6dc:	4619      	mov	r1, r3
 801a6de:	4610      	mov	r0, r2
 801a6e0:	f7fe fb68 	bl	8018db4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a6e4:	68bb      	ldr	r3, [r7, #8]
 801a6e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a6e8:	4b1b      	ldr	r3, [pc, #108]	@ (801a758 <xTaskIncrementTick+0x168>)
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a6ee:	429a      	cmp	r2, r3
 801a6f0:	d3b9      	bcc.n	801a666 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801a6f2:	2301      	movs	r3, #1
 801a6f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a6f6:	e7b6      	b.n	801a666 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a6f8:	4b17      	ldr	r3, [pc, #92]	@ (801a758 <xTaskIncrementTick+0x168>)
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a6fe:	4915      	ldr	r1, [pc, #84]	@ (801a754 <xTaskIncrementTick+0x164>)
 801a700:	4613      	mov	r3, r2
 801a702:	009b      	lsls	r3, r3, #2
 801a704:	4413      	add	r3, r2
 801a706:	009b      	lsls	r3, r3, #2
 801a708:	440b      	add	r3, r1
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	2b01      	cmp	r3, #1
 801a70e:	d901      	bls.n	801a714 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801a710:	2301      	movs	r3, #1
 801a712:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801a714:	4b11      	ldr	r3, [pc, #68]	@ (801a75c <xTaskIncrementTick+0x16c>)
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d007      	beq.n	801a72c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801a71c:	2301      	movs	r3, #1
 801a71e:	617b      	str	r3, [r7, #20]
 801a720:	e004      	b.n	801a72c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801a722:	4b0f      	ldr	r3, [pc, #60]	@ (801a760 <xTaskIncrementTick+0x170>)
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	3301      	adds	r3, #1
 801a728:	4a0d      	ldr	r2, [pc, #52]	@ (801a760 <xTaskIncrementTick+0x170>)
 801a72a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801a72c:	697b      	ldr	r3, [r7, #20]
}
 801a72e:	4618      	mov	r0, r3
 801a730:	3718      	adds	r7, #24
 801a732:	46bd      	mov	sp, r7
 801a734:	bd80      	pop	{r7, pc}
 801a736:	bf00      	nop
 801a738:	20001614 	.word	0x20001614
 801a73c:	200015f0 	.word	0x200015f0
 801a740:	200015a4 	.word	0x200015a4
 801a744:	200015a8 	.word	0x200015a8
 801a748:	20001604 	.word	0x20001604
 801a74c:	2000160c 	.word	0x2000160c
 801a750:	200015f4 	.word	0x200015f4
 801a754:	200014f0 	.word	0x200014f0
 801a758:	200014ec 	.word	0x200014ec
 801a75c:	20001600 	.word	0x20001600
 801a760:	200015fc 	.word	0x200015fc

0801a764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a764:	b480      	push	{r7}
 801a766:	b087      	sub	sp, #28
 801a768:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a76a:	4b2a      	ldr	r3, [pc, #168]	@ (801a814 <vTaskSwitchContext+0xb0>)
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d003      	beq.n	801a77a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a772:	4b29      	ldr	r3, [pc, #164]	@ (801a818 <vTaskSwitchContext+0xb4>)
 801a774:	2201      	movs	r2, #1
 801a776:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a778:	e045      	b.n	801a806 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 801a77a:	4b27      	ldr	r3, [pc, #156]	@ (801a818 <vTaskSwitchContext+0xb4>)
 801a77c:	2200      	movs	r2, #0
 801a77e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a780:	4b26      	ldr	r3, [pc, #152]	@ (801a81c <vTaskSwitchContext+0xb8>)
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	fab3 f383 	clz	r3, r3
 801a78c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801a78e:	7afb      	ldrb	r3, [r7, #11]
 801a790:	f1c3 031f 	rsb	r3, r3, #31
 801a794:	617b      	str	r3, [r7, #20]
 801a796:	4922      	ldr	r1, [pc, #136]	@ (801a820 <vTaskSwitchContext+0xbc>)
 801a798:	697a      	ldr	r2, [r7, #20]
 801a79a:	4613      	mov	r3, r2
 801a79c:	009b      	lsls	r3, r3, #2
 801a79e:	4413      	add	r3, r2
 801a7a0:	009b      	lsls	r3, r3, #2
 801a7a2:	440b      	add	r3, r1
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d10b      	bne.n	801a7c2 <vTaskSwitchContext+0x5e>
	__asm volatile
 801a7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a7ae:	f383 8811 	msr	BASEPRI, r3
 801a7b2:	f3bf 8f6f 	isb	sy
 801a7b6:	f3bf 8f4f 	dsb	sy
 801a7ba:	607b      	str	r3, [r7, #4]
}
 801a7bc:	bf00      	nop
 801a7be:	bf00      	nop
 801a7c0:	e7fd      	b.n	801a7be <vTaskSwitchContext+0x5a>
 801a7c2:	697a      	ldr	r2, [r7, #20]
 801a7c4:	4613      	mov	r3, r2
 801a7c6:	009b      	lsls	r3, r3, #2
 801a7c8:	4413      	add	r3, r2
 801a7ca:	009b      	lsls	r3, r3, #2
 801a7cc:	4a14      	ldr	r2, [pc, #80]	@ (801a820 <vTaskSwitchContext+0xbc>)
 801a7ce:	4413      	add	r3, r2
 801a7d0:	613b      	str	r3, [r7, #16]
 801a7d2:	693b      	ldr	r3, [r7, #16]
 801a7d4:	685b      	ldr	r3, [r3, #4]
 801a7d6:	685a      	ldr	r2, [r3, #4]
 801a7d8:	693b      	ldr	r3, [r7, #16]
 801a7da:	605a      	str	r2, [r3, #4]
 801a7dc:	693b      	ldr	r3, [r7, #16]
 801a7de:	685a      	ldr	r2, [r3, #4]
 801a7e0:	693b      	ldr	r3, [r7, #16]
 801a7e2:	3308      	adds	r3, #8
 801a7e4:	429a      	cmp	r2, r3
 801a7e6:	d104      	bne.n	801a7f2 <vTaskSwitchContext+0x8e>
 801a7e8:	693b      	ldr	r3, [r7, #16]
 801a7ea:	685b      	ldr	r3, [r3, #4]
 801a7ec:	685a      	ldr	r2, [r3, #4]
 801a7ee:	693b      	ldr	r3, [r7, #16]
 801a7f0:	605a      	str	r2, [r3, #4]
 801a7f2:	693b      	ldr	r3, [r7, #16]
 801a7f4:	685b      	ldr	r3, [r3, #4]
 801a7f6:	68db      	ldr	r3, [r3, #12]
 801a7f8:	4a0a      	ldr	r2, [pc, #40]	@ (801a824 <vTaskSwitchContext+0xc0>)
 801a7fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801a7fc:	4b09      	ldr	r3, [pc, #36]	@ (801a824 <vTaskSwitchContext+0xc0>)
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	334c      	adds	r3, #76	@ 0x4c
 801a802:	4a09      	ldr	r2, [pc, #36]	@ (801a828 <vTaskSwitchContext+0xc4>)
 801a804:	6013      	str	r3, [r2, #0]
}
 801a806:	bf00      	nop
 801a808:	371c      	adds	r7, #28
 801a80a:	46bd      	mov	sp, r7
 801a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a810:	4770      	bx	lr
 801a812:	bf00      	nop
 801a814:	20001614 	.word	0x20001614
 801a818:	20001600 	.word	0x20001600
 801a81c:	200015f4 	.word	0x200015f4
 801a820:	200014f0 	.word	0x200014f0
 801a824:	200014ec 	.word	0x200014ec
 801a828:	200001c0 	.word	0x200001c0

0801a82c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b084      	sub	sp, #16
 801a830:	af00      	add	r7, sp, #0
 801a832:	6078      	str	r0, [r7, #4]
 801a834:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d10b      	bne.n	801a854 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801a83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a840:	f383 8811 	msr	BASEPRI, r3
 801a844:	f3bf 8f6f 	isb	sy
 801a848:	f3bf 8f4f 	dsb	sy
 801a84c:	60fb      	str	r3, [r7, #12]
}
 801a84e:	bf00      	nop
 801a850:	bf00      	nop
 801a852:	e7fd      	b.n	801a850 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a854:	4b07      	ldr	r3, [pc, #28]	@ (801a874 <vTaskPlaceOnEventList+0x48>)
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	3318      	adds	r3, #24
 801a85a:	4619      	mov	r1, r3
 801a85c:	6878      	ldr	r0, [r7, #4]
 801a85e:	f7fe facd 	bl	8018dfc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a862:	2101      	movs	r1, #1
 801a864:	6838      	ldr	r0, [r7, #0]
 801a866:	f000 fcdd 	bl	801b224 <prvAddCurrentTaskToDelayedList>
}
 801a86a:	bf00      	nop
 801a86c:	3710      	adds	r7, #16
 801a86e:	46bd      	mov	sp, r7
 801a870:	bd80      	pop	{r7, pc}
 801a872:	bf00      	nop
 801a874:	200014ec 	.word	0x200014ec

0801a878 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a878:	b580      	push	{r7, lr}
 801a87a:	b086      	sub	sp, #24
 801a87c:	af00      	add	r7, sp, #0
 801a87e:	60f8      	str	r0, [r7, #12]
 801a880:	60b9      	str	r1, [r7, #8]
 801a882:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d10b      	bne.n	801a8a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801a88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a88e:	f383 8811 	msr	BASEPRI, r3
 801a892:	f3bf 8f6f 	isb	sy
 801a896:	f3bf 8f4f 	dsb	sy
 801a89a:	617b      	str	r3, [r7, #20]
}
 801a89c:	bf00      	nop
 801a89e:	bf00      	nop
 801a8a0:	e7fd      	b.n	801a89e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a8a2:	4b0a      	ldr	r3, [pc, #40]	@ (801a8cc <vTaskPlaceOnEventListRestricted+0x54>)
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	3318      	adds	r3, #24
 801a8a8:	4619      	mov	r1, r3
 801a8aa:	68f8      	ldr	r0, [r7, #12]
 801a8ac:	f7fe fa82 	bl	8018db4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d002      	beq.n	801a8bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801a8b6:	f04f 33ff 	mov.w	r3, #4294967295
 801a8ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a8bc:	6879      	ldr	r1, [r7, #4]
 801a8be:	68b8      	ldr	r0, [r7, #8]
 801a8c0:	f000 fcb0 	bl	801b224 <prvAddCurrentTaskToDelayedList>
	}
 801a8c4:	bf00      	nop
 801a8c6:	3718      	adds	r7, #24
 801a8c8:	46bd      	mov	sp, r7
 801a8ca:	bd80      	pop	{r7, pc}
 801a8cc:	200014ec 	.word	0x200014ec

0801a8d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a8d0:	b580      	push	{r7, lr}
 801a8d2:	b086      	sub	sp, #24
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	68db      	ldr	r3, [r3, #12]
 801a8dc:	68db      	ldr	r3, [r3, #12]
 801a8de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a8e0:	693b      	ldr	r3, [r7, #16]
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d10b      	bne.n	801a8fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801a8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8ea:	f383 8811 	msr	BASEPRI, r3
 801a8ee:	f3bf 8f6f 	isb	sy
 801a8f2:	f3bf 8f4f 	dsb	sy
 801a8f6:	60fb      	str	r3, [r7, #12]
}
 801a8f8:	bf00      	nop
 801a8fa:	bf00      	nop
 801a8fc:	e7fd      	b.n	801a8fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a8fe:	693b      	ldr	r3, [r7, #16]
 801a900:	3318      	adds	r3, #24
 801a902:	4618      	mov	r0, r3
 801a904:	f7fe fab3 	bl	8018e6e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a908:	4b1d      	ldr	r3, [pc, #116]	@ (801a980 <xTaskRemoveFromEventList+0xb0>)
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d11c      	bne.n	801a94a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a910:	693b      	ldr	r3, [r7, #16]
 801a912:	3304      	adds	r3, #4
 801a914:	4618      	mov	r0, r3
 801a916:	f7fe faaa 	bl	8018e6e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a91a:	693b      	ldr	r3, [r7, #16]
 801a91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a91e:	2201      	movs	r2, #1
 801a920:	409a      	lsls	r2, r3
 801a922:	4b18      	ldr	r3, [pc, #96]	@ (801a984 <xTaskRemoveFromEventList+0xb4>)
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	4313      	orrs	r3, r2
 801a928:	4a16      	ldr	r2, [pc, #88]	@ (801a984 <xTaskRemoveFromEventList+0xb4>)
 801a92a:	6013      	str	r3, [r2, #0]
 801a92c:	693b      	ldr	r3, [r7, #16]
 801a92e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a930:	4613      	mov	r3, r2
 801a932:	009b      	lsls	r3, r3, #2
 801a934:	4413      	add	r3, r2
 801a936:	009b      	lsls	r3, r3, #2
 801a938:	4a13      	ldr	r2, [pc, #76]	@ (801a988 <xTaskRemoveFromEventList+0xb8>)
 801a93a:	441a      	add	r2, r3
 801a93c:	693b      	ldr	r3, [r7, #16]
 801a93e:	3304      	adds	r3, #4
 801a940:	4619      	mov	r1, r3
 801a942:	4610      	mov	r0, r2
 801a944:	f7fe fa36 	bl	8018db4 <vListInsertEnd>
 801a948:	e005      	b.n	801a956 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a94a:	693b      	ldr	r3, [r7, #16]
 801a94c:	3318      	adds	r3, #24
 801a94e:	4619      	mov	r1, r3
 801a950:	480e      	ldr	r0, [pc, #56]	@ (801a98c <xTaskRemoveFromEventList+0xbc>)
 801a952:	f7fe fa2f 	bl	8018db4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a956:	693b      	ldr	r3, [r7, #16]
 801a958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a95a:	4b0d      	ldr	r3, [pc, #52]	@ (801a990 <xTaskRemoveFromEventList+0xc0>)
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a960:	429a      	cmp	r2, r3
 801a962:	d905      	bls.n	801a970 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a964:	2301      	movs	r3, #1
 801a966:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a968:	4b0a      	ldr	r3, [pc, #40]	@ (801a994 <xTaskRemoveFromEventList+0xc4>)
 801a96a:	2201      	movs	r2, #1
 801a96c:	601a      	str	r2, [r3, #0]
 801a96e:	e001      	b.n	801a974 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801a970:	2300      	movs	r3, #0
 801a972:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a974:	697b      	ldr	r3, [r7, #20]
}
 801a976:	4618      	mov	r0, r3
 801a978:	3718      	adds	r7, #24
 801a97a:	46bd      	mov	sp, r7
 801a97c:	bd80      	pop	{r7, pc}
 801a97e:	bf00      	nop
 801a980:	20001614 	.word	0x20001614
 801a984:	200015f4 	.word	0x200015f4
 801a988:	200014f0 	.word	0x200014f0
 801a98c:	200015ac 	.word	0x200015ac
 801a990:	200014ec 	.word	0x200014ec
 801a994:	20001600 	.word	0x20001600

0801a998 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a998:	b480      	push	{r7}
 801a99a:	b083      	sub	sp, #12
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a9a0:	4b06      	ldr	r3, [pc, #24]	@ (801a9bc <vTaskInternalSetTimeOutState+0x24>)
 801a9a2:	681a      	ldr	r2, [r3, #0]
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a9a8:	4b05      	ldr	r3, [pc, #20]	@ (801a9c0 <vTaskInternalSetTimeOutState+0x28>)
 801a9aa:	681a      	ldr	r2, [r3, #0]
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	605a      	str	r2, [r3, #4]
}
 801a9b0:	bf00      	nop
 801a9b2:	370c      	adds	r7, #12
 801a9b4:	46bd      	mov	sp, r7
 801a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ba:	4770      	bx	lr
 801a9bc:	20001604 	.word	0x20001604
 801a9c0:	200015f0 	.word	0x200015f0

0801a9c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a9c4:	b580      	push	{r7, lr}
 801a9c6:	b088      	sub	sp, #32
 801a9c8:	af00      	add	r7, sp, #0
 801a9ca:	6078      	str	r0, [r7, #4]
 801a9cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d10b      	bne.n	801a9ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801a9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9d8:	f383 8811 	msr	BASEPRI, r3
 801a9dc:	f3bf 8f6f 	isb	sy
 801a9e0:	f3bf 8f4f 	dsb	sy
 801a9e4:	613b      	str	r3, [r7, #16]
}
 801a9e6:	bf00      	nop
 801a9e8:	bf00      	nop
 801a9ea:	e7fd      	b.n	801a9e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801a9ec:	683b      	ldr	r3, [r7, #0]
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d10b      	bne.n	801aa0a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801a9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9f6:	f383 8811 	msr	BASEPRI, r3
 801a9fa:	f3bf 8f6f 	isb	sy
 801a9fe:	f3bf 8f4f 	dsb	sy
 801aa02:	60fb      	str	r3, [r7, #12]
}
 801aa04:	bf00      	nop
 801aa06:	bf00      	nop
 801aa08:	e7fd      	b.n	801aa06 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801aa0a:	f001 f8dd 	bl	801bbc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801aa0e:	4b1d      	ldr	r3, [pc, #116]	@ (801aa84 <xTaskCheckForTimeOut+0xc0>)
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	685b      	ldr	r3, [r3, #4]
 801aa18:	69ba      	ldr	r2, [r7, #24]
 801aa1a:	1ad3      	subs	r3, r2, r3
 801aa1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801aa1e:	683b      	ldr	r3, [r7, #0]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa26:	d102      	bne.n	801aa2e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801aa28:	2300      	movs	r3, #0
 801aa2a:	61fb      	str	r3, [r7, #28]
 801aa2c:	e023      	b.n	801aa76 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	681a      	ldr	r2, [r3, #0]
 801aa32:	4b15      	ldr	r3, [pc, #84]	@ (801aa88 <xTaskCheckForTimeOut+0xc4>)
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	429a      	cmp	r2, r3
 801aa38:	d007      	beq.n	801aa4a <xTaskCheckForTimeOut+0x86>
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	685b      	ldr	r3, [r3, #4]
 801aa3e:	69ba      	ldr	r2, [r7, #24]
 801aa40:	429a      	cmp	r2, r3
 801aa42:	d302      	bcc.n	801aa4a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801aa44:	2301      	movs	r3, #1
 801aa46:	61fb      	str	r3, [r7, #28]
 801aa48:	e015      	b.n	801aa76 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801aa4a:	683b      	ldr	r3, [r7, #0]
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	697a      	ldr	r2, [r7, #20]
 801aa50:	429a      	cmp	r2, r3
 801aa52:	d20b      	bcs.n	801aa6c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801aa54:	683b      	ldr	r3, [r7, #0]
 801aa56:	681a      	ldr	r2, [r3, #0]
 801aa58:	697b      	ldr	r3, [r7, #20]
 801aa5a:	1ad2      	subs	r2, r2, r3
 801aa5c:	683b      	ldr	r3, [r7, #0]
 801aa5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801aa60:	6878      	ldr	r0, [r7, #4]
 801aa62:	f7ff ff99 	bl	801a998 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801aa66:	2300      	movs	r3, #0
 801aa68:	61fb      	str	r3, [r7, #28]
 801aa6a:	e004      	b.n	801aa76 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801aa6c:	683b      	ldr	r3, [r7, #0]
 801aa6e:	2200      	movs	r2, #0
 801aa70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801aa72:	2301      	movs	r3, #1
 801aa74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801aa76:	f001 f8d9 	bl	801bc2c <vPortExitCritical>

	return xReturn;
 801aa7a:	69fb      	ldr	r3, [r7, #28]
}
 801aa7c:	4618      	mov	r0, r3
 801aa7e:	3720      	adds	r7, #32
 801aa80:	46bd      	mov	sp, r7
 801aa82:	bd80      	pop	{r7, pc}
 801aa84:	200015f0 	.word	0x200015f0
 801aa88:	20001604 	.word	0x20001604

0801aa8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801aa8c:	b480      	push	{r7}
 801aa8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801aa90:	4b03      	ldr	r3, [pc, #12]	@ (801aaa0 <vTaskMissedYield+0x14>)
 801aa92:	2201      	movs	r2, #1
 801aa94:	601a      	str	r2, [r3, #0]
}
 801aa96:	bf00      	nop
 801aa98:	46bd      	mov	sp, r7
 801aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa9e:	4770      	bx	lr
 801aaa0:	20001600 	.word	0x20001600

0801aaa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	b082      	sub	sp, #8
 801aaa8:	af00      	add	r7, sp, #0
 801aaaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801aaac:	f000 f852 	bl	801ab54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801aab0:	4b06      	ldr	r3, [pc, #24]	@ (801aacc <prvIdleTask+0x28>)
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	2b01      	cmp	r3, #1
 801aab6:	d9f9      	bls.n	801aaac <prvIdleTask+0x8>
			{
				taskYIELD();
 801aab8:	4b05      	ldr	r3, [pc, #20]	@ (801aad0 <prvIdleTask+0x2c>)
 801aaba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801aabe:	601a      	str	r2, [r3, #0]
 801aac0:	f3bf 8f4f 	dsb	sy
 801aac4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801aac8:	e7f0      	b.n	801aaac <prvIdleTask+0x8>
 801aaca:	bf00      	nop
 801aacc:	200014f0 	.word	0x200014f0
 801aad0:	e000ed04 	.word	0xe000ed04

0801aad4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b082      	sub	sp, #8
 801aad8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801aada:	2300      	movs	r3, #0
 801aadc:	607b      	str	r3, [r7, #4]
 801aade:	e00c      	b.n	801aafa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801aae0:	687a      	ldr	r2, [r7, #4]
 801aae2:	4613      	mov	r3, r2
 801aae4:	009b      	lsls	r3, r3, #2
 801aae6:	4413      	add	r3, r2
 801aae8:	009b      	lsls	r3, r3, #2
 801aaea:	4a12      	ldr	r2, [pc, #72]	@ (801ab34 <prvInitialiseTaskLists+0x60>)
 801aaec:	4413      	add	r3, r2
 801aaee:	4618      	mov	r0, r3
 801aaf0:	f7fe f933 	bl	8018d5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	3301      	adds	r3, #1
 801aaf8:	607b      	str	r3, [r7, #4]
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	2b06      	cmp	r3, #6
 801aafe:	d9ef      	bls.n	801aae0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801ab00:	480d      	ldr	r0, [pc, #52]	@ (801ab38 <prvInitialiseTaskLists+0x64>)
 801ab02:	f7fe f92a 	bl	8018d5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801ab06:	480d      	ldr	r0, [pc, #52]	@ (801ab3c <prvInitialiseTaskLists+0x68>)
 801ab08:	f7fe f927 	bl	8018d5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801ab0c:	480c      	ldr	r0, [pc, #48]	@ (801ab40 <prvInitialiseTaskLists+0x6c>)
 801ab0e:	f7fe f924 	bl	8018d5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801ab12:	480c      	ldr	r0, [pc, #48]	@ (801ab44 <prvInitialiseTaskLists+0x70>)
 801ab14:	f7fe f921 	bl	8018d5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801ab18:	480b      	ldr	r0, [pc, #44]	@ (801ab48 <prvInitialiseTaskLists+0x74>)
 801ab1a:	f7fe f91e 	bl	8018d5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801ab1e:	4b0b      	ldr	r3, [pc, #44]	@ (801ab4c <prvInitialiseTaskLists+0x78>)
 801ab20:	4a05      	ldr	r2, [pc, #20]	@ (801ab38 <prvInitialiseTaskLists+0x64>)
 801ab22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801ab24:	4b0a      	ldr	r3, [pc, #40]	@ (801ab50 <prvInitialiseTaskLists+0x7c>)
 801ab26:	4a05      	ldr	r2, [pc, #20]	@ (801ab3c <prvInitialiseTaskLists+0x68>)
 801ab28:	601a      	str	r2, [r3, #0]
}
 801ab2a:	bf00      	nop
 801ab2c:	3708      	adds	r7, #8
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	bd80      	pop	{r7, pc}
 801ab32:	bf00      	nop
 801ab34:	200014f0 	.word	0x200014f0
 801ab38:	2000157c 	.word	0x2000157c
 801ab3c:	20001590 	.word	0x20001590
 801ab40:	200015ac 	.word	0x200015ac
 801ab44:	200015c0 	.word	0x200015c0
 801ab48:	200015d8 	.word	0x200015d8
 801ab4c:	200015a4 	.word	0x200015a4
 801ab50:	200015a8 	.word	0x200015a8

0801ab54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b082      	sub	sp, #8
 801ab58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801ab5a:	e019      	b.n	801ab90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801ab5c:	f001 f834 	bl	801bbc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ab60:	4b10      	ldr	r3, [pc, #64]	@ (801aba4 <prvCheckTasksWaitingTermination+0x50>)
 801ab62:	68db      	ldr	r3, [r3, #12]
 801ab64:	68db      	ldr	r3, [r3, #12]
 801ab66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	3304      	adds	r3, #4
 801ab6c:	4618      	mov	r0, r3
 801ab6e:	f7fe f97e 	bl	8018e6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 801ab72:	4b0d      	ldr	r3, [pc, #52]	@ (801aba8 <prvCheckTasksWaitingTermination+0x54>)
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	3b01      	subs	r3, #1
 801ab78:	4a0b      	ldr	r2, [pc, #44]	@ (801aba8 <prvCheckTasksWaitingTermination+0x54>)
 801ab7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801ab7c:	4b0b      	ldr	r3, [pc, #44]	@ (801abac <prvCheckTasksWaitingTermination+0x58>)
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	3b01      	subs	r3, #1
 801ab82:	4a0a      	ldr	r2, [pc, #40]	@ (801abac <prvCheckTasksWaitingTermination+0x58>)
 801ab84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801ab86:	f001 f851 	bl	801bc2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801ab8a:	6878      	ldr	r0, [r7, #4]
 801ab8c:	f000 f810 	bl	801abb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801ab90:	4b06      	ldr	r3, [pc, #24]	@ (801abac <prvCheckTasksWaitingTermination+0x58>)
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d1e1      	bne.n	801ab5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801ab98:	bf00      	nop
 801ab9a:	bf00      	nop
 801ab9c:	3708      	adds	r7, #8
 801ab9e:	46bd      	mov	sp, r7
 801aba0:	bd80      	pop	{r7, pc}
 801aba2:	bf00      	nop
 801aba4:	200015c0 	.word	0x200015c0
 801aba8:	200015ec 	.word	0x200015ec
 801abac:	200015d4 	.word	0x200015d4

0801abb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b084      	sub	sp, #16
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	334c      	adds	r3, #76	@ 0x4c
 801abbc:	4618      	mov	r0, r3
 801abbe:	f004 fa15 	bl	801efec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d108      	bne.n	801abde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801abd0:	4618      	mov	r0, r3
 801abd2:	f001 f9e9 	bl	801bfa8 <vPortFree>
				vPortFree( pxTCB );
 801abd6:	6878      	ldr	r0, [r7, #4]
 801abd8:	f001 f9e6 	bl	801bfa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801abdc:	e019      	b.n	801ac12 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801abe4:	2b01      	cmp	r3, #1
 801abe6:	d103      	bne.n	801abf0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801abe8:	6878      	ldr	r0, [r7, #4]
 801abea:	f001 f9dd 	bl	801bfa8 <vPortFree>
	}
 801abee:	e010      	b.n	801ac12 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801abf6:	2b02      	cmp	r3, #2
 801abf8:	d00b      	beq.n	801ac12 <prvDeleteTCB+0x62>
	__asm volatile
 801abfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801abfe:	f383 8811 	msr	BASEPRI, r3
 801ac02:	f3bf 8f6f 	isb	sy
 801ac06:	f3bf 8f4f 	dsb	sy
 801ac0a:	60fb      	str	r3, [r7, #12]
}
 801ac0c:	bf00      	nop
 801ac0e:	bf00      	nop
 801ac10:	e7fd      	b.n	801ac0e <prvDeleteTCB+0x5e>
	}
 801ac12:	bf00      	nop
 801ac14:	3710      	adds	r7, #16
 801ac16:	46bd      	mov	sp, r7
 801ac18:	bd80      	pop	{r7, pc}
	...

0801ac1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801ac1c:	b480      	push	{r7}
 801ac1e:	b083      	sub	sp, #12
 801ac20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ac22:	4b0c      	ldr	r3, [pc, #48]	@ (801ac54 <prvResetNextTaskUnblockTime+0x38>)
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d104      	bne.n	801ac36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801ac2c:	4b0a      	ldr	r3, [pc, #40]	@ (801ac58 <prvResetNextTaskUnblockTime+0x3c>)
 801ac2e:	f04f 32ff 	mov.w	r2, #4294967295
 801ac32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801ac34:	e008      	b.n	801ac48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ac36:	4b07      	ldr	r3, [pc, #28]	@ (801ac54 <prvResetNextTaskUnblockTime+0x38>)
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	68db      	ldr	r3, [r3, #12]
 801ac3c:	68db      	ldr	r3, [r3, #12]
 801ac3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	685b      	ldr	r3, [r3, #4]
 801ac44:	4a04      	ldr	r2, [pc, #16]	@ (801ac58 <prvResetNextTaskUnblockTime+0x3c>)
 801ac46:	6013      	str	r3, [r2, #0]
}
 801ac48:	bf00      	nop
 801ac4a:	370c      	adds	r7, #12
 801ac4c:	46bd      	mov	sp, r7
 801ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac52:	4770      	bx	lr
 801ac54:	200015a4 	.word	0x200015a4
 801ac58:	2000160c 	.word	0x2000160c

0801ac5c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801ac5c:	b480      	push	{r7}
 801ac5e:	b083      	sub	sp, #12
 801ac60:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801ac62:	4b05      	ldr	r3, [pc, #20]	@ (801ac78 <xTaskGetCurrentTaskHandle+0x1c>)
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	607b      	str	r3, [r7, #4]

		return xReturn;
 801ac68:	687b      	ldr	r3, [r7, #4]
	}
 801ac6a:	4618      	mov	r0, r3
 801ac6c:	370c      	adds	r7, #12
 801ac6e:	46bd      	mov	sp, r7
 801ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac74:	4770      	bx	lr
 801ac76:	bf00      	nop
 801ac78:	200014ec 	.word	0x200014ec

0801ac7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801ac7c:	b480      	push	{r7}
 801ac7e:	b083      	sub	sp, #12
 801ac80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801ac82:	4b0b      	ldr	r3, [pc, #44]	@ (801acb0 <xTaskGetSchedulerState+0x34>)
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d102      	bne.n	801ac90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801ac8a:	2301      	movs	r3, #1
 801ac8c:	607b      	str	r3, [r7, #4]
 801ac8e:	e008      	b.n	801aca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ac90:	4b08      	ldr	r3, [pc, #32]	@ (801acb4 <xTaskGetSchedulerState+0x38>)
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	d102      	bne.n	801ac9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801ac98:	2302      	movs	r3, #2
 801ac9a:	607b      	str	r3, [r7, #4]
 801ac9c:	e001      	b.n	801aca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801ac9e:	2300      	movs	r3, #0
 801aca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801aca2:	687b      	ldr	r3, [r7, #4]
	}
 801aca4:	4618      	mov	r0, r3
 801aca6:	370c      	adds	r7, #12
 801aca8:	46bd      	mov	sp, r7
 801acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acae:	4770      	bx	lr
 801acb0:	200015f8 	.word	0x200015f8
 801acb4:	20001614 	.word	0x20001614

0801acb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801acb8:	b580      	push	{r7, lr}
 801acba:	b086      	sub	sp, #24
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801acc4:	2300      	movs	r3, #0
 801acc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	2b00      	cmp	r3, #0
 801accc:	d070      	beq.n	801adb0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801acce:	4b3b      	ldr	r3, [pc, #236]	@ (801adbc <xTaskPriorityDisinherit+0x104>)
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	693a      	ldr	r2, [r7, #16]
 801acd4:	429a      	cmp	r2, r3
 801acd6:	d00b      	beq.n	801acf0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801acd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801acdc:	f383 8811 	msr	BASEPRI, r3
 801ace0:	f3bf 8f6f 	isb	sy
 801ace4:	f3bf 8f4f 	dsb	sy
 801ace8:	60fb      	str	r3, [r7, #12]
}
 801acea:	bf00      	nop
 801acec:	bf00      	nop
 801acee:	e7fd      	b.n	801acec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801acf0:	693b      	ldr	r3, [r7, #16]
 801acf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d10b      	bne.n	801ad10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801acf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801acfc:	f383 8811 	msr	BASEPRI, r3
 801ad00:	f3bf 8f6f 	isb	sy
 801ad04:	f3bf 8f4f 	dsb	sy
 801ad08:	60bb      	str	r3, [r7, #8]
}
 801ad0a:	bf00      	nop
 801ad0c:	bf00      	nop
 801ad0e:	e7fd      	b.n	801ad0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801ad10:	693b      	ldr	r3, [r7, #16]
 801ad12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ad14:	1e5a      	subs	r2, r3, #1
 801ad16:	693b      	ldr	r3, [r7, #16]
 801ad18:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801ad1a:	693b      	ldr	r3, [r7, #16]
 801ad1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ad1e:	693b      	ldr	r3, [r7, #16]
 801ad20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ad22:	429a      	cmp	r2, r3
 801ad24:	d044      	beq.n	801adb0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801ad26:	693b      	ldr	r3, [r7, #16]
 801ad28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d140      	bne.n	801adb0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ad2e:	693b      	ldr	r3, [r7, #16]
 801ad30:	3304      	adds	r3, #4
 801ad32:	4618      	mov	r0, r3
 801ad34:	f7fe f89b 	bl	8018e6e <uxListRemove>
 801ad38:	4603      	mov	r3, r0
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d115      	bne.n	801ad6a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801ad3e:	693b      	ldr	r3, [r7, #16]
 801ad40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ad42:	491f      	ldr	r1, [pc, #124]	@ (801adc0 <xTaskPriorityDisinherit+0x108>)
 801ad44:	4613      	mov	r3, r2
 801ad46:	009b      	lsls	r3, r3, #2
 801ad48:	4413      	add	r3, r2
 801ad4a:	009b      	lsls	r3, r3, #2
 801ad4c:	440b      	add	r3, r1
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d10a      	bne.n	801ad6a <xTaskPriorityDisinherit+0xb2>
 801ad54:	693b      	ldr	r3, [r7, #16]
 801ad56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad58:	2201      	movs	r2, #1
 801ad5a:	fa02 f303 	lsl.w	r3, r2, r3
 801ad5e:	43da      	mvns	r2, r3
 801ad60:	4b18      	ldr	r3, [pc, #96]	@ (801adc4 <xTaskPriorityDisinherit+0x10c>)
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	4013      	ands	r3, r2
 801ad66:	4a17      	ldr	r2, [pc, #92]	@ (801adc4 <xTaskPriorityDisinherit+0x10c>)
 801ad68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801ad6a:	693b      	ldr	r3, [r7, #16]
 801ad6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ad6e:	693b      	ldr	r3, [r7, #16]
 801ad70:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ad72:	693b      	ldr	r3, [r7, #16]
 801ad74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad76:	f1c3 0207 	rsb	r2, r3, #7
 801ad7a:	693b      	ldr	r3, [r7, #16]
 801ad7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801ad7e:	693b      	ldr	r3, [r7, #16]
 801ad80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad82:	2201      	movs	r2, #1
 801ad84:	409a      	lsls	r2, r3
 801ad86:	4b0f      	ldr	r3, [pc, #60]	@ (801adc4 <xTaskPriorityDisinherit+0x10c>)
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	4313      	orrs	r3, r2
 801ad8c:	4a0d      	ldr	r2, [pc, #52]	@ (801adc4 <xTaskPriorityDisinherit+0x10c>)
 801ad8e:	6013      	str	r3, [r2, #0]
 801ad90:	693b      	ldr	r3, [r7, #16]
 801ad92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ad94:	4613      	mov	r3, r2
 801ad96:	009b      	lsls	r3, r3, #2
 801ad98:	4413      	add	r3, r2
 801ad9a:	009b      	lsls	r3, r3, #2
 801ad9c:	4a08      	ldr	r2, [pc, #32]	@ (801adc0 <xTaskPriorityDisinherit+0x108>)
 801ad9e:	441a      	add	r2, r3
 801ada0:	693b      	ldr	r3, [r7, #16]
 801ada2:	3304      	adds	r3, #4
 801ada4:	4619      	mov	r1, r3
 801ada6:	4610      	mov	r0, r2
 801ada8:	f7fe f804 	bl	8018db4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801adac:	2301      	movs	r3, #1
 801adae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801adb0:	697b      	ldr	r3, [r7, #20]
	}
 801adb2:	4618      	mov	r0, r3
 801adb4:	3718      	adds	r7, #24
 801adb6:	46bd      	mov	sp, r7
 801adb8:	bd80      	pop	{r7, pc}
 801adba:	bf00      	nop
 801adbc:	200014ec 	.word	0x200014ec
 801adc0:	200014f0 	.word	0x200014f0
 801adc4:	200015f4 	.word	0x200015f4

0801adc8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801adc8:	b580      	push	{r7, lr}
 801adca:	b086      	sub	sp, #24
 801adcc:	af00      	add	r7, sp, #0
 801adce:	60f8      	str	r0, [r7, #12]
 801add0:	60b9      	str	r1, [r7, #8]
 801add2:	607a      	str	r2, [r7, #4]
 801add4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801add6:	f000 fef7 	bl	801bbc8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801adda:	4b29      	ldr	r3, [pc, #164]	@ (801ae80 <xTaskNotifyWait+0xb8>)
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 801ade2:	b2db      	uxtb	r3, r3
 801ade4:	2b02      	cmp	r3, #2
 801ade6:	d01c      	beq.n	801ae22 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801ade8:	4b25      	ldr	r3, [pc, #148]	@ (801ae80 <xTaskNotifyWait+0xb8>)
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 801adf0:	68fa      	ldr	r2, [r7, #12]
 801adf2:	43d2      	mvns	r2, r2
 801adf4:	400a      	ands	r2, r1
 801adf6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801adfa:	4b21      	ldr	r3, [pc, #132]	@ (801ae80 <xTaskNotifyWait+0xb8>)
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	2201      	movs	r2, #1
 801ae00:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 801ae04:	683b      	ldr	r3, [r7, #0]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d00b      	beq.n	801ae22 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801ae0a:	2101      	movs	r1, #1
 801ae0c:	6838      	ldr	r0, [r7, #0]
 801ae0e:	f000 fa09 	bl	801b224 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801ae12:	4b1c      	ldr	r3, [pc, #112]	@ (801ae84 <xTaskNotifyWait+0xbc>)
 801ae14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ae18:	601a      	str	r2, [r3, #0]
 801ae1a:	f3bf 8f4f 	dsb	sy
 801ae1e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801ae22:	f000 ff03 	bl	801bc2c <vPortExitCritical>

		taskENTER_CRITICAL();
 801ae26:	f000 fecf 	bl	801bbc8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d005      	beq.n	801ae3c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801ae30:	4b13      	ldr	r3, [pc, #76]	@ (801ae80 <xTaskNotifyWait+0xb8>)
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801ae3c:	4b10      	ldr	r3, [pc, #64]	@ (801ae80 <xTaskNotifyWait+0xb8>)
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 801ae44:	b2db      	uxtb	r3, r3
 801ae46:	2b02      	cmp	r3, #2
 801ae48:	d002      	beq.n	801ae50 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801ae4a:	2300      	movs	r3, #0
 801ae4c:	617b      	str	r3, [r7, #20]
 801ae4e:	e00a      	b.n	801ae66 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801ae50:	4b0b      	ldr	r3, [pc, #44]	@ (801ae80 <xTaskNotifyWait+0xb8>)
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 801ae58:	68ba      	ldr	r2, [r7, #8]
 801ae5a:	43d2      	mvns	r2, r2
 801ae5c:	400a      	ands	r2, r1
 801ae5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 801ae62:	2301      	movs	r3, #1
 801ae64:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801ae66:	4b06      	ldr	r3, [pc, #24]	@ (801ae80 <xTaskNotifyWait+0xb8>)
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	2200      	movs	r2, #0
 801ae6c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 801ae70:	f000 fedc 	bl	801bc2c <vPortExitCritical>

		return xReturn;
 801ae74:	697b      	ldr	r3, [r7, #20]
	}
 801ae76:	4618      	mov	r0, r3
 801ae78:	3718      	adds	r7, #24
 801ae7a:	46bd      	mov	sp, r7
 801ae7c:	bd80      	pop	{r7, pc}
 801ae7e:	bf00      	nop
 801ae80:	200014ec 	.word	0x200014ec
 801ae84:	e000ed04 	.word	0xe000ed04

0801ae88 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801ae88:	b580      	push	{r7, lr}
 801ae8a:	b08a      	sub	sp, #40	@ 0x28
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	60f8      	str	r0, [r7, #12]
 801ae90:	60b9      	str	r1, [r7, #8]
 801ae92:	603b      	str	r3, [r7, #0]
 801ae94:	4613      	mov	r3, r2
 801ae96:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801ae98:	2301      	movs	r3, #1
 801ae9a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d10b      	bne.n	801aeba <xTaskGenericNotify+0x32>
	__asm volatile
 801aea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aea6:	f383 8811 	msr	BASEPRI, r3
 801aeaa:	f3bf 8f6f 	isb	sy
 801aeae:	f3bf 8f4f 	dsb	sy
 801aeb2:	61bb      	str	r3, [r7, #24]
}
 801aeb4:	bf00      	nop
 801aeb6:	bf00      	nop
 801aeb8:	e7fd      	b.n	801aeb6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801aeba:	68fb      	ldr	r3, [r7, #12]
 801aebc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801aebe:	f000 fe83 	bl	801bbc8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801aec2:	683b      	ldr	r3, [r7, #0]
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d004      	beq.n	801aed2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801aec8:	6a3b      	ldr	r3, [r7, #32]
 801aeca:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 801aece:	683b      	ldr	r3, [r7, #0]
 801aed0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801aed2:	6a3b      	ldr	r3, [r7, #32]
 801aed4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 801aed8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801aeda:	6a3b      	ldr	r3, [r7, #32]
 801aedc:	2202      	movs	r2, #2
 801aede:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 801aee2:	79fb      	ldrb	r3, [r7, #7]
 801aee4:	2b04      	cmp	r3, #4
 801aee6:	d82e      	bhi.n	801af46 <xTaskGenericNotify+0xbe>
 801aee8:	a201      	add	r2, pc, #4	@ (adr r2, 801aef0 <xTaskGenericNotify+0x68>)
 801aeea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aeee:	bf00      	nop
 801aef0:	0801af6b 	.word	0x0801af6b
 801aef4:	0801af05 	.word	0x0801af05
 801aef8:	0801af17 	.word	0x0801af17
 801aefc:	0801af27 	.word	0x0801af27
 801af00:	0801af31 	.word	0x0801af31
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801af04:	6a3b      	ldr	r3, [r7, #32]
 801af06:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 801af0a:	68bb      	ldr	r3, [r7, #8]
 801af0c:	431a      	orrs	r2, r3
 801af0e:	6a3b      	ldr	r3, [r7, #32]
 801af10:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 801af14:	e02c      	b.n	801af70 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801af16:	6a3b      	ldr	r3, [r7, #32]
 801af18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801af1c:	1c5a      	adds	r2, r3, #1
 801af1e:	6a3b      	ldr	r3, [r7, #32]
 801af20:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 801af24:	e024      	b.n	801af70 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801af26:	6a3b      	ldr	r3, [r7, #32]
 801af28:	68ba      	ldr	r2, [r7, #8]
 801af2a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 801af2e:	e01f      	b.n	801af70 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801af30:	7ffb      	ldrb	r3, [r7, #31]
 801af32:	2b02      	cmp	r3, #2
 801af34:	d004      	beq.n	801af40 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801af36:	6a3b      	ldr	r3, [r7, #32]
 801af38:	68ba      	ldr	r2, [r7, #8]
 801af3a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801af3e:	e017      	b.n	801af70 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 801af40:	2300      	movs	r3, #0
 801af42:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 801af44:	e014      	b.n	801af70 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801af46:	6a3b      	ldr	r3, [r7, #32]
 801af48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801af4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af50:	d00d      	beq.n	801af6e <xTaskGenericNotify+0xe6>
	__asm volatile
 801af52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801af56:	f383 8811 	msr	BASEPRI, r3
 801af5a:	f3bf 8f6f 	isb	sy
 801af5e:	f3bf 8f4f 	dsb	sy
 801af62:	617b      	str	r3, [r7, #20]
}
 801af64:	bf00      	nop
 801af66:	bf00      	nop
 801af68:	e7fd      	b.n	801af66 <xTaskGenericNotify+0xde>
					break;
 801af6a:	bf00      	nop
 801af6c:	e000      	b.n	801af70 <xTaskGenericNotify+0xe8>

					break;
 801af6e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801af70:	7ffb      	ldrb	r3, [r7, #31]
 801af72:	2b01      	cmp	r3, #1
 801af74:	d13a      	bne.n	801afec <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801af76:	6a3b      	ldr	r3, [r7, #32]
 801af78:	3304      	adds	r3, #4
 801af7a:	4618      	mov	r0, r3
 801af7c:	f7fd ff77 	bl	8018e6e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801af80:	6a3b      	ldr	r3, [r7, #32]
 801af82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af84:	2201      	movs	r2, #1
 801af86:	409a      	lsls	r2, r3
 801af88:	4b1c      	ldr	r3, [pc, #112]	@ (801affc <xTaskGenericNotify+0x174>)
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	4313      	orrs	r3, r2
 801af8e:	4a1b      	ldr	r2, [pc, #108]	@ (801affc <xTaskGenericNotify+0x174>)
 801af90:	6013      	str	r3, [r2, #0]
 801af92:	6a3b      	ldr	r3, [r7, #32]
 801af94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801af96:	4613      	mov	r3, r2
 801af98:	009b      	lsls	r3, r3, #2
 801af9a:	4413      	add	r3, r2
 801af9c:	009b      	lsls	r3, r3, #2
 801af9e:	4a18      	ldr	r2, [pc, #96]	@ (801b000 <xTaskGenericNotify+0x178>)
 801afa0:	441a      	add	r2, r3
 801afa2:	6a3b      	ldr	r3, [r7, #32]
 801afa4:	3304      	adds	r3, #4
 801afa6:	4619      	mov	r1, r3
 801afa8:	4610      	mov	r0, r2
 801afaa:	f7fd ff03 	bl	8018db4 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801afae:	6a3b      	ldr	r3, [r7, #32]
 801afb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d00b      	beq.n	801afce <xTaskGenericNotify+0x146>
	__asm volatile
 801afb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801afba:	f383 8811 	msr	BASEPRI, r3
 801afbe:	f3bf 8f6f 	isb	sy
 801afc2:	f3bf 8f4f 	dsb	sy
 801afc6:	613b      	str	r3, [r7, #16]
}
 801afc8:	bf00      	nop
 801afca:	bf00      	nop
 801afcc:	e7fd      	b.n	801afca <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801afce:	6a3b      	ldr	r3, [r7, #32]
 801afd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801afd2:	4b0c      	ldr	r3, [pc, #48]	@ (801b004 <xTaskGenericNotify+0x17c>)
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afd8:	429a      	cmp	r2, r3
 801afda:	d907      	bls.n	801afec <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801afdc:	4b0a      	ldr	r3, [pc, #40]	@ (801b008 <xTaskGenericNotify+0x180>)
 801afde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801afe2:	601a      	str	r2, [r3, #0]
 801afe4:	f3bf 8f4f 	dsb	sy
 801afe8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801afec:	f000 fe1e 	bl	801bc2c <vPortExitCritical>

		return xReturn;
 801aff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 801aff2:	4618      	mov	r0, r3
 801aff4:	3728      	adds	r7, #40	@ 0x28
 801aff6:	46bd      	mov	sp, r7
 801aff8:	bd80      	pop	{r7, pc}
 801affa:	bf00      	nop
 801affc:	200015f4 	.word	0x200015f4
 801b000:	200014f0 	.word	0x200014f0
 801b004:	200014ec 	.word	0x200014ec
 801b008:	e000ed04 	.word	0xe000ed04

0801b00c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801b00c:	b580      	push	{r7, lr}
 801b00e:	b08e      	sub	sp, #56	@ 0x38
 801b010:	af00      	add	r7, sp, #0
 801b012:	60f8      	str	r0, [r7, #12]
 801b014:	60b9      	str	r1, [r7, #8]
 801b016:	603b      	str	r3, [r7, #0]
 801b018:	4613      	mov	r3, r2
 801b01a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801b01c:	2301      	movs	r3, #1
 801b01e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	2b00      	cmp	r3, #0
 801b024:	d10b      	bne.n	801b03e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 801b026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b02a:	f383 8811 	msr	BASEPRI, r3
 801b02e:	f3bf 8f6f 	isb	sy
 801b032:	f3bf 8f4f 	dsb	sy
 801b036:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801b038:	bf00      	nop
 801b03a:	bf00      	nop
 801b03c:	e7fd      	b.n	801b03a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801b03e:	f000 fea3 	bl	801bd88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 801b046:	f3ef 8211 	mrs	r2, BASEPRI
 801b04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b04e:	f383 8811 	msr	BASEPRI, r3
 801b052:	f3bf 8f6f 	isb	sy
 801b056:	f3bf 8f4f 	dsb	sy
 801b05a:	623a      	str	r2, [r7, #32]
 801b05c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801b05e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801b060:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801b062:	683b      	ldr	r3, [r7, #0]
 801b064:	2b00      	cmp	r3, #0
 801b066:	d004      	beq.n	801b072 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801b068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b06a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 801b06e:	683b      	ldr	r3, [r7, #0]
 801b070:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801b072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b074:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 801b078:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801b07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b07e:	2202      	movs	r2, #2
 801b080:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 801b084:	79fb      	ldrb	r3, [r7, #7]
 801b086:	2b04      	cmp	r3, #4
 801b088:	d82e      	bhi.n	801b0e8 <xTaskGenericNotifyFromISR+0xdc>
 801b08a:	a201      	add	r2, pc, #4	@ (adr r2, 801b090 <xTaskGenericNotifyFromISR+0x84>)
 801b08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b090:	0801b10d 	.word	0x0801b10d
 801b094:	0801b0a5 	.word	0x0801b0a5
 801b098:	0801b0b7 	.word	0x0801b0b7
 801b09c:	0801b0c7 	.word	0x0801b0c7
 801b0a0:	0801b0d1 	.word	0x0801b0d1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801b0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b0a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 801b0aa:	68bb      	ldr	r3, [r7, #8]
 801b0ac:	431a      	orrs	r2, r3
 801b0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b0b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 801b0b4:	e02d      	b.n	801b112 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801b0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b0b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801b0bc:	1c5a      	adds	r2, r3, #1
 801b0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b0c0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 801b0c4:	e025      	b.n	801b112 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801b0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b0c8:	68ba      	ldr	r2, [r7, #8]
 801b0ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 801b0ce:	e020      	b.n	801b112 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801b0d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801b0d4:	2b02      	cmp	r3, #2
 801b0d6:	d004      	beq.n	801b0e2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801b0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b0da:	68ba      	ldr	r2, [r7, #8]
 801b0dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801b0e0:	e017      	b.n	801b112 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 801b0e6:	e014      	b.n	801b112 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801b0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b0ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801b0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b0f2:	d00d      	beq.n	801b110 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 801b0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b0f8:	f383 8811 	msr	BASEPRI, r3
 801b0fc:	f3bf 8f6f 	isb	sy
 801b100:	f3bf 8f4f 	dsb	sy
 801b104:	61bb      	str	r3, [r7, #24]
}
 801b106:	bf00      	nop
 801b108:	bf00      	nop
 801b10a:	e7fd      	b.n	801b108 <xTaskGenericNotifyFromISR+0xfc>
					break;
 801b10c:	bf00      	nop
 801b10e:	e000      	b.n	801b112 <xTaskGenericNotifyFromISR+0x106>
					break;
 801b110:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801b112:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801b116:	2b01      	cmp	r3, #1
 801b118:	d146      	bne.n	801b1a8 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801b11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b11c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d00b      	beq.n	801b13a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 801b122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b126:	f383 8811 	msr	BASEPRI, r3
 801b12a:	f3bf 8f6f 	isb	sy
 801b12e:	f3bf 8f4f 	dsb	sy
 801b132:	617b      	str	r3, [r7, #20]
}
 801b134:	bf00      	nop
 801b136:	bf00      	nop
 801b138:	e7fd      	b.n	801b136 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b13a:	4b21      	ldr	r3, [pc, #132]	@ (801b1c0 <xTaskGenericNotifyFromISR+0x1b4>)
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d11c      	bne.n	801b17c <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b144:	3304      	adds	r3, #4
 801b146:	4618      	mov	r0, r3
 801b148:	f7fd fe91 	bl	8018e6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b150:	2201      	movs	r2, #1
 801b152:	409a      	lsls	r2, r3
 801b154:	4b1b      	ldr	r3, [pc, #108]	@ (801b1c4 <xTaskGenericNotifyFromISR+0x1b8>)
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	4313      	orrs	r3, r2
 801b15a:	4a1a      	ldr	r2, [pc, #104]	@ (801b1c4 <xTaskGenericNotifyFromISR+0x1b8>)
 801b15c:	6013      	str	r3, [r2, #0]
 801b15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b162:	4613      	mov	r3, r2
 801b164:	009b      	lsls	r3, r3, #2
 801b166:	4413      	add	r3, r2
 801b168:	009b      	lsls	r3, r3, #2
 801b16a:	4a17      	ldr	r2, [pc, #92]	@ (801b1c8 <xTaskGenericNotifyFromISR+0x1bc>)
 801b16c:	441a      	add	r2, r3
 801b16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b170:	3304      	adds	r3, #4
 801b172:	4619      	mov	r1, r3
 801b174:	4610      	mov	r0, r2
 801b176:	f7fd fe1d 	bl	8018db4 <vListInsertEnd>
 801b17a:	e005      	b.n	801b188 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801b17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b17e:	3318      	adds	r3, #24
 801b180:	4619      	mov	r1, r3
 801b182:	4812      	ldr	r0, [pc, #72]	@ (801b1cc <xTaskGenericNotifyFromISR+0x1c0>)
 801b184:	f7fd fe16 	bl	8018db4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b18a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b18c:	4b10      	ldr	r3, [pc, #64]	@ (801b1d0 <xTaskGenericNotifyFromISR+0x1c4>)
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b192:	429a      	cmp	r2, r3
 801b194:	d908      	bls.n	801b1a8 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801b196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d002      	beq.n	801b1a2 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801b19c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b19e:	2201      	movs	r2, #1
 801b1a0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801b1a2:	4b0c      	ldr	r3, [pc, #48]	@ (801b1d4 <xTaskGenericNotifyFromISR+0x1c8>)
 801b1a4:	2201      	movs	r2, #1
 801b1a6:	601a      	str	r2, [r3, #0]
 801b1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1aa:	613b      	str	r3, [r7, #16]
	__asm volatile
 801b1ac:	693b      	ldr	r3, [r7, #16]
 801b1ae:	f383 8811 	msr	BASEPRI, r3
}
 801b1b2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801b1b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	3738      	adds	r7, #56	@ 0x38
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd80      	pop	{r7, pc}
 801b1be:	bf00      	nop
 801b1c0:	20001614 	.word	0x20001614
 801b1c4:	200015f4 	.word	0x200015f4
 801b1c8:	200014f0 	.word	0x200014f0
 801b1cc:	200015ac 	.word	0x200015ac
 801b1d0:	200014ec 	.word	0x200014ec
 801b1d4:	20001600 	.word	0x20001600

0801b1d8 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 801b1d8:	b580      	push	{r7, lr}
 801b1da:	b084      	sub	sp, #16
 801b1dc:	af00      	add	r7, sp, #0
 801b1de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d102      	bne.n	801b1ec <xTaskNotifyStateClear+0x14>
 801b1e6:	4b0e      	ldr	r3, [pc, #56]	@ (801b220 <xTaskNotifyStateClear+0x48>)
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	e000      	b.n	801b1ee <xTaskNotifyStateClear+0x16>
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 801b1f0:	f000 fcea 	bl	801bbc8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 801b1f4:	68bb      	ldr	r3, [r7, #8]
 801b1f6:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 801b1fa:	b2db      	uxtb	r3, r3
 801b1fc:	2b02      	cmp	r3, #2
 801b1fe:	d106      	bne.n	801b20e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801b200:	68bb      	ldr	r3, [r7, #8]
 801b202:	2200      	movs	r2, #0
 801b204:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				xReturn = pdPASS;
 801b208:	2301      	movs	r3, #1
 801b20a:	60fb      	str	r3, [r7, #12]
 801b20c:	e001      	b.n	801b212 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 801b20e:	2300      	movs	r3, #0
 801b210:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 801b212:	f000 fd0b 	bl	801bc2c <vPortExitCritical>

		return xReturn;
 801b216:	68fb      	ldr	r3, [r7, #12]
	}
 801b218:	4618      	mov	r0, r3
 801b21a:	3710      	adds	r7, #16
 801b21c:	46bd      	mov	sp, r7
 801b21e:	bd80      	pop	{r7, pc}
 801b220:	200014ec 	.word	0x200014ec

0801b224 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801b224:	b580      	push	{r7, lr}
 801b226:	b084      	sub	sp, #16
 801b228:	af00      	add	r7, sp, #0
 801b22a:	6078      	str	r0, [r7, #4]
 801b22c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801b22e:	4b29      	ldr	r3, [pc, #164]	@ (801b2d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b234:	4b28      	ldr	r3, [pc, #160]	@ (801b2d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	3304      	adds	r3, #4
 801b23a:	4618      	mov	r0, r3
 801b23c:	f7fd fe17 	bl	8018e6e <uxListRemove>
 801b240:	4603      	mov	r3, r0
 801b242:	2b00      	cmp	r3, #0
 801b244:	d10b      	bne.n	801b25e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801b246:	4b24      	ldr	r3, [pc, #144]	@ (801b2d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b24c:	2201      	movs	r2, #1
 801b24e:	fa02 f303 	lsl.w	r3, r2, r3
 801b252:	43da      	mvns	r2, r3
 801b254:	4b21      	ldr	r3, [pc, #132]	@ (801b2dc <prvAddCurrentTaskToDelayedList+0xb8>)
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	4013      	ands	r3, r2
 801b25a:	4a20      	ldr	r2, [pc, #128]	@ (801b2dc <prvAddCurrentTaskToDelayedList+0xb8>)
 801b25c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b264:	d10a      	bne.n	801b27c <prvAddCurrentTaskToDelayedList+0x58>
 801b266:	683b      	ldr	r3, [r7, #0]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d007      	beq.n	801b27c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b26c:	4b1a      	ldr	r3, [pc, #104]	@ (801b2d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	3304      	adds	r3, #4
 801b272:	4619      	mov	r1, r3
 801b274:	481a      	ldr	r0, [pc, #104]	@ (801b2e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 801b276:	f7fd fd9d 	bl	8018db4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801b27a:	e026      	b.n	801b2ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801b27c:	68fa      	ldr	r2, [r7, #12]
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	4413      	add	r3, r2
 801b282:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801b284:	4b14      	ldr	r3, [pc, #80]	@ (801b2d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	68ba      	ldr	r2, [r7, #8]
 801b28a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801b28c:	68ba      	ldr	r2, [r7, #8]
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	429a      	cmp	r2, r3
 801b292:	d209      	bcs.n	801b2a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b294:	4b13      	ldr	r3, [pc, #76]	@ (801b2e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 801b296:	681a      	ldr	r2, [r3, #0]
 801b298:	4b0f      	ldr	r3, [pc, #60]	@ (801b2d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	3304      	adds	r3, #4
 801b29e:	4619      	mov	r1, r3
 801b2a0:	4610      	mov	r0, r2
 801b2a2:	f7fd fdab 	bl	8018dfc <vListInsert>
}
 801b2a6:	e010      	b.n	801b2ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b2a8:	4b0f      	ldr	r3, [pc, #60]	@ (801b2e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801b2aa:	681a      	ldr	r2, [r3, #0]
 801b2ac:	4b0a      	ldr	r3, [pc, #40]	@ (801b2d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	3304      	adds	r3, #4
 801b2b2:	4619      	mov	r1, r3
 801b2b4:	4610      	mov	r0, r2
 801b2b6:	f7fd fda1 	bl	8018dfc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801b2ba:	4b0c      	ldr	r3, [pc, #48]	@ (801b2ec <prvAddCurrentTaskToDelayedList+0xc8>)
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	68ba      	ldr	r2, [r7, #8]
 801b2c0:	429a      	cmp	r2, r3
 801b2c2:	d202      	bcs.n	801b2ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801b2c4:	4a09      	ldr	r2, [pc, #36]	@ (801b2ec <prvAddCurrentTaskToDelayedList+0xc8>)
 801b2c6:	68bb      	ldr	r3, [r7, #8]
 801b2c8:	6013      	str	r3, [r2, #0]
}
 801b2ca:	bf00      	nop
 801b2cc:	3710      	adds	r7, #16
 801b2ce:	46bd      	mov	sp, r7
 801b2d0:	bd80      	pop	{r7, pc}
 801b2d2:	bf00      	nop
 801b2d4:	200015f0 	.word	0x200015f0
 801b2d8:	200014ec 	.word	0x200014ec
 801b2dc:	200015f4 	.word	0x200015f4
 801b2e0:	200015d8 	.word	0x200015d8
 801b2e4:	200015a8 	.word	0x200015a8
 801b2e8:	200015a4 	.word	0x200015a4
 801b2ec:	2000160c 	.word	0x2000160c

0801b2f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801b2f0:	b580      	push	{r7, lr}
 801b2f2:	b08a      	sub	sp, #40	@ 0x28
 801b2f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801b2f6:	2300      	movs	r3, #0
 801b2f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801b2fa:	f000 faf7 	bl	801b8ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801b2fe:	4b1d      	ldr	r3, [pc, #116]	@ (801b374 <xTimerCreateTimerTask+0x84>)
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	2b00      	cmp	r3, #0
 801b304:	d021      	beq.n	801b34a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801b306:	2300      	movs	r3, #0
 801b308:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801b30a:	2300      	movs	r3, #0
 801b30c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801b30e:	1d3a      	adds	r2, r7, #4
 801b310:	f107 0108 	add.w	r1, r7, #8
 801b314:	f107 030c 	add.w	r3, r7, #12
 801b318:	4618      	mov	r0, r3
 801b31a:	f7e6 fdcd 	bl	8001eb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801b31e:	6879      	ldr	r1, [r7, #4]
 801b320:	68bb      	ldr	r3, [r7, #8]
 801b322:	68fa      	ldr	r2, [r7, #12]
 801b324:	9202      	str	r2, [sp, #8]
 801b326:	9301      	str	r3, [sp, #4]
 801b328:	2302      	movs	r3, #2
 801b32a:	9300      	str	r3, [sp, #0]
 801b32c:	2300      	movs	r3, #0
 801b32e:	460a      	mov	r2, r1
 801b330:	4911      	ldr	r1, [pc, #68]	@ (801b378 <xTimerCreateTimerTask+0x88>)
 801b332:	4812      	ldr	r0, [pc, #72]	@ (801b37c <xTimerCreateTimerTask+0x8c>)
 801b334:	f7fe fe4a 	bl	8019fcc <xTaskCreateStatic>
 801b338:	4603      	mov	r3, r0
 801b33a:	4a11      	ldr	r2, [pc, #68]	@ (801b380 <xTimerCreateTimerTask+0x90>)
 801b33c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801b33e:	4b10      	ldr	r3, [pc, #64]	@ (801b380 <xTimerCreateTimerTask+0x90>)
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d001      	beq.n	801b34a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801b346:	2301      	movs	r3, #1
 801b348:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801b34a:	697b      	ldr	r3, [r7, #20]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d10b      	bne.n	801b368 <xTimerCreateTimerTask+0x78>
	__asm volatile
 801b350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b354:	f383 8811 	msr	BASEPRI, r3
 801b358:	f3bf 8f6f 	isb	sy
 801b35c:	f3bf 8f4f 	dsb	sy
 801b360:	613b      	str	r3, [r7, #16]
}
 801b362:	bf00      	nop
 801b364:	bf00      	nop
 801b366:	e7fd      	b.n	801b364 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801b368:	697b      	ldr	r3, [r7, #20]
}
 801b36a:	4618      	mov	r0, r3
 801b36c:	3718      	adds	r7, #24
 801b36e:	46bd      	mov	sp, r7
 801b370:	bd80      	pop	{r7, pc}
 801b372:	bf00      	nop
 801b374:	20001648 	.word	0x20001648
 801b378:	08025fa0 	.word	0x08025fa0
 801b37c:	0801b4bd 	.word	0x0801b4bd
 801b380:	2000164c 	.word	0x2000164c

0801b384 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801b384:	b580      	push	{r7, lr}
 801b386:	b08a      	sub	sp, #40	@ 0x28
 801b388:	af00      	add	r7, sp, #0
 801b38a:	60f8      	str	r0, [r7, #12]
 801b38c:	60b9      	str	r1, [r7, #8]
 801b38e:	607a      	str	r2, [r7, #4]
 801b390:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801b392:	2300      	movs	r3, #0
 801b394:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d10b      	bne.n	801b3b4 <xTimerGenericCommand+0x30>
	__asm volatile
 801b39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b3a0:	f383 8811 	msr	BASEPRI, r3
 801b3a4:	f3bf 8f6f 	isb	sy
 801b3a8:	f3bf 8f4f 	dsb	sy
 801b3ac:	623b      	str	r3, [r7, #32]
}
 801b3ae:	bf00      	nop
 801b3b0:	bf00      	nop
 801b3b2:	e7fd      	b.n	801b3b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801b3b4:	4b19      	ldr	r3, [pc, #100]	@ (801b41c <xTimerGenericCommand+0x98>)
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d02a      	beq.n	801b412 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801b3bc:	68bb      	ldr	r3, [r7, #8]
 801b3be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801b3c4:	68fb      	ldr	r3, [r7, #12]
 801b3c6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801b3c8:	68bb      	ldr	r3, [r7, #8]
 801b3ca:	2b05      	cmp	r3, #5
 801b3cc:	dc18      	bgt.n	801b400 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801b3ce:	f7ff fc55 	bl	801ac7c <xTaskGetSchedulerState>
 801b3d2:	4603      	mov	r3, r0
 801b3d4:	2b02      	cmp	r3, #2
 801b3d6:	d109      	bne.n	801b3ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801b3d8:	4b10      	ldr	r3, [pc, #64]	@ (801b41c <xTimerGenericCommand+0x98>)
 801b3da:	6818      	ldr	r0, [r3, #0]
 801b3dc:	f107 0114 	add.w	r1, r7, #20
 801b3e0:	2300      	movs	r3, #0
 801b3e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b3e4:	f7fd feb0 	bl	8019148 <xQueueGenericSend>
 801b3e8:	6278      	str	r0, [r7, #36]	@ 0x24
 801b3ea:	e012      	b.n	801b412 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801b3ec:	4b0b      	ldr	r3, [pc, #44]	@ (801b41c <xTimerGenericCommand+0x98>)
 801b3ee:	6818      	ldr	r0, [r3, #0]
 801b3f0:	f107 0114 	add.w	r1, r7, #20
 801b3f4:	2300      	movs	r3, #0
 801b3f6:	2200      	movs	r2, #0
 801b3f8:	f7fd fea6 	bl	8019148 <xQueueGenericSend>
 801b3fc:	6278      	str	r0, [r7, #36]	@ 0x24
 801b3fe:	e008      	b.n	801b412 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b400:	4b06      	ldr	r3, [pc, #24]	@ (801b41c <xTimerGenericCommand+0x98>)
 801b402:	6818      	ldr	r0, [r3, #0]
 801b404:	f107 0114 	add.w	r1, r7, #20
 801b408:	2300      	movs	r3, #0
 801b40a:	683a      	ldr	r2, [r7, #0]
 801b40c:	f7fd ff9e 	bl	801934c <xQueueGenericSendFromISR>
 801b410:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801b412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801b414:	4618      	mov	r0, r3
 801b416:	3728      	adds	r7, #40	@ 0x28
 801b418:	46bd      	mov	sp, r7
 801b41a:	bd80      	pop	{r7, pc}
 801b41c:	20001648 	.word	0x20001648

0801b420 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801b420:	b580      	push	{r7, lr}
 801b422:	b088      	sub	sp, #32
 801b424:	af02      	add	r7, sp, #8
 801b426:	6078      	str	r0, [r7, #4]
 801b428:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b42a:	4b23      	ldr	r3, [pc, #140]	@ (801b4b8 <prvProcessExpiredTimer+0x98>)
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	68db      	ldr	r3, [r3, #12]
 801b430:	68db      	ldr	r3, [r3, #12]
 801b432:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b434:	697b      	ldr	r3, [r7, #20]
 801b436:	3304      	adds	r3, #4
 801b438:	4618      	mov	r0, r3
 801b43a:	f7fd fd18 	bl	8018e6e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b43e:	697b      	ldr	r3, [r7, #20]
 801b440:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801b444:	f003 0304 	and.w	r3, r3, #4
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d023      	beq.n	801b494 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801b44c:	697b      	ldr	r3, [r7, #20]
 801b44e:	699a      	ldr	r2, [r3, #24]
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	18d1      	adds	r1, r2, r3
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	683a      	ldr	r2, [r7, #0]
 801b458:	6978      	ldr	r0, [r7, #20]
 801b45a:	f000 f8d5 	bl	801b608 <prvInsertTimerInActiveList>
 801b45e:	4603      	mov	r3, r0
 801b460:	2b00      	cmp	r3, #0
 801b462:	d020      	beq.n	801b4a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b464:	2300      	movs	r3, #0
 801b466:	9300      	str	r3, [sp, #0]
 801b468:	2300      	movs	r3, #0
 801b46a:	687a      	ldr	r2, [r7, #4]
 801b46c:	2100      	movs	r1, #0
 801b46e:	6978      	ldr	r0, [r7, #20]
 801b470:	f7ff ff88 	bl	801b384 <xTimerGenericCommand>
 801b474:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801b476:	693b      	ldr	r3, [r7, #16]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d114      	bne.n	801b4a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801b47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b480:	f383 8811 	msr	BASEPRI, r3
 801b484:	f3bf 8f6f 	isb	sy
 801b488:	f3bf 8f4f 	dsb	sy
 801b48c:	60fb      	str	r3, [r7, #12]
}
 801b48e:	bf00      	nop
 801b490:	bf00      	nop
 801b492:	e7fd      	b.n	801b490 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b494:	697b      	ldr	r3, [r7, #20]
 801b496:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801b49a:	f023 0301 	bic.w	r3, r3, #1
 801b49e:	b2da      	uxtb	r2, r3
 801b4a0:	697b      	ldr	r3, [r7, #20]
 801b4a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b4a6:	697b      	ldr	r3, [r7, #20]
 801b4a8:	6a1b      	ldr	r3, [r3, #32]
 801b4aa:	6978      	ldr	r0, [r7, #20]
 801b4ac:	4798      	blx	r3
}
 801b4ae:	bf00      	nop
 801b4b0:	3718      	adds	r7, #24
 801b4b2:	46bd      	mov	sp, r7
 801b4b4:	bd80      	pop	{r7, pc}
 801b4b6:	bf00      	nop
 801b4b8:	20001640 	.word	0x20001640

0801b4bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801b4bc:	b580      	push	{r7, lr}
 801b4be:	b084      	sub	sp, #16
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b4c4:	f107 0308 	add.w	r3, r7, #8
 801b4c8:	4618      	mov	r0, r3
 801b4ca:	f000 f859 	bl	801b580 <prvGetNextExpireTime>
 801b4ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801b4d0:	68bb      	ldr	r3, [r7, #8]
 801b4d2:	4619      	mov	r1, r3
 801b4d4:	68f8      	ldr	r0, [r7, #12]
 801b4d6:	f000 f805 	bl	801b4e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801b4da:	f000 f8d7 	bl	801b68c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b4de:	bf00      	nop
 801b4e0:	e7f0      	b.n	801b4c4 <prvTimerTask+0x8>
	...

0801b4e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801b4e4:	b580      	push	{r7, lr}
 801b4e6:	b084      	sub	sp, #16
 801b4e8:	af00      	add	r7, sp, #0
 801b4ea:	6078      	str	r0, [r7, #4]
 801b4ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801b4ee:	f7fe ffc3 	bl	801a478 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b4f2:	f107 0308 	add.w	r3, r7, #8
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	f000 f866 	bl	801b5c8 <prvSampleTimeNow>
 801b4fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801b4fe:	68bb      	ldr	r3, [r7, #8]
 801b500:	2b00      	cmp	r3, #0
 801b502:	d130      	bne.n	801b566 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801b504:	683b      	ldr	r3, [r7, #0]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d10a      	bne.n	801b520 <prvProcessTimerOrBlockTask+0x3c>
 801b50a:	687a      	ldr	r2, [r7, #4]
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	429a      	cmp	r2, r3
 801b510:	d806      	bhi.n	801b520 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801b512:	f7fe ffbf 	bl	801a494 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801b516:	68f9      	ldr	r1, [r7, #12]
 801b518:	6878      	ldr	r0, [r7, #4]
 801b51a:	f7ff ff81 	bl	801b420 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801b51e:	e024      	b.n	801b56a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	2b00      	cmp	r3, #0
 801b524:	d008      	beq.n	801b538 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801b526:	4b13      	ldr	r3, [pc, #76]	@ (801b574 <prvProcessTimerOrBlockTask+0x90>)
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d101      	bne.n	801b534 <prvProcessTimerOrBlockTask+0x50>
 801b530:	2301      	movs	r3, #1
 801b532:	e000      	b.n	801b536 <prvProcessTimerOrBlockTask+0x52>
 801b534:	2300      	movs	r3, #0
 801b536:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801b538:	4b0f      	ldr	r3, [pc, #60]	@ (801b578 <prvProcessTimerOrBlockTask+0x94>)
 801b53a:	6818      	ldr	r0, [r3, #0]
 801b53c:	687a      	ldr	r2, [r7, #4]
 801b53e:	68fb      	ldr	r3, [r7, #12]
 801b540:	1ad3      	subs	r3, r2, r3
 801b542:	683a      	ldr	r2, [r7, #0]
 801b544:	4619      	mov	r1, r3
 801b546:	f7fe f9bb 	bl	80198c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801b54a:	f7fe ffa3 	bl	801a494 <xTaskResumeAll>
 801b54e:	4603      	mov	r3, r0
 801b550:	2b00      	cmp	r3, #0
 801b552:	d10a      	bne.n	801b56a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801b554:	4b09      	ldr	r3, [pc, #36]	@ (801b57c <prvProcessTimerOrBlockTask+0x98>)
 801b556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b55a:	601a      	str	r2, [r3, #0]
 801b55c:	f3bf 8f4f 	dsb	sy
 801b560:	f3bf 8f6f 	isb	sy
}
 801b564:	e001      	b.n	801b56a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801b566:	f7fe ff95 	bl	801a494 <xTaskResumeAll>
}
 801b56a:	bf00      	nop
 801b56c:	3710      	adds	r7, #16
 801b56e:	46bd      	mov	sp, r7
 801b570:	bd80      	pop	{r7, pc}
 801b572:	bf00      	nop
 801b574:	20001644 	.word	0x20001644
 801b578:	20001648 	.word	0x20001648
 801b57c:	e000ed04 	.word	0xe000ed04

0801b580 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801b580:	b480      	push	{r7}
 801b582:	b085      	sub	sp, #20
 801b584:	af00      	add	r7, sp, #0
 801b586:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b588:	4b0e      	ldr	r3, [pc, #56]	@ (801b5c4 <prvGetNextExpireTime+0x44>)
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	681b      	ldr	r3, [r3, #0]
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d101      	bne.n	801b596 <prvGetNextExpireTime+0x16>
 801b592:	2201      	movs	r2, #1
 801b594:	e000      	b.n	801b598 <prvGetNextExpireTime+0x18>
 801b596:	2200      	movs	r2, #0
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d105      	bne.n	801b5b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b5a4:	4b07      	ldr	r3, [pc, #28]	@ (801b5c4 <prvGetNextExpireTime+0x44>)
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	68db      	ldr	r3, [r3, #12]
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	60fb      	str	r3, [r7, #12]
 801b5ae:	e001      	b.n	801b5b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801b5b0:	2300      	movs	r3, #0
 801b5b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801b5b4:	68fb      	ldr	r3, [r7, #12]
}
 801b5b6:	4618      	mov	r0, r3
 801b5b8:	3714      	adds	r7, #20
 801b5ba:	46bd      	mov	sp, r7
 801b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5c0:	4770      	bx	lr
 801b5c2:	bf00      	nop
 801b5c4:	20001640 	.word	0x20001640

0801b5c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801b5c8:	b580      	push	{r7, lr}
 801b5ca:	b084      	sub	sp, #16
 801b5cc:	af00      	add	r7, sp, #0
 801b5ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801b5d0:	f7fe fffe 	bl	801a5d0 <xTaskGetTickCount>
 801b5d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801b5d6:	4b0b      	ldr	r3, [pc, #44]	@ (801b604 <prvSampleTimeNow+0x3c>)
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	68fa      	ldr	r2, [r7, #12]
 801b5dc:	429a      	cmp	r2, r3
 801b5de:	d205      	bcs.n	801b5ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801b5e0:	f000 f91e 	bl	801b820 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	2201      	movs	r2, #1
 801b5e8:	601a      	str	r2, [r3, #0]
 801b5ea:	e002      	b.n	801b5f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	2200      	movs	r2, #0
 801b5f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801b5f2:	4a04      	ldr	r2, [pc, #16]	@ (801b604 <prvSampleTimeNow+0x3c>)
 801b5f4:	68fb      	ldr	r3, [r7, #12]
 801b5f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801b5f8:	68fb      	ldr	r3, [r7, #12]
}
 801b5fa:	4618      	mov	r0, r3
 801b5fc:	3710      	adds	r7, #16
 801b5fe:	46bd      	mov	sp, r7
 801b600:	bd80      	pop	{r7, pc}
 801b602:	bf00      	nop
 801b604:	20001650 	.word	0x20001650

0801b608 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801b608:	b580      	push	{r7, lr}
 801b60a:	b086      	sub	sp, #24
 801b60c:	af00      	add	r7, sp, #0
 801b60e:	60f8      	str	r0, [r7, #12]
 801b610:	60b9      	str	r1, [r7, #8]
 801b612:	607a      	str	r2, [r7, #4]
 801b614:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801b616:	2300      	movs	r3, #0
 801b618:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	68ba      	ldr	r2, [r7, #8]
 801b61e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	68fa      	ldr	r2, [r7, #12]
 801b624:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801b626:	68ba      	ldr	r2, [r7, #8]
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	429a      	cmp	r2, r3
 801b62c:	d812      	bhi.n	801b654 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b62e:	687a      	ldr	r2, [r7, #4]
 801b630:	683b      	ldr	r3, [r7, #0]
 801b632:	1ad2      	subs	r2, r2, r3
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	699b      	ldr	r3, [r3, #24]
 801b638:	429a      	cmp	r2, r3
 801b63a:	d302      	bcc.n	801b642 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801b63c:	2301      	movs	r3, #1
 801b63e:	617b      	str	r3, [r7, #20]
 801b640:	e01b      	b.n	801b67a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801b642:	4b10      	ldr	r3, [pc, #64]	@ (801b684 <prvInsertTimerInActiveList+0x7c>)
 801b644:	681a      	ldr	r2, [r3, #0]
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	3304      	adds	r3, #4
 801b64a:	4619      	mov	r1, r3
 801b64c:	4610      	mov	r0, r2
 801b64e:	f7fd fbd5 	bl	8018dfc <vListInsert>
 801b652:	e012      	b.n	801b67a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801b654:	687a      	ldr	r2, [r7, #4]
 801b656:	683b      	ldr	r3, [r7, #0]
 801b658:	429a      	cmp	r2, r3
 801b65a:	d206      	bcs.n	801b66a <prvInsertTimerInActiveList+0x62>
 801b65c:	68ba      	ldr	r2, [r7, #8]
 801b65e:	683b      	ldr	r3, [r7, #0]
 801b660:	429a      	cmp	r2, r3
 801b662:	d302      	bcc.n	801b66a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801b664:	2301      	movs	r3, #1
 801b666:	617b      	str	r3, [r7, #20]
 801b668:	e007      	b.n	801b67a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b66a:	4b07      	ldr	r3, [pc, #28]	@ (801b688 <prvInsertTimerInActiveList+0x80>)
 801b66c:	681a      	ldr	r2, [r3, #0]
 801b66e:	68fb      	ldr	r3, [r7, #12]
 801b670:	3304      	adds	r3, #4
 801b672:	4619      	mov	r1, r3
 801b674:	4610      	mov	r0, r2
 801b676:	f7fd fbc1 	bl	8018dfc <vListInsert>
		}
	}

	return xProcessTimerNow;
 801b67a:	697b      	ldr	r3, [r7, #20]
}
 801b67c:	4618      	mov	r0, r3
 801b67e:	3718      	adds	r7, #24
 801b680:	46bd      	mov	sp, r7
 801b682:	bd80      	pop	{r7, pc}
 801b684:	20001644 	.word	0x20001644
 801b688:	20001640 	.word	0x20001640

0801b68c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801b68c:	b580      	push	{r7, lr}
 801b68e:	b08c      	sub	sp, #48	@ 0x30
 801b690:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b692:	e0b2      	b.n	801b7fa <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801b694:	68bb      	ldr	r3, [r7, #8]
 801b696:	2b00      	cmp	r3, #0
 801b698:	f2c0 80af 	blt.w	801b7fa <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801b69c:	693b      	ldr	r3, [r7, #16]
 801b69e:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801b6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6a2:	695b      	ldr	r3, [r3, #20]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d004      	beq.n	801b6b2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6aa:	3304      	adds	r3, #4
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	f7fd fbde 	bl	8018e6e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b6b2:	1d3b      	adds	r3, r7, #4
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	f7ff ff87 	bl	801b5c8 <prvSampleTimeNow>
 801b6ba:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 801b6bc:	68bb      	ldr	r3, [r7, #8]
 801b6be:	2b09      	cmp	r3, #9
 801b6c0:	f200 8098 	bhi.w	801b7f4 <prvProcessReceivedCommands+0x168>
 801b6c4:	a201      	add	r2, pc, #4	@ (adr r2, 801b6cc <prvProcessReceivedCommands+0x40>)
 801b6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b6ca:	bf00      	nop
 801b6cc:	0801b6f5 	.word	0x0801b6f5
 801b6d0:	0801b6f5 	.word	0x0801b6f5
 801b6d4:	0801b6f5 	.word	0x0801b6f5
 801b6d8:	0801b76b 	.word	0x0801b76b
 801b6dc:	0801b77f 	.word	0x0801b77f
 801b6e0:	0801b7cb 	.word	0x0801b7cb
 801b6e4:	0801b6f5 	.word	0x0801b6f5
 801b6e8:	0801b6f5 	.word	0x0801b6f5
 801b6ec:	0801b76b 	.word	0x0801b76b
 801b6f0:	0801b77f 	.word	0x0801b77f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801b6fa:	f043 0301 	orr.w	r3, r3, #1
 801b6fe:	b2da      	uxtb	r2, r3
 801b700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801b706:	68fa      	ldr	r2, [r7, #12]
 801b708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b70a:	699b      	ldr	r3, [r3, #24]
 801b70c:	18d1      	adds	r1, r2, r3
 801b70e:	68fb      	ldr	r3, [r7, #12]
 801b710:	6a3a      	ldr	r2, [r7, #32]
 801b712:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b714:	f7ff ff78 	bl	801b608 <prvInsertTimerInActiveList>
 801b718:	4603      	mov	r3, r0
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d06c      	beq.n	801b7f8 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b720:	6a1b      	ldr	r3, [r3, #32]
 801b722:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b724:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b728:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801b72c:	f003 0304 	and.w	r3, r3, #4
 801b730:	2b00      	cmp	r3, #0
 801b732:	d061      	beq.n	801b7f8 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801b734:	68fa      	ldr	r2, [r7, #12]
 801b736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b738:	699b      	ldr	r3, [r3, #24]
 801b73a:	441a      	add	r2, r3
 801b73c:	2300      	movs	r3, #0
 801b73e:	9300      	str	r3, [sp, #0]
 801b740:	2300      	movs	r3, #0
 801b742:	2100      	movs	r1, #0
 801b744:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b746:	f7ff fe1d 	bl	801b384 <xTimerGenericCommand>
 801b74a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 801b74c:	69fb      	ldr	r3, [r7, #28]
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d152      	bne.n	801b7f8 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 801b752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b756:	f383 8811 	msr	BASEPRI, r3
 801b75a:	f3bf 8f6f 	isb	sy
 801b75e:	f3bf 8f4f 	dsb	sy
 801b762:	61bb      	str	r3, [r7, #24]
}
 801b764:	bf00      	nop
 801b766:	bf00      	nop
 801b768:	e7fd      	b.n	801b766 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b76c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801b770:	f023 0301 	bic.w	r3, r3, #1
 801b774:	b2da      	uxtb	r2, r3
 801b776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b778:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 801b77c:	e03d      	b.n	801b7fa <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b780:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801b784:	f043 0301 	orr.w	r3, r3, #1
 801b788:	b2da      	uxtb	r2, r3
 801b78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b78c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801b790:	68fa      	ldr	r2, [r7, #12]
 801b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b794:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801b796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b798:	699b      	ldr	r3, [r3, #24]
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d10b      	bne.n	801b7b6 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 801b79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b7a2:	f383 8811 	msr	BASEPRI, r3
 801b7a6:	f3bf 8f6f 	isb	sy
 801b7aa:	f3bf 8f4f 	dsb	sy
 801b7ae:	617b      	str	r3, [r7, #20]
}
 801b7b0:	bf00      	nop
 801b7b2:	bf00      	nop
 801b7b4:	e7fd      	b.n	801b7b2 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801b7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7b8:	699a      	ldr	r2, [r3, #24]
 801b7ba:	6a3b      	ldr	r3, [r7, #32]
 801b7bc:	18d1      	adds	r1, r2, r3
 801b7be:	6a3b      	ldr	r3, [r7, #32]
 801b7c0:	6a3a      	ldr	r2, [r7, #32]
 801b7c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b7c4:	f7ff ff20 	bl	801b608 <prvInsertTimerInActiveList>
					break;
 801b7c8:	e017      	b.n	801b7fa <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801b7d0:	f003 0302 	and.w	r3, r3, #2
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d103      	bne.n	801b7e0 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 801b7d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b7da:	f000 fbe5 	bl	801bfa8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801b7de:	e00c      	b.n	801b7fa <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801b7e6:	f023 0301 	bic.w	r3, r3, #1
 801b7ea:	b2da      	uxtb	r2, r3
 801b7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 801b7f2:	e002      	b.n	801b7fa <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 801b7f4:	bf00      	nop
 801b7f6:	e000      	b.n	801b7fa <prvProcessReceivedCommands+0x16e>
					break;
 801b7f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b7fa:	4b08      	ldr	r3, [pc, #32]	@ (801b81c <prvProcessReceivedCommands+0x190>)
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	f107 0108 	add.w	r1, r7, #8
 801b802:	2200      	movs	r2, #0
 801b804:	4618      	mov	r0, r3
 801b806:	f7fd fe3f 	bl	8019488 <xQueueReceive>
 801b80a:	4603      	mov	r3, r0
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	f47f af41 	bne.w	801b694 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801b812:	bf00      	nop
 801b814:	bf00      	nop
 801b816:	3728      	adds	r7, #40	@ 0x28
 801b818:	46bd      	mov	sp, r7
 801b81a:	bd80      	pop	{r7, pc}
 801b81c:	20001648 	.word	0x20001648

0801b820 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801b820:	b580      	push	{r7, lr}
 801b822:	b088      	sub	sp, #32
 801b824:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b826:	e049      	b.n	801b8bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b828:	4b2e      	ldr	r3, [pc, #184]	@ (801b8e4 <prvSwitchTimerLists+0xc4>)
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	68db      	ldr	r3, [r3, #12]
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b832:	4b2c      	ldr	r3, [pc, #176]	@ (801b8e4 <prvSwitchTimerLists+0xc4>)
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	68db      	ldr	r3, [r3, #12]
 801b838:	68db      	ldr	r3, [r3, #12]
 801b83a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	3304      	adds	r3, #4
 801b840:	4618      	mov	r0, r3
 801b842:	f7fd fb14 	bl	8018e6e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b846:	68fb      	ldr	r3, [r7, #12]
 801b848:	6a1b      	ldr	r3, [r3, #32]
 801b84a:	68f8      	ldr	r0, [r7, #12]
 801b84c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b84e:	68fb      	ldr	r3, [r7, #12]
 801b850:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801b854:	f003 0304 	and.w	r3, r3, #4
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d02f      	beq.n	801b8bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	699b      	ldr	r3, [r3, #24]
 801b860:	693a      	ldr	r2, [r7, #16]
 801b862:	4413      	add	r3, r2
 801b864:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801b866:	68ba      	ldr	r2, [r7, #8]
 801b868:	693b      	ldr	r3, [r7, #16]
 801b86a:	429a      	cmp	r2, r3
 801b86c:	d90e      	bls.n	801b88c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	68ba      	ldr	r2, [r7, #8]
 801b872:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	68fa      	ldr	r2, [r7, #12]
 801b878:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b87a:	4b1a      	ldr	r3, [pc, #104]	@ (801b8e4 <prvSwitchTimerLists+0xc4>)
 801b87c:	681a      	ldr	r2, [r3, #0]
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	3304      	adds	r3, #4
 801b882:	4619      	mov	r1, r3
 801b884:	4610      	mov	r0, r2
 801b886:	f7fd fab9 	bl	8018dfc <vListInsert>
 801b88a:	e017      	b.n	801b8bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b88c:	2300      	movs	r3, #0
 801b88e:	9300      	str	r3, [sp, #0]
 801b890:	2300      	movs	r3, #0
 801b892:	693a      	ldr	r2, [r7, #16]
 801b894:	2100      	movs	r1, #0
 801b896:	68f8      	ldr	r0, [r7, #12]
 801b898:	f7ff fd74 	bl	801b384 <xTimerGenericCommand>
 801b89c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d10b      	bne.n	801b8bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 801b8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b8a8:	f383 8811 	msr	BASEPRI, r3
 801b8ac:	f3bf 8f6f 	isb	sy
 801b8b0:	f3bf 8f4f 	dsb	sy
 801b8b4:	603b      	str	r3, [r7, #0]
}
 801b8b6:	bf00      	nop
 801b8b8:	bf00      	nop
 801b8ba:	e7fd      	b.n	801b8b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b8bc:	4b09      	ldr	r3, [pc, #36]	@ (801b8e4 <prvSwitchTimerLists+0xc4>)
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d1b0      	bne.n	801b828 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801b8c6:	4b07      	ldr	r3, [pc, #28]	@ (801b8e4 <prvSwitchTimerLists+0xc4>)
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801b8cc:	4b06      	ldr	r3, [pc, #24]	@ (801b8e8 <prvSwitchTimerLists+0xc8>)
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	4a04      	ldr	r2, [pc, #16]	@ (801b8e4 <prvSwitchTimerLists+0xc4>)
 801b8d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801b8d4:	4a04      	ldr	r2, [pc, #16]	@ (801b8e8 <prvSwitchTimerLists+0xc8>)
 801b8d6:	697b      	ldr	r3, [r7, #20]
 801b8d8:	6013      	str	r3, [r2, #0]
}
 801b8da:	bf00      	nop
 801b8dc:	3718      	adds	r7, #24
 801b8de:	46bd      	mov	sp, r7
 801b8e0:	bd80      	pop	{r7, pc}
 801b8e2:	bf00      	nop
 801b8e4:	20001640 	.word	0x20001640
 801b8e8:	20001644 	.word	0x20001644

0801b8ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801b8ec:	b580      	push	{r7, lr}
 801b8ee:	b082      	sub	sp, #8
 801b8f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801b8f2:	f000 f969 	bl	801bbc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801b8f6:	4b15      	ldr	r3, [pc, #84]	@ (801b94c <prvCheckForValidListAndQueue+0x60>)
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d120      	bne.n	801b940 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801b8fe:	4814      	ldr	r0, [pc, #80]	@ (801b950 <prvCheckForValidListAndQueue+0x64>)
 801b900:	f7fd fa2b 	bl	8018d5a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801b904:	4813      	ldr	r0, [pc, #76]	@ (801b954 <prvCheckForValidListAndQueue+0x68>)
 801b906:	f7fd fa28 	bl	8018d5a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801b90a:	4b13      	ldr	r3, [pc, #76]	@ (801b958 <prvCheckForValidListAndQueue+0x6c>)
 801b90c:	4a10      	ldr	r2, [pc, #64]	@ (801b950 <prvCheckForValidListAndQueue+0x64>)
 801b90e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801b910:	4b12      	ldr	r3, [pc, #72]	@ (801b95c <prvCheckForValidListAndQueue+0x70>)
 801b912:	4a10      	ldr	r2, [pc, #64]	@ (801b954 <prvCheckForValidListAndQueue+0x68>)
 801b914:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801b916:	2300      	movs	r3, #0
 801b918:	9300      	str	r3, [sp, #0]
 801b91a:	4b11      	ldr	r3, [pc, #68]	@ (801b960 <prvCheckForValidListAndQueue+0x74>)
 801b91c:	4a11      	ldr	r2, [pc, #68]	@ (801b964 <prvCheckForValidListAndQueue+0x78>)
 801b91e:	210c      	movs	r1, #12
 801b920:	200a      	movs	r0, #10
 801b922:	f7fd fb39 	bl	8018f98 <xQueueGenericCreateStatic>
 801b926:	4603      	mov	r3, r0
 801b928:	4a08      	ldr	r2, [pc, #32]	@ (801b94c <prvCheckForValidListAndQueue+0x60>)
 801b92a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801b92c:	4b07      	ldr	r3, [pc, #28]	@ (801b94c <prvCheckForValidListAndQueue+0x60>)
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	2b00      	cmp	r3, #0
 801b932:	d005      	beq.n	801b940 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801b934:	4b05      	ldr	r3, [pc, #20]	@ (801b94c <prvCheckForValidListAndQueue+0x60>)
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	490b      	ldr	r1, [pc, #44]	@ (801b968 <prvCheckForValidListAndQueue+0x7c>)
 801b93a:	4618      	mov	r0, r3
 801b93c:	f7fd ff96 	bl	801986c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b940:	f000 f974 	bl	801bc2c <vPortExitCritical>
}
 801b944:	bf00      	nop
 801b946:	46bd      	mov	sp, r7
 801b948:	bd80      	pop	{r7, pc}
 801b94a:	bf00      	nop
 801b94c:	20001648 	.word	0x20001648
 801b950:	20001618 	.word	0x20001618
 801b954:	2000162c 	.word	0x2000162c
 801b958:	20001640 	.word	0x20001640
 801b95c:	20001644 	.word	0x20001644
 801b960:	200016cc 	.word	0x200016cc
 801b964:	20001654 	.word	0x20001654
 801b968:	08025fa8 	.word	0x08025fa8

0801b96c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801b96c:	b480      	push	{r7}
 801b96e:	b085      	sub	sp, #20
 801b970:	af00      	add	r7, sp, #0
 801b972:	60f8      	str	r0, [r7, #12]
 801b974:	60b9      	str	r1, [r7, #8]
 801b976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	3b04      	subs	r3, #4
 801b97c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801b984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b986:	68fb      	ldr	r3, [r7, #12]
 801b988:	3b04      	subs	r3, #4
 801b98a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801b98c:	68bb      	ldr	r3, [r7, #8]
 801b98e:	f023 0201 	bic.w	r2, r3, #1
 801b992:	68fb      	ldr	r3, [r7, #12]
 801b994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b996:	68fb      	ldr	r3, [r7, #12]
 801b998:	3b04      	subs	r3, #4
 801b99a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b99c:	4a0c      	ldr	r2, [pc, #48]	@ (801b9d0 <pxPortInitialiseStack+0x64>)
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801b9a2:	68fb      	ldr	r3, [r7, #12]
 801b9a4:	3b14      	subs	r3, #20
 801b9a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801b9a8:	687a      	ldr	r2, [r7, #4]
 801b9aa:	68fb      	ldr	r3, [r7, #12]
 801b9ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	3b04      	subs	r3, #4
 801b9b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801b9b4:	68fb      	ldr	r3, [r7, #12]
 801b9b6:	f06f 0202 	mvn.w	r2, #2
 801b9ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	3b20      	subs	r3, #32
 801b9c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801b9c2:	68fb      	ldr	r3, [r7, #12]
}
 801b9c4:	4618      	mov	r0, r3
 801b9c6:	3714      	adds	r7, #20
 801b9c8:	46bd      	mov	sp, r7
 801b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ce:	4770      	bx	lr
 801b9d0:	0801b9d5 	.word	0x0801b9d5

0801b9d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b9d4:	b480      	push	{r7}
 801b9d6:	b085      	sub	sp, #20
 801b9d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801b9da:	2300      	movs	r3, #0
 801b9dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b9de:	4b13      	ldr	r3, [pc, #76]	@ (801ba2c <prvTaskExitError+0x58>)
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b9e6:	d00b      	beq.n	801ba00 <prvTaskExitError+0x2c>
	__asm volatile
 801b9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b9ec:	f383 8811 	msr	BASEPRI, r3
 801b9f0:	f3bf 8f6f 	isb	sy
 801b9f4:	f3bf 8f4f 	dsb	sy
 801b9f8:	60fb      	str	r3, [r7, #12]
}
 801b9fa:	bf00      	nop
 801b9fc:	bf00      	nop
 801b9fe:	e7fd      	b.n	801b9fc <prvTaskExitError+0x28>
	__asm volatile
 801ba00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ba04:	f383 8811 	msr	BASEPRI, r3
 801ba08:	f3bf 8f6f 	isb	sy
 801ba0c:	f3bf 8f4f 	dsb	sy
 801ba10:	60bb      	str	r3, [r7, #8]
}
 801ba12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801ba14:	bf00      	nop
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d0fc      	beq.n	801ba16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801ba1c:	bf00      	nop
 801ba1e:	bf00      	nop
 801ba20:	3714      	adds	r7, #20
 801ba22:	46bd      	mov	sp, r7
 801ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba28:	4770      	bx	lr
 801ba2a:	bf00      	nop
 801ba2c:	2000003c 	.word	0x2000003c

0801ba30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801ba30:	4b07      	ldr	r3, [pc, #28]	@ (801ba50 <pxCurrentTCBConst2>)
 801ba32:	6819      	ldr	r1, [r3, #0]
 801ba34:	6808      	ldr	r0, [r1, #0]
 801ba36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba3a:	f380 8809 	msr	PSP, r0
 801ba3e:	f3bf 8f6f 	isb	sy
 801ba42:	f04f 0000 	mov.w	r0, #0
 801ba46:	f380 8811 	msr	BASEPRI, r0
 801ba4a:	4770      	bx	lr
 801ba4c:	f3af 8000 	nop.w

0801ba50 <pxCurrentTCBConst2>:
 801ba50:	200014ec 	.word	0x200014ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801ba54:	bf00      	nop
 801ba56:	bf00      	nop

0801ba58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801ba58:	4808      	ldr	r0, [pc, #32]	@ (801ba7c <prvPortStartFirstTask+0x24>)
 801ba5a:	6800      	ldr	r0, [r0, #0]
 801ba5c:	6800      	ldr	r0, [r0, #0]
 801ba5e:	f380 8808 	msr	MSP, r0
 801ba62:	f04f 0000 	mov.w	r0, #0
 801ba66:	f380 8814 	msr	CONTROL, r0
 801ba6a:	b662      	cpsie	i
 801ba6c:	b661      	cpsie	f
 801ba6e:	f3bf 8f4f 	dsb	sy
 801ba72:	f3bf 8f6f 	isb	sy
 801ba76:	df00      	svc	0
 801ba78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801ba7a:	bf00      	nop
 801ba7c:	e000ed08 	.word	0xe000ed08

0801ba80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801ba80:	b580      	push	{r7, lr}
 801ba82:	b086      	sub	sp, #24
 801ba84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801ba86:	4b47      	ldr	r3, [pc, #284]	@ (801bba4 <xPortStartScheduler+0x124>)
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	4a47      	ldr	r2, [pc, #284]	@ (801bba8 <xPortStartScheduler+0x128>)
 801ba8c:	4293      	cmp	r3, r2
 801ba8e:	d10b      	bne.n	801baa8 <xPortStartScheduler+0x28>
	__asm volatile
 801ba90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ba94:	f383 8811 	msr	BASEPRI, r3
 801ba98:	f3bf 8f6f 	isb	sy
 801ba9c:	f3bf 8f4f 	dsb	sy
 801baa0:	60fb      	str	r3, [r7, #12]
}
 801baa2:	bf00      	nop
 801baa4:	bf00      	nop
 801baa6:	e7fd      	b.n	801baa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801baa8:	4b3e      	ldr	r3, [pc, #248]	@ (801bba4 <xPortStartScheduler+0x124>)
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	4a3f      	ldr	r2, [pc, #252]	@ (801bbac <xPortStartScheduler+0x12c>)
 801baae:	4293      	cmp	r3, r2
 801bab0:	d10b      	bne.n	801baca <xPortStartScheduler+0x4a>
	__asm volatile
 801bab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bab6:	f383 8811 	msr	BASEPRI, r3
 801baba:	f3bf 8f6f 	isb	sy
 801babe:	f3bf 8f4f 	dsb	sy
 801bac2:	613b      	str	r3, [r7, #16]
}
 801bac4:	bf00      	nop
 801bac6:	bf00      	nop
 801bac8:	e7fd      	b.n	801bac6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801baca:	4b39      	ldr	r3, [pc, #228]	@ (801bbb0 <xPortStartScheduler+0x130>)
 801bacc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801bace:	697b      	ldr	r3, [r7, #20]
 801bad0:	781b      	ldrb	r3, [r3, #0]
 801bad2:	b2db      	uxtb	r3, r3
 801bad4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801bad6:	697b      	ldr	r3, [r7, #20]
 801bad8:	22ff      	movs	r2, #255	@ 0xff
 801bada:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801badc:	697b      	ldr	r3, [r7, #20]
 801bade:	781b      	ldrb	r3, [r3, #0]
 801bae0:	b2db      	uxtb	r3, r3
 801bae2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801bae4:	78fb      	ldrb	r3, [r7, #3]
 801bae6:	b2db      	uxtb	r3, r3
 801bae8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801baec:	b2da      	uxtb	r2, r3
 801baee:	4b31      	ldr	r3, [pc, #196]	@ (801bbb4 <xPortStartScheduler+0x134>)
 801baf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801baf2:	4b31      	ldr	r3, [pc, #196]	@ (801bbb8 <xPortStartScheduler+0x138>)
 801baf4:	2207      	movs	r2, #7
 801baf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801baf8:	e009      	b.n	801bb0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801bafa:	4b2f      	ldr	r3, [pc, #188]	@ (801bbb8 <xPortStartScheduler+0x138>)
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	3b01      	subs	r3, #1
 801bb00:	4a2d      	ldr	r2, [pc, #180]	@ (801bbb8 <xPortStartScheduler+0x138>)
 801bb02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801bb04:	78fb      	ldrb	r3, [r7, #3]
 801bb06:	b2db      	uxtb	r3, r3
 801bb08:	005b      	lsls	r3, r3, #1
 801bb0a:	b2db      	uxtb	r3, r3
 801bb0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801bb0e:	78fb      	ldrb	r3, [r7, #3]
 801bb10:	b2db      	uxtb	r3, r3
 801bb12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801bb16:	2b80      	cmp	r3, #128	@ 0x80
 801bb18:	d0ef      	beq.n	801bafa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801bb1a:	4b27      	ldr	r3, [pc, #156]	@ (801bbb8 <xPortStartScheduler+0x138>)
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	f1c3 0307 	rsb	r3, r3, #7
 801bb22:	2b04      	cmp	r3, #4
 801bb24:	d00b      	beq.n	801bb3e <xPortStartScheduler+0xbe>
	__asm volatile
 801bb26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bb2a:	f383 8811 	msr	BASEPRI, r3
 801bb2e:	f3bf 8f6f 	isb	sy
 801bb32:	f3bf 8f4f 	dsb	sy
 801bb36:	60bb      	str	r3, [r7, #8]
}
 801bb38:	bf00      	nop
 801bb3a:	bf00      	nop
 801bb3c:	e7fd      	b.n	801bb3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801bb3e:	4b1e      	ldr	r3, [pc, #120]	@ (801bbb8 <xPortStartScheduler+0x138>)
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	021b      	lsls	r3, r3, #8
 801bb44:	4a1c      	ldr	r2, [pc, #112]	@ (801bbb8 <xPortStartScheduler+0x138>)
 801bb46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801bb48:	4b1b      	ldr	r3, [pc, #108]	@ (801bbb8 <xPortStartScheduler+0x138>)
 801bb4a:	681b      	ldr	r3, [r3, #0]
 801bb4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801bb50:	4a19      	ldr	r2, [pc, #100]	@ (801bbb8 <xPortStartScheduler+0x138>)
 801bb52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	b2da      	uxtb	r2, r3
 801bb58:	697b      	ldr	r3, [r7, #20]
 801bb5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801bb5c:	4b17      	ldr	r3, [pc, #92]	@ (801bbbc <xPortStartScheduler+0x13c>)
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	4a16      	ldr	r2, [pc, #88]	@ (801bbbc <xPortStartScheduler+0x13c>)
 801bb62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801bb66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801bb68:	4b14      	ldr	r3, [pc, #80]	@ (801bbbc <xPortStartScheduler+0x13c>)
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	4a13      	ldr	r2, [pc, #76]	@ (801bbbc <xPortStartScheduler+0x13c>)
 801bb6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801bb72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801bb74:	f000 f8da 	bl	801bd2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801bb78:	4b11      	ldr	r3, [pc, #68]	@ (801bbc0 <xPortStartScheduler+0x140>)
 801bb7a:	2200      	movs	r2, #0
 801bb7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801bb7e:	f000 f8f9 	bl	801bd74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801bb82:	4b10      	ldr	r3, [pc, #64]	@ (801bbc4 <xPortStartScheduler+0x144>)
 801bb84:	681b      	ldr	r3, [r3, #0]
 801bb86:	4a0f      	ldr	r2, [pc, #60]	@ (801bbc4 <xPortStartScheduler+0x144>)
 801bb88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801bb8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801bb8e:	f7ff ff63 	bl	801ba58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801bb92:	f7fe fde7 	bl	801a764 <vTaskSwitchContext>
	prvTaskExitError();
 801bb96:	f7ff ff1d 	bl	801b9d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801bb9a:	2300      	movs	r3, #0
}
 801bb9c:	4618      	mov	r0, r3
 801bb9e:	3718      	adds	r7, #24
 801bba0:	46bd      	mov	sp, r7
 801bba2:	bd80      	pop	{r7, pc}
 801bba4:	e000ed00 	.word	0xe000ed00
 801bba8:	410fc271 	.word	0x410fc271
 801bbac:	410fc270 	.word	0x410fc270
 801bbb0:	e000e400 	.word	0xe000e400
 801bbb4:	20001714 	.word	0x20001714
 801bbb8:	20001718 	.word	0x20001718
 801bbbc:	e000ed20 	.word	0xe000ed20
 801bbc0:	2000003c 	.word	0x2000003c
 801bbc4:	e000ef34 	.word	0xe000ef34

0801bbc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801bbc8:	b480      	push	{r7}
 801bbca:	b083      	sub	sp, #12
 801bbcc:	af00      	add	r7, sp, #0
	__asm volatile
 801bbce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bbd2:	f383 8811 	msr	BASEPRI, r3
 801bbd6:	f3bf 8f6f 	isb	sy
 801bbda:	f3bf 8f4f 	dsb	sy
 801bbde:	607b      	str	r3, [r7, #4]
}
 801bbe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801bbe2:	4b10      	ldr	r3, [pc, #64]	@ (801bc24 <vPortEnterCritical+0x5c>)
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	3301      	adds	r3, #1
 801bbe8:	4a0e      	ldr	r2, [pc, #56]	@ (801bc24 <vPortEnterCritical+0x5c>)
 801bbea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801bbec:	4b0d      	ldr	r3, [pc, #52]	@ (801bc24 <vPortEnterCritical+0x5c>)
 801bbee:	681b      	ldr	r3, [r3, #0]
 801bbf0:	2b01      	cmp	r3, #1
 801bbf2:	d110      	bne.n	801bc16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801bbf4:	4b0c      	ldr	r3, [pc, #48]	@ (801bc28 <vPortEnterCritical+0x60>)
 801bbf6:	681b      	ldr	r3, [r3, #0]
 801bbf8:	b2db      	uxtb	r3, r3
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d00b      	beq.n	801bc16 <vPortEnterCritical+0x4e>
	__asm volatile
 801bbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bc02:	f383 8811 	msr	BASEPRI, r3
 801bc06:	f3bf 8f6f 	isb	sy
 801bc0a:	f3bf 8f4f 	dsb	sy
 801bc0e:	603b      	str	r3, [r7, #0]
}
 801bc10:	bf00      	nop
 801bc12:	bf00      	nop
 801bc14:	e7fd      	b.n	801bc12 <vPortEnterCritical+0x4a>
	}
}
 801bc16:	bf00      	nop
 801bc18:	370c      	adds	r7, #12
 801bc1a:	46bd      	mov	sp, r7
 801bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc20:	4770      	bx	lr
 801bc22:	bf00      	nop
 801bc24:	2000003c 	.word	0x2000003c
 801bc28:	e000ed04 	.word	0xe000ed04

0801bc2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801bc2c:	b480      	push	{r7}
 801bc2e:	b083      	sub	sp, #12
 801bc30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801bc32:	4b12      	ldr	r3, [pc, #72]	@ (801bc7c <vPortExitCritical+0x50>)
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d10b      	bne.n	801bc52 <vPortExitCritical+0x26>
	__asm volatile
 801bc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bc3e:	f383 8811 	msr	BASEPRI, r3
 801bc42:	f3bf 8f6f 	isb	sy
 801bc46:	f3bf 8f4f 	dsb	sy
 801bc4a:	607b      	str	r3, [r7, #4]
}
 801bc4c:	bf00      	nop
 801bc4e:	bf00      	nop
 801bc50:	e7fd      	b.n	801bc4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801bc52:	4b0a      	ldr	r3, [pc, #40]	@ (801bc7c <vPortExitCritical+0x50>)
 801bc54:	681b      	ldr	r3, [r3, #0]
 801bc56:	3b01      	subs	r3, #1
 801bc58:	4a08      	ldr	r2, [pc, #32]	@ (801bc7c <vPortExitCritical+0x50>)
 801bc5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801bc5c:	4b07      	ldr	r3, [pc, #28]	@ (801bc7c <vPortExitCritical+0x50>)
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d105      	bne.n	801bc70 <vPortExitCritical+0x44>
 801bc64:	2300      	movs	r3, #0
 801bc66:	603b      	str	r3, [r7, #0]
	__asm volatile
 801bc68:	683b      	ldr	r3, [r7, #0]
 801bc6a:	f383 8811 	msr	BASEPRI, r3
}
 801bc6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801bc70:	bf00      	nop
 801bc72:	370c      	adds	r7, #12
 801bc74:	46bd      	mov	sp, r7
 801bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc7a:	4770      	bx	lr
 801bc7c:	2000003c 	.word	0x2000003c

0801bc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801bc80:	f3ef 8009 	mrs	r0, PSP
 801bc84:	f3bf 8f6f 	isb	sy
 801bc88:	4b15      	ldr	r3, [pc, #84]	@ (801bce0 <pxCurrentTCBConst>)
 801bc8a:	681a      	ldr	r2, [r3, #0]
 801bc8c:	f01e 0f10 	tst.w	lr, #16
 801bc90:	bf08      	it	eq
 801bc92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801bc96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc9a:	6010      	str	r0, [r2, #0]
 801bc9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801bca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801bca4:	f380 8811 	msr	BASEPRI, r0
 801bca8:	f3bf 8f4f 	dsb	sy
 801bcac:	f3bf 8f6f 	isb	sy
 801bcb0:	f7fe fd58 	bl	801a764 <vTaskSwitchContext>
 801bcb4:	f04f 0000 	mov.w	r0, #0
 801bcb8:	f380 8811 	msr	BASEPRI, r0
 801bcbc:	bc09      	pop	{r0, r3}
 801bcbe:	6819      	ldr	r1, [r3, #0]
 801bcc0:	6808      	ldr	r0, [r1, #0]
 801bcc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcc6:	f01e 0f10 	tst.w	lr, #16
 801bcca:	bf08      	it	eq
 801bccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801bcd0:	f380 8809 	msr	PSP, r0
 801bcd4:	f3bf 8f6f 	isb	sy
 801bcd8:	4770      	bx	lr
 801bcda:	bf00      	nop
 801bcdc:	f3af 8000 	nop.w

0801bce0 <pxCurrentTCBConst>:
 801bce0:	200014ec 	.word	0x200014ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801bce4:	bf00      	nop
 801bce6:	bf00      	nop

0801bce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801bce8:	b580      	push	{r7, lr}
 801bcea:	b082      	sub	sp, #8
 801bcec:	af00      	add	r7, sp, #0
	__asm volatile
 801bcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bcf2:	f383 8811 	msr	BASEPRI, r3
 801bcf6:	f3bf 8f6f 	isb	sy
 801bcfa:	f3bf 8f4f 	dsb	sy
 801bcfe:	607b      	str	r3, [r7, #4]
}
 801bd00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801bd02:	f7fe fc75 	bl	801a5f0 <xTaskIncrementTick>
 801bd06:	4603      	mov	r3, r0
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d003      	beq.n	801bd14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801bd0c:	4b06      	ldr	r3, [pc, #24]	@ (801bd28 <SysTick_Handler+0x40>)
 801bd0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801bd12:	601a      	str	r2, [r3, #0]
 801bd14:	2300      	movs	r3, #0
 801bd16:	603b      	str	r3, [r7, #0]
	__asm volatile
 801bd18:	683b      	ldr	r3, [r7, #0]
 801bd1a:	f383 8811 	msr	BASEPRI, r3
}
 801bd1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801bd20:	bf00      	nop
 801bd22:	3708      	adds	r7, #8
 801bd24:	46bd      	mov	sp, r7
 801bd26:	bd80      	pop	{r7, pc}
 801bd28:	e000ed04 	.word	0xe000ed04

0801bd2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801bd2c:	b480      	push	{r7}
 801bd2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801bd30:	4b0b      	ldr	r3, [pc, #44]	@ (801bd60 <vPortSetupTimerInterrupt+0x34>)
 801bd32:	2200      	movs	r2, #0
 801bd34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801bd36:	4b0b      	ldr	r3, [pc, #44]	@ (801bd64 <vPortSetupTimerInterrupt+0x38>)
 801bd38:	2200      	movs	r2, #0
 801bd3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801bd3c:	4b0a      	ldr	r3, [pc, #40]	@ (801bd68 <vPortSetupTimerInterrupt+0x3c>)
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	4a0a      	ldr	r2, [pc, #40]	@ (801bd6c <vPortSetupTimerInterrupt+0x40>)
 801bd42:	fba2 2303 	umull	r2, r3, r2, r3
 801bd46:	099b      	lsrs	r3, r3, #6
 801bd48:	4a09      	ldr	r2, [pc, #36]	@ (801bd70 <vPortSetupTimerInterrupt+0x44>)
 801bd4a:	3b01      	subs	r3, #1
 801bd4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801bd4e:	4b04      	ldr	r3, [pc, #16]	@ (801bd60 <vPortSetupTimerInterrupt+0x34>)
 801bd50:	2207      	movs	r2, #7
 801bd52:	601a      	str	r2, [r3, #0]
}
 801bd54:	bf00      	nop
 801bd56:	46bd      	mov	sp, r7
 801bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd5c:	4770      	bx	lr
 801bd5e:	bf00      	nop
 801bd60:	e000e010 	.word	0xe000e010
 801bd64:	e000e018 	.word	0xe000e018
 801bd68:	20000030 	.word	0x20000030
 801bd6c:	10624dd3 	.word	0x10624dd3
 801bd70:	e000e014 	.word	0xe000e014

0801bd74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801bd74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801bd84 <vPortEnableVFP+0x10>
 801bd78:	6801      	ldr	r1, [r0, #0]
 801bd7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801bd7e:	6001      	str	r1, [r0, #0]
 801bd80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801bd82:	bf00      	nop
 801bd84:	e000ed88 	.word	0xe000ed88

0801bd88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801bd88:	b480      	push	{r7}
 801bd8a:	b085      	sub	sp, #20
 801bd8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801bd8e:	f3ef 8305 	mrs	r3, IPSR
 801bd92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	2b0f      	cmp	r3, #15
 801bd98:	d915      	bls.n	801bdc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801bd9a:	4a18      	ldr	r2, [pc, #96]	@ (801bdfc <vPortValidateInterruptPriority+0x74>)
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	4413      	add	r3, r2
 801bda0:	781b      	ldrb	r3, [r3, #0]
 801bda2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801bda4:	4b16      	ldr	r3, [pc, #88]	@ (801be00 <vPortValidateInterruptPriority+0x78>)
 801bda6:	781b      	ldrb	r3, [r3, #0]
 801bda8:	7afa      	ldrb	r2, [r7, #11]
 801bdaa:	429a      	cmp	r2, r3
 801bdac:	d20b      	bcs.n	801bdc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801bdae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bdb2:	f383 8811 	msr	BASEPRI, r3
 801bdb6:	f3bf 8f6f 	isb	sy
 801bdba:	f3bf 8f4f 	dsb	sy
 801bdbe:	607b      	str	r3, [r7, #4]
}
 801bdc0:	bf00      	nop
 801bdc2:	bf00      	nop
 801bdc4:	e7fd      	b.n	801bdc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801bdc6:	4b0f      	ldr	r3, [pc, #60]	@ (801be04 <vPortValidateInterruptPriority+0x7c>)
 801bdc8:	681b      	ldr	r3, [r3, #0]
 801bdca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801bdce:	4b0e      	ldr	r3, [pc, #56]	@ (801be08 <vPortValidateInterruptPriority+0x80>)
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	429a      	cmp	r2, r3
 801bdd4:	d90b      	bls.n	801bdee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801bdd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bdda:	f383 8811 	msr	BASEPRI, r3
 801bdde:	f3bf 8f6f 	isb	sy
 801bde2:	f3bf 8f4f 	dsb	sy
 801bde6:	603b      	str	r3, [r7, #0]
}
 801bde8:	bf00      	nop
 801bdea:	bf00      	nop
 801bdec:	e7fd      	b.n	801bdea <vPortValidateInterruptPriority+0x62>
	}
 801bdee:	bf00      	nop
 801bdf0:	3714      	adds	r7, #20
 801bdf2:	46bd      	mov	sp, r7
 801bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdf8:	4770      	bx	lr
 801bdfa:	bf00      	nop
 801bdfc:	e000e3f0 	.word	0xe000e3f0
 801be00:	20001714 	.word	0x20001714
 801be04:	e000ed0c 	.word	0xe000ed0c
 801be08:	20001718 	.word	0x20001718

0801be0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801be0c:	b580      	push	{r7, lr}
 801be0e:	b08a      	sub	sp, #40	@ 0x28
 801be10:	af00      	add	r7, sp, #0
 801be12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801be14:	2300      	movs	r3, #0
 801be16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801be18:	f7fe fb2e 	bl	801a478 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801be1c:	4b5c      	ldr	r3, [pc, #368]	@ (801bf90 <pvPortMalloc+0x184>)
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	2b00      	cmp	r3, #0
 801be22:	d101      	bne.n	801be28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801be24:	f000 f924 	bl	801c070 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801be28:	4b5a      	ldr	r3, [pc, #360]	@ (801bf94 <pvPortMalloc+0x188>)
 801be2a:	681a      	ldr	r2, [r3, #0]
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	4013      	ands	r3, r2
 801be30:	2b00      	cmp	r3, #0
 801be32:	f040 8095 	bne.w	801bf60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d01e      	beq.n	801be7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801be3c:	2208      	movs	r2, #8
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	4413      	add	r3, r2
 801be42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	f003 0307 	and.w	r3, r3, #7
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d015      	beq.n	801be7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	f023 0307 	bic.w	r3, r3, #7
 801be54:	3308      	adds	r3, #8
 801be56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	f003 0307 	and.w	r3, r3, #7
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d00b      	beq.n	801be7a <pvPortMalloc+0x6e>
	__asm volatile
 801be62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801be66:	f383 8811 	msr	BASEPRI, r3
 801be6a:	f3bf 8f6f 	isb	sy
 801be6e:	f3bf 8f4f 	dsb	sy
 801be72:	617b      	str	r3, [r7, #20]
}
 801be74:	bf00      	nop
 801be76:	bf00      	nop
 801be78:	e7fd      	b.n	801be76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d06f      	beq.n	801bf60 <pvPortMalloc+0x154>
 801be80:	4b45      	ldr	r3, [pc, #276]	@ (801bf98 <pvPortMalloc+0x18c>)
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	687a      	ldr	r2, [r7, #4]
 801be86:	429a      	cmp	r2, r3
 801be88:	d86a      	bhi.n	801bf60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801be8a:	4b44      	ldr	r3, [pc, #272]	@ (801bf9c <pvPortMalloc+0x190>)
 801be8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801be8e:	4b43      	ldr	r3, [pc, #268]	@ (801bf9c <pvPortMalloc+0x190>)
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801be94:	e004      	b.n	801bea0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801be96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801be9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801bea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bea2:	685b      	ldr	r3, [r3, #4]
 801bea4:	687a      	ldr	r2, [r7, #4]
 801bea6:	429a      	cmp	r2, r3
 801bea8:	d903      	bls.n	801beb2 <pvPortMalloc+0xa6>
 801beaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d1f1      	bne.n	801be96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801beb2:	4b37      	ldr	r3, [pc, #220]	@ (801bf90 <pvPortMalloc+0x184>)
 801beb4:	681b      	ldr	r3, [r3, #0]
 801beb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801beb8:	429a      	cmp	r2, r3
 801beba:	d051      	beq.n	801bf60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801bebc:	6a3b      	ldr	r3, [r7, #32]
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	2208      	movs	r2, #8
 801bec2:	4413      	add	r3, r2
 801bec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801bec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bec8:	681a      	ldr	r2, [r3, #0]
 801beca:	6a3b      	ldr	r3, [r7, #32]
 801becc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801bece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bed0:	685a      	ldr	r2, [r3, #4]
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	1ad2      	subs	r2, r2, r3
 801bed6:	2308      	movs	r3, #8
 801bed8:	005b      	lsls	r3, r3, #1
 801beda:	429a      	cmp	r2, r3
 801bedc:	d920      	bls.n	801bf20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801bede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	4413      	add	r3, r2
 801bee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801bee6:	69bb      	ldr	r3, [r7, #24]
 801bee8:	f003 0307 	and.w	r3, r3, #7
 801beec:	2b00      	cmp	r3, #0
 801beee:	d00b      	beq.n	801bf08 <pvPortMalloc+0xfc>
	__asm volatile
 801bef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bef4:	f383 8811 	msr	BASEPRI, r3
 801bef8:	f3bf 8f6f 	isb	sy
 801befc:	f3bf 8f4f 	dsb	sy
 801bf00:	613b      	str	r3, [r7, #16]
}
 801bf02:	bf00      	nop
 801bf04:	bf00      	nop
 801bf06:	e7fd      	b.n	801bf04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801bf08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf0a:	685a      	ldr	r2, [r3, #4]
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	1ad2      	subs	r2, r2, r3
 801bf10:	69bb      	ldr	r3, [r7, #24]
 801bf12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801bf14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf16:	687a      	ldr	r2, [r7, #4]
 801bf18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801bf1a:	69b8      	ldr	r0, [r7, #24]
 801bf1c:	f000 f90a 	bl	801c134 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801bf20:	4b1d      	ldr	r3, [pc, #116]	@ (801bf98 <pvPortMalloc+0x18c>)
 801bf22:	681a      	ldr	r2, [r3, #0]
 801bf24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf26:	685b      	ldr	r3, [r3, #4]
 801bf28:	1ad3      	subs	r3, r2, r3
 801bf2a:	4a1b      	ldr	r2, [pc, #108]	@ (801bf98 <pvPortMalloc+0x18c>)
 801bf2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801bf2e:	4b1a      	ldr	r3, [pc, #104]	@ (801bf98 <pvPortMalloc+0x18c>)
 801bf30:	681a      	ldr	r2, [r3, #0]
 801bf32:	4b1b      	ldr	r3, [pc, #108]	@ (801bfa0 <pvPortMalloc+0x194>)
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	429a      	cmp	r2, r3
 801bf38:	d203      	bcs.n	801bf42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801bf3a:	4b17      	ldr	r3, [pc, #92]	@ (801bf98 <pvPortMalloc+0x18c>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	4a18      	ldr	r2, [pc, #96]	@ (801bfa0 <pvPortMalloc+0x194>)
 801bf40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801bf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf44:	685a      	ldr	r2, [r3, #4]
 801bf46:	4b13      	ldr	r3, [pc, #76]	@ (801bf94 <pvPortMalloc+0x188>)
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	431a      	orrs	r2, r3
 801bf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801bf50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf52:	2200      	movs	r2, #0
 801bf54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801bf56:	4b13      	ldr	r3, [pc, #76]	@ (801bfa4 <pvPortMalloc+0x198>)
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	3301      	adds	r3, #1
 801bf5c:	4a11      	ldr	r2, [pc, #68]	@ (801bfa4 <pvPortMalloc+0x198>)
 801bf5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801bf60:	f7fe fa98 	bl	801a494 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801bf64:	69fb      	ldr	r3, [r7, #28]
 801bf66:	f003 0307 	and.w	r3, r3, #7
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d00b      	beq.n	801bf86 <pvPortMalloc+0x17a>
	__asm volatile
 801bf6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bf72:	f383 8811 	msr	BASEPRI, r3
 801bf76:	f3bf 8f6f 	isb	sy
 801bf7a:	f3bf 8f4f 	dsb	sy
 801bf7e:	60fb      	str	r3, [r7, #12]
}
 801bf80:	bf00      	nop
 801bf82:	bf00      	nop
 801bf84:	e7fd      	b.n	801bf82 <pvPortMalloc+0x176>
	return pvReturn;
 801bf86:	69fb      	ldr	r3, [r7, #28]
}
 801bf88:	4618      	mov	r0, r3
 801bf8a:	3728      	adds	r7, #40	@ 0x28
 801bf8c:	46bd      	mov	sp, r7
 801bf8e:	bd80      	pop	{r7, pc}
 801bf90:	20006544 	.word	0x20006544
 801bf94:	20006558 	.word	0x20006558
 801bf98:	20006548 	.word	0x20006548
 801bf9c:	2000653c 	.word	0x2000653c
 801bfa0:	2000654c 	.word	0x2000654c
 801bfa4:	20006550 	.word	0x20006550

0801bfa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b086      	sub	sp, #24
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d04f      	beq.n	801c05a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801bfba:	2308      	movs	r3, #8
 801bfbc:	425b      	negs	r3, r3
 801bfbe:	697a      	ldr	r2, [r7, #20]
 801bfc0:	4413      	add	r3, r2
 801bfc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801bfc4:	697b      	ldr	r3, [r7, #20]
 801bfc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801bfc8:	693b      	ldr	r3, [r7, #16]
 801bfca:	685a      	ldr	r2, [r3, #4]
 801bfcc:	4b25      	ldr	r3, [pc, #148]	@ (801c064 <vPortFree+0xbc>)
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	4013      	ands	r3, r2
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d10b      	bne.n	801bfee <vPortFree+0x46>
	__asm volatile
 801bfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bfda:	f383 8811 	msr	BASEPRI, r3
 801bfde:	f3bf 8f6f 	isb	sy
 801bfe2:	f3bf 8f4f 	dsb	sy
 801bfe6:	60fb      	str	r3, [r7, #12]
}
 801bfe8:	bf00      	nop
 801bfea:	bf00      	nop
 801bfec:	e7fd      	b.n	801bfea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801bfee:	693b      	ldr	r3, [r7, #16]
 801bff0:	681b      	ldr	r3, [r3, #0]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d00b      	beq.n	801c00e <vPortFree+0x66>
	__asm volatile
 801bff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bffa:	f383 8811 	msr	BASEPRI, r3
 801bffe:	f3bf 8f6f 	isb	sy
 801c002:	f3bf 8f4f 	dsb	sy
 801c006:	60bb      	str	r3, [r7, #8]
}
 801c008:	bf00      	nop
 801c00a:	bf00      	nop
 801c00c:	e7fd      	b.n	801c00a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c00e:	693b      	ldr	r3, [r7, #16]
 801c010:	685a      	ldr	r2, [r3, #4]
 801c012:	4b14      	ldr	r3, [pc, #80]	@ (801c064 <vPortFree+0xbc>)
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	4013      	ands	r3, r2
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d01e      	beq.n	801c05a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c01c:	693b      	ldr	r3, [r7, #16]
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	2b00      	cmp	r3, #0
 801c022:	d11a      	bne.n	801c05a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c024:	693b      	ldr	r3, [r7, #16]
 801c026:	685a      	ldr	r2, [r3, #4]
 801c028:	4b0e      	ldr	r3, [pc, #56]	@ (801c064 <vPortFree+0xbc>)
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	43db      	mvns	r3, r3
 801c02e:	401a      	ands	r2, r3
 801c030:	693b      	ldr	r3, [r7, #16]
 801c032:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c034:	f7fe fa20 	bl	801a478 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c038:	693b      	ldr	r3, [r7, #16]
 801c03a:	685a      	ldr	r2, [r3, #4]
 801c03c:	4b0a      	ldr	r3, [pc, #40]	@ (801c068 <vPortFree+0xc0>)
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	4413      	add	r3, r2
 801c042:	4a09      	ldr	r2, [pc, #36]	@ (801c068 <vPortFree+0xc0>)
 801c044:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c046:	6938      	ldr	r0, [r7, #16]
 801c048:	f000 f874 	bl	801c134 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801c04c:	4b07      	ldr	r3, [pc, #28]	@ (801c06c <vPortFree+0xc4>)
 801c04e:	681b      	ldr	r3, [r3, #0]
 801c050:	3301      	adds	r3, #1
 801c052:	4a06      	ldr	r2, [pc, #24]	@ (801c06c <vPortFree+0xc4>)
 801c054:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801c056:	f7fe fa1d 	bl	801a494 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801c05a:	bf00      	nop
 801c05c:	3718      	adds	r7, #24
 801c05e:	46bd      	mov	sp, r7
 801c060:	bd80      	pop	{r7, pc}
 801c062:	bf00      	nop
 801c064:	20006558 	.word	0x20006558
 801c068:	20006548 	.word	0x20006548
 801c06c:	20006554 	.word	0x20006554

0801c070 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801c070:	b480      	push	{r7}
 801c072:	b085      	sub	sp, #20
 801c074:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801c076:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801c07a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801c07c:	4b27      	ldr	r3, [pc, #156]	@ (801c11c <prvHeapInit+0xac>)
 801c07e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	f003 0307 	and.w	r3, r3, #7
 801c086:	2b00      	cmp	r3, #0
 801c088:	d00c      	beq.n	801c0a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801c08a:	68fb      	ldr	r3, [r7, #12]
 801c08c:	3307      	adds	r3, #7
 801c08e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	f023 0307 	bic.w	r3, r3, #7
 801c096:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801c098:	68ba      	ldr	r2, [r7, #8]
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	1ad3      	subs	r3, r2, r3
 801c09e:	4a1f      	ldr	r2, [pc, #124]	@ (801c11c <prvHeapInit+0xac>)
 801c0a0:	4413      	add	r3, r2
 801c0a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801c0a4:	68fb      	ldr	r3, [r7, #12]
 801c0a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801c0a8:	4a1d      	ldr	r2, [pc, #116]	@ (801c120 <prvHeapInit+0xb0>)
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801c0ae:	4b1c      	ldr	r3, [pc, #112]	@ (801c120 <prvHeapInit+0xb0>)
 801c0b0:	2200      	movs	r2, #0
 801c0b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	68ba      	ldr	r2, [r7, #8]
 801c0b8:	4413      	add	r3, r2
 801c0ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801c0bc:	2208      	movs	r2, #8
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	1a9b      	subs	r3, r3, r2
 801c0c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c0c4:	68fb      	ldr	r3, [r7, #12]
 801c0c6:	f023 0307 	bic.w	r3, r3, #7
 801c0ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c0cc:	68fb      	ldr	r3, [r7, #12]
 801c0ce:	4a15      	ldr	r2, [pc, #84]	@ (801c124 <prvHeapInit+0xb4>)
 801c0d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c0d2:	4b14      	ldr	r3, [pc, #80]	@ (801c124 <prvHeapInit+0xb4>)
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	2200      	movs	r2, #0
 801c0d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c0da:	4b12      	ldr	r3, [pc, #72]	@ (801c124 <prvHeapInit+0xb4>)
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	2200      	movs	r2, #0
 801c0e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c0e6:	683b      	ldr	r3, [r7, #0]
 801c0e8:	68fa      	ldr	r2, [r7, #12]
 801c0ea:	1ad2      	subs	r2, r2, r3
 801c0ec:	683b      	ldr	r3, [r7, #0]
 801c0ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c0f0:	4b0c      	ldr	r3, [pc, #48]	@ (801c124 <prvHeapInit+0xb4>)
 801c0f2:	681a      	ldr	r2, [r3, #0]
 801c0f4:	683b      	ldr	r3, [r7, #0]
 801c0f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c0f8:	683b      	ldr	r3, [r7, #0]
 801c0fa:	685b      	ldr	r3, [r3, #4]
 801c0fc:	4a0a      	ldr	r2, [pc, #40]	@ (801c128 <prvHeapInit+0xb8>)
 801c0fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c100:	683b      	ldr	r3, [r7, #0]
 801c102:	685b      	ldr	r3, [r3, #4]
 801c104:	4a09      	ldr	r2, [pc, #36]	@ (801c12c <prvHeapInit+0xbc>)
 801c106:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c108:	4b09      	ldr	r3, [pc, #36]	@ (801c130 <prvHeapInit+0xc0>)
 801c10a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801c10e:	601a      	str	r2, [r3, #0]
}
 801c110:	bf00      	nop
 801c112:	3714      	adds	r7, #20
 801c114:	46bd      	mov	sp, r7
 801c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c11a:	4770      	bx	lr
 801c11c:	2000171c 	.word	0x2000171c
 801c120:	2000653c 	.word	0x2000653c
 801c124:	20006544 	.word	0x20006544
 801c128:	2000654c 	.word	0x2000654c
 801c12c:	20006548 	.word	0x20006548
 801c130:	20006558 	.word	0x20006558

0801c134 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801c134:	b480      	push	{r7}
 801c136:	b085      	sub	sp, #20
 801c138:	af00      	add	r7, sp, #0
 801c13a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801c13c:	4b28      	ldr	r3, [pc, #160]	@ (801c1e0 <prvInsertBlockIntoFreeList+0xac>)
 801c13e:	60fb      	str	r3, [r7, #12]
 801c140:	e002      	b.n	801c148 <prvInsertBlockIntoFreeList+0x14>
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	60fb      	str	r3, [r7, #12]
 801c148:	68fb      	ldr	r3, [r7, #12]
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	687a      	ldr	r2, [r7, #4]
 801c14e:	429a      	cmp	r2, r3
 801c150:	d8f7      	bhi.n	801c142 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	685b      	ldr	r3, [r3, #4]
 801c15a:	68ba      	ldr	r2, [r7, #8]
 801c15c:	4413      	add	r3, r2
 801c15e:	687a      	ldr	r2, [r7, #4]
 801c160:	429a      	cmp	r2, r3
 801c162:	d108      	bne.n	801c176 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	685a      	ldr	r2, [r3, #4]
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	685b      	ldr	r3, [r3, #4]
 801c16c:	441a      	add	r2, r3
 801c16e:	68fb      	ldr	r3, [r7, #12]
 801c170:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801c172:	68fb      	ldr	r3, [r7, #12]
 801c174:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	685b      	ldr	r3, [r3, #4]
 801c17e:	68ba      	ldr	r2, [r7, #8]
 801c180:	441a      	add	r2, r3
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	429a      	cmp	r2, r3
 801c188:	d118      	bne.n	801c1bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801c18a:	68fb      	ldr	r3, [r7, #12]
 801c18c:	681a      	ldr	r2, [r3, #0]
 801c18e:	4b15      	ldr	r3, [pc, #84]	@ (801c1e4 <prvInsertBlockIntoFreeList+0xb0>)
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	429a      	cmp	r2, r3
 801c194:	d00d      	beq.n	801c1b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	685a      	ldr	r2, [r3, #4]
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	685b      	ldr	r3, [r3, #4]
 801c1a0:	441a      	add	r2, r3
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	681a      	ldr	r2, [r3, #0]
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	601a      	str	r2, [r3, #0]
 801c1b0:	e008      	b.n	801c1c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c1b2:	4b0c      	ldr	r3, [pc, #48]	@ (801c1e4 <prvInsertBlockIntoFreeList+0xb0>)
 801c1b4:	681a      	ldr	r2, [r3, #0]
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	601a      	str	r2, [r3, #0]
 801c1ba:	e003      	b.n	801c1c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	681a      	ldr	r2, [r3, #0]
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801c1c4:	68fa      	ldr	r2, [r7, #12]
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	429a      	cmp	r2, r3
 801c1ca:	d002      	beq.n	801c1d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	687a      	ldr	r2, [r7, #4]
 801c1d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c1d2:	bf00      	nop
 801c1d4:	3714      	adds	r7, #20
 801c1d6:	46bd      	mov	sp, r7
 801c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1dc:	4770      	bx	lr
 801c1de:	bf00      	nop
 801c1e0:	2000653c 	.word	0x2000653c
 801c1e4:	20006544 	.word	0x20006544

0801c1e8 <atof>:
 801c1e8:	2100      	movs	r1, #0
 801c1ea:	f000 bee3 	b.w	801cfb4 <strtod>

0801c1ee <atoi>:
 801c1ee:	220a      	movs	r2, #10
 801c1f0:	2100      	movs	r1, #0
 801c1f2:	f000 bf67 	b.w	801d0c4 <strtol>

0801c1f6 <atol>:
 801c1f6:	220a      	movs	r2, #10
 801c1f8:	2100      	movs	r1, #0
 801c1fa:	f000 bf63 	b.w	801d0c4 <strtol>
	...

0801c200 <exit>:
 801c200:	b508      	push	{r3, lr}
 801c202:	4b06      	ldr	r3, [pc, #24]	@ (801c21c <exit+0x1c>)
 801c204:	4604      	mov	r4, r0
 801c206:	b113      	cbz	r3, 801c20e <exit+0xe>
 801c208:	2100      	movs	r1, #0
 801c20a:	f3af 8000 	nop.w
 801c20e:	4b04      	ldr	r3, [pc, #16]	@ (801c220 <exit+0x20>)
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	b103      	cbz	r3, 801c216 <exit+0x16>
 801c214:	4798      	blx	r3
 801c216:	4620      	mov	r0, r4
 801c218:	f7e6 ffc4 	bl	80031a4 <_exit>
 801c21c:	00000000 	.word	0x00000000
 801c220:	2000669c 	.word	0x2000669c

0801c224 <malloc>:
 801c224:	4b02      	ldr	r3, [pc, #8]	@ (801c230 <malloc+0xc>)
 801c226:	4601      	mov	r1, r0
 801c228:	6818      	ldr	r0, [r3, #0]
 801c22a:	f000 b82d 	b.w	801c288 <_malloc_r>
 801c22e:	bf00      	nop
 801c230:	200001c0 	.word	0x200001c0

0801c234 <free>:
 801c234:	4b02      	ldr	r3, [pc, #8]	@ (801c240 <free+0xc>)
 801c236:	4601      	mov	r1, r0
 801c238:	6818      	ldr	r0, [r3, #0]
 801c23a:	f003 beb5 	b.w	801ffa8 <_free_r>
 801c23e:	bf00      	nop
 801c240:	200001c0 	.word	0x200001c0

0801c244 <sbrk_aligned>:
 801c244:	b570      	push	{r4, r5, r6, lr}
 801c246:	4e0f      	ldr	r6, [pc, #60]	@ (801c284 <sbrk_aligned+0x40>)
 801c248:	460c      	mov	r4, r1
 801c24a:	6831      	ldr	r1, [r6, #0]
 801c24c:	4605      	mov	r5, r0
 801c24e:	b911      	cbnz	r1, 801c256 <sbrk_aligned+0x12>
 801c250:	f002 ff60 	bl	801f114 <_sbrk_r>
 801c254:	6030      	str	r0, [r6, #0]
 801c256:	4621      	mov	r1, r4
 801c258:	4628      	mov	r0, r5
 801c25a:	f002 ff5b 	bl	801f114 <_sbrk_r>
 801c25e:	1c43      	adds	r3, r0, #1
 801c260:	d103      	bne.n	801c26a <sbrk_aligned+0x26>
 801c262:	f04f 34ff 	mov.w	r4, #4294967295
 801c266:	4620      	mov	r0, r4
 801c268:	bd70      	pop	{r4, r5, r6, pc}
 801c26a:	1cc4      	adds	r4, r0, #3
 801c26c:	f024 0403 	bic.w	r4, r4, #3
 801c270:	42a0      	cmp	r0, r4
 801c272:	d0f8      	beq.n	801c266 <sbrk_aligned+0x22>
 801c274:	1a21      	subs	r1, r4, r0
 801c276:	4628      	mov	r0, r5
 801c278:	f002 ff4c 	bl	801f114 <_sbrk_r>
 801c27c:	3001      	adds	r0, #1
 801c27e:	d1f2      	bne.n	801c266 <sbrk_aligned+0x22>
 801c280:	e7ef      	b.n	801c262 <sbrk_aligned+0x1e>
 801c282:	bf00      	nop
 801c284:	2000655c 	.word	0x2000655c

0801c288 <_malloc_r>:
 801c288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c28c:	1ccd      	adds	r5, r1, #3
 801c28e:	f025 0503 	bic.w	r5, r5, #3
 801c292:	3508      	adds	r5, #8
 801c294:	2d0c      	cmp	r5, #12
 801c296:	bf38      	it	cc
 801c298:	250c      	movcc	r5, #12
 801c29a:	2d00      	cmp	r5, #0
 801c29c:	4606      	mov	r6, r0
 801c29e:	db01      	blt.n	801c2a4 <_malloc_r+0x1c>
 801c2a0:	42a9      	cmp	r1, r5
 801c2a2:	d904      	bls.n	801c2ae <_malloc_r+0x26>
 801c2a4:	230c      	movs	r3, #12
 801c2a6:	6033      	str	r3, [r6, #0]
 801c2a8:	2000      	movs	r0, #0
 801c2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c2ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c384 <_malloc_r+0xfc>
 801c2b2:	f000 f869 	bl	801c388 <__malloc_lock>
 801c2b6:	f8d8 3000 	ldr.w	r3, [r8]
 801c2ba:	461c      	mov	r4, r3
 801c2bc:	bb44      	cbnz	r4, 801c310 <_malloc_r+0x88>
 801c2be:	4629      	mov	r1, r5
 801c2c0:	4630      	mov	r0, r6
 801c2c2:	f7ff ffbf 	bl	801c244 <sbrk_aligned>
 801c2c6:	1c43      	adds	r3, r0, #1
 801c2c8:	4604      	mov	r4, r0
 801c2ca:	d158      	bne.n	801c37e <_malloc_r+0xf6>
 801c2cc:	f8d8 4000 	ldr.w	r4, [r8]
 801c2d0:	4627      	mov	r7, r4
 801c2d2:	2f00      	cmp	r7, #0
 801c2d4:	d143      	bne.n	801c35e <_malloc_r+0xd6>
 801c2d6:	2c00      	cmp	r4, #0
 801c2d8:	d04b      	beq.n	801c372 <_malloc_r+0xea>
 801c2da:	6823      	ldr	r3, [r4, #0]
 801c2dc:	4639      	mov	r1, r7
 801c2de:	4630      	mov	r0, r6
 801c2e0:	eb04 0903 	add.w	r9, r4, r3
 801c2e4:	f002 ff16 	bl	801f114 <_sbrk_r>
 801c2e8:	4581      	cmp	r9, r0
 801c2ea:	d142      	bne.n	801c372 <_malloc_r+0xea>
 801c2ec:	6821      	ldr	r1, [r4, #0]
 801c2ee:	1a6d      	subs	r5, r5, r1
 801c2f0:	4629      	mov	r1, r5
 801c2f2:	4630      	mov	r0, r6
 801c2f4:	f7ff ffa6 	bl	801c244 <sbrk_aligned>
 801c2f8:	3001      	adds	r0, #1
 801c2fa:	d03a      	beq.n	801c372 <_malloc_r+0xea>
 801c2fc:	6823      	ldr	r3, [r4, #0]
 801c2fe:	442b      	add	r3, r5
 801c300:	6023      	str	r3, [r4, #0]
 801c302:	f8d8 3000 	ldr.w	r3, [r8]
 801c306:	685a      	ldr	r2, [r3, #4]
 801c308:	bb62      	cbnz	r2, 801c364 <_malloc_r+0xdc>
 801c30a:	f8c8 7000 	str.w	r7, [r8]
 801c30e:	e00f      	b.n	801c330 <_malloc_r+0xa8>
 801c310:	6822      	ldr	r2, [r4, #0]
 801c312:	1b52      	subs	r2, r2, r5
 801c314:	d420      	bmi.n	801c358 <_malloc_r+0xd0>
 801c316:	2a0b      	cmp	r2, #11
 801c318:	d917      	bls.n	801c34a <_malloc_r+0xc2>
 801c31a:	1961      	adds	r1, r4, r5
 801c31c:	42a3      	cmp	r3, r4
 801c31e:	6025      	str	r5, [r4, #0]
 801c320:	bf18      	it	ne
 801c322:	6059      	strne	r1, [r3, #4]
 801c324:	6863      	ldr	r3, [r4, #4]
 801c326:	bf08      	it	eq
 801c328:	f8c8 1000 	streq.w	r1, [r8]
 801c32c:	5162      	str	r2, [r4, r5]
 801c32e:	604b      	str	r3, [r1, #4]
 801c330:	4630      	mov	r0, r6
 801c332:	f000 f82f 	bl	801c394 <__malloc_unlock>
 801c336:	f104 000b 	add.w	r0, r4, #11
 801c33a:	1d23      	adds	r3, r4, #4
 801c33c:	f020 0007 	bic.w	r0, r0, #7
 801c340:	1ac2      	subs	r2, r0, r3
 801c342:	bf1c      	itt	ne
 801c344:	1a1b      	subne	r3, r3, r0
 801c346:	50a3      	strne	r3, [r4, r2]
 801c348:	e7af      	b.n	801c2aa <_malloc_r+0x22>
 801c34a:	6862      	ldr	r2, [r4, #4]
 801c34c:	42a3      	cmp	r3, r4
 801c34e:	bf0c      	ite	eq
 801c350:	f8c8 2000 	streq.w	r2, [r8]
 801c354:	605a      	strne	r2, [r3, #4]
 801c356:	e7eb      	b.n	801c330 <_malloc_r+0xa8>
 801c358:	4623      	mov	r3, r4
 801c35a:	6864      	ldr	r4, [r4, #4]
 801c35c:	e7ae      	b.n	801c2bc <_malloc_r+0x34>
 801c35e:	463c      	mov	r4, r7
 801c360:	687f      	ldr	r7, [r7, #4]
 801c362:	e7b6      	b.n	801c2d2 <_malloc_r+0x4a>
 801c364:	461a      	mov	r2, r3
 801c366:	685b      	ldr	r3, [r3, #4]
 801c368:	42a3      	cmp	r3, r4
 801c36a:	d1fb      	bne.n	801c364 <_malloc_r+0xdc>
 801c36c:	2300      	movs	r3, #0
 801c36e:	6053      	str	r3, [r2, #4]
 801c370:	e7de      	b.n	801c330 <_malloc_r+0xa8>
 801c372:	230c      	movs	r3, #12
 801c374:	6033      	str	r3, [r6, #0]
 801c376:	4630      	mov	r0, r6
 801c378:	f000 f80c 	bl	801c394 <__malloc_unlock>
 801c37c:	e794      	b.n	801c2a8 <_malloc_r+0x20>
 801c37e:	6005      	str	r5, [r0, #0]
 801c380:	e7d6      	b.n	801c330 <_malloc_r+0xa8>
 801c382:	bf00      	nop
 801c384:	20006560 	.word	0x20006560

0801c388 <__malloc_lock>:
 801c388:	4801      	ldr	r0, [pc, #4]	@ (801c390 <__malloc_lock+0x8>)
 801c38a:	f002 bf11 	b.w	801f1b0 <__retarget_lock_acquire_recursive>
 801c38e:	bf00      	nop
 801c390:	200066ca 	.word	0x200066ca

0801c394 <__malloc_unlock>:
 801c394:	4801      	ldr	r0, [pc, #4]	@ (801c39c <__malloc_unlock+0x8>)
 801c396:	f002 bf0d 	b.w	801f1b4 <__retarget_lock_release_recursive>
 801c39a:	bf00      	nop
 801c39c:	200066ca 	.word	0x200066ca

0801c3a0 <sulp>:
 801c3a0:	b570      	push	{r4, r5, r6, lr}
 801c3a2:	4604      	mov	r4, r0
 801c3a4:	460d      	mov	r5, r1
 801c3a6:	ec45 4b10 	vmov	d0, r4, r5
 801c3aa:	4616      	mov	r6, r2
 801c3ac:	f004 fd42 	bl	8020e34 <__ulp>
 801c3b0:	ec51 0b10 	vmov	r0, r1, d0
 801c3b4:	b17e      	cbz	r6, 801c3d6 <sulp+0x36>
 801c3b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c3ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	dd09      	ble.n	801c3d6 <sulp+0x36>
 801c3c2:	051b      	lsls	r3, r3, #20
 801c3c4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801c3c8:	2400      	movs	r4, #0
 801c3ca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801c3ce:	4622      	mov	r2, r4
 801c3d0:	462b      	mov	r3, r5
 801c3d2:	f7e4 f921 	bl	8000618 <__aeabi_dmul>
 801c3d6:	ec41 0b10 	vmov	d0, r0, r1
 801c3da:	bd70      	pop	{r4, r5, r6, pc}
 801c3dc:	0000      	movs	r0, r0
	...

0801c3e0 <_strtod_l>:
 801c3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3e4:	b09f      	sub	sp, #124	@ 0x7c
 801c3e6:	460c      	mov	r4, r1
 801c3e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801c3ea:	2200      	movs	r2, #0
 801c3ec:	921a      	str	r2, [sp, #104]	@ 0x68
 801c3ee:	9005      	str	r0, [sp, #20]
 801c3f0:	f04f 0a00 	mov.w	sl, #0
 801c3f4:	f04f 0b00 	mov.w	fp, #0
 801c3f8:	460a      	mov	r2, r1
 801c3fa:	9219      	str	r2, [sp, #100]	@ 0x64
 801c3fc:	7811      	ldrb	r1, [r2, #0]
 801c3fe:	292b      	cmp	r1, #43	@ 0x2b
 801c400:	d04a      	beq.n	801c498 <_strtod_l+0xb8>
 801c402:	d838      	bhi.n	801c476 <_strtod_l+0x96>
 801c404:	290d      	cmp	r1, #13
 801c406:	d832      	bhi.n	801c46e <_strtod_l+0x8e>
 801c408:	2908      	cmp	r1, #8
 801c40a:	d832      	bhi.n	801c472 <_strtod_l+0x92>
 801c40c:	2900      	cmp	r1, #0
 801c40e:	d03b      	beq.n	801c488 <_strtod_l+0xa8>
 801c410:	2200      	movs	r2, #0
 801c412:	920e      	str	r2, [sp, #56]	@ 0x38
 801c414:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801c416:	782a      	ldrb	r2, [r5, #0]
 801c418:	2a30      	cmp	r2, #48	@ 0x30
 801c41a:	f040 80b2 	bne.w	801c582 <_strtod_l+0x1a2>
 801c41e:	786a      	ldrb	r2, [r5, #1]
 801c420:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c424:	2a58      	cmp	r2, #88	@ 0x58
 801c426:	d16e      	bne.n	801c506 <_strtod_l+0x126>
 801c428:	9302      	str	r3, [sp, #8]
 801c42a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c42c:	9301      	str	r3, [sp, #4]
 801c42e:	ab1a      	add	r3, sp, #104	@ 0x68
 801c430:	9300      	str	r3, [sp, #0]
 801c432:	4a8f      	ldr	r2, [pc, #572]	@ (801c670 <_strtod_l+0x290>)
 801c434:	9805      	ldr	r0, [sp, #20]
 801c436:	ab1b      	add	r3, sp, #108	@ 0x6c
 801c438:	a919      	add	r1, sp, #100	@ 0x64
 801c43a:	f003 fe67 	bl	802010c <__gethex>
 801c43e:	f010 060f 	ands.w	r6, r0, #15
 801c442:	4604      	mov	r4, r0
 801c444:	d005      	beq.n	801c452 <_strtod_l+0x72>
 801c446:	2e06      	cmp	r6, #6
 801c448:	d128      	bne.n	801c49c <_strtod_l+0xbc>
 801c44a:	3501      	adds	r5, #1
 801c44c:	2300      	movs	r3, #0
 801c44e:	9519      	str	r5, [sp, #100]	@ 0x64
 801c450:	930e      	str	r3, [sp, #56]	@ 0x38
 801c452:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c454:	2b00      	cmp	r3, #0
 801c456:	f040 858e 	bne.w	801cf76 <_strtod_l+0xb96>
 801c45a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c45c:	b1cb      	cbz	r3, 801c492 <_strtod_l+0xb2>
 801c45e:	4652      	mov	r2, sl
 801c460:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801c464:	ec43 2b10 	vmov	d0, r2, r3
 801c468:	b01f      	add	sp, #124	@ 0x7c
 801c46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c46e:	2920      	cmp	r1, #32
 801c470:	d1ce      	bne.n	801c410 <_strtod_l+0x30>
 801c472:	3201      	adds	r2, #1
 801c474:	e7c1      	b.n	801c3fa <_strtod_l+0x1a>
 801c476:	292d      	cmp	r1, #45	@ 0x2d
 801c478:	d1ca      	bne.n	801c410 <_strtod_l+0x30>
 801c47a:	2101      	movs	r1, #1
 801c47c:	910e      	str	r1, [sp, #56]	@ 0x38
 801c47e:	1c51      	adds	r1, r2, #1
 801c480:	9119      	str	r1, [sp, #100]	@ 0x64
 801c482:	7852      	ldrb	r2, [r2, #1]
 801c484:	2a00      	cmp	r2, #0
 801c486:	d1c5      	bne.n	801c414 <_strtod_l+0x34>
 801c488:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c48a:	9419      	str	r4, [sp, #100]	@ 0x64
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	f040 8570 	bne.w	801cf72 <_strtod_l+0xb92>
 801c492:	4652      	mov	r2, sl
 801c494:	465b      	mov	r3, fp
 801c496:	e7e5      	b.n	801c464 <_strtod_l+0x84>
 801c498:	2100      	movs	r1, #0
 801c49a:	e7ef      	b.n	801c47c <_strtod_l+0x9c>
 801c49c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c49e:	b13a      	cbz	r2, 801c4b0 <_strtod_l+0xd0>
 801c4a0:	2135      	movs	r1, #53	@ 0x35
 801c4a2:	a81c      	add	r0, sp, #112	@ 0x70
 801c4a4:	f004 fdc0 	bl	8021028 <__copybits>
 801c4a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c4aa:	9805      	ldr	r0, [sp, #20]
 801c4ac:	f004 f996 	bl	80207dc <_Bfree>
 801c4b0:	3e01      	subs	r6, #1
 801c4b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c4b4:	2e04      	cmp	r6, #4
 801c4b6:	d806      	bhi.n	801c4c6 <_strtod_l+0xe6>
 801c4b8:	e8df f006 	tbb	[pc, r6]
 801c4bc:	201d0314 	.word	0x201d0314
 801c4c0:	14          	.byte	0x14
 801c4c1:	00          	.byte	0x00
 801c4c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801c4c6:	05e1      	lsls	r1, r4, #23
 801c4c8:	bf48      	it	mi
 801c4ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801c4ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c4d2:	0d1b      	lsrs	r3, r3, #20
 801c4d4:	051b      	lsls	r3, r3, #20
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d1bb      	bne.n	801c452 <_strtod_l+0x72>
 801c4da:	f002 fe3d 	bl	801f158 <__errno>
 801c4de:	2322      	movs	r3, #34	@ 0x22
 801c4e0:	6003      	str	r3, [r0, #0]
 801c4e2:	e7b6      	b.n	801c452 <_strtod_l+0x72>
 801c4e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801c4e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801c4ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801c4f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c4f4:	e7e7      	b.n	801c4c6 <_strtod_l+0xe6>
 801c4f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 801c678 <_strtod_l+0x298>
 801c4fa:	e7e4      	b.n	801c4c6 <_strtod_l+0xe6>
 801c4fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801c500:	f04f 3aff 	mov.w	sl, #4294967295
 801c504:	e7df      	b.n	801c4c6 <_strtod_l+0xe6>
 801c506:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c508:	1c5a      	adds	r2, r3, #1
 801c50a:	9219      	str	r2, [sp, #100]	@ 0x64
 801c50c:	785b      	ldrb	r3, [r3, #1]
 801c50e:	2b30      	cmp	r3, #48	@ 0x30
 801c510:	d0f9      	beq.n	801c506 <_strtod_l+0x126>
 801c512:	2b00      	cmp	r3, #0
 801c514:	d09d      	beq.n	801c452 <_strtod_l+0x72>
 801c516:	2301      	movs	r3, #1
 801c518:	2700      	movs	r7, #0
 801c51a:	9308      	str	r3, [sp, #32]
 801c51c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c51e:	930c      	str	r3, [sp, #48]	@ 0x30
 801c520:	970b      	str	r7, [sp, #44]	@ 0x2c
 801c522:	46b9      	mov	r9, r7
 801c524:	220a      	movs	r2, #10
 801c526:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c528:	7805      	ldrb	r5, [r0, #0]
 801c52a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801c52e:	b2d9      	uxtb	r1, r3
 801c530:	2909      	cmp	r1, #9
 801c532:	d928      	bls.n	801c586 <_strtod_l+0x1a6>
 801c534:	494f      	ldr	r1, [pc, #316]	@ (801c674 <_strtod_l+0x294>)
 801c536:	2201      	movs	r2, #1
 801c538:	f001 fdd2 	bl	801e0e0 <strncmp>
 801c53c:	2800      	cmp	r0, #0
 801c53e:	d032      	beq.n	801c5a6 <_strtod_l+0x1c6>
 801c540:	2000      	movs	r0, #0
 801c542:	462a      	mov	r2, r5
 801c544:	900a      	str	r0, [sp, #40]	@ 0x28
 801c546:	464d      	mov	r5, r9
 801c548:	4603      	mov	r3, r0
 801c54a:	2a65      	cmp	r2, #101	@ 0x65
 801c54c:	d001      	beq.n	801c552 <_strtod_l+0x172>
 801c54e:	2a45      	cmp	r2, #69	@ 0x45
 801c550:	d114      	bne.n	801c57c <_strtod_l+0x19c>
 801c552:	b91d      	cbnz	r5, 801c55c <_strtod_l+0x17c>
 801c554:	9a08      	ldr	r2, [sp, #32]
 801c556:	4302      	orrs	r2, r0
 801c558:	d096      	beq.n	801c488 <_strtod_l+0xa8>
 801c55a:	2500      	movs	r5, #0
 801c55c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801c55e:	1c62      	adds	r2, r4, #1
 801c560:	9219      	str	r2, [sp, #100]	@ 0x64
 801c562:	7862      	ldrb	r2, [r4, #1]
 801c564:	2a2b      	cmp	r2, #43	@ 0x2b
 801c566:	d07a      	beq.n	801c65e <_strtod_l+0x27e>
 801c568:	2a2d      	cmp	r2, #45	@ 0x2d
 801c56a:	d07e      	beq.n	801c66a <_strtod_l+0x28a>
 801c56c:	f04f 0c00 	mov.w	ip, #0
 801c570:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801c574:	2909      	cmp	r1, #9
 801c576:	f240 8085 	bls.w	801c684 <_strtod_l+0x2a4>
 801c57a:	9419      	str	r4, [sp, #100]	@ 0x64
 801c57c:	f04f 0800 	mov.w	r8, #0
 801c580:	e0a5      	b.n	801c6ce <_strtod_l+0x2ee>
 801c582:	2300      	movs	r3, #0
 801c584:	e7c8      	b.n	801c518 <_strtod_l+0x138>
 801c586:	f1b9 0f08 	cmp.w	r9, #8
 801c58a:	bfd8      	it	le
 801c58c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801c58e:	f100 0001 	add.w	r0, r0, #1
 801c592:	bfda      	itte	le
 801c594:	fb02 3301 	mlale	r3, r2, r1, r3
 801c598:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801c59a:	fb02 3707 	mlagt	r7, r2, r7, r3
 801c59e:	f109 0901 	add.w	r9, r9, #1
 801c5a2:	9019      	str	r0, [sp, #100]	@ 0x64
 801c5a4:	e7bf      	b.n	801c526 <_strtod_l+0x146>
 801c5a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c5a8:	1c5a      	adds	r2, r3, #1
 801c5aa:	9219      	str	r2, [sp, #100]	@ 0x64
 801c5ac:	785a      	ldrb	r2, [r3, #1]
 801c5ae:	f1b9 0f00 	cmp.w	r9, #0
 801c5b2:	d03b      	beq.n	801c62c <_strtod_l+0x24c>
 801c5b4:	900a      	str	r0, [sp, #40]	@ 0x28
 801c5b6:	464d      	mov	r5, r9
 801c5b8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801c5bc:	2b09      	cmp	r3, #9
 801c5be:	d912      	bls.n	801c5e6 <_strtod_l+0x206>
 801c5c0:	2301      	movs	r3, #1
 801c5c2:	e7c2      	b.n	801c54a <_strtod_l+0x16a>
 801c5c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c5c6:	1c5a      	adds	r2, r3, #1
 801c5c8:	9219      	str	r2, [sp, #100]	@ 0x64
 801c5ca:	785a      	ldrb	r2, [r3, #1]
 801c5cc:	3001      	adds	r0, #1
 801c5ce:	2a30      	cmp	r2, #48	@ 0x30
 801c5d0:	d0f8      	beq.n	801c5c4 <_strtod_l+0x1e4>
 801c5d2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801c5d6:	2b08      	cmp	r3, #8
 801c5d8:	f200 84d2 	bhi.w	801cf80 <_strtod_l+0xba0>
 801c5dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c5de:	900a      	str	r0, [sp, #40]	@ 0x28
 801c5e0:	2000      	movs	r0, #0
 801c5e2:	930c      	str	r3, [sp, #48]	@ 0x30
 801c5e4:	4605      	mov	r5, r0
 801c5e6:	3a30      	subs	r2, #48	@ 0x30
 801c5e8:	f100 0301 	add.w	r3, r0, #1
 801c5ec:	d018      	beq.n	801c620 <_strtod_l+0x240>
 801c5ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c5f0:	4419      	add	r1, r3
 801c5f2:	910a      	str	r1, [sp, #40]	@ 0x28
 801c5f4:	462e      	mov	r6, r5
 801c5f6:	f04f 0e0a 	mov.w	lr, #10
 801c5fa:	1c71      	adds	r1, r6, #1
 801c5fc:	eba1 0c05 	sub.w	ip, r1, r5
 801c600:	4563      	cmp	r3, ip
 801c602:	dc15      	bgt.n	801c630 <_strtod_l+0x250>
 801c604:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801c608:	182b      	adds	r3, r5, r0
 801c60a:	2b08      	cmp	r3, #8
 801c60c:	f105 0501 	add.w	r5, r5, #1
 801c610:	4405      	add	r5, r0
 801c612:	dc1a      	bgt.n	801c64a <_strtod_l+0x26a>
 801c614:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c616:	230a      	movs	r3, #10
 801c618:	fb03 2301 	mla	r3, r3, r1, r2
 801c61c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c61e:	2300      	movs	r3, #0
 801c620:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c622:	1c51      	adds	r1, r2, #1
 801c624:	9119      	str	r1, [sp, #100]	@ 0x64
 801c626:	7852      	ldrb	r2, [r2, #1]
 801c628:	4618      	mov	r0, r3
 801c62a:	e7c5      	b.n	801c5b8 <_strtod_l+0x1d8>
 801c62c:	4648      	mov	r0, r9
 801c62e:	e7ce      	b.n	801c5ce <_strtod_l+0x1ee>
 801c630:	2e08      	cmp	r6, #8
 801c632:	dc05      	bgt.n	801c640 <_strtod_l+0x260>
 801c634:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801c636:	fb0e f606 	mul.w	r6, lr, r6
 801c63a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801c63c:	460e      	mov	r6, r1
 801c63e:	e7dc      	b.n	801c5fa <_strtod_l+0x21a>
 801c640:	2910      	cmp	r1, #16
 801c642:	bfd8      	it	le
 801c644:	fb0e f707 	mulle.w	r7, lr, r7
 801c648:	e7f8      	b.n	801c63c <_strtod_l+0x25c>
 801c64a:	2b0f      	cmp	r3, #15
 801c64c:	bfdc      	itt	le
 801c64e:	230a      	movle	r3, #10
 801c650:	fb03 2707 	mlale	r7, r3, r7, r2
 801c654:	e7e3      	b.n	801c61e <_strtod_l+0x23e>
 801c656:	2300      	movs	r3, #0
 801c658:	930a      	str	r3, [sp, #40]	@ 0x28
 801c65a:	2301      	movs	r3, #1
 801c65c:	e77a      	b.n	801c554 <_strtod_l+0x174>
 801c65e:	f04f 0c00 	mov.w	ip, #0
 801c662:	1ca2      	adds	r2, r4, #2
 801c664:	9219      	str	r2, [sp, #100]	@ 0x64
 801c666:	78a2      	ldrb	r2, [r4, #2]
 801c668:	e782      	b.n	801c570 <_strtod_l+0x190>
 801c66a:	f04f 0c01 	mov.w	ip, #1
 801c66e:	e7f8      	b.n	801c662 <_strtod_l+0x282>
 801c670:	080262b0 	.word	0x080262b0
 801c674:	08026004 	.word	0x08026004
 801c678:	7ff00000 	.word	0x7ff00000
 801c67c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c67e:	1c51      	adds	r1, r2, #1
 801c680:	9119      	str	r1, [sp, #100]	@ 0x64
 801c682:	7852      	ldrb	r2, [r2, #1]
 801c684:	2a30      	cmp	r2, #48	@ 0x30
 801c686:	d0f9      	beq.n	801c67c <_strtod_l+0x29c>
 801c688:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801c68c:	2908      	cmp	r1, #8
 801c68e:	f63f af75 	bhi.w	801c57c <_strtod_l+0x19c>
 801c692:	3a30      	subs	r2, #48	@ 0x30
 801c694:	9209      	str	r2, [sp, #36]	@ 0x24
 801c696:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c698:	920f      	str	r2, [sp, #60]	@ 0x3c
 801c69a:	f04f 080a 	mov.w	r8, #10
 801c69e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c6a0:	1c56      	adds	r6, r2, #1
 801c6a2:	9619      	str	r6, [sp, #100]	@ 0x64
 801c6a4:	7852      	ldrb	r2, [r2, #1]
 801c6a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801c6aa:	f1be 0f09 	cmp.w	lr, #9
 801c6ae:	d939      	bls.n	801c724 <_strtod_l+0x344>
 801c6b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c6b2:	1a76      	subs	r6, r6, r1
 801c6b4:	2e08      	cmp	r6, #8
 801c6b6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801c6ba:	dc03      	bgt.n	801c6c4 <_strtod_l+0x2e4>
 801c6bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c6be:	4588      	cmp	r8, r1
 801c6c0:	bfa8      	it	ge
 801c6c2:	4688      	movge	r8, r1
 801c6c4:	f1bc 0f00 	cmp.w	ip, #0
 801c6c8:	d001      	beq.n	801c6ce <_strtod_l+0x2ee>
 801c6ca:	f1c8 0800 	rsb	r8, r8, #0
 801c6ce:	2d00      	cmp	r5, #0
 801c6d0:	d14e      	bne.n	801c770 <_strtod_l+0x390>
 801c6d2:	9908      	ldr	r1, [sp, #32]
 801c6d4:	4308      	orrs	r0, r1
 801c6d6:	f47f aebc 	bne.w	801c452 <_strtod_l+0x72>
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	f47f aed4 	bne.w	801c488 <_strtod_l+0xa8>
 801c6e0:	2a69      	cmp	r2, #105	@ 0x69
 801c6e2:	d028      	beq.n	801c736 <_strtod_l+0x356>
 801c6e4:	dc25      	bgt.n	801c732 <_strtod_l+0x352>
 801c6e6:	2a49      	cmp	r2, #73	@ 0x49
 801c6e8:	d025      	beq.n	801c736 <_strtod_l+0x356>
 801c6ea:	2a4e      	cmp	r2, #78	@ 0x4e
 801c6ec:	f47f aecc 	bne.w	801c488 <_strtod_l+0xa8>
 801c6f0:	499a      	ldr	r1, [pc, #616]	@ (801c95c <_strtod_l+0x57c>)
 801c6f2:	a819      	add	r0, sp, #100	@ 0x64
 801c6f4:	f003 ff2c 	bl	8020550 <__match>
 801c6f8:	2800      	cmp	r0, #0
 801c6fa:	f43f aec5 	beq.w	801c488 <_strtod_l+0xa8>
 801c6fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c700:	781b      	ldrb	r3, [r3, #0]
 801c702:	2b28      	cmp	r3, #40	@ 0x28
 801c704:	d12e      	bne.n	801c764 <_strtod_l+0x384>
 801c706:	4996      	ldr	r1, [pc, #600]	@ (801c960 <_strtod_l+0x580>)
 801c708:	aa1c      	add	r2, sp, #112	@ 0x70
 801c70a:	a819      	add	r0, sp, #100	@ 0x64
 801c70c:	f003 ff34 	bl	8020578 <__hexnan>
 801c710:	2805      	cmp	r0, #5
 801c712:	d127      	bne.n	801c764 <_strtod_l+0x384>
 801c714:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c716:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801c71a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801c71e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801c722:	e696      	b.n	801c452 <_strtod_l+0x72>
 801c724:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c726:	fb08 2101 	mla	r1, r8, r1, r2
 801c72a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801c72e:	9209      	str	r2, [sp, #36]	@ 0x24
 801c730:	e7b5      	b.n	801c69e <_strtod_l+0x2be>
 801c732:	2a6e      	cmp	r2, #110	@ 0x6e
 801c734:	e7da      	b.n	801c6ec <_strtod_l+0x30c>
 801c736:	498b      	ldr	r1, [pc, #556]	@ (801c964 <_strtod_l+0x584>)
 801c738:	a819      	add	r0, sp, #100	@ 0x64
 801c73a:	f003 ff09 	bl	8020550 <__match>
 801c73e:	2800      	cmp	r0, #0
 801c740:	f43f aea2 	beq.w	801c488 <_strtod_l+0xa8>
 801c744:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c746:	4988      	ldr	r1, [pc, #544]	@ (801c968 <_strtod_l+0x588>)
 801c748:	3b01      	subs	r3, #1
 801c74a:	a819      	add	r0, sp, #100	@ 0x64
 801c74c:	9319      	str	r3, [sp, #100]	@ 0x64
 801c74e:	f003 feff 	bl	8020550 <__match>
 801c752:	b910      	cbnz	r0, 801c75a <_strtod_l+0x37a>
 801c754:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c756:	3301      	adds	r3, #1
 801c758:	9319      	str	r3, [sp, #100]	@ 0x64
 801c75a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 801c978 <_strtod_l+0x598>
 801c75e:	f04f 0a00 	mov.w	sl, #0
 801c762:	e676      	b.n	801c452 <_strtod_l+0x72>
 801c764:	4881      	ldr	r0, [pc, #516]	@ (801c96c <_strtod_l+0x58c>)
 801c766:	f002 fd3f 	bl	801f1e8 <nan>
 801c76a:	ec5b ab10 	vmov	sl, fp, d0
 801c76e:	e670      	b.n	801c452 <_strtod_l+0x72>
 801c770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c772:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c774:	eba8 0303 	sub.w	r3, r8, r3
 801c778:	f1b9 0f00 	cmp.w	r9, #0
 801c77c:	bf08      	it	eq
 801c77e:	46a9      	moveq	r9, r5
 801c780:	2d10      	cmp	r5, #16
 801c782:	9309      	str	r3, [sp, #36]	@ 0x24
 801c784:	462c      	mov	r4, r5
 801c786:	bfa8      	it	ge
 801c788:	2410      	movge	r4, #16
 801c78a:	f7e3 fecb 	bl	8000524 <__aeabi_ui2d>
 801c78e:	2d09      	cmp	r5, #9
 801c790:	4682      	mov	sl, r0
 801c792:	468b      	mov	fp, r1
 801c794:	dc13      	bgt.n	801c7be <_strtod_l+0x3de>
 801c796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c798:	2b00      	cmp	r3, #0
 801c79a:	f43f ae5a 	beq.w	801c452 <_strtod_l+0x72>
 801c79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c7a0:	dd78      	ble.n	801c894 <_strtod_l+0x4b4>
 801c7a2:	2b16      	cmp	r3, #22
 801c7a4:	dc5f      	bgt.n	801c866 <_strtod_l+0x486>
 801c7a6:	4972      	ldr	r1, [pc, #456]	@ (801c970 <_strtod_l+0x590>)
 801c7a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c7ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c7b0:	4652      	mov	r2, sl
 801c7b2:	465b      	mov	r3, fp
 801c7b4:	f7e3 ff30 	bl	8000618 <__aeabi_dmul>
 801c7b8:	4682      	mov	sl, r0
 801c7ba:	468b      	mov	fp, r1
 801c7bc:	e649      	b.n	801c452 <_strtod_l+0x72>
 801c7be:	4b6c      	ldr	r3, [pc, #432]	@ (801c970 <_strtod_l+0x590>)
 801c7c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c7c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801c7c8:	f7e3 ff26 	bl	8000618 <__aeabi_dmul>
 801c7cc:	4682      	mov	sl, r0
 801c7ce:	4638      	mov	r0, r7
 801c7d0:	468b      	mov	fp, r1
 801c7d2:	f7e3 fea7 	bl	8000524 <__aeabi_ui2d>
 801c7d6:	4602      	mov	r2, r0
 801c7d8:	460b      	mov	r3, r1
 801c7da:	4650      	mov	r0, sl
 801c7dc:	4659      	mov	r1, fp
 801c7de:	f7e3 fd65 	bl	80002ac <__adddf3>
 801c7e2:	2d0f      	cmp	r5, #15
 801c7e4:	4682      	mov	sl, r0
 801c7e6:	468b      	mov	fp, r1
 801c7e8:	ddd5      	ble.n	801c796 <_strtod_l+0x3b6>
 801c7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c7ec:	1b2c      	subs	r4, r5, r4
 801c7ee:	441c      	add	r4, r3
 801c7f0:	2c00      	cmp	r4, #0
 801c7f2:	f340 8093 	ble.w	801c91c <_strtod_l+0x53c>
 801c7f6:	f014 030f 	ands.w	r3, r4, #15
 801c7fa:	d00a      	beq.n	801c812 <_strtod_l+0x432>
 801c7fc:	495c      	ldr	r1, [pc, #368]	@ (801c970 <_strtod_l+0x590>)
 801c7fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c802:	4652      	mov	r2, sl
 801c804:	465b      	mov	r3, fp
 801c806:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c80a:	f7e3 ff05 	bl	8000618 <__aeabi_dmul>
 801c80e:	4682      	mov	sl, r0
 801c810:	468b      	mov	fp, r1
 801c812:	f034 040f 	bics.w	r4, r4, #15
 801c816:	d073      	beq.n	801c900 <_strtod_l+0x520>
 801c818:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801c81c:	dd49      	ble.n	801c8b2 <_strtod_l+0x4d2>
 801c81e:	2400      	movs	r4, #0
 801c820:	46a0      	mov	r8, r4
 801c822:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c824:	46a1      	mov	r9, r4
 801c826:	9a05      	ldr	r2, [sp, #20]
 801c828:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 801c978 <_strtod_l+0x598>
 801c82c:	2322      	movs	r3, #34	@ 0x22
 801c82e:	6013      	str	r3, [r2, #0]
 801c830:	f04f 0a00 	mov.w	sl, #0
 801c834:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c836:	2b00      	cmp	r3, #0
 801c838:	f43f ae0b 	beq.w	801c452 <_strtod_l+0x72>
 801c83c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c83e:	9805      	ldr	r0, [sp, #20]
 801c840:	f003 ffcc 	bl	80207dc <_Bfree>
 801c844:	9805      	ldr	r0, [sp, #20]
 801c846:	4649      	mov	r1, r9
 801c848:	f003 ffc8 	bl	80207dc <_Bfree>
 801c84c:	9805      	ldr	r0, [sp, #20]
 801c84e:	4641      	mov	r1, r8
 801c850:	f003 ffc4 	bl	80207dc <_Bfree>
 801c854:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c856:	9805      	ldr	r0, [sp, #20]
 801c858:	f003 ffc0 	bl	80207dc <_Bfree>
 801c85c:	9805      	ldr	r0, [sp, #20]
 801c85e:	4621      	mov	r1, r4
 801c860:	f003 ffbc 	bl	80207dc <_Bfree>
 801c864:	e5f5      	b.n	801c452 <_strtod_l+0x72>
 801c866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c868:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801c86c:	4293      	cmp	r3, r2
 801c86e:	dbbc      	blt.n	801c7ea <_strtod_l+0x40a>
 801c870:	4c3f      	ldr	r4, [pc, #252]	@ (801c970 <_strtod_l+0x590>)
 801c872:	f1c5 050f 	rsb	r5, r5, #15
 801c876:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c87a:	4652      	mov	r2, sl
 801c87c:	465b      	mov	r3, fp
 801c87e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c882:	f7e3 fec9 	bl	8000618 <__aeabi_dmul>
 801c886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c888:	1b5d      	subs	r5, r3, r5
 801c88a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c88e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c892:	e78f      	b.n	801c7b4 <_strtod_l+0x3d4>
 801c894:	3316      	adds	r3, #22
 801c896:	dba8      	blt.n	801c7ea <_strtod_l+0x40a>
 801c898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c89a:	eba3 0808 	sub.w	r8, r3, r8
 801c89e:	4b34      	ldr	r3, [pc, #208]	@ (801c970 <_strtod_l+0x590>)
 801c8a0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801c8a4:	e9d8 2300 	ldrd	r2, r3, [r8]
 801c8a8:	4650      	mov	r0, sl
 801c8aa:	4659      	mov	r1, fp
 801c8ac:	f7e3 ffde 	bl	800086c <__aeabi_ddiv>
 801c8b0:	e782      	b.n	801c7b8 <_strtod_l+0x3d8>
 801c8b2:	2300      	movs	r3, #0
 801c8b4:	4f2f      	ldr	r7, [pc, #188]	@ (801c974 <_strtod_l+0x594>)
 801c8b6:	1124      	asrs	r4, r4, #4
 801c8b8:	4650      	mov	r0, sl
 801c8ba:	4659      	mov	r1, fp
 801c8bc:	461e      	mov	r6, r3
 801c8be:	2c01      	cmp	r4, #1
 801c8c0:	dc21      	bgt.n	801c906 <_strtod_l+0x526>
 801c8c2:	b10b      	cbz	r3, 801c8c8 <_strtod_l+0x4e8>
 801c8c4:	4682      	mov	sl, r0
 801c8c6:	468b      	mov	fp, r1
 801c8c8:	492a      	ldr	r1, [pc, #168]	@ (801c974 <_strtod_l+0x594>)
 801c8ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801c8ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801c8d2:	4652      	mov	r2, sl
 801c8d4:	465b      	mov	r3, fp
 801c8d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c8da:	f7e3 fe9d 	bl	8000618 <__aeabi_dmul>
 801c8de:	4b26      	ldr	r3, [pc, #152]	@ (801c978 <_strtod_l+0x598>)
 801c8e0:	460a      	mov	r2, r1
 801c8e2:	400b      	ands	r3, r1
 801c8e4:	4925      	ldr	r1, [pc, #148]	@ (801c97c <_strtod_l+0x59c>)
 801c8e6:	428b      	cmp	r3, r1
 801c8e8:	4682      	mov	sl, r0
 801c8ea:	d898      	bhi.n	801c81e <_strtod_l+0x43e>
 801c8ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801c8f0:	428b      	cmp	r3, r1
 801c8f2:	bf86      	itte	hi
 801c8f4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 801c980 <_strtod_l+0x5a0>
 801c8f8:	f04f 3aff 	movhi.w	sl, #4294967295
 801c8fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801c900:	2300      	movs	r3, #0
 801c902:	9308      	str	r3, [sp, #32]
 801c904:	e076      	b.n	801c9f4 <_strtod_l+0x614>
 801c906:	07e2      	lsls	r2, r4, #31
 801c908:	d504      	bpl.n	801c914 <_strtod_l+0x534>
 801c90a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c90e:	f7e3 fe83 	bl	8000618 <__aeabi_dmul>
 801c912:	2301      	movs	r3, #1
 801c914:	3601      	adds	r6, #1
 801c916:	1064      	asrs	r4, r4, #1
 801c918:	3708      	adds	r7, #8
 801c91a:	e7d0      	b.n	801c8be <_strtod_l+0x4de>
 801c91c:	d0f0      	beq.n	801c900 <_strtod_l+0x520>
 801c91e:	4264      	negs	r4, r4
 801c920:	f014 020f 	ands.w	r2, r4, #15
 801c924:	d00a      	beq.n	801c93c <_strtod_l+0x55c>
 801c926:	4b12      	ldr	r3, [pc, #72]	@ (801c970 <_strtod_l+0x590>)
 801c928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c92c:	4650      	mov	r0, sl
 801c92e:	4659      	mov	r1, fp
 801c930:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c934:	f7e3 ff9a 	bl	800086c <__aeabi_ddiv>
 801c938:	4682      	mov	sl, r0
 801c93a:	468b      	mov	fp, r1
 801c93c:	1124      	asrs	r4, r4, #4
 801c93e:	d0df      	beq.n	801c900 <_strtod_l+0x520>
 801c940:	2c1f      	cmp	r4, #31
 801c942:	dd1f      	ble.n	801c984 <_strtod_l+0x5a4>
 801c944:	2400      	movs	r4, #0
 801c946:	46a0      	mov	r8, r4
 801c948:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c94a:	46a1      	mov	r9, r4
 801c94c:	9a05      	ldr	r2, [sp, #20]
 801c94e:	2322      	movs	r3, #34	@ 0x22
 801c950:	f04f 0a00 	mov.w	sl, #0
 801c954:	f04f 0b00 	mov.w	fp, #0
 801c958:	6013      	str	r3, [r2, #0]
 801c95a:	e76b      	b.n	801c834 <_strtod_l+0x454>
 801c95c:	08026013 	.word	0x08026013
 801c960:	0802629c 	.word	0x0802629c
 801c964:	0802600b 	.word	0x0802600b
 801c968:	08026141 	.word	0x08026141
 801c96c:	0802613d 	.word	0x0802613d
 801c970:	080264e8 	.word	0x080264e8
 801c974:	080264c0 	.word	0x080264c0
 801c978:	7ff00000 	.word	0x7ff00000
 801c97c:	7ca00000 	.word	0x7ca00000
 801c980:	7fefffff 	.word	0x7fefffff
 801c984:	f014 0310 	ands.w	r3, r4, #16
 801c988:	bf18      	it	ne
 801c98a:	236a      	movne	r3, #106	@ 0x6a
 801c98c:	4ea9      	ldr	r6, [pc, #676]	@ (801cc34 <_strtod_l+0x854>)
 801c98e:	9308      	str	r3, [sp, #32]
 801c990:	4650      	mov	r0, sl
 801c992:	4659      	mov	r1, fp
 801c994:	2300      	movs	r3, #0
 801c996:	07e7      	lsls	r7, r4, #31
 801c998:	d504      	bpl.n	801c9a4 <_strtod_l+0x5c4>
 801c99a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c99e:	f7e3 fe3b 	bl	8000618 <__aeabi_dmul>
 801c9a2:	2301      	movs	r3, #1
 801c9a4:	1064      	asrs	r4, r4, #1
 801c9a6:	f106 0608 	add.w	r6, r6, #8
 801c9aa:	d1f4      	bne.n	801c996 <_strtod_l+0x5b6>
 801c9ac:	b10b      	cbz	r3, 801c9b2 <_strtod_l+0x5d2>
 801c9ae:	4682      	mov	sl, r0
 801c9b0:	468b      	mov	fp, r1
 801c9b2:	9b08      	ldr	r3, [sp, #32]
 801c9b4:	b1b3      	cbz	r3, 801c9e4 <_strtod_l+0x604>
 801c9b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c9ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	4659      	mov	r1, fp
 801c9c2:	dd0f      	ble.n	801c9e4 <_strtod_l+0x604>
 801c9c4:	2b1f      	cmp	r3, #31
 801c9c6:	dd56      	ble.n	801ca76 <_strtod_l+0x696>
 801c9c8:	2b34      	cmp	r3, #52	@ 0x34
 801c9ca:	bfde      	ittt	le
 801c9cc:	f04f 33ff 	movle.w	r3, #4294967295
 801c9d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801c9d4:	4093      	lslle	r3, r2
 801c9d6:	f04f 0a00 	mov.w	sl, #0
 801c9da:	bfcc      	ite	gt
 801c9dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801c9e0:	ea03 0b01 	andle.w	fp, r3, r1
 801c9e4:	2200      	movs	r2, #0
 801c9e6:	2300      	movs	r3, #0
 801c9e8:	4650      	mov	r0, sl
 801c9ea:	4659      	mov	r1, fp
 801c9ec:	f7e4 f87c 	bl	8000ae8 <__aeabi_dcmpeq>
 801c9f0:	2800      	cmp	r0, #0
 801c9f2:	d1a7      	bne.n	801c944 <_strtod_l+0x564>
 801c9f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c9f6:	9300      	str	r3, [sp, #0]
 801c9f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c9fa:	9805      	ldr	r0, [sp, #20]
 801c9fc:	462b      	mov	r3, r5
 801c9fe:	464a      	mov	r2, r9
 801ca00:	f003 ff54 	bl	80208ac <__s2b>
 801ca04:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ca06:	2800      	cmp	r0, #0
 801ca08:	f43f af09 	beq.w	801c81e <_strtod_l+0x43e>
 801ca0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ca0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ca10:	2a00      	cmp	r2, #0
 801ca12:	eba3 0308 	sub.w	r3, r3, r8
 801ca16:	bfa8      	it	ge
 801ca18:	2300      	movge	r3, #0
 801ca1a:	9312      	str	r3, [sp, #72]	@ 0x48
 801ca1c:	2400      	movs	r4, #0
 801ca1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801ca22:	9316      	str	r3, [sp, #88]	@ 0x58
 801ca24:	46a0      	mov	r8, r4
 801ca26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ca28:	9805      	ldr	r0, [sp, #20]
 801ca2a:	6859      	ldr	r1, [r3, #4]
 801ca2c:	f003 fe96 	bl	802075c <_Balloc>
 801ca30:	4681      	mov	r9, r0
 801ca32:	2800      	cmp	r0, #0
 801ca34:	f43f aef7 	beq.w	801c826 <_strtod_l+0x446>
 801ca38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ca3a:	691a      	ldr	r2, [r3, #16]
 801ca3c:	3202      	adds	r2, #2
 801ca3e:	f103 010c 	add.w	r1, r3, #12
 801ca42:	0092      	lsls	r2, r2, #2
 801ca44:	300c      	adds	r0, #12
 801ca46:	f002 fbbe 	bl	801f1c6 <memcpy>
 801ca4a:	ec4b ab10 	vmov	d0, sl, fp
 801ca4e:	9805      	ldr	r0, [sp, #20]
 801ca50:	aa1c      	add	r2, sp, #112	@ 0x70
 801ca52:	a91b      	add	r1, sp, #108	@ 0x6c
 801ca54:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801ca58:	f004 fa5c 	bl	8020f14 <__d2b>
 801ca5c:	901a      	str	r0, [sp, #104]	@ 0x68
 801ca5e:	2800      	cmp	r0, #0
 801ca60:	f43f aee1 	beq.w	801c826 <_strtod_l+0x446>
 801ca64:	9805      	ldr	r0, [sp, #20]
 801ca66:	2101      	movs	r1, #1
 801ca68:	f003 ffb6 	bl	80209d8 <__i2b>
 801ca6c:	4680      	mov	r8, r0
 801ca6e:	b948      	cbnz	r0, 801ca84 <_strtod_l+0x6a4>
 801ca70:	f04f 0800 	mov.w	r8, #0
 801ca74:	e6d7      	b.n	801c826 <_strtod_l+0x446>
 801ca76:	f04f 32ff 	mov.w	r2, #4294967295
 801ca7a:	fa02 f303 	lsl.w	r3, r2, r3
 801ca7e:	ea03 0a0a 	and.w	sl, r3, sl
 801ca82:	e7af      	b.n	801c9e4 <_strtod_l+0x604>
 801ca84:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801ca86:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801ca88:	2d00      	cmp	r5, #0
 801ca8a:	bfab      	itete	ge
 801ca8c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801ca8e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801ca90:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801ca92:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801ca94:	bfac      	ite	ge
 801ca96:	18ef      	addge	r7, r5, r3
 801ca98:	1b5e      	sublt	r6, r3, r5
 801ca9a:	9b08      	ldr	r3, [sp, #32]
 801ca9c:	1aed      	subs	r5, r5, r3
 801ca9e:	4415      	add	r5, r2
 801caa0:	4b65      	ldr	r3, [pc, #404]	@ (801cc38 <_strtod_l+0x858>)
 801caa2:	3d01      	subs	r5, #1
 801caa4:	429d      	cmp	r5, r3
 801caa6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801caaa:	da50      	bge.n	801cb4e <_strtod_l+0x76e>
 801caac:	1b5b      	subs	r3, r3, r5
 801caae:	2b1f      	cmp	r3, #31
 801cab0:	eba2 0203 	sub.w	r2, r2, r3
 801cab4:	f04f 0101 	mov.w	r1, #1
 801cab8:	dc3d      	bgt.n	801cb36 <_strtod_l+0x756>
 801caba:	fa01 f303 	lsl.w	r3, r1, r3
 801cabe:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cac0:	2300      	movs	r3, #0
 801cac2:	9310      	str	r3, [sp, #64]	@ 0x40
 801cac4:	18bd      	adds	r5, r7, r2
 801cac6:	9b08      	ldr	r3, [sp, #32]
 801cac8:	42af      	cmp	r7, r5
 801caca:	4416      	add	r6, r2
 801cacc:	441e      	add	r6, r3
 801cace:	463b      	mov	r3, r7
 801cad0:	bfa8      	it	ge
 801cad2:	462b      	movge	r3, r5
 801cad4:	42b3      	cmp	r3, r6
 801cad6:	bfa8      	it	ge
 801cad8:	4633      	movge	r3, r6
 801cada:	2b00      	cmp	r3, #0
 801cadc:	bfc2      	ittt	gt
 801cade:	1aed      	subgt	r5, r5, r3
 801cae0:	1af6      	subgt	r6, r6, r3
 801cae2:	1aff      	subgt	r7, r7, r3
 801cae4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	dd16      	ble.n	801cb18 <_strtod_l+0x738>
 801caea:	4641      	mov	r1, r8
 801caec:	9805      	ldr	r0, [sp, #20]
 801caee:	461a      	mov	r2, r3
 801caf0:	f004 f82a 	bl	8020b48 <__pow5mult>
 801caf4:	4680      	mov	r8, r0
 801caf6:	2800      	cmp	r0, #0
 801caf8:	d0ba      	beq.n	801ca70 <_strtod_l+0x690>
 801cafa:	4601      	mov	r1, r0
 801cafc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801cafe:	9805      	ldr	r0, [sp, #20]
 801cb00:	f003 ff80 	bl	8020a04 <__multiply>
 801cb04:	900a      	str	r0, [sp, #40]	@ 0x28
 801cb06:	2800      	cmp	r0, #0
 801cb08:	f43f ae8d 	beq.w	801c826 <_strtod_l+0x446>
 801cb0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cb0e:	9805      	ldr	r0, [sp, #20]
 801cb10:	f003 fe64 	bl	80207dc <_Bfree>
 801cb14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cb16:	931a      	str	r3, [sp, #104]	@ 0x68
 801cb18:	2d00      	cmp	r5, #0
 801cb1a:	dc1d      	bgt.n	801cb58 <_strtod_l+0x778>
 801cb1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	dd23      	ble.n	801cb6a <_strtod_l+0x78a>
 801cb22:	4649      	mov	r1, r9
 801cb24:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cb26:	9805      	ldr	r0, [sp, #20]
 801cb28:	f004 f80e 	bl	8020b48 <__pow5mult>
 801cb2c:	4681      	mov	r9, r0
 801cb2e:	b9e0      	cbnz	r0, 801cb6a <_strtod_l+0x78a>
 801cb30:	f04f 0900 	mov.w	r9, #0
 801cb34:	e677      	b.n	801c826 <_strtod_l+0x446>
 801cb36:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801cb3a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801cb3e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801cb42:	35e2      	adds	r5, #226	@ 0xe2
 801cb44:	fa01 f305 	lsl.w	r3, r1, r5
 801cb48:	9310      	str	r3, [sp, #64]	@ 0x40
 801cb4a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801cb4c:	e7ba      	b.n	801cac4 <_strtod_l+0x6e4>
 801cb4e:	2300      	movs	r3, #0
 801cb50:	9310      	str	r3, [sp, #64]	@ 0x40
 801cb52:	2301      	movs	r3, #1
 801cb54:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cb56:	e7b5      	b.n	801cac4 <_strtod_l+0x6e4>
 801cb58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cb5a:	9805      	ldr	r0, [sp, #20]
 801cb5c:	462a      	mov	r2, r5
 801cb5e:	f004 f84d 	bl	8020bfc <__lshift>
 801cb62:	901a      	str	r0, [sp, #104]	@ 0x68
 801cb64:	2800      	cmp	r0, #0
 801cb66:	d1d9      	bne.n	801cb1c <_strtod_l+0x73c>
 801cb68:	e65d      	b.n	801c826 <_strtod_l+0x446>
 801cb6a:	2e00      	cmp	r6, #0
 801cb6c:	dd07      	ble.n	801cb7e <_strtod_l+0x79e>
 801cb6e:	4649      	mov	r1, r9
 801cb70:	9805      	ldr	r0, [sp, #20]
 801cb72:	4632      	mov	r2, r6
 801cb74:	f004 f842 	bl	8020bfc <__lshift>
 801cb78:	4681      	mov	r9, r0
 801cb7a:	2800      	cmp	r0, #0
 801cb7c:	d0d8      	beq.n	801cb30 <_strtod_l+0x750>
 801cb7e:	2f00      	cmp	r7, #0
 801cb80:	dd08      	ble.n	801cb94 <_strtod_l+0x7b4>
 801cb82:	4641      	mov	r1, r8
 801cb84:	9805      	ldr	r0, [sp, #20]
 801cb86:	463a      	mov	r2, r7
 801cb88:	f004 f838 	bl	8020bfc <__lshift>
 801cb8c:	4680      	mov	r8, r0
 801cb8e:	2800      	cmp	r0, #0
 801cb90:	f43f ae49 	beq.w	801c826 <_strtod_l+0x446>
 801cb94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cb96:	9805      	ldr	r0, [sp, #20]
 801cb98:	464a      	mov	r2, r9
 801cb9a:	f004 f8b7 	bl	8020d0c <__mdiff>
 801cb9e:	4604      	mov	r4, r0
 801cba0:	2800      	cmp	r0, #0
 801cba2:	f43f ae40 	beq.w	801c826 <_strtod_l+0x446>
 801cba6:	68c3      	ldr	r3, [r0, #12]
 801cba8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cbaa:	2300      	movs	r3, #0
 801cbac:	60c3      	str	r3, [r0, #12]
 801cbae:	4641      	mov	r1, r8
 801cbb0:	f004 f890 	bl	8020cd4 <__mcmp>
 801cbb4:	2800      	cmp	r0, #0
 801cbb6:	da45      	bge.n	801cc44 <_strtod_l+0x864>
 801cbb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cbba:	ea53 030a 	orrs.w	r3, r3, sl
 801cbbe:	d16b      	bne.n	801cc98 <_strtod_l+0x8b8>
 801cbc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d167      	bne.n	801cc98 <_strtod_l+0x8b8>
 801cbc8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801cbcc:	0d1b      	lsrs	r3, r3, #20
 801cbce:	051b      	lsls	r3, r3, #20
 801cbd0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801cbd4:	d960      	bls.n	801cc98 <_strtod_l+0x8b8>
 801cbd6:	6963      	ldr	r3, [r4, #20]
 801cbd8:	b913      	cbnz	r3, 801cbe0 <_strtod_l+0x800>
 801cbda:	6923      	ldr	r3, [r4, #16]
 801cbdc:	2b01      	cmp	r3, #1
 801cbde:	dd5b      	ble.n	801cc98 <_strtod_l+0x8b8>
 801cbe0:	4621      	mov	r1, r4
 801cbe2:	2201      	movs	r2, #1
 801cbe4:	9805      	ldr	r0, [sp, #20]
 801cbe6:	f004 f809 	bl	8020bfc <__lshift>
 801cbea:	4641      	mov	r1, r8
 801cbec:	4604      	mov	r4, r0
 801cbee:	f004 f871 	bl	8020cd4 <__mcmp>
 801cbf2:	2800      	cmp	r0, #0
 801cbf4:	dd50      	ble.n	801cc98 <_strtod_l+0x8b8>
 801cbf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801cbfa:	9a08      	ldr	r2, [sp, #32]
 801cbfc:	0d1b      	lsrs	r3, r3, #20
 801cbfe:	051b      	lsls	r3, r3, #20
 801cc00:	2a00      	cmp	r2, #0
 801cc02:	d06a      	beq.n	801ccda <_strtod_l+0x8fa>
 801cc04:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801cc08:	d867      	bhi.n	801ccda <_strtod_l+0x8fa>
 801cc0a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801cc0e:	f67f ae9d 	bls.w	801c94c <_strtod_l+0x56c>
 801cc12:	4b0a      	ldr	r3, [pc, #40]	@ (801cc3c <_strtod_l+0x85c>)
 801cc14:	4650      	mov	r0, sl
 801cc16:	4659      	mov	r1, fp
 801cc18:	2200      	movs	r2, #0
 801cc1a:	f7e3 fcfd 	bl	8000618 <__aeabi_dmul>
 801cc1e:	4b08      	ldr	r3, [pc, #32]	@ (801cc40 <_strtod_l+0x860>)
 801cc20:	400b      	ands	r3, r1
 801cc22:	4682      	mov	sl, r0
 801cc24:	468b      	mov	fp, r1
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	f47f ae08 	bne.w	801c83c <_strtod_l+0x45c>
 801cc2c:	9a05      	ldr	r2, [sp, #20]
 801cc2e:	2322      	movs	r3, #34	@ 0x22
 801cc30:	6013      	str	r3, [r2, #0]
 801cc32:	e603      	b.n	801c83c <_strtod_l+0x45c>
 801cc34:	080262c8 	.word	0x080262c8
 801cc38:	fffffc02 	.word	0xfffffc02
 801cc3c:	39500000 	.word	0x39500000
 801cc40:	7ff00000 	.word	0x7ff00000
 801cc44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801cc48:	d165      	bne.n	801cd16 <_strtod_l+0x936>
 801cc4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cc4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cc50:	b35a      	cbz	r2, 801ccaa <_strtod_l+0x8ca>
 801cc52:	4a9f      	ldr	r2, [pc, #636]	@ (801ced0 <_strtod_l+0xaf0>)
 801cc54:	4293      	cmp	r3, r2
 801cc56:	d12b      	bne.n	801ccb0 <_strtod_l+0x8d0>
 801cc58:	9b08      	ldr	r3, [sp, #32]
 801cc5a:	4651      	mov	r1, sl
 801cc5c:	b303      	cbz	r3, 801cca0 <_strtod_l+0x8c0>
 801cc5e:	4b9d      	ldr	r3, [pc, #628]	@ (801ced4 <_strtod_l+0xaf4>)
 801cc60:	465a      	mov	r2, fp
 801cc62:	4013      	ands	r3, r2
 801cc64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801cc68:	f04f 32ff 	mov.w	r2, #4294967295
 801cc6c:	d81b      	bhi.n	801cca6 <_strtod_l+0x8c6>
 801cc6e:	0d1b      	lsrs	r3, r3, #20
 801cc70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801cc74:	fa02 f303 	lsl.w	r3, r2, r3
 801cc78:	4299      	cmp	r1, r3
 801cc7a:	d119      	bne.n	801ccb0 <_strtod_l+0x8d0>
 801cc7c:	4b96      	ldr	r3, [pc, #600]	@ (801ced8 <_strtod_l+0xaf8>)
 801cc7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cc80:	429a      	cmp	r2, r3
 801cc82:	d102      	bne.n	801cc8a <_strtod_l+0x8aa>
 801cc84:	3101      	adds	r1, #1
 801cc86:	f43f adce 	beq.w	801c826 <_strtod_l+0x446>
 801cc8a:	4b92      	ldr	r3, [pc, #584]	@ (801ced4 <_strtod_l+0xaf4>)
 801cc8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cc8e:	401a      	ands	r2, r3
 801cc90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801cc94:	f04f 0a00 	mov.w	sl, #0
 801cc98:	9b08      	ldr	r3, [sp, #32]
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d1b9      	bne.n	801cc12 <_strtod_l+0x832>
 801cc9e:	e5cd      	b.n	801c83c <_strtod_l+0x45c>
 801cca0:	f04f 33ff 	mov.w	r3, #4294967295
 801cca4:	e7e8      	b.n	801cc78 <_strtod_l+0x898>
 801cca6:	4613      	mov	r3, r2
 801cca8:	e7e6      	b.n	801cc78 <_strtod_l+0x898>
 801ccaa:	ea53 030a 	orrs.w	r3, r3, sl
 801ccae:	d0a2      	beq.n	801cbf6 <_strtod_l+0x816>
 801ccb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ccb2:	b1db      	cbz	r3, 801ccec <_strtod_l+0x90c>
 801ccb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ccb6:	4213      	tst	r3, r2
 801ccb8:	d0ee      	beq.n	801cc98 <_strtod_l+0x8b8>
 801ccba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ccbc:	9a08      	ldr	r2, [sp, #32]
 801ccbe:	4650      	mov	r0, sl
 801ccc0:	4659      	mov	r1, fp
 801ccc2:	b1bb      	cbz	r3, 801ccf4 <_strtod_l+0x914>
 801ccc4:	f7ff fb6c 	bl	801c3a0 <sulp>
 801ccc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cccc:	ec53 2b10 	vmov	r2, r3, d0
 801ccd0:	f7e3 faec 	bl	80002ac <__adddf3>
 801ccd4:	4682      	mov	sl, r0
 801ccd6:	468b      	mov	fp, r1
 801ccd8:	e7de      	b.n	801cc98 <_strtod_l+0x8b8>
 801ccda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801ccde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801cce2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801cce6:	f04f 3aff 	mov.w	sl, #4294967295
 801ccea:	e7d5      	b.n	801cc98 <_strtod_l+0x8b8>
 801ccec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ccee:	ea13 0f0a 	tst.w	r3, sl
 801ccf2:	e7e1      	b.n	801ccb8 <_strtod_l+0x8d8>
 801ccf4:	f7ff fb54 	bl	801c3a0 <sulp>
 801ccf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ccfc:	ec53 2b10 	vmov	r2, r3, d0
 801cd00:	f7e3 fad2 	bl	80002a8 <__aeabi_dsub>
 801cd04:	2200      	movs	r2, #0
 801cd06:	2300      	movs	r3, #0
 801cd08:	4682      	mov	sl, r0
 801cd0a:	468b      	mov	fp, r1
 801cd0c:	f7e3 feec 	bl	8000ae8 <__aeabi_dcmpeq>
 801cd10:	2800      	cmp	r0, #0
 801cd12:	d0c1      	beq.n	801cc98 <_strtod_l+0x8b8>
 801cd14:	e61a      	b.n	801c94c <_strtod_l+0x56c>
 801cd16:	4641      	mov	r1, r8
 801cd18:	4620      	mov	r0, r4
 801cd1a:	f004 f953 	bl	8020fc4 <__ratio>
 801cd1e:	ec57 6b10 	vmov	r6, r7, d0
 801cd22:	2200      	movs	r2, #0
 801cd24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801cd28:	4630      	mov	r0, r6
 801cd2a:	4639      	mov	r1, r7
 801cd2c:	f7e3 fef0 	bl	8000b10 <__aeabi_dcmple>
 801cd30:	2800      	cmp	r0, #0
 801cd32:	d06f      	beq.n	801ce14 <_strtod_l+0xa34>
 801cd34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d17a      	bne.n	801ce30 <_strtod_l+0xa50>
 801cd3a:	f1ba 0f00 	cmp.w	sl, #0
 801cd3e:	d158      	bne.n	801cdf2 <_strtod_l+0xa12>
 801cd40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d15a      	bne.n	801ce00 <_strtod_l+0xa20>
 801cd4a:	4b64      	ldr	r3, [pc, #400]	@ (801cedc <_strtod_l+0xafc>)
 801cd4c:	2200      	movs	r2, #0
 801cd4e:	4630      	mov	r0, r6
 801cd50:	4639      	mov	r1, r7
 801cd52:	f7e3 fed3 	bl	8000afc <__aeabi_dcmplt>
 801cd56:	2800      	cmp	r0, #0
 801cd58:	d159      	bne.n	801ce0e <_strtod_l+0xa2e>
 801cd5a:	4630      	mov	r0, r6
 801cd5c:	4639      	mov	r1, r7
 801cd5e:	4b60      	ldr	r3, [pc, #384]	@ (801cee0 <_strtod_l+0xb00>)
 801cd60:	2200      	movs	r2, #0
 801cd62:	f7e3 fc59 	bl	8000618 <__aeabi_dmul>
 801cd66:	4606      	mov	r6, r0
 801cd68:	460f      	mov	r7, r1
 801cd6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801cd6e:	9606      	str	r6, [sp, #24]
 801cd70:	9307      	str	r3, [sp, #28]
 801cd72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cd76:	4d57      	ldr	r5, [pc, #348]	@ (801ced4 <_strtod_l+0xaf4>)
 801cd78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801cd7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd7e:	401d      	ands	r5, r3
 801cd80:	4b58      	ldr	r3, [pc, #352]	@ (801cee4 <_strtod_l+0xb04>)
 801cd82:	429d      	cmp	r5, r3
 801cd84:	f040 80b2 	bne.w	801ceec <_strtod_l+0xb0c>
 801cd88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801cd8e:	ec4b ab10 	vmov	d0, sl, fp
 801cd92:	f004 f84f 	bl	8020e34 <__ulp>
 801cd96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cd9a:	ec51 0b10 	vmov	r0, r1, d0
 801cd9e:	f7e3 fc3b 	bl	8000618 <__aeabi_dmul>
 801cda2:	4652      	mov	r2, sl
 801cda4:	465b      	mov	r3, fp
 801cda6:	f7e3 fa81 	bl	80002ac <__adddf3>
 801cdaa:	460b      	mov	r3, r1
 801cdac:	4949      	ldr	r1, [pc, #292]	@ (801ced4 <_strtod_l+0xaf4>)
 801cdae:	4a4e      	ldr	r2, [pc, #312]	@ (801cee8 <_strtod_l+0xb08>)
 801cdb0:	4019      	ands	r1, r3
 801cdb2:	4291      	cmp	r1, r2
 801cdb4:	4682      	mov	sl, r0
 801cdb6:	d942      	bls.n	801ce3e <_strtod_l+0xa5e>
 801cdb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cdba:	4b47      	ldr	r3, [pc, #284]	@ (801ced8 <_strtod_l+0xaf8>)
 801cdbc:	429a      	cmp	r2, r3
 801cdbe:	d103      	bne.n	801cdc8 <_strtod_l+0x9e8>
 801cdc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cdc2:	3301      	adds	r3, #1
 801cdc4:	f43f ad2f 	beq.w	801c826 <_strtod_l+0x446>
 801cdc8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801ced8 <_strtod_l+0xaf8>
 801cdcc:	f04f 3aff 	mov.w	sl, #4294967295
 801cdd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cdd2:	9805      	ldr	r0, [sp, #20]
 801cdd4:	f003 fd02 	bl	80207dc <_Bfree>
 801cdd8:	9805      	ldr	r0, [sp, #20]
 801cdda:	4649      	mov	r1, r9
 801cddc:	f003 fcfe 	bl	80207dc <_Bfree>
 801cde0:	9805      	ldr	r0, [sp, #20]
 801cde2:	4641      	mov	r1, r8
 801cde4:	f003 fcfa 	bl	80207dc <_Bfree>
 801cde8:	9805      	ldr	r0, [sp, #20]
 801cdea:	4621      	mov	r1, r4
 801cdec:	f003 fcf6 	bl	80207dc <_Bfree>
 801cdf0:	e619      	b.n	801ca26 <_strtod_l+0x646>
 801cdf2:	f1ba 0f01 	cmp.w	sl, #1
 801cdf6:	d103      	bne.n	801ce00 <_strtod_l+0xa20>
 801cdf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	f43f ada6 	beq.w	801c94c <_strtod_l+0x56c>
 801ce00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801ceb0 <_strtod_l+0xad0>
 801ce04:	4f35      	ldr	r7, [pc, #212]	@ (801cedc <_strtod_l+0xafc>)
 801ce06:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ce0a:	2600      	movs	r6, #0
 801ce0c:	e7b1      	b.n	801cd72 <_strtod_l+0x992>
 801ce0e:	4f34      	ldr	r7, [pc, #208]	@ (801cee0 <_strtod_l+0xb00>)
 801ce10:	2600      	movs	r6, #0
 801ce12:	e7aa      	b.n	801cd6a <_strtod_l+0x98a>
 801ce14:	4b32      	ldr	r3, [pc, #200]	@ (801cee0 <_strtod_l+0xb00>)
 801ce16:	4630      	mov	r0, r6
 801ce18:	4639      	mov	r1, r7
 801ce1a:	2200      	movs	r2, #0
 801ce1c:	f7e3 fbfc 	bl	8000618 <__aeabi_dmul>
 801ce20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ce22:	4606      	mov	r6, r0
 801ce24:	460f      	mov	r7, r1
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	d09f      	beq.n	801cd6a <_strtod_l+0x98a>
 801ce2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801ce2e:	e7a0      	b.n	801cd72 <_strtod_l+0x992>
 801ce30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801ceb8 <_strtod_l+0xad8>
 801ce34:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ce38:	ec57 6b17 	vmov	r6, r7, d7
 801ce3c:	e799      	b.n	801cd72 <_strtod_l+0x992>
 801ce3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801ce42:	9b08      	ldr	r3, [sp, #32]
 801ce44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d1c1      	bne.n	801cdd0 <_strtod_l+0x9f0>
 801ce4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801ce50:	0d1b      	lsrs	r3, r3, #20
 801ce52:	051b      	lsls	r3, r3, #20
 801ce54:	429d      	cmp	r5, r3
 801ce56:	d1bb      	bne.n	801cdd0 <_strtod_l+0x9f0>
 801ce58:	4630      	mov	r0, r6
 801ce5a:	4639      	mov	r1, r7
 801ce5c:	f7e3 ff8c 	bl	8000d78 <__aeabi_d2lz>
 801ce60:	f7e3 fbac 	bl	80005bc <__aeabi_l2d>
 801ce64:	4602      	mov	r2, r0
 801ce66:	460b      	mov	r3, r1
 801ce68:	4630      	mov	r0, r6
 801ce6a:	4639      	mov	r1, r7
 801ce6c:	f7e3 fa1c 	bl	80002a8 <__aeabi_dsub>
 801ce70:	460b      	mov	r3, r1
 801ce72:	4602      	mov	r2, r0
 801ce74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801ce78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801ce7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ce7e:	ea46 060a 	orr.w	r6, r6, sl
 801ce82:	431e      	orrs	r6, r3
 801ce84:	d06f      	beq.n	801cf66 <_strtod_l+0xb86>
 801ce86:	a30e      	add	r3, pc, #56	@ (adr r3, 801cec0 <_strtod_l+0xae0>)
 801ce88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce8c:	f7e3 fe36 	bl	8000afc <__aeabi_dcmplt>
 801ce90:	2800      	cmp	r0, #0
 801ce92:	f47f acd3 	bne.w	801c83c <_strtod_l+0x45c>
 801ce96:	a30c      	add	r3, pc, #48	@ (adr r3, 801cec8 <_strtod_l+0xae8>)
 801ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cea0:	f7e3 fe4a 	bl	8000b38 <__aeabi_dcmpgt>
 801cea4:	2800      	cmp	r0, #0
 801cea6:	d093      	beq.n	801cdd0 <_strtod_l+0x9f0>
 801cea8:	e4c8      	b.n	801c83c <_strtod_l+0x45c>
 801ceaa:	bf00      	nop
 801ceac:	f3af 8000 	nop.w
 801ceb0:	00000000 	.word	0x00000000
 801ceb4:	bff00000 	.word	0xbff00000
 801ceb8:	00000000 	.word	0x00000000
 801cebc:	3ff00000 	.word	0x3ff00000
 801cec0:	94a03595 	.word	0x94a03595
 801cec4:	3fdfffff 	.word	0x3fdfffff
 801cec8:	35afe535 	.word	0x35afe535
 801cecc:	3fe00000 	.word	0x3fe00000
 801ced0:	000fffff 	.word	0x000fffff
 801ced4:	7ff00000 	.word	0x7ff00000
 801ced8:	7fefffff 	.word	0x7fefffff
 801cedc:	3ff00000 	.word	0x3ff00000
 801cee0:	3fe00000 	.word	0x3fe00000
 801cee4:	7fe00000 	.word	0x7fe00000
 801cee8:	7c9fffff 	.word	0x7c9fffff
 801ceec:	9b08      	ldr	r3, [sp, #32]
 801ceee:	b323      	cbz	r3, 801cf3a <_strtod_l+0xb5a>
 801cef0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801cef4:	d821      	bhi.n	801cf3a <_strtod_l+0xb5a>
 801cef6:	a328      	add	r3, pc, #160	@ (adr r3, 801cf98 <_strtod_l+0xbb8>)
 801cef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cefc:	4630      	mov	r0, r6
 801cefe:	4639      	mov	r1, r7
 801cf00:	f7e3 fe06 	bl	8000b10 <__aeabi_dcmple>
 801cf04:	b1a0      	cbz	r0, 801cf30 <_strtod_l+0xb50>
 801cf06:	4639      	mov	r1, r7
 801cf08:	4630      	mov	r0, r6
 801cf0a:	f7e3 fe5d 	bl	8000bc8 <__aeabi_d2uiz>
 801cf0e:	2801      	cmp	r0, #1
 801cf10:	bf38      	it	cc
 801cf12:	2001      	movcc	r0, #1
 801cf14:	f7e3 fb06 	bl	8000524 <__aeabi_ui2d>
 801cf18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cf1a:	4606      	mov	r6, r0
 801cf1c:	460f      	mov	r7, r1
 801cf1e:	b9fb      	cbnz	r3, 801cf60 <_strtod_l+0xb80>
 801cf20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cf24:	9014      	str	r0, [sp, #80]	@ 0x50
 801cf26:	9315      	str	r3, [sp, #84]	@ 0x54
 801cf28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801cf2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801cf30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cf32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801cf36:	1b5b      	subs	r3, r3, r5
 801cf38:	9311      	str	r3, [sp, #68]	@ 0x44
 801cf3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801cf3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801cf42:	f003 ff77 	bl	8020e34 <__ulp>
 801cf46:	4650      	mov	r0, sl
 801cf48:	ec53 2b10 	vmov	r2, r3, d0
 801cf4c:	4659      	mov	r1, fp
 801cf4e:	f7e3 fb63 	bl	8000618 <__aeabi_dmul>
 801cf52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801cf56:	f7e3 f9a9 	bl	80002ac <__adddf3>
 801cf5a:	4682      	mov	sl, r0
 801cf5c:	468b      	mov	fp, r1
 801cf5e:	e770      	b.n	801ce42 <_strtod_l+0xa62>
 801cf60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801cf64:	e7e0      	b.n	801cf28 <_strtod_l+0xb48>
 801cf66:	a30e      	add	r3, pc, #56	@ (adr r3, 801cfa0 <_strtod_l+0xbc0>)
 801cf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf6c:	f7e3 fdc6 	bl	8000afc <__aeabi_dcmplt>
 801cf70:	e798      	b.n	801cea4 <_strtod_l+0xac4>
 801cf72:	2300      	movs	r3, #0
 801cf74:	930e      	str	r3, [sp, #56]	@ 0x38
 801cf76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801cf78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cf7a:	6013      	str	r3, [r2, #0]
 801cf7c:	f7ff ba6d 	b.w	801c45a <_strtod_l+0x7a>
 801cf80:	2a65      	cmp	r2, #101	@ 0x65
 801cf82:	f43f ab68 	beq.w	801c656 <_strtod_l+0x276>
 801cf86:	2a45      	cmp	r2, #69	@ 0x45
 801cf88:	f43f ab65 	beq.w	801c656 <_strtod_l+0x276>
 801cf8c:	2301      	movs	r3, #1
 801cf8e:	f7ff bba0 	b.w	801c6d2 <_strtod_l+0x2f2>
 801cf92:	bf00      	nop
 801cf94:	f3af 8000 	nop.w
 801cf98:	ffc00000 	.word	0xffc00000
 801cf9c:	41dfffff 	.word	0x41dfffff
 801cfa0:	94a03595 	.word	0x94a03595
 801cfa4:	3fcfffff 	.word	0x3fcfffff

0801cfa8 <_strtod_r>:
 801cfa8:	4b01      	ldr	r3, [pc, #4]	@ (801cfb0 <_strtod_r+0x8>)
 801cfaa:	f7ff ba19 	b.w	801c3e0 <_strtod_l>
 801cfae:	bf00      	nop
 801cfb0:	20000054 	.word	0x20000054

0801cfb4 <strtod>:
 801cfb4:	460a      	mov	r2, r1
 801cfb6:	4601      	mov	r1, r0
 801cfb8:	4802      	ldr	r0, [pc, #8]	@ (801cfc4 <strtod+0x10>)
 801cfba:	4b03      	ldr	r3, [pc, #12]	@ (801cfc8 <strtod+0x14>)
 801cfbc:	6800      	ldr	r0, [r0, #0]
 801cfbe:	f7ff ba0f 	b.w	801c3e0 <_strtod_l>
 801cfc2:	bf00      	nop
 801cfc4:	200001c0 	.word	0x200001c0
 801cfc8:	20000054 	.word	0x20000054

0801cfcc <_strtol_l.isra.0>:
 801cfcc:	2b24      	cmp	r3, #36	@ 0x24
 801cfce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cfd2:	4686      	mov	lr, r0
 801cfd4:	4690      	mov	r8, r2
 801cfd6:	d801      	bhi.n	801cfdc <_strtol_l.isra.0+0x10>
 801cfd8:	2b01      	cmp	r3, #1
 801cfda:	d106      	bne.n	801cfea <_strtol_l.isra.0+0x1e>
 801cfdc:	f002 f8bc 	bl	801f158 <__errno>
 801cfe0:	2316      	movs	r3, #22
 801cfe2:	6003      	str	r3, [r0, #0]
 801cfe4:	2000      	movs	r0, #0
 801cfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfea:	4834      	ldr	r0, [pc, #208]	@ (801d0bc <_strtol_l.isra.0+0xf0>)
 801cfec:	460d      	mov	r5, r1
 801cfee:	462a      	mov	r2, r5
 801cff0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cff4:	5d06      	ldrb	r6, [r0, r4]
 801cff6:	f016 0608 	ands.w	r6, r6, #8
 801cffa:	d1f8      	bne.n	801cfee <_strtol_l.isra.0+0x22>
 801cffc:	2c2d      	cmp	r4, #45	@ 0x2d
 801cffe:	d110      	bne.n	801d022 <_strtol_l.isra.0+0x56>
 801d000:	782c      	ldrb	r4, [r5, #0]
 801d002:	2601      	movs	r6, #1
 801d004:	1c95      	adds	r5, r2, #2
 801d006:	f033 0210 	bics.w	r2, r3, #16
 801d00a:	d115      	bne.n	801d038 <_strtol_l.isra.0+0x6c>
 801d00c:	2c30      	cmp	r4, #48	@ 0x30
 801d00e:	d10d      	bne.n	801d02c <_strtol_l.isra.0+0x60>
 801d010:	782a      	ldrb	r2, [r5, #0]
 801d012:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d016:	2a58      	cmp	r2, #88	@ 0x58
 801d018:	d108      	bne.n	801d02c <_strtol_l.isra.0+0x60>
 801d01a:	786c      	ldrb	r4, [r5, #1]
 801d01c:	3502      	adds	r5, #2
 801d01e:	2310      	movs	r3, #16
 801d020:	e00a      	b.n	801d038 <_strtol_l.isra.0+0x6c>
 801d022:	2c2b      	cmp	r4, #43	@ 0x2b
 801d024:	bf04      	itt	eq
 801d026:	782c      	ldrbeq	r4, [r5, #0]
 801d028:	1c95      	addeq	r5, r2, #2
 801d02a:	e7ec      	b.n	801d006 <_strtol_l.isra.0+0x3a>
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d1f6      	bne.n	801d01e <_strtol_l.isra.0+0x52>
 801d030:	2c30      	cmp	r4, #48	@ 0x30
 801d032:	bf14      	ite	ne
 801d034:	230a      	movne	r3, #10
 801d036:	2308      	moveq	r3, #8
 801d038:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d03c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d040:	2200      	movs	r2, #0
 801d042:	fbbc f9f3 	udiv	r9, ip, r3
 801d046:	4610      	mov	r0, r2
 801d048:	fb03 ca19 	mls	sl, r3, r9, ip
 801d04c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d050:	2f09      	cmp	r7, #9
 801d052:	d80f      	bhi.n	801d074 <_strtol_l.isra.0+0xa8>
 801d054:	463c      	mov	r4, r7
 801d056:	42a3      	cmp	r3, r4
 801d058:	dd1b      	ble.n	801d092 <_strtol_l.isra.0+0xc6>
 801d05a:	1c57      	adds	r7, r2, #1
 801d05c:	d007      	beq.n	801d06e <_strtol_l.isra.0+0xa2>
 801d05e:	4581      	cmp	r9, r0
 801d060:	d314      	bcc.n	801d08c <_strtol_l.isra.0+0xc0>
 801d062:	d101      	bne.n	801d068 <_strtol_l.isra.0+0x9c>
 801d064:	45a2      	cmp	sl, r4
 801d066:	db11      	blt.n	801d08c <_strtol_l.isra.0+0xc0>
 801d068:	fb00 4003 	mla	r0, r0, r3, r4
 801d06c:	2201      	movs	r2, #1
 801d06e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d072:	e7eb      	b.n	801d04c <_strtol_l.isra.0+0x80>
 801d074:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d078:	2f19      	cmp	r7, #25
 801d07a:	d801      	bhi.n	801d080 <_strtol_l.isra.0+0xb4>
 801d07c:	3c37      	subs	r4, #55	@ 0x37
 801d07e:	e7ea      	b.n	801d056 <_strtol_l.isra.0+0x8a>
 801d080:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d084:	2f19      	cmp	r7, #25
 801d086:	d804      	bhi.n	801d092 <_strtol_l.isra.0+0xc6>
 801d088:	3c57      	subs	r4, #87	@ 0x57
 801d08a:	e7e4      	b.n	801d056 <_strtol_l.isra.0+0x8a>
 801d08c:	f04f 32ff 	mov.w	r2, #4294967295
 801d090:	e7ed      	b.n	801d06e <_strtol_l.isra.0+0xa2>
 801d092:	1c53      	adds	r3, r2, #1
 801d094:	d108      	bne.n	801d0a8 <_strtol_l.isra.0+0xdc>
 801d096:	2322      	movs	r3, #34	@ 0x22
 801d098:	f8ce 3000 	str.w	r3, [lr]
 801d09c:	4660      	mov	r0, ip
 801d09e:	f1b8 0f00 	cmp.w	r8, #0
 801d0a2:	d0a0      	beq.n	801cfe6 <_strtol_l.isra.0+0x1a>
 801d0a4:	1e69      	subs	r1, r5, #1
 801d0a6:	e006      	b.n	801d0b6 <_strtol_l.isra.0+0xea>
 801d0a8:	b106      	cbz	r6, 801d0ac <_strtol_l.isra.0+0xe0>
 801d0aa:	4240      	negs	r0, r0
 801d0ac:	f1b8 0f00 	cmp.w	r8, #0
 801d0b0:	d099      	beq.n	801cfe6 <_strtol_l.isra.0+0x1a>
 801d0b2:	2a00      	cmp	r2, #0
 801d0b4:	d1f6      	bne.n	801d0a4 <_strtol_l.isra.0+0xd8>
 801d0b6:	f8c8 1000 	str.w	r1, [r8]
 801d0ba:	e794      	b.n	801cfe6 <_strtol_l.isra.0+0x1a>
 801d0bc:	080262f1 	.word	0x080262f1

0801d0c0 <_strtol_r>:
 801d0c0:	f7ff bf84 	b.w	801cfcc <_strtol_l.isra.0>

0801d0c4 <strtol>:
 801d0c4:	4613      	mov	r3, r2
 801d0c6:	460a      	mov	r2, r1
 801d0c8:	4601      	mov	r1, r0
 801d0ca:	4802      	ldr	r0, [pc, #8]	@ (801d0d4 <strtol+0x10>)
 801d0cc:	6800      	ldr	r0, [r0, #0]
 801d0ce:	f7ff bf7d 	b.w	801cfcc <_strtol_l.isra.0>
 801d0d2:	bf00      	nop
 801d0d4:	200001c0 	.word	0x200001c0

0801d0d8 <__cvt>:
 801d0d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d0dc:	ec57 6b10 	vmov	r6, r7, d0
 801d0e0:	2f00      	cmp	r7, #0
 801d0e2:	460c      	mov	r4, r1
 801d0e4:	4619      	mov	r1, r3
 801d0e6:	463b      	mov	r3, r7
 801d0e8:	bfbb      	ittet	lt
 801d0ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801d0ee:	461f      	movlt	r7, r3
 801d0f0:	2300      	movge	r3, #0
 801d0f2:	232d      	movlt	r3, #45	@ 0x2d
 801d0f4:	700b      	strb	r3, [r1, #0]
 801d0f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d0f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801d0fc:	4691      	mov	r9, r2
 801d0fe:	f023 0820 	bic.w	r8, r3, #32
 801d102:	bfbc      	itt	lt
 801d104:	4632      	movlt	r2, r6
 801d106:	4616      	movlt	r6, r2
 801d108:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d10c:	d005      	beq.n	801d11a <__cvt+0x42>
 801d10e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801d112:	d100      	bne.n	801d116 <__cvt+0x3e>
 801d114:	3401      	adds	r4, #1
 801d116:	2102      	movs	r1, #2
 801d118:	e000      	b.n	801d11c <__cvt+0x44>
 801d11a:	2103      	movs	r1, #3
 801d11c:	ab03      	add	r3, sp, #12
 801d11e:	9301      	str	r3, [sp, #4]
 801d120:	ab02      	add	r3, sp, #8
 801d122:	9300      	str	r3, [sp, #0]
 801d124:	ec47 6b10 	vmov	d0, r6, r7
 801d128:	4653      	mov	r3, sl
 801d12a:	4622      	mov	r2, r4
 801d12c:	f002 f96c 	bl	801f408 <_dtoa_r>
 801d130:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801d134:	4605      	mov	r5, r0
 801d136:	d119      	bne.n	801d16c <__cvt+0x94>
 801d138:	f019 0f01 	tst.w	r9, #1
 801d13c:	d00e      	beq.n	801d15c <__cvt+0x84>
 801d13e:	eb00 0904 	add.w	r9, r0, r4
 801d142:	2200      	movs	r2, #0
 801d144:	2300      	movs	r3, #0
 801d146:	4630      	mov	r0, r6
 801d148:	4639      	mov	r1, r7
 801d14a:	f7e3 fccd 	bl	8000ae8 <__aeabi_dcmpeq>
 801d14e:	b108      	cbz	r0, 801d154 <__cvt+0x7c>
 801d150:	f8cd 900c 	str.w	r9, [sp, #12]
 801d154:	2230      	movs	r2, #48	@ 0x30
 801d156:	9b03      	ldr	r3, [sp, #12]
 801d158:	454b      	cmp	r3, r9
 801d15a:	d31e      	bcc.n	801d19a <__cvt+0xc2>
 801d15c:	9b03      	ldr	r3, [sp, #12]
 801d15e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d160:	1b5b      	subs	r3, r3, r5
 801d162:	4628      	mov	r0, r5
 801d164:	6013      	str	r3, [r2, #0]
 801d166:	b004      	add	sp, #16
 801d168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d16c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d170:	eb00 0904 	add.w	r9, r0, r4
 801d174:	d1e5      	bne.n	801d142 <__cvt+0x6a>
 801d176:	7803      	ldrb	r3, [r0, #0]
 801d178:	2b30      	cmp	r3, #48	@ 0x30
 801d17a:	d10a      	bne.n	801d192 <__cvt+0xba>
 801d17c:	2200      	movs	r2, #0
 801d17e:	2300      	movs	r3, #0
 801d180:	4630      	mov	r0, r6
 801d182:	4639      	mov	r1, r7
 801d184:	f7e3 fcb0 	bl	8000ae8 <__aeabi_dcmpeq>
 801d188:	b918      	cbnz	r0, 801d192 <__cvt+0xba>
 801d18a:	f1c4 0401 	rsb	r4, r4, #1
 801d18e:	f8ca 4000 	str.w	r4, [sl]
 801d192:	f8da 3000 	ldr.w	r3, [sl]
 801d196:	4499      	add	r9, r3
 801d198:	e7d3      	b.n	801d142 <__cvt+0x6a>
 801d19a:	1c59      	adds	r1, r3, #1
 801d19c:	9103      	str	r1, [sp, #12]
 801d19e:	701a      	strb	r2, [r3, #0]
 801d1a0:	e7d9      	b.n	801d156 <__cvt+0x7e>

0801d1a2 <__exponent>:
 801d1a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d1a4:	2900      	cmp	r1, #0
 801d1a6:	bfba      	itte	lt
 801d1a8:	4249      	neglt	r1, r1
 801d1aa:	232d      	movlt	r3, #45	@ 0x2d
 801d1ac:	232b      	movge	r3, #43	@ 0x2b
 801d1ae:	2909      	cmp	r1, #9
 801d1b0:	7002      	strb	r2, [r0, #0]
 801d1b2:	7043      	strb	r3, [r0, #1]
 801d1b4:	dd29      	ble.n	801d20a <__exponent+0x68>
 801d1b6:	f10d 0307 	add.w	r3, sp, #7
 801d1ba:	461d      	mov	r5, r3
 801d1bc:	270a      	movs	r7, #10
 801d1be:	461a      	mov	r2, r3
 801d1c0:	fbb1 f6f7 	udiv	r6, r1, r7
 801d1c4:	fb07 1416 	mls	r4, r7, r6, r1
 801d1c8:	3430      	adds	r4, #48	@ 0x30
 801d1ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 801d1ce:	460c      	mov	r4, r1
 801d1d0:	2c63      	cmp	r4, #99	@ 0x63
 801d1d2:	f103 33ff 	add.w	r3, r3, #4294967295
 801d1d6:	4631      	mov	r1, r6
 801d1d8:	dcf1      	bgt.n	801d1be <__exponent+0x1c>
 801d1da:	3130      	adds	r1, #48	@ 0x30
 801d1dc:	1e94      	subs	r4, r2, #2
 801d1de:	f803 1c01 	strb.w	r1, [r3, #-1]
 801d1e2:	1c41      	adds	r1, r0, #1
 801d1e4:	4623      	mov	r3, r4
 801d1e6:	42ab      	cmp	r3, r5
 801d1e8:	d30a      	bcc.n	801d200 <__exponent+0x5e>
 801d1ea:	f10d 0309 	add.w	r3, sp, #9
 801d1ee:	1a9b      	subs	r3, r3, r2
 801d1f0:	42ac      	cmp	r4, r5
 801d1f2:	bf88      	it	hi
 801d1f4:	2300      	movhi	r3, #0
 801d1f6:	3302      	adds	r3, #2
 801d1f8:	4403      	add	r3, r0
 801d1fa:	1a18      	subs	r0, r3, r0
 801d1fc:	b003      	add	sp, #12
 801d1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d200:	f813 6b01 	ldrb.w	r6, [r3], #1
 801d204:	f801 6f01 	strb.w	r6, [r1, #1]!
 801d208:	e7ed      	b.n	801d1e6 <__exponent+0x44>
 801d20a:	2330      	movs	r3, #48	@ 0x30
 801d20c:	3130      	adds	r1, #48	@ 0x30
 801d20e:	7083      	strb	r3, [r0, #2]
 801d210:	70c1      	strb	r1, [r0, #3]
 801d212:	1d03      	adds	r3, r0, #4
 801d214:	e7f1      	b.n	801d1fa <__exponent+0x58>
	...

0801d218 <_printf_float>:
 801d218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d21c:	b08d      	sub	sp, #52	@ 0x34
 801d21e:	460c      	mov	r4, r1
 801d220:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801d224:	4616      	mov	r6, r2
 801d226:	461f      	mov	r7, r3
 801d228:	4605      	mov	r5, r0
 801d22a:	f001 fecb 	bl	801efc4 <_localeconv_r>
 801d22e:	6803      	ldr	r3, [r0, #0]
 801d230:	9304      	str	r3, [sp, #16]
 801d232:	4618      	mov	r0, r3
 801d234:	f7e3 f82c 	bl	8000290 <strlen>
 801d238:	2300      	movs	r3, #0
 801d23a:	930a      	str	r3, [sp, #40]	@ 0x28
 801d23c:	f8d8 3000 	ldr.w	r3, [r8]
 801d240:	9005      	str	r0, [sp, #20]
 801d242:	3307      	adds	r3, #7
 801d244:	f023 0307 	bic.w	r3, r3, #7
 801d248:	f103 0208 	add.w	r2, r3, #8
 801d24c:	f894 a018 	ldrb.w	sl, [r4, #24]
 801d250:	f8d4 b000 	ldr.w	fp, [r4]
 801d254:	f8c8 2000 	str.w	r2, [r8]
 801d258:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d25c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801d260:	9307      	str	r3, [sp, #28]
 801d262:	f8cd 8018 	str.w	r8, [sp, #24]
 801d266:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801d26a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d26e:	4b9c      	ldr	r3, [pc, #624]	@ (801d4e0 <_printf_float+0x2c8>)
 801d270:	f04f 32ff 	mov.w	r2, #4294967295
 801d274:	f7e3 fc6a 	bl	8000b4c <__aeabi_dcmpun>
 801d278:	bb70      	cbnz	r0, 801d2d8 <_printf_float+0xc0>
 801d27a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d27e:	4b98      	ldr	r3, [pc, #608]	@ (801d4e0 <_printf_float+0x2c8>)
 801d280:	f04f 32ff 	mov.w	r2, #4294967295
 801d284:	f7e3 fc44 	bl	8000b10 <__aeabi_dcmple>
 801d288:	bb30      	cbnz	r0, 801d2d8 <_printf_float+0xc0>
 801d28a:	2200      	movs	r2, #0
 801d28c:	2300      	movs	r3, #0
 801d28e:	4640      	mov	r0, r8
 801d290:	4649      	mov	r1, r9
 801d292:	f7e3 fc33 	bl	8000afc <__aeabi_dcmplt>
 801d296:	b110      	cbz	r0, 801d29e <_printf_float+0x86>
 801d298:	232d      	movs	r3, #45	@ 0x2d
 801d29a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d29e:	4a91      	ldr	r2, [pc, #580]	@ (801d4e4 <_printf_float+0x2cc>)
 801d2a0:	4b91      	ldr	r3, [pc, #580]	@ (801d4e8 <_printf_float+0x2d0>)
 801d2a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801d2a6:	bf8c      	ite	hi
 801d2a8:	4690      	movhi	r8, r2
 801d2aa:	4698      	movls	r8, r3
 801d2ac:	2303      	movs	r3, #3
 801d2ae:	6123      	str	r3, [r4, #16]
 801d2b0:	f02b 0304 	bic.w	r3, fp, #4
 801d2b4:	6023      	str	r3, [r4, #0]
 801d2b6:	f04f 0900 	mov.w	r9, #0
 801d2ba:	9700      	str	r7, [sp, #0]
 801d2bc:	4633      	mov	r3, r6
 801d2be:	aa0b      	add	r2, sp, #44	@ 0x2c
 801d2c0:	4621      	mov	r1, r4
 801d2c2:	4628      	mov	r0, r5
 801d2c4:	f000 f9d2 	bl	801d66c <_printf_common>
 801d2c8:	3001      	adds	r0, #1
 801d2ca:	f040 808d 	bne.w	801d3e8 <_printf_float+0x1d0>
 801d2ce:	f04f 30ff 	mov.w	r0, #4294967295
 801d2d2:	b00d      	add	sp, #52	@ 0x34
 801d2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2d8:	4642      	mov	r2, r8
 801d2da:	464b      	mov	r3, r9
 801d2dc:	4640      	mov	r0, r8
 801d2de:	4649      	mov	r1, r9
 801d2e0:	f7e3 fc34 	bl	8000b4c <__aeabi_dcmpun>
 801d2e4:	b140      	cbz	r0, 801d2f8 <_printf_float+0xe0>
 801d2e6:	464b      	mov	r3, r9
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	bfbc      	itt	lt
 801d2ec:	232d      	movlt	r3, #45	@ 0x2d
 801d2ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801d2f2:	4a7e      	ldr	r2, [pc, #504]	@ (801d4ec <_printf_float+0x2d4>)
 801d2f4:	4b7e      	ldr	r3, [pc, #504]	@ (801d4f0 <_printf_float+0x2d8>)
 801d2f6:	e7d4      	b.n	801d2a2 <_printf_float+0x8a>
 801d2f8:	6863      	ldr	r3, [r4, #4]
 801d2fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801d2fe:	9206      	str	r2, [sp, #24]
 801d300:	1c5a      	adds	r2, r3, #1
 801d302:	d13b      	bne.n	801d37c <_printf_float+0x164>
 801d304:	2306      	movs	r3, #6
 801d306:	6063      	str	r3, [r4, #4]
 801d308:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801d30c:	2300      	movs	r3, #0
 801d30e:	6022      	str	r2, [r4, #0]
 801d310:	9303      	str	r3, [sp, #12]
 801d312:	ab0a      	add	r3, sp, #40	@ 0x28
 801d314:	e9cd a301 	strd	sl, r3, [sp, #4]
 801d318:	ab09      	add	r3, sp, #36	@ 0x24
 801d31a:	9300      	str	r3, [sp, #0]
 801d31c:	6861      	ldr	r1, [r4, #4]
 801d31e:	ec49 8b10 	vmov	d0, r8, r9
 801d322:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801d326:	4628      	mov	r0, r5
 801d328:	f7ff fed6 	bl	801d0d8 <__cvt>
 801d32c:	9b06      	ldr	r3, [sp, #24]
 801d32e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d330:	2b47      	cmp	r3, #71	@ 0x47
 801d332:	4680      	mov	r8, r0
 801d334:	d129      	bne.n	801d38a <_printf_float+0x172>
 801d336:	1cc8      	adds	r0, r1, #3
 801d338:	db02      	blt.n	801d340 <_printf_float+0x128>
 801d33a:	6863      	ldr	r3, [r4, #4]
 801d33c:	4299      	cmp	r1, r3
 801d33e:	dd41      	ble.n	801d3c4 <_printf_float+0x1ac>
 801d340:	f1aa 0a02 	sub.w	sl, sl, #2
 801d344:	fa5f fa8a 	uxtb.w	sl, sl
 801d348:	3901      	subs	r1, #1
 801d34a:	4652      	mov	r2, sl
 801d34c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801d350:	9109      	str	r1, [sp, #36]	@ 0x24
 801d352:	f7ff ff26 	bl	801d1a2 <__exponent>
 801d356:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d358:	1813      	adds	r3, r2, r0
 801d35a:	2a01      	cmp	r2, #1
 801d35c:	4681      	mov	r9, r0
 801d35e:	6123      	str	r3, [r4, #16]
 801d360:	dc02      	bgt.n	801d368 <_printf_float+0x150>
 801d362:	6822      	ldr	r2, [r4, #0]
 801d364:	07d2      	lsls	r2, r2, #31
 801d366:	d501      	bpl.n	801d36c <_printf_float+0x154>
 801d368:	3301      	adds	r3, #1
 801d36a:	6123      	str	r3, [r4, #16]
 801d36c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801d370:	2b00      	cmp	r3, #0
 801d372:	d0a2      	beq.n	801d2ba <_printf_float+0xa2>
 801d374:	232d      	movs	r3, #45	@ 0x2d
 801d376:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d37a:	e79e      	b.n	801d2ba <_printf_float+0xa2>
 801d37c:	9a06      	ldr	r2, [sp, #24]
 801d37e:	2a47      	cmp	r2, #71	@ 0x47
 801d380:	d1c2      	bne.n	801d308 <_printf_float+0xf0>
 801d382:	2b00      	cmp	r3, #0
 801d384:	d1c0      	bne.n	801d308 <_printf_float+0xf0>
 801d386:	2301      	movs	r3, #1
 801d388:	e7bd      	b.n	801d306 <_printf_float+0xee>
 801d38a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d38e:	d9db      	bls.n	801d348 <_printf_float+0x130>
 801d390:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801d394:	d118      	bne.n	801d3c8 <_printf_float+0x1b0>
 801d396:	2900      	cmp	r1, #0
 801d398:	6863      	ldr	r3, [r4, #4]
 801d39a:	dd0b      	ble.n	801d3b4 <_printf_float+0x19c>
 801d39c:	6121      	str	r1, [r4, #16]
 801d39e:	b913      	cbnz	r3, 801d3a6 <_printf_float+0x18e>
 801d3a0:	6822      	ldr	r2, [r4, #0]
 801d3a2:	07d0      	lsls	r0, r2, #31
 801d3a4:	d502      	bpl.n	801d3ac <_printf_float+0x194>
 801d3a6:	3301      	adds	r3, #1
 801d3a8:	440b      	add	r3, r1
 801d3aa:	6123      	str	r3, [r4, #16]
 801d3ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 801d3ae:	f04f 0900 	mov.w	r9, #0
 801d3b2:	e7db      	b.n	801d36c <_printf_float+0x154>
 801d3b4:	b913      	cbnz	r3, 801d3bc <_printf_float+0x1a4>
 801d3b6:	6822      	ldr	r2, [r4, #0]
 801d3b8:	07d2      	lsls	r2, r2, #31
 801d3ba:	d501      	bpl.n	801d3c0 <_printf_float+0x1a8>
 801d3bc:	3302      	adds	r3, #2
 801d3be:	e7f4      	b.n	801d3aa <_printf_float+0x192>
 801d3c0:	2301      	movs	r3, #1
 801d3c2:	e7f2      	b.n	801d3aa <_printf_float+0x192>
 801d3c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801d3c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d3ca:	4299      	cmp	r1, r3
 801d3cc:	db05      	blt.n	801d3da <_printf_float+0x1c2>
 801d3ce:	6823      	ldr	r3, [r4, #0]
 801d3d0:	6121      	str	r1, [r4, #16]
 801d3d2:	07d8      	lsls	r0, r3, #31
 801d3d4:	d5ea      	bpl.n	801d3ac <_printf_float+0x194>
 801d3d6:	1c4b      	adds	r3, r1, #1
 801d3d8:	e7e7      	b.n	801d3aa <_printf_float+0x192>
 801d3da:	2900      	cmp	r1, #0
 801d3dc:	bfd4      	ite	le
 801d3de:	f1c1 0202 	rsble	r2, r1, #2
 801d3e2:	2201      	movgt	r2, #1
 801d3e4:	4413      	add	r3, r2
 801d3e6:	e7e0      	b.n	801d3aa <_printf_float+0x192>
 801d3e8:	6823      	ldr	r3, [r4, #0]
 801d3ea:	055a      	lsls	r2, r3, #21
 801d3ec:	d407      	bmi.n	801d3fe <_printf_float+0x1e6>
 801d3ee:	6923      	ldr	r3, [r4, #16]
 801d3f0:	4642      	mov	r2, r8
 801d3f2:	4631      	mov	r1, r6
 801d3f4:	4628      	mov	r0, r5
 801d3f6:	47b8      	blx	r7
 801d3f8:	3001      	adds	r0, #1
 801d3fa:	d12b      	bne.n	801d454 <_printf_float+0x23c>
 801d3fc:	e767      	b.n	801d2ce <_printf_float+0xb6>
 801d3fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d402:	f240 80dd 	bls.w	801d5c0 <_printf_float+0x3a8>
 801d406:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d40a:	2200      	movs	r2, #0
 801d40c:	2300      	movs	r3, #0
 801d40e:	f7e3 fb6b 	bl	8000ae8 <__aeabi_dcmpeq>
 801d412:	2800      	cmp	r0, #0
 801d414:	d033      	beq.n	801d47e <_printf_float+0x266>
 801d416:	4a37      	ldr	r2, [pc, #220]	@ (801d4f4 <_printf_float+0x2dc>)
 801d418:	2301      	movs	r3, #1
 801d41a:	4631      	mov	r1, r6
 801d41c:	4628      	mov	r0, r5
 801d41e:	47b8      	blx	r7
 801d420:	3001      	adds	r0, #1
 801d422:	f43f af54 	beq.w	801d2ce <_printf_float+0xb6>
 801d426:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801d42a:	4543      	cmp	r3, r8
 801d42c:	db02      	blt.n	801d434 <_printf_float+0x21c>
 801d42e:	6823      	ldr	r3, [r4, #0]
 801d430:	07d8      	lsls	r0, r3, #31
 801d432:	d50f      	bpl.n	801d454 <_printf_float+0x23c>
 801d434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d438:	4631      	mov	r1, r6
 801d43a:	4628      	mov	r0, r5
 801d43c:	47b8      	blx	r7
 801d43e:	3001      	adds	r0, #1
 801d440:	f43f af45 	beq.w	801d2ce <_printf_float+0xb6>
 801d444:	f04f 0900 	mov.w	r9, #0
 801d448:	f108 38ff 	add.w	r8, r8, #4294967295
 801d44c:	f104 0a1a 	add.w	sl, r4, #26
 801d450:	45c8      	cmp	r8, r9
 801d452:	dc09      	bgt.n	801d468 <_printf_float+0x250>
 801d454:	6823      	ldr	r3, [r4, #0]
 801d456:	079b      	lsls	r3, r3, #30
 801d458:	f100 8103 	bmi.w	801d662 <_printf_float+0x44a>
 801d45c:	68e0      	ldr	r0, [r4, #12]
 801d45e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d460:	4298      	cmp	r0, r3
 801d462:	bfb8      	it	lt
 801d464:	4618      	movlt	r0, r3
 801d466:	e734      	b.n	801d2d2 <_printf_float+0xba>
 801d468:	2301      	movs	r3, #1
 801d46a:	4652      	mov	r2, sl
 801d46c:	4631      	mov	r1, r6
 801d46e:	4628      	mov	r0, r5
 801d470:	47b8      	blx	r7
 801d472:	3001      	adds	r0, #1
 801d474:	f43f af2b 	beq.w	801d2ce <_printf_float+0xb6>
 801d478:	f109 0901 	add.w	r9, r9, #1
 801d47c:	e7e8      	b.n	801d450 <_printf_float+0x238>
 801d47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d480:	2b00      	cmp	r3, #0
 801d482:	dc39      	bgt.n	801d4f8 <_printf_float+0x2e0>
 801d484:	4a1b      	ldr	r2, [pc, #108]	@ (801d4f4 <_printf_float+0x2dc>)
 801d486:	2301      	movs	r3, #1
 801d488:	4631      	mov	r1, r6
 801d48a:	4628      	mov	r0, r5
 801d48c:	47b8      	blx	r7
 801d48e:	3001      	adds	r0, #1
 801d490:	f43f af1d 	beq.w	801d2ce <_printf_float+0xb6>
 801d494:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801d498:	ea59 0303 	orrs.w	r3, r9, r3
 801d49c:	d102      	bne.n	801d4a4 <_printf_float+0x28c>
 801d49e:	6823      	ldr	r3, [r4, #0]
 801d4a0:	07d9      	lsls	r1, r3, #31
 801d4a2:	d5d7      	bpl.n	801d454 <_printf_float+0x23c>
 801d4a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d4a8:	4631      	mov	r1, r6
 801d4aa:	4628      	mov	r0, r5
 801d4ac:	47b8      	blx	r7
 801d4ae:	3001      	adds	r0, #1
 801d4b0:	f43f af0d 	beq.w	801d2ce <_printf_float+0xb6>
 801d4b4:	f04f 0a00 	mov.w	sl, #0
 801d4b8:	f104 0b1a 	add.w	fp, r4, #26
 801d4bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d4be:	425b      	negs	r3, r3
 801d4c0:	4553      	cmp	r3, sl
 801d4c2:	dc01      	bgt.n	801d4c8 <_printf_float+0x2b0>
 801d4c4:	464b      	mov	r3, r9
 801d4c6:	e793      	b.n	801d3f0 <_printf_float+0x1d8>
 801d4c8:	2301      	movs	r3, #1
 801d4ca:	465a      	mov	r2, fp
 801d4cc:	4631      	mov	r1, r6
 801d4ce:	4628      	mov	r0, r5
 801d4d0:	47b8      	blx	r7
 801d4d2:	3001      	adds	r0, #1
 801d4d4:	f43f aefb 	beq.w	801d2ce <_printf_float+0xb6>
 801d4d8:	f10a 0a01 	add.w	sl, sl, #1
 801d4dc:	e7ee      	b.n	801d4bc <_printf_float+0x2a4>
 801d4de:	bf00      	nop
 801d4e0:	7fefffff 	.word	0x7fefffff
 801d4e4:	0802600a 	.word	0x0802600a
 801d4e8:	08026006 	.word	0x08026006
 801d4ec:	08026012 	.word	0x08026012
 801d4f0:	0802600e 	.word	0x0802600e
 801d4f4:	08026294 	.word	0x08026294
 801d4f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d4fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d4fe:	4553      	cmp	r3, sl
 801d500:	bfa8      	it	ge
 801d502:	4653      	movge	r3, sl
 801d504:	2b00      	cmp	r3, #0
 801d506:	4699      	mov	r9, r3
 801d508:	dc36      	bgt.n	801d578 <_printf_float+0x360>
 801d50a:	f04f 0b00 	mov.w	fp, #0
 801d50e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d512:	f104 021a 	add.w	r2, r4, #26
 801d516:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d518:	9306      	str	r3, [sp, #24]
 801d51a:	eba3 0309 	sub.w	r3, r3, r9
 801d51e:	455b      	cmp	r3, fp
 801d520:	dc31      	bgt.n	801d586 <_printf_float+0x36e>
 801d522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d524:	459a      	cmp	sl, r3
 801d526:	dc3a      	bgt.n	801d59e <_printf_float+0x386>
 801d528:	6823      	ldr	r3, [r4, #0]
 801d52a:	07da      	lsls	r2, r3, #31
 801d52c:	d437      	bmi.n	801d59e <_printf_float+0x386>
 801d52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d530:	ebaa 0903 	sub.w	r9, sl, r3
 801d534:	9b06      	ldr	r3, [sp, #24]
 801d536:	ebaa 0303 	sub.w	r3, sl, r3
 801d53a:	4599      	cmp	r9, r3
 801d53c:	bfa8      	it	ge
 801d53e:	4699      	movge	r9, r3
 801d540:	f1b9 0f00 	cmp.w	r9, #0
 801d544:	dc33      	bgt.n	801d5ae <_printf_float+0x396>
 801d546:	f04f 0800 	mov.w	r8, #0
 801d54a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d54e:	f104 0b1a 	add.w	fp, r4, #26
 801d552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d554:	ebaa 0303 	sub.w	r3, sl, r3
 801d558:	eba3 0309 	sub.w	r3, r3, r9
 801d55c:	4543      	cmp	r3, r8
 801d55e:	f77f af79 	ble.w	801d454 <_printf_float+0x23c>
 801d562:	2301      	movs	r3, #1
 801d564:	465a      	mov	r2, fp
 801d566:	4631      	mov	r1, r6
 801d568:	4628      	mov	r0, r5
 801d56a:	47b8      	blx	r7
 801d56c:	3001      	adds	r0, #1
 801d56e:	f43f aeae 	beq.w	801d2ce <_printf_float+0xb6>
 801d572:	f108 0801 	add.w	r8, r8, #1
 801d576:	e7ec      	b.n	801d552 <_printf_float+0x33a>
 801d578:	4642      	mov	r2, r8
 801d57a:	4631      	mov	r1, r6
 801d57c:	4628      	mov	r0, r5
 801d57e:	47b8      	blx	r7
 801d580:	3001      	adds	r0, #1
 801d582:	d1c2      	bne.n	801d50a <_printf_float+0x2f2>
 801d584:	e6a3      	b.n	801d2ce <_printf_float+0xb6>
 801d586:	2301      	movs	r3, #1
 801d588:	4631      	mov	r1, r6
 801d58a:	4628      	mov	r0, r5
 801d58c:	9206      	str	r2, [sp, #24]
 801d58e:	47b8      	blx	r7
 801d590:	3001      	adds	r0, #1
 801d592:	f43f ae9c 	beq.w	801d2ce <_printf_float+0xb6>
 801d596:	9a06      	ldr	r2, [sp, #24]
 801d598:	f10b 0b01 	add.w	fp, fp, #1
 801d59c:	e7bb      	b.n	801d516 <_printf_float+0x2fe>
 801d59e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d5a2:	4631      	mov	r1, r6
 801d5a4:	4628      	mov	r0, r5
 801d5a6:	47b8      	blx	r7
 801d5a8:	3001      	adds	r0, #1
 801d5aa:	d1c0      	bne.n	801d52e <_printf_float+0x316>
 801d5ac:	e68f      	b.n	801d2ce <_printf_float+0xb6>
 801d5ae:	9a06      	ldr	r2, [sp, #24]
 801d5b0:	464b      	mov	r3, r9
 801d5b2:	4442      	add	r2, r8
 801d5b4:	4631      	mov	r1, r6
 801d5b6:	4628      	mov	r0, r5
 801d5b8:	47b8      	blx	r7
 801d5ba:	3001      	adds	r0, #1
 801d5bc:	d1c3      	bne.n	801d546 <_printf_float+0x32e>
 801d5be:	e686      	b.n	801d2ce <_printf_float+0xb6>
 801d5c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d5c4:	f1ba 0f01 	cmp.w	sl, #1
 801d5c8:	dc01      	bgt.n	801d5ce <_printf_float+0x3b6>
 801d5ca:	07db      	lsls	r3, r3, #31
 801d5cc:	d536      	bpl.n	801d63c <_printf_float+0x424>
 801d5ce:	2301      	movs	r3, #1
 801d5d0:	4642      	mov	r2, r8
 801d5d2:	4631      	mov	r1, r6
 801d5d4:	4628      	mov	r0, r5
 801d5d6:	47b8      	blx	r7
 801d5d8:	3001      	adds	r0, #1
 801d5da:	f43f ae78 	beq.w	801d2ce <_printf_float+0xb6>
 801d5de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d5e2:	4631      	mov	r1, r6
 801d5e4:	4628      	mov	r0, r5
 801d5e6:	47b8      	blx	r7
 801d5e8:	3001      	adds	r0, #1
 801d5ea:	f43f ae70 	beq.w	801d2ce <_printf_float+0xb6>
 801d5ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d5f2:	2200      	movs	r2, #0
 801d5f4:	2300      	movs	r3, #0
 801d5f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d5fa:	f7e3 fa75 	bl	8000ae8 <__aeabi_dcmpeq>
 801d5fe:	b9c0      	cbnz	r0, 801d632 <_printf_float+0x41a>
 801d600:	4653      	mov	r3, sl
 801d602:	f108 0201 	add.w	r2, r8, #1
 801d606:	4631      	mov	r1, r6
 801d608:	4628      	mov	r0, r5
 801d60a:	47b8      	blx	r7
 801d60c:	3001      	adds	r0, #1
 801d60e:	d10c      	bne.n	801d62a <_printf_float+0x412>
 801d610:	e65d      	b.n	801d2ce <_printf_float+0xb6>
 801d612:	2301      	movs	r3, #1
 801d614:	465a      	mov	r2, fp
 801d616:	4631      	mov	r1, r6
 801d618:	4628      	mov	r0, r5
 801d61a:	47b8      	blx	r7
 801d61c:	3001      	adds	r0, #1
 801d61e:	f43f ae56 	beq.w	801d2ce <_printf_float+0xb6>
 801d622:	f108 0801 	add.w	r8, r8, #1
 801d626:	45d0      	cmp	r8, sl
 801d628:	dbf3      	blt.n	801d612 <_printf_float+0x3fa>
 801d62a:	464b      	mov	r3, r9
 801d62c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d630:	e6df      	b.n	801d3f2 <_printf_float+0x1da>
 801d632:	f04f 0800 	mov.w	r8, #0
 801d636:	f104 0b1a 	add.w	fp, r4, #26
 801d63a:	e7f4      	b.n	801d626 <_printf_float+0x40e>
 801d63c:	2301      	movs	r3, #1
 801d63e:	4642      	mov	r2, r8
 801d640:	e7e1      	b.n	801d606 <_printf_float+0x3ee>
 801d642:	2301      	movs	r3, #1
 801d644:	464a      	mov	r2, r9
 801d646:	4631      	mov	r1, r6
 801d648:	4628      	mov	r0, r5
 801d64a:	47b8      	blx	r7
 801d64c:	3001      	adds	r0, #1
 801d64e:	f43f ae3e 	beq.w	801d2ce <_printf_float+0xb6>
 801d652:	f108 0801 	add.w	r8, r8, #1
 801d656:	68e3      	ldr	r3, [r4, #12]
 801d658:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d65a:	1a5b      	subs	r3, r3, r1
 801d65c:	4543      	cmp	r3, r8
 801d65e:	dcf0      	bgt.n	801d642 <_printf_float+0x42a>
 801d660:	e6fc      	b.n	801d45c <_printf_float+0x244>
 801d662:	f04f 0800 	mov.w	r8, #0
 801d666:	f104 0919 	add.w	r9, r4, #25
 801d66a:	e7f4      	b.n	801d656 <_printf_float+0x43e>

0801d66c <_printf_common>:
 801d66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d670:	4616      	mov	r6, r2
 801d672:	4698      	mov	r8, r3
 801d674:	688a      	ldr	r2, [r1, #8]
 801d676:	690b      	ldr	r3, [r1, #16]
 801d678:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d67c:	4293      	cmp	r3, r2
 801d67e:	bfb8      	it	lt
 801d680:	4613      	movlt	r3, r2
 801d682:	6033      	str	r3, [r6, #0]
 801d684:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d688:	4607      	mov	r7, r0
 801d68a:	460c      	mov	r4, r1
 801d68c:	b10a      	cbz	r2, 801d692 <_printf_common+0x26>
 801d68e:	3301      	adds	r3, #1
 801d690:	6033      	str	r3, [r6, #0]
 801d692:	6823      	ldr	r3, [r4, #0]
 801d694:	0699      	lsls	r1, r3, #26
 801d696:	bf42      	ittt	mi
 801d698:	6833      	ldrmi	r3, [r6, #0]
 801d69a:	3302      	addmi	r3, #2
 801d69c:	6033      	strmi	r3, [r6, #0]
 801d69e:	6825      	ldr	r5, [r4, #0]
 801d6a0:	f015 0506 	ands.w	r5, r5, #6
 801d6a4:	d106      	bne.n	801d6b4 <_printf_common+0x48>
 801d6a6:	f104 0a19 	add.w	sl, r4, #25
 801d6aa:	68e3      	ldr	r3, [r4, #12]
 801d6ac:	6832      	ldr	r2, [r6, #0]
 801d6ae:	1a9b      	subs	r3, r3, r2
 801d6b0:	42ab      	cmp	r3, r5
 801d6b2:	dc26      	bgt.n	801d702 <_printf_common+0x96>
 801d6b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d6b8:	6822      	ldr	r2, [r4, #0]
 801d6ba:	3b00      	subs	r3, #0
 801d6bc:	bf18      	it	ne
 801d6be:	2301      	movne	r3, #1
 801d6c0:	0692      	lsls	r2, r2, #26
 801d6c2:	d42b      	bmi.n	801d71c <_printf_common+0xb0>
 801d6c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d6c8:	4641      	mov	r1, r8
 801d6ca:	4638      	mov	r0, r7
 801d6cc:	47c8      	blx	r9
 801d6ce:	3001      	adds	r0, #1
 801d6d0:	d01e      	beq.n	801d710 <_printf_common+0xa4>
 801d6d2:	6823      	ldr	r3, [r4, #0]
 801d6d4:	6922      	ldr	r2, [r4, #16]
 801d6d6:	f003 0306 	and.w	r3, r3, #6
 801d6da:	2b04      	cmp	r3, #4
 801d6dc:	bf02      	ittt	eq
 801d6de:	68e5      	ldreq	r5, [r4, #12]
 801d6e0:	6833      	ldreq	r3, [r6, #0]
 801d6e2:	1aed      	subeq	r5, r5, r3
 801d6e4:	68a3      	ldr	r3, [r4, #8]
 801d6e6:	bf0c      	ite	eq
 801d6e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d6ec:	2500      	movne	r5, #0
 801d6ee:	4293      	cmp	r3, r2
 801d6f0:	bfc4      	itt	gt
 801d6f2:	1a9b      	subgt	r3, r3, r2
 801d6f4:	18ed      	addgt	r5, r5, r3
 801d6f6:	2600      	movs	r6, #0
 801d6f8:	341a      	adds	r4, #26
 801d6fa:	42b5      	cmp	r5, r6
 801d6fc:	d11a      	bne.n	801d734 <_printf_common+0xc8>
 801d6fe:	2000      	movs	r0, #0
 801d700:	e008      	b.n	801d714 <_printf_common+0xa8>
 801d702:	2301      	movs	r3, #1
 801d704:	4652      	mov	r2, sl
 801d706:	4641      	mov	r1, r8
 801d708:	4638      	mov	r0, r7
 801d70a:	47c8      	blx	r9
 801d70c:	3001      	adds	r0, #1
 801d70e:	d103      	bne.n	801d718 <_printf_common+0xac>
 801d710:	f04f 30ff 	mov.w	r0, #4294967295
 801d714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d718:	3501      	adds	r5, #1
 801d71a:	e7c6      	b.n	801d6aa <_printf_common+0x3e>
 801d71c:	18e1      	adds	r1, r4, r3
 801d71e:	1c5a      	adds	r2, r3, #1
 801d720:	2030      	movs	r0, #48	@ 0x30
 801d722:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d726:	4422      	add	r2, r4
 801d728:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d72c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d730:	3302      	adds	r3, #2
 801d732:	e7c7      	b.n	801d6c4 <_printf_common+0x58>
 801d734:	2301      	movs	r3, #1
 801d736:	4622      	mov	r2, r4
 801d738:	4641      	mov	r1, r8
 801d73a:	4638      	mov	r0, r7
 801d73c:	47c8      	blx	r9
 801d73e:	3001      	adds	r0, #1
 801d740:	d0e6      	beq.n	801d710 <_printf_common+0xa4>
 801d742:	3601      	adds	r6, #1
 801d744:	e7d9      	b.n	801d6fa <_printf_common+0x8e>
	...

0801d748 <_printf_i>:
 801d748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d74c:	7e0f      	ldrb	r7, [r1, #24]
 801d74e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d750:	2f78      	cmp	r7, #120	@ 0x78
 801d752:	4691      	mov	r9, r2
 801d754:	4680      	mov	r8, r0
 801d756:	460c      	mov	r4, r1
 801d758:	469a      	mov	sl, r3
 801d75a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d75e:	d807      	bhi.n	801d770 <_printf_i+0x28>
 801d760:	2f62      	cmp	r7, #98	@ 0x62
 801d762:	d80a      	bhi.n	801d77a <_printf_i+0x32>
 801d764:	2f00      	cmp	r7, #0
 801d766:	f000 80d1 	beq.w	801d90c <_printf_i+0x1c4>
 801d76a:	2f58      	cmp	r7, #88	@ 0x58
 801d76c:	f000 80b8 	beq.w	801d8e0 <_printf_i+0x198>
 801d770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d774:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d778:	e03a      	b.n	801d7f0 <_printf_i+0xa8>
 801d77a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d77e:	2b15      	cmp	r3, #21
 801d780:	d8f6      	bhi.n	801d770 <_printf_i+0x28>
 801d782:	a101      	add	r1, pc, #4	@ (adr r1, 801d788 <_printf_i+0x40>)
 801d784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d788:	0801d7e1 	.word	0x0801d7e1
 801d78c:	0801d7f5 	.word	0x0801d7f5
 801d790:	0801d771 	.word	0x0801d771
 801d794:	0801d771 	.word	0x0801d771
 801d798:	0801d771 	.word	0x0801d771
 801d79c:	0801d771 	.word	0x0801d771
 801d7a0:	0801d7f5 	.word	0x0801d7f5
 801d7a4:	0801d771 	.word	0x0801d771
 801d7a8:	0801d771 	.word	0x0801d771
 801d7ac:	0801d771 	.word	0x0801d771
 801d7b0:	0801d771 	.word	0x0801d771
 801d7b4:	0801d8f3 	.word	0x0801d8f3
 801d7b8:	0801d81f 	.word	0x0801d81f
 801d7bc:	0801d8ad 	.word	0x0801d8ad
 801d7c0:	0801d771 	.word	0x0801d771
 801d7c4:	0801d771 	.word	0x0801d771
 801d7c8:	0801d915 	.word	0x0801d915
 801d7cc:	0801d771 	.word	0x0801d771
 801d7d0:	0801d81f 	.word	0x0801d81f
 801d7d4:	0801d771 	.word	0x0801d771
 801d7d8:	0801d771 	.word	0x0801d771
 801d7dc:	0801d8b5 	.word	0x0801d8b5
 801d7e0:	6833      	ldr	r3, [r6, #0]
 801d7e2:	1d1a      	adds	r2, r3, #4
 801d7e4:	681b      	ldr	r3, [r3, #0]
 801d7e6:	6032      	str	r2, [r6, #0]
 801d7e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d7ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d7f0:	2301      	movs	r3, #1
 801d7f2:	e09c      	b.n	801d92e <_printf_i+0x1e6>
 801d7f4:	6833      	ldr	r3, [r6, #0]
 801d7f6:	6820      	ldr	r0, [r4, #0]
 801d7f8:	1d19      	adds	r1, r3, #4
 801d7fa:	6031      	str	r1, [r6, #0]
 801d7fc:	0606      	lsls	r6, r0, #24
 801d7fe:	d501      	bpl.n	801d804 <_printf_i+0xbc>
 801d800:	681d      	ldr	r5, [r3, #0]
 801d802:	e003      	b.n	801d80c <_printf_i+0xc4>
 801d804:	0645      	lsls	r5, r0, #25
 801d806:	d5fb      	bpl.n	801d800 <_printf_i+0xb8>
 801d808:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d80c:	2d00      	cmp	r5, #0
 801d80e:	da03      	bge.n	801d818 <_printf_i+0xd0>
 801d810:	232d      	movs	r3, #45	@ 0x2d
 801d812:	426d      	negs	r5, r5
 801d814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d818:	4858      	ldr	r0, [pc, #352]	@ (801d97c <_printf_i+0x234>)
 801d81a:	230a      	movs	r3, #10
 801d81c:	e011      	b.n	801d842 <_printf_i+0xfa>
 801d81e:	6821      	ldr	r1, [r4, #0]
 801d820:	6833      	ldr	r3, [r6, #0]
 801d822:	0608      	lsls	r0, r1, #24
 801d824:	f853 5b04 	ldr.w	r5, [r3], #4
 801d828:	d402      	bmi.n	801d830 <_printf_i+0xe8>
 801d82a:	0649      	lsls	r1, r1, #25
 801d82c:	bf48      	it	mi
 801d82e:	b2ad      	uxthmi	r5, r5
 801d830:	2f6f      	cmp	r7, #111	@ 0x6f
 801d832:	4852      	ldr	r0, [pc, #328]	@ (801d97c <_printf_i+0x234>)
 801d834:	6033      	str	r3, [r6, #0]
 801d836:	bf14      	ite	ne
 801d838:	230a      	movne	r3, #10
 801d83a:	2308      	moveq	r3, #8
 801d83c:	2100      	movs	r1, #0
 801d83e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d842:	6866      	ldr	r6, [r4, #4]
 801d844:	60a6      	str	r6, [r4, #8]
 801d846:	2e00      	cmp	r6, #0
 801d848:	db05      	blt.n	801d856 <_printf_i+0x10e>
 801d84a:	6821      	ldr	r1, [r4, #0]
 801d84c:	432e      	orrs	r6, r5
 801d84e:	f021 0104 	bic.w	r1, r1, #4
 801d852:	6021      	str	r1, [r4, #0]
 801d854:	d04b      	beq.n	801d8ee <_printf_i+0x1a6>
 801d856:	4616      	mov	r6, r2
 801d858:	fbb5 f1f3 	udiv	r1, r5, r3
 801d85c:	fb03 5711 	mls	r7, r3, r1, r5
 801d860:	5dc7      	ldrb	r7, [r0, r7]
 801d862:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d866:	462f      	mov	r7, r5
 801d868:	42bb      	cmp	r3, r7
 801d86a:	460d      	mov	r5, r1
 801d86c:	d9f4      	bls.n	801d858 <_printf_i+0x110>
 801d86e:	2b08      	cmp	r3, #8
 801d870:	d10b      	bne.n	801d88a <_printf_i+0x142>
 801d872:	6823      	ldr	r3, [r4, #0]
 801d874:	07df      	lsls	r7, r3, #31
 801d876:	d508      	bpl.n	801d88a <_printf_i+0x142>
 801d878:	6923      	ldr	r3, [r4, #16]
 801d87a:	6861      	ldr	r1, [r4, #4]
 801d87c:	4299      	cmp	r1, r3
 801d87e:	bfde      	ittt	le
 801d880:	2330      	movle	r3, #48	@ 0x30
 801d882:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d886:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d88a:	1b92      	subs	r2, r2, r6
 801d88c:	6122      	str	r2, [r4, #16]
 801d88e:	f8cd a000 	str.w	sl, [sp]
 801d892:	464b      	mov	r3, r9
 801d894:	aa03      	add	r2, sp, #12
 801d896:	4621      	mov	r1, r4
 801d898:	4640      	mov	r0, r8
 801d89a:	f7ff fee7 	bl	801d66c <_printf_common>
 801d89e:	3001      	adds	r0, #1
 801d8a0:	d14a      	bne.n	801d938 <_printf_i+0x1f0>
 801d8a2:	f04f 30ff 	mov.w	r0, #4294967295
 801d8a6:	b004      	add	sp, #16
 801d8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d8ac:	6823      	ldr	r3, [r4, #0]
 801d8ae:	f043 0320 	orr.w	r3, r3, #32
 801d8b2:	6023      	str	r3, [r4, #0]
 801d8b4:	4832      	ldr	r0, [pc, #200]	@ (801d980 <_printf_i+0x238>)
 801d8b6:	2778      	movs	r7, #120	@ 0x78
 801d8b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d8bc:	6823      	ldr	r3, [r4, #0]
 801d8be:	6831      	ldr	r1, [r6, #0]
 801d8c0:	061f      	lsls	r7, r3, #24
 801d8c2:	f851 5b04 	ldr.w	r5, [r1], #4
 801d8c6:	d402      	bmi.n	801d8ce <_printf_i+0x186>
 801d8c8:	065f      	lsls	r7, r3, #25
 801d8ca:	bf48      	it	mi
 801d8cc:	b2ad      	uxthmi	r5, r5
 801d8ce:	6031      	str	r1, [r6, #0]
 801d8d0:	07d9      	lsls	r1, r3, #31
 801d8d2:	bf44      	itt	mi
 801d8d4:	f043 0320 	orrmi.w	r3, r3, #32
 801d8d8:	6023      	strmi	r3, [r4, #0]
 801d8da:	b11d      	cbz	r5, 801d8e4 <_printf_i+0x19c>
 801d8dc:	2310      	movs	r3, #16
 801d8de:	e7ad      	b.n	801d83c <_printf_i+0xf4>
 801d8e0:	4826      	ldr	r0, [pc, #152]	@ (801d97c <_printf_i+0x234>)
 801d8e2:	e7e9      	b.n	801d8b8 <_printf_i+0x170>
 801d8e4:	6823      	ldr	r3, [r4, #0]
 801d8e6:	f023 0320 	bic.w	r3, r3, #32
 801d8ea:	6023      	str	r3, [r4, #0]
 801d8ec:	e7f6      	b.n	801d8dc <_printf_i+0x194>
 801d8ee:	4616      	mov	r6, r2
 801d8f0:	e7bd      	b.n	801d86e <_printf_i+0x126>
 801d8f2:	6833      	ldr	r3, [r6, #0]
 801d8f4:	6825      	ldr	r5, [r4, #0]
 801d8f6:	6961      	ldr	r1, [r4, #20]
 801d8f8:	1d18      	adds	r0, r3, #4
 801d8fa:	6030      	str	r0, [r6, #0]
 801d8fc:	062e      	lsls	r6, r5, #24
 801d8fe:	681b      	ldr	r3, [r3, #0]
 801d900:	d501      	bpl.n	801d906 <_printf_i+0x1be>
 801d902:	6019      	str	r1, [r3, #0]
 801d904:	e002      	b.n	801d90c <_printf_i+0x1c4>
 801d906:	0668      	lsls	r0, r5, #25
 801d908:	d5fb      	bpl.n	801d902 <_printf_i+0x1ba>
 801d90a:	8019      	strh	r1, [r3, #0]
 801d90c:	2300      	movs	r3, #0
 801d90e:	6123      	str	r3, [r4, #16]
 801d910:	4616      	mov	r6, r2
 801d912:	e7bc      	b.n	801d88e <_printf_i+0x146>
 801d914:	6833      	ldr	r3, [r6, #0]
 801d916:	1d1a      	adds	r2, r3, #4
 801d918:	6032      	str	r2, [r6, #0]
 801d91a:	681e      	ldr	r6, [r3, #0]
 801d91c:	6862      	ldr	r2, [r4, #4]
 801d91e:	2100      	movs	r1, #0
 801d920:	4630      	mov	r0, r6
 801d922:	f7e2 fc65 	bl	80001f0 <memchr>
 801d926:	b108      	cbz	r0, 801d92c <_printf_i+0x1e4>
 801d928:	1b80      	subs	r0, r0, r6
 801d92a:	6060      	str	r0, [r4, #4]
 801d92c:	6863      	ldr	r3, [r4, #4]
 801d92e:	6123      	str	r3, [r4, #16]
 801d930:	2300      	movs	r3, #0
 801d932:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d936:	e7aa      	b.n	801d88e <_printf_i+0x146>
 801d938:	6923      	ldr	r3, [r4, #16]
 801d93a:	4632      	mov	r2, r6
 801d93c:	4649      	mov	r1, r9
 801d93e:	4640      	mov	r0, r8
 801d940:	47d0      	blx	sl
 801d942:	3001      	adds	r0, #1
 801d944:	d0ad      	beq.n	801d8a2 <_printf_i+0x15a>
 801d946:	6823      	ldr	r3, [r4, #0]
 801d948:	079b      	lsls	r3, r3, #30
 801d94a:	d413      	bmi.n	801d974 <_printf_i+0x22c>
 801d94c:	68e0      	ldr	r0, [r4, #12]
 801d94e:	9b03      	ldr	r3, [sp, #12]
 801d950:	4298      	cmp	r0, r3
 801d952:	bfb8      	it	lt
 801d954:	4618      	movlt	r0, r3
 801d956:	e7a6      	b.n	801d8a6 <_printf_i+0x15e>
 801d958:	2301      	movs	r3, #1
 801d95a:	4632      	mov	r2, r6
 801d95c:	4649      	mov	r1, r9
 801d95e:	4640      	mov	r0, r8
 801d960:	47d0      	blx	sl
 801d962:	3001      	adds	r0, #1
 801d964:	d09d      	beq.n	801d8a2 <_printf_i+0x15a>
 801d966:	3501      	adds	r5, #1
 801d968:	68e3      	ldr	r3, [r4, #12]
 801d96a:	9903      	ldr	r1, [sp, #12]
 801d96c:	1a5b      	subs	r3, r3, r1
 801d96e:	42ab      	cmp	r3, r5
 801d970:	dcf2      	bgt.n	801d958 <_printf_i+0x210>
 801d972:	e7eb      	b.n	801d94c <_printf_i+0x204>
 801d974:	2500      	movs	r5, #0
 801d976:	f104 0619 	add.w	r6, r4, #25
 801d97a:	e7f5      	b.n	801d968 <_printf_i+0x220>
 801d97c:	08026016 	.word	0x08026016
 801d980:	08026027 	.word	0x08026027

0801d984 <_scanf_float>:
 801d984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d988:	b087      	sub	sp, #28
 801d98a:	4691      	mov	r9, r2
 801d98c:	9303      	str	r3, [sp, #12]
 801d98e:	688b      	ldr	r3, [r1, #8]
 801d990:	1e5a      	subs	r2, r3, #1
 801d992:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801d996:	bf81      	itttt	hi
 801d998:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801d99c:	eb03 0b05 	addhi.w	fp, r3, r5
 801d9a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801d9a4:	608b      	strhi	r3, [r1, #8]
 801d9a6:	680b      	ldr	r3, [r1, #0]
 801d9a8:	460a      	mov	r2, r1
 801d9aa:	f04f 0500 	mov.w	r5, #0
 801d9ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801d9b2:	f842 3b1c 	str.w	r3, [r2], #28
 801d9b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d9ba:	4680      	mov	r8, r0
 801d9bc:	460c      	mov	r4, r1
 801d9be:	bf98      	it	ls
 801d9c0:	f04f 0b00 	movls.w	fp, #0
 801d9c4:	9201      	str	r2, [sp, #4]
 801d9c6:	4616      	mov	r6, r2
 801d9c8:	46aa      	mov	sl, r5
 801d9ca:	462f      	mov	r7, r5
 801d9cc:	9502      	str	r5, [sp, #8]
 801d9ce:	68a2      	ldr	r2, [r4, #8]
 801d9d0:	b15a      	cbz	r2, 801d9ea <_scanf_float+0x66>
 801d9d2:	f8d9 3000 	ldr.w	r3, [r9]
 801d9d6:	781b      	ldrb	r3, [r3, #0]
 801d9d8:	2b4e      	cmp	r3, #78	@ 0x4e
 801d9da:	d863      	bhi.n	801daa4 <_scanf_float+0x120>
 801d9dc:	2b40      	cmp	r3, #64	@ 0x40
 801d9de:	d83b      	bhi.n	801da58 <_scanf_float+0xd4>
 801d9e0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801d9e4:	b2c8      	uxtb	r0, r1
 801d9e6:	280e      	cmp	r0, #14
 801d9e8:	d939      	bls.n	801da5e <_scanf_float+0xda>
 801d9ea:	b11f      	cbz	r7, 801d9f4 <_scanf_float+0x70>
 801d9ec:	6823      	ldr	r3, [r4, #0]
 801d9ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801d9f2:	6023      	str	r3, [r4, #0]
 801d9f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d9f8:	f1ba 0f01 	cmp.w	sl, #1
 801d9fc:	f200 8114 	bhi.w	801dc28 <_scanf_float+0x2a4>
 801da00:	9b01      	ldr	r3, [sp, #4]
 801da02:	429e      	cmp	r6, r3
 801da04:	f200 8105 	bhi.w	801dc12 <_scanf_float+0x28e>
 801da08:	2001      	movs	r0, #1
 801da0a:	b007      	add	sp, #28
 801da0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da10:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801da14:	2a0d      	cmp	r2, #13
 801da16:	d8e8      	bhi.n	801d9ea <_scanf_float+0x66>
 801da18:	a101      	add	r1, pc, #4	@ (adr r1, 801da20 <_scanf_float+0x9c>)
 801da1a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801da1e:	bf00      	nop
 801da20:	0801db69 	.word	0x0801db69
 801da24:	0801d9eb 	.word	0x0801d9eb
 801da28:	0801d9eb 	.word	0x0801d9eb
 801da2c:	0801d9eb 	.word	0x0801d9eb
 801da30:	0801dbc5 	.word	0x0801dbc5
 801da34:	0801db9f 	.word	0x0801db9f
 801da38:	0801d9eb 	.word	0x0801d9eb
 801da3c:	0801d9eb 	.word	0x0801d9eb
 801da40:	0801db77 	.word	0x0801db77
 801da44:	0801d9eb 	.word	0x0801d9eb
 801da48:	0801d9eb 	.word	0x0801d9eb
 801da4c:	0801d9eb 	.word	0x0801d9eb
 801da50:	0801d9eb 	.word	0x0801d9eb
 801da54:	0801db33 	.word	0x0801db33
 801da58:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801da5c:	e7da      	b.n	801da14 <_scanf_float+0x90>
 801da5e:	290e      	cmp	r1, #14
 801da60:	d8c3      	bhi.n	801d9ea <_scanf_float+0x66>
 801da62:	a001      	add	r0, pc, #4	@ (adr r0, 801da68 <_scanf_float+0xe4>)
 801da64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801da68:	0801db23 	.word	0x0801db23
 801da6c:	0801d9eb 	.word	0x0801d9eb
 801da70:	0801db23 	.word	0x0801db23
 801da74:	0801dbb3 	.word	0x0801dbb3
 801da78:	0801d9eb 	.word	0x0801d9eb
 801da7c:	0801dac5 	.word	0x0801dac5
 801da80:	0801db09 	.word	0x0801db09
 801da84:	0801db09 	.word	0x0801db09
 801da88:	0801db09 	.word	0x0801db09
 801da8c:	0801db09 	.word	0x0801db09
 801da90:	0801db09 	.word	0x0801db09
 801da94:	0801db09 	.word	0x0801db09
 801da98:	0801db09 	.word	0x0801db09
 801da9c:	0801db09 	.word	0x0801db09
 801daa0:	0801db09 	.word	0x0801db09
 801daa4:	2b6e      	cmp	r3, #110	@ 0x6e
 801daa6:	d809      	bhi.n	801dabc <_scanf_float+0x138>
 801daa8:	2b60      	cmp	r3, #96	@ 0x60
 801daaa:	d8b1      	bhi.n	801da10 <_scanf_float+0x8c>
 801daac:	2b54      	cmp	r3, #84	@ 0x54
 801daae:	d07b      	beq.n	801dba8 <_scanf_float+0x224>
 801dab0:	2b59      	cmp	r3, #89	@ 0x59
 801dab2:	d19a      	bne.n	801d9ea <_scanf_float+0x66>
 801dab4:	2d07      	cmp	r5, #7
 801dab6:	d198      	bne.n	801d9ea <_scanf_float+0x66>
 801dab8:	2508      	movs	r5, #8
 801daba:	e02f      	b.n	801db1c <_scanf_float+0x198>
 801dabc:	2b74      	cmp	r3, #116	@ 0x74
 801dabe:	d073      	beq.n	801dba8 <_scanf_float+0x224>
 801dac0:	2b79      	cmp	r3, #121	@ 0x79
 801dac2:	e7f6      	b.n	801dab2 <_scanf_float+0x12e>
 801dac4:	6821      	ldr	r1, [r4, #0]
 801dac6:	05c8      	lsls	r0, r1, #23
 801dac8:	d51e      	bpl.n	801db08 <_scanf_float+0x184>
 801daca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801dace:	6021      	str	r1, [r4, #0]
 801dad0:	3701      	adds	r7, #1
 801dad2:	f1bb 0f00 	cmp.w	fp, #0
 801dad6:	d003      	beq.n	801dae0 <_scanf_float+0x15c>
 801dad8:	3201      	adds	r2, #1
 801dada:	f10b 3bff 	add.w	fp, fp, #4294967295
 801dade:	60a2      	str	r2, [r4, #8]
 801dae0:	68a3      	ldr	r3, [r4, #8]
 801dae2:	3b01      	subs	r3, #1
 801dae4:	60a3      	str	r3, [r4, #8]
 801dae6:	6923      	ldr	r3, [r4, #16]
 801dae8:	3301      	adds	r3, #1
 801daea:	6123      	str	r3, [r4, #16]
 801daec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801daf0:	3b01      	subs	r3, #1
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	f8c9 3004 	str.w	r3, [r9, #4]
 801daf8:	f340 8082 	ble.w	801dc00 <_scanf_float+0x27c>
 801dafc:	f8d9 3000 	ldr.w	r3, [r9]
 801db00:	3301      	adds	r3, #1
 801db02:	f8c9 3000 	str.w	r3, [r9]
 801db06:	e762      	b.n	801d9ce <_scanf_float+0x4a>
 801db08:	eb1a 0105 	adds.w	r1, sl, r5
 801db0c:	f47f af6d 	bne.w	801d9ea <_scanf_float+0x66>
 801db10:	6822      	ldr	r2, [r4, #0]
 801db12:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801db16:	6022      	str	r2, [r4, #0]
 801db18:	460d      	mov	r5, r1
 801db1a:	468a      	mov	sl, r1
 801db1c:	f806 3b01 	strb.w	r3, [r6], #1
 801db20:	e7de      	b.n	801dae0 <_scanf_float+0x15c>
 801db22:	6822      	ldr	r2, [r4, #0]
 801db24:	0610      	lsls	r0, r2, #24
 801db26:	f57f af60 	bpl.w	801d9ea <_scanf_float+0x66>
 801db2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801db2e:	6022      	str	r2, [r4, #0]
 801db30:	e7f4      	b.n	801db1c <_scanf_float+0x198>
 801db32:	f1ba 0f00 	cmp.w	sl, #0
 801db36:	d10c      	bne.n	801db52 <_scanf_float+0x1ce>
 801db38:	b977      	cbnz	r7, 801db58 <_scanf_float+0x1d4>
 801db3a:	6822      	ldr	r2, [r4, #0]
 801db3c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801db40:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801db44:	d108      	bne.n	801db58 <_scanf_float+0x1d4>
 801db46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801db4a:	6022      	str	r2, [r4, #0]
 801db4c:	f04f 0a01 	mov.w	sl, #1
 801db50:	e7e4      	b.n	801db1c <_scanf_float+0x198>
 801db52:	f1ba 0f02 	cmp.w	sl, #2
 801db56:	d050      	beq.n	801dbfa <_scanf_float+0x276>
 801db58:	2d01      	cmp	r5, #1
 801db5a:	d002      	beq.n	801db62 <_scanf_float+0x1de>
 801db5c:	2d04      	cmp	r5, #4
 801db5e:	f47f af44 	bne.w	801d9ea <_scanf_float+0x66>
 801db62:	3501      	adds	r5, #1
 801db64:	b2ed      	uxtb	r5, r5
 801db66:	e7d9      	b.n	801db1c <_scanf_float+0x198>
 801db68:	f1ba 0f01 	cmp.w	sl, #1
 801db6c:	f47f af3d 	bne.w	801d9ea <_scanf_float+0x66>
 801db70:	f04f 0a02 	mov.w	sl, #2
 801db74:	e7d2      	b.n	801db1c <_scanf_float+0x198>
 801db76:	b975      	cbnz	r5, 801db96 <_scanf_float+0x212>
 801db78:	2f00      	cmp	r7, #0
 801db7a:	f47f af37 	bne.w	801d9ec <_scanf_float+0x68>
 801db7e:	6822      	ldr	r2, [r4, #0]
 801db80:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801db84:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801db88:	f040 8103 	bne.w	801dd92 <_scanf_float+0x40e>
 801db8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801db90:	6022      	str	r2, [r4, #0]
 801db92:	2501      	movs	r5, #1
 801db94:	e7c2      	b.n	801db1c <_scanf_float+0x198>
 801db96:	2d03      	cmp	r5, #3
 801db98:	d0e3      	beq.n	801db62 <_scanf_float+0x1de>
 801db9a:	2d05      	cmp	r5, #5
 801db9c:	e7df      	b.n	801db5e <_scanf_float+0x1da>
 801db9e:	2d02      	cmp	r5, #2
 801dba0:	f47f af23 	bne.w	801d9ea <_scanf_float+0x66>
 801dba4:	2503      	movs	r5, #3
 801dba6:	e7b9      	b.n	801db1c <_scanf_float+0x198>
 801dba8:	2d06      	cmp	r5, #6
 801dbaa:	f47f af1e 	bne.w	801d9ea <_scanf_float+0x66>
 801dbae:	2507      	movs	r5, #7
 801dbb0:	e7b4      	b.n	801db1c <_scanf_float+0x198>
 801dbb2:	6822      	ldr	r2, [r4, #0]
 801dbb4:	0591      	lsls	r1, r2, #22
 801dbb6:	f57f af18 	bpl.w	801d9ea <_scanf_float+0x66>
 801dbba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801dbbe:	6022      	str	r2, [r4, #0]
 801dbc0:	9702      	str	r7, [sp, #8]
 801dbc2:	e7ab      	b.n	801db1c <_scanf_float+0x198>
 801dbc4:	6822      	ldr	r2, [r4, #0]
 801dbc6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801dbca:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801dbce:	d005      	beq.n	801dbdc <_scanf_float+0x258>
 801dbd0:	0550      	lsls	r0, r2, #21
 801dbd2:	f57f af0a 	bpl.w	801d9ea <_scanf_float+0x66>
 801dbd6:	2f00      	cmp	r7, #0
 801dbd8:	f000 80db 	beq.w	801dd92 <_scanf_float+0x40e>
 801dbdc:	0591      	lsls	r1, r2, #22
 801dbde:	bf58      	it	pl
 801dbe0:	9902      	ldrpl	r1, [sp, #8]
 801dbe2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801dbe6:	bf58      	it	pl
 801dbe8:	1a79      	subpl	r1, r7, r1
 801dbea:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801dbee:	bf58      	it	pl
 801dbf0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801dbf4:	6022      	str	r2, [r4, #0]
 801dbf6:	2700      	movs	r7, #0
 801dbf8:	e790      	b.n	801db1c <_scanf_float+0x198>
 801dbfa:	f04f 0a03 	mov.w	sl, #3
 801dbfe:	e78d      	b.n	801db1c <_scanf_float+0x198>
 801dc00:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801dc04:	4649      	mov	r1, r9
 801dc06:	4640      	mov	r0, r8
 801dc08:	4798      	blx	r3
 801dc0a:	2800      	cmp	r0, #0
 801dc0c:	f43f aedf 	beq.w	801d9ce <_scanf_float+0x4a>
 801dc10:	e6eb      	b.n	801d9ea <_scanf_float+0x66>
 801dc12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dc16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dc1a:	464a      	mov	r2, r9
 801dc1c:	4640      	mov	r0, r8
 801dc1e:	4798      	blx	r3
 801dc20:	6923      	ldr	r3, [r4, #16]
 801dc22:	3b01      	subs	r3, #1
 801dc24:	6123      	str	r3, [r4, #16]
 801dc26:	e6eb      	b.n	801da00 <_scanf_float+0x7c>
 801dc28:	1e6b      	subs	r3, r5, #1
 801dc2a:	2b06      	cmp	r3, #6
 801dc2c:	d824      	bhi.n	801dc78 <_scanf_float+0x2f4>
 801dc2e:	2d02      	cmp	r5, #2
 801dc30:	d836      	bhi.n	801dca0 <_scanf_float+0x31c>
 801dc32:	9b01      	ldr	r3, [sp, #4]
 801dc34:	429e      	cmp	r6, r3
 801dc36:	f67f aee7 	bls.w	801da08 <_scanf_float+0x84>
 801dc3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dc3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dc42:	464a      	mov	r2, r9
 801dc44:	4640      	mov	r0, r8
 801dc46:	4798      	blx	r3
 801dc48:	6923      	ldr	r3, [r4, #16]
 801dc4a:	3b01      	subs	r3, #1
 801dc4c:	6123      	str	r3, [r4, #16]
 801dc4e:	e7f0      	b.n	801dc32 <_scanf_float+0x2ae>
 801dc50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dc54:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801dc58:	464a      	mov	r2, r9
 801dc5a:	4640      	mov	r0, r8
 801dc5c:	4798      	blx	r3
 801dc5e:	6923      	ldr	r3, [r4, #16]
 801dc60:	3b01      	subs	r3, #1
 801dc62:	6123      	str	r3, [r4, #16]
 801dc64:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dc68:	fa5f fa8a 	uxtb.w	sl, sl
 801dc6c:	f1ba 0f02 	cmp.w	sl, #2
 801dc70:	d1ee      	bne.n	801dc50 <_scanf_float+0x2cc>
 801dc72:	3d03      	subs	r5, #3
 801dc74:	b2ed      	uxtb	r5, r5
 801dc76:	1b76      	subs	r6, r6, r5
 801dc78:	6823      	ldr	r3, [r4, #0]
 801dc7a:	05da      	lsls	r2, r3, #23
 801dc7c:	d530      	bpl.n	801dce0 <_scanf_float+0x35c>
 801dc7e:	055b      	lsls	r3, r3, #21
 801dc80:	d511      	bpl.n	801dca6 <_scanf_float+0x322>
 801dc82:	9b01      	ldr	r3, [sp, #4]
 801dc84:	429e      	cmp	r6, r3
 801dc86:	f67f aebf 	bls.w	801da08 <_scanf_float+0x84>
 801dc8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dc8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dc92:	464a      	mov	r2, r9
 801dc94:	4640      	mov	r0, r8
 801dc96:	4798      	blx	r3
 801dc98:	6923      	ldr	r3, [r4, #16]
 801dc9a:	3b01      	subs	r3, #1
 801dc9c:	6123      	str	r3, [r4, #16]
 801dc9e:	e7f0      	b.n	801dc82 <_scanf_float+0x2fe>
 801dca0:	46aa      	mov	sl, r5
 801dca2:	46b3      	mov	fp, r6
 801dca4:	e7de      	b.n	801dc64 <_scanf_float+0x2e0>
 801dca6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801dcaa:	6923      	ldr	r3, [r4, #16]
 801dcac:	2965      	cmp	r1, #101	@ 0x65
 801dcae:	f103 33ff 	add.w	r3, r3, #4294967295
 801dcb2:	f106 35ff 	add.w	r5, r6, #4294967295
 801dcb6:	6123      	str	r3, [r4, #16]
 801dcb8:	d00c      	beq.n	801dcd4 <_scanf_float+0x350>
 801dcba:	2945      	cmp	r1, #69	@ 0x45
 801dcbc:	d00a      	beq.n	801dcd4 <_scanf_float+0x350>
 801dcbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dcc2:	464a      	mov	r2, r9
 801dcc4:	4640      	mov	r0, r8
 801dcc6:	4798      	blx	r3
 801dcc8:	6923      	ldr	r3, [r4, #16]
 801dcca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801dcce:	3b01      	subs	r3, #1
 801dcd0:	1eb5      	subs	r5, r6, #2
 801dcd2:	6123      	str	r3, [r4, #16]
 801dcd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dcd8:	464a      	mov	r2, r9
 801dcda:	4640      	mov	r0, r8
 801dcdc:	4798      	blx	r3
 801dcde:	462e      	mov	r6, r5
 801dce0:	6822      	ldr	r2, [r4, #0]
 801dce2:	f012 0210 	ands.w	r2, r2, #16
 801dce6:	d001      	beq.n	801dcec <_scanf_float+0x368>
 801dce8:	2000      	movs	r0, #0
 801dcea:	e68e      	b.n	801da0a <_scanf_float+0x86>
 801dcec:	7032      	strb	r2, [r6, #0]
 801dcee:	6823      	ldr	r3, [r4, #0]
 801dcf0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801dcf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801dcf8:	d125      	bne.n	801dd46 <_scanf_float+0x3c2>
 801dcfa:	9b02      	ldr	r3, [sp, #8]
 801dcfc:	429f      	cmp	r7, r3
 801dcfe:	d00a      	beq.n	801dd16 <_scanf_float+0x392>
 801dd00:	1bda      	subs	r2, r3, r7
 801dd02:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801dd06:	429e      	cmp	r6, r3
 801dd08:	bf28      	it	cs
 801dd0a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801dd0e:	4922      	ldr	r1, [pc, #136]	@ (801dd98 <_scanf_float+0x414>)
 801dd10:	4630      	mov	r0, r6
 801dd12:	f000 f93d 	bl	801df90 <siprintf>
 801dd16:	9901      	ldr	r1, [sp, #4]
 801dd18:	2200      	movs	r2, #0
 801dd1a:	4640      	mov	r0, r8
 801dd1c:	f7ff f944 	bl	801cfa8 <_strtod_r>
 801dd20:	9b03      	ldr	r3, [sp, #12]
 801dd22:	6821      	ldr	r1, [r4, #0]
 801dd24:	681b      	ldr	r3, [r3, #0]
 801dd26:	f011 0f02 	tst.w	r1, #2
 801dd2a:	ec57 6b10 	vmov	r6, r7, d0
 801dd2e:	f103 0204 	add.w	r2, r3, #4
 801dd32:	d015      	beq.n	801dd60 <_scanf_float+0x3dc>
 801dd34:	9903      	ldr	r1, [sp, #12]
 801dd36:	600a      	str	r2, [r1, #0]
 801dd38:	681b      	ldr	r3, [r3, #0]
 801dd3a:	e9c3 6700 	strd	r6, r7, [r3]
 801dd3e:	68e3      	ldr	r3, [r4, #12]
 801dd40:	3301      	adds	r3, #1
 801dd42:	60e3      	str	r3, [r4, #12]
 801dd44:	e7d0      	b.n	801dce8 <_scanf_float+0x364>
 801dd46:	9b04      	ldr	r3, [sp, #16]
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d0e4      	beq.n	801dd16 <_scanf_float+0x392>
 801dd4c:	9905      	ldr	r1, [sp, #20]
 801dd4e:	230a      	movs	r3, #10
 801dd50:	3101      	adds	r1, #1
 801dd52:	4640      	mov	r0, r8
 801dd54:	f7ff f9b4 	bl	801d0c0 <_strtol_r>
 801dd58:	9b04      	ldr	r3, [sp, #16]
 801dd5a:	9e05      	ldr	r6, [sp, #20]
 801dd5c:	1ac2      	subs	r2, r0, r3
 801dd5e:	e7d0      	b.n	801dd02 <_scanf_float+0x37e>
 801dd60:	f011 0f04 	tst.w	r1, #4
 801dd64:	9903      	ldr	r1, [sp, #12]
 801dd66:	600a      	str	r2, [r1, #0]
 801dd68:	d1e6      	bne.n	801dd38 <_scanf_float+0x3b4>
 801dd6a:	681d      	ldr	r5, [r3, #0]
 801dd6c:	4632      	mov	r2, r6
 801dd6e:	463b      	mov	r3, r7
 801dd70:	4630      	mov	r0, r6
 801dd72:	4639      	mov	r1, r7
 801dd74:	f7e2 feea 	bl	8000b4c <__aeabi_dcmpun>
 801dd78:	b128      	cbz	r0, 801dd86 <_scanf_float+0x402>
 801dd7a:	4808      	ldr	r0, [pc, #32]	@ (801dd9c <_scanf_float+0x418>)
 801dd7c:	f001 fa3c 	bl	801f1f8 <nanf>
 801dd80:	ed85 0a00 	vstr	s0, [r5]
 801dd84:	e7db      	b.n	801dd3e <_scanf_float+0x3ba>
 801dd86:	4630      	mov	r0, r6
 801dd88:	4639      	mov	r1, r7
 801dd8a:	f7e2 ff3d 	bl	8000c08 <__aeabi_d2f>
 801dd8e:	6028      	str	r0, [r5, #0]
 801dd90:	e7d5      	b.n	801dd3e <_scanf_float+0x3ba>
 801dd92:	2700      	movs	r7, #0
 801dd94:	e62e      	b.n	801d9f4 <_scanf_float+0x70>
 801dd96:	bf00      	nop
 801dd98:	08026038 	.word	0x08026038
 801dd9c:	0802613d 	.word	0x0802613d

0801dda0 <std>:
 801dda0:	2300      	movs	r3, #0
 801dda2:	b510      	push	{r4, lr}
 801dda4:	4604      	mov	r4, r0
 801dda6:	e9c0 3300 	strd	r3, r3, [r0]
 801ddaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ddae:	6083      	str	r3, [r0, #8]
 801ddb0:	8181      	strh	r1, [r0, #12]
 801ddb2:	6643      	str	r3, [r0, #100]	@ 0x64
 801ddb4:	81c2      	strh	r2, [r0, #14]
 801ddb6:	6183      	str	r3, [r0, #24]
 801ddb8:	4619      	mov	r1, r3
 801ddba:	2208      	movs	r2, #8
 801ddbc:	305c      	adds	r0, #92	@ 0x5c
 801ddbe:	f000 f97a 	bl	801e0b6 <memset>
 801ddc2:	4b0d      	ldr	r3, [pc, #52]	@ (801ddf8 <std+0x58>)
 801ddc4:	6263      	str	r3, [r4, #36]	@ 0x24
 801ddc6:	4b0d      	ldr	r3, [pc, #52]	@ (801ddfc <std+0x5c>)
 801ddc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ddca:	4b0d      	ldr	r3, [pc, #52]	@ (801de00 <std+0x60>)
 801ddcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ddce:	4b0d      	ldr	r3, [pc, #52]	@ (801de04 <std+0x64>)
 801ddd0:	6323      	str	r3, [r4, #48]	@ 0x30
 801ddd2:	4b0d      	ldr	r3, [pc, #52]	@ (801de08 <std+0x68>)
 801ddd4:	6224      	str	r4, [r4, #32]
 801ddd6:	429c      	cmp	r4, r3
 801ddd8:	d006      	beq.n	801dde8 <std+0x48>
 801ddda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ddde:	4294      	cmp	r4, r2
 801dde0:	d002      	beq.n	801dde8 <std+0x48>
 801dde2:	33d0      	adds	r3, #208	@ 0xd0
 801dde4:	429c      	cmp	r4, r3
 801dde6:	d105      	bne.n	801ddf4 <std+0x54>
 801dde8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ddec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ddf0:	f001 b9dc 	b.w	801f1ac <__retarget_lock_init_recursive>
 801ddf4:	bd10      	pop	{r4, pc}
 801ddf6:	bf00      	nop
 801ddf8:	0801e02d 	.word	0x0801e02d
 801ddfc:	0801e053 	.word	0x0801e053
 801de00:	0801e08b 	.word	0x0801e08b
 801de04:	0801e0af 	.word	0x0801e0af
 801de08:	20006564 	.word	0x20006564

0801de0c <stdio_exit_handler>:
 801de0c:	4a02      	ldr	r2, [pc, #8]	@ (801de18 <stdio_exit_handler+0xc>)
 801de0e:	4903      	ldr	r1, [pc, #12]	@ (801de1c <stdio_exit_handler+0x10>)
 801de10:	4803      	ldr	r0, [pc, #12]	@ (801de20 <stdio_exit_handler+0x14>)
 801de12:	f000 b869 	b.w	801dee8 <_fwalk_sglue>
 801de16:	bf00      	nop
 801de18:	20000040 	.word	0x20000040
 801de1c:	08021bb1 	.word	0x08021bb1
 801de20:	200001c4 	.word	0x200001c4

0801de24 <cleanup_stdio>:
 801de24:	6841      	ldr	r1, [r0, #4]
 801de26:	4b0c      	ldr	r3, [pc, #48]	@ (801de58 <cleanup_stdio+0x34>)
 801de28:	4299      	cmp	r1, r3
 801de2a:	b510      	push	{r4, lr}
 801de2c:	4604      	mov	r4, r0
 801de2e:	d001      	beq.n	801de34 <cleanup_stdio+0x10>
 801de30:	f003 febe 	bl	8021bb0 <_fflush_r>
 801de34:	68a1      	ldr	r1, [r4, #8]
 801de36:	4b09      	ldr	r3, [pc, #36]	@ (801de5c <cleanup_stdio+0x38>)
 801de38:	4299      	cmp	r1, r3
 801de3a:	d002      	beq.n	801de42 <cleanup_stdio+0x1e>
 801de3c:	4620      	mov	r0, r4
 801de3e:	f003 feb7 	bl	8021bb0 <_fflush_r>
 801de42:	68e1      	ldr	r1, [r4, #12]
 801de44:	4b06      	ldr	r3, [pc, #24]	@ (801de60 <cleanup_stdio+0x3c>)
 801de46:	4299      	cmp	r1, r3
 801de48:	d004      	beq.n	801de54 <cleanup_stdio+0x30>
 801de4a:	4620      	mov	r0, r4
 801de4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de50:	f003 beae 	b.w	8021bb0 <_fflush_r>
 801de54:	bd10      	pop	{r4, pc}
 801de56:	bf00      	nop
 801de58:	20006564 	.word	0x20006564
 801de5c:	200065cc 	.word	0x200065cc
 801de60:	20006634 	.word	0x20006634

0801de64 <global_stdio_init.part.0>:
 801de64:	b510      	push	{r4, lr}
 801de66:	4b0b      	ldr	r3, [pc, #44]	@ (801de94 <global_stdio_init.part.0+0x30>)
 801de68:	4c0b      	ldr	r4, [pc, #44]	@ (801de98 <global_stdio_init.part.0+0x34>)
 801de6a:	4a0c      	ldr	r2, [pc, #48]	@ (801de9c <global_stdio_init.part.0+0x38>)
 801de6c:	601a      	str	r2, [r3, #0]
 801de6e:	4620      	mov	r0, r4
 801de70:	2200      	movs	r2, #0
 801de72:	2104      	movs	r1, #4
 801de74:	f7ff ff94 	bl	801dda0 <std>
 801de78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801de7c:	2201      	movs	r2, #1
 801de7e:	2109      	movs	r1, #9
 801de80:	f7ff ff8e 	bl	801dda0 <std>
 801de84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801de88:	2202      	movs	r2, #2
 801de8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de8e:	2112      	movs	r1, #18
 801de90:	f7ff bf86 	b.w	801dda0 <std>
 801de94:	2000669c 	.word	0x2000669c
 801de98:	20006564 	.word	0x20006564
 801de9c:	0801de0d 	.word	0x0801de0d

0801dea0 <__sfp_lock_acquire>:
 801dea0:	4801      	ldr	r0, [pc, #4]	@ (801dea8 <__sfp_lock_acquire+0x8>)
 801dea2:	f001 b985 	b.w	801f1b0 <__retarget_lock_acquire_recursive>
 801dea6:	bf00      	nop
 801dea8:	200066cb 	.word	0x200066cb

0801deac <__sfp_lock_release>:
 801deac:	4801      	ldr	r0, [pc, #4]	@ (801deb4 <__sfp_lock_release+0x8>)
 801deae:	f001 b981 	b.w	801f1b4 <__retarget_lock_release_recursive>
 801deb2:	bf00      	nop
 801deb4:	200066cb 	.word	0x200066cb

0801deb8 <__sinit>:
 801deb8:	b510      	push	{r4, lr}
 801deba:	4604      	mov	r4, r0
 801debc:	f7ff fff0 	bl	801dea0 <__sfp_lock_acquire>
 801dec0:	6a23      	ldr	r3, [r4, #32]
 801dec2:	b11b      	cbz	r3, 801decc <__sinit+0x14>
 801dec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dec8:	f7ff bff0 	b.w	801deac <__sfp_lock_release>
 801decc:	4b04      	ldr	r3, [pc, #16]	@ (801dee0 <__sinit+0x28>)
 801dece:	6223      	str	r3, [r4, #32]
 801ded0:	4b04      	ldr	r3, [pc, #16]	@ (801dee4 <__sinit+0x2c>)
 801ded2:	681b      	ldr	r3, [r3, #0]
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	d1f5      	bne.n	801dec4 <__sinit+0xc>
 801ded8:	f7ff ffc4 	bl	801de64 <global_stdio_init.part.0>
 801dedc:	e7f2      	b.n	801dec4 <__sinit+0xc>
 801dede:	bf00      	nop
 801dee0:	0801de25 	.word	0x0801de25
 801dee4:	2000669c 	.word	0x2000669c

0801dee8 <_fwalk_sglue>:
 801dee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801deec:	4607      	mov	r7, r0
 801deee:	4688      	mov	r8, r1
 801def0:	4614      	mov	r4, r2
 801def2:	2600      	movs	r6, #0
 801def4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801def8:	f1b9 0901 	subs.w	r9, r9, #1
 801defc:	d505      	bpl.n	801df0a <_fwalk_sglue+0x22>
 801defe:	6824      	ldr	r4, [r4, #0]
 801df00:	2c00      	cmp	r4, #0
 801df02:	d1f7      	bne.n	801def4 <_fwalk_sglue+0xc>
 801df04:	4630      	mov	r0, r6
 801df06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df0a:	89ab      	ldrh	r3, [r5, #12]
 801df0c:	2b01      	cmp	r3, #1
 801df0e:	d907      	bls.n	801df20 <_fwalk_sglue+0x38>
 801df10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801df14:	3301      	adds	r3, #1
 801df16:	d003      	beq.n	801df20 <_fwalk_sglue+0x38>
 801df18:	4629      	mov	r1, r5
 801df1a:	4638      	mov	r0, r7
 801df1c:	47c0      	blx	r8
 801df1e:	4306      	orrs	r6, r0
 801df20:	3568      	adds	r5, #104	@ 0x68
 801df22:	e7e9      	b.n	801def8 <_fwalk_sglue+0x10>

0801df24 <sniprintf>:
 801df24:	b40c      	push	{r2, r3}
 801df26:	b530      	push	{r4, r5, lr}
 801df28:	4b18      	ldr	r3, [pc, #96]	@ (801df8c <sniprintf+0x68>)
 801df2a:	1e0c      	subs	r4, r1, #0
 801df2c:	681d      	ldr	r5, [r3, #0]
 801df2e:	b09d      	sub	sp, #116	@ 0x74
 801df30:	da08      	bge.n	801df44 <sniprintf+0x20>
 801df32:	238b      	movs	r3, #139	@ 0x8b
 801df34:	602b      	str	r3, [r5, #0]
 801df36:	f04f 30ff 	mov.w	r0, #4294967295
 801df3a:	b01d      	add	sp, #116	@ 0x74
 801df3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df40:	b002      	add	sp, #8
 801df42:	4770      	bx	lr
 801df44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801df48:	f8ad 3014 	strh.w	r3, [sp, #20]
 801df4c:	f04f 0300 	mov.w	r3, #0
 801df50:	931b      	str	r3, [sp, #108]	@ 0x6c
 801df52:	bf14      	ite	ne
 801df54:	f104 33ff 	addne.w	r3, r4, #4294967295
 801df58:	4623      	moveq	r3, r4
 801df5a:	9304      	str	r3, [sp, #16]
 801df5c:	9307      	str	r3, [sp, #28]
 801df5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801df62:	9002      	str	r0, [sp, #8]
 801df64:	9006      	str	r0, [sp, #24]
 801df66:	f8ad 3016 	strh.w	r3, [sp, #22]
 801df6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801df6c:	ab21      	add	r3, sp, #132	@ 0x84
 801df6e:	a902      	add	r1, sp, #8
 801df70:	4628      	mov	r0, r5
 801df72:	9301      	str	r3, [sp, #4]
 801df74:	f003 f97e 	bl	8021274 <_svfiprintf_r>
 801df78:	1c43      	adds	r3, r0, #1
 801df7a:	bfbc      	itt	lt
 801df7c:	238b      	movlt	r3, #139	@ 0x8b
 801df7e:	602b      	strlt	r3, [r5, #0]
 801df80:	2c00      	cmp	r4, #0
 801df82:	d0da      	beq.n	801df3a <sniprintf+0x16>
 801df84:	9b02      	ldr	r3, [sp, #8]
 801df86:	2200      	movs	r2, #0
 801df88:	701a      	strb	r2, [r3, #0]
 801df8a:	e7d6      	b.n	801df3a <sniprintf+0x16>
 801df8c:	200001c0 	.word	0x200001c0

0801df90 <siprintf>:
 801df90:	b40e      	push	{r1, r2, r3}
 801df92:	b510      	push	{r4, lr}
 801df94:	b09d      	sub	sp, #116	@ 0x74
 801df96:	ab1f      	add	r3, sp, #124	@ 0x7c
 801df98:	9002      	str	r0, [sp, #8]
 801df9a:	9006      	str	r0, [sp, #24]
 801df9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801dfa0:	480a      	ldr	r0, [pc, #40]	@ (801dfcc <siprintf+0x3c>)
 801dfa2:	9107      	str	r1, [sp, #28]
 801dfa4:	9104      	str	r1, [sp, #16]
 801dfa6:	490a      	ldr	r1, [pc, #40]	@ (801dfd0 <siprintf+0x40>)
 801dfa8:	f853 2b04 	ldr.w	r2, [r3], #4
 801dfac:	9105      	str	r1, [sp, #20]
 801dfae:	2400      	movs	r4, #0
 801dfb0:	a902      	add	r1, sp, #8
 801dfb2:	6800      	ldr	r0, [r0, #0]
 801dfb4:	9301      	str	r3, [sp, #4]
 801dfb6:	941b      	str	r4, [sp, #108]	@ 0x6c
 801dfb8:	f003 f95c 	bl	8021274 <_svfiprintf_r>
 801dfbc:	9b02      	ldr	r3, [sp, #8]
 801dfbe:	701c      	strb	r4, [r3, #0]
 801dfc0:	b01d      	add	sp, #116	@ 0x74
 801dfc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dfc6:	b003      	add	sp, #12
 801dfc8:	4770      	bx	lr
 801dfca:	bf00      	nop
 801dfcc:	200001c0 	.word	0x200001c0
 801dfd0:	ffff0208 	.word	0xffff0208

0801dfd4 <siscanf>:
 801dfd4:	b40e      	push	{r1, r2, r3}
 801dfd6:	b570      	push	{r4, r5, r6, lr}
 801dfd8:	b09d      	sub	sp, #116	@ 0x74
 801dfda:	ac21      	add	r4, sp, #132	@ 0x84
 801dfdc:	2500      	movs	r5, #0
 801dfde:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801dfe2:	f854 6b04 	ldr.w	r6, [r4], #4
 801dfe6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801dfea:	951b      	str	r5, [sp, #108]	@ 0x6c
 801dfec:	9002      	str	r0, [sp, #8]
 801dfee:	9006      	str	r0, [sp, #24]
 801dff0:	f7e2 f94e 	bl	8000290 <strlen>
 801dff4:	4b0b      	ldr	r3, [pc, #44]	@ (801e024 <siscanf+0x50>)
 801dff6:	9003      	str	r0, [sp, #12]
 801dff8:	9007      	str	r0, [sp, #28]
 801dffa:	480b      	ldr	r0, [pc, #44]	@ (801e028 <siscanf+0x54>)
 801dffc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e002:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e006:	4632      	mov	r2, r6
 801e008:	4623      	mov	r3, r4
 801e00a:	a902      	add	r1, sp, #8
 801e00c:	6800      	ldr	r0, [r0, #0]
 801e00e:	950f      	str	r5, [sp, #60]	@ 0x3c
 801e010:	9514      	str	r5, [sp, #80]	@ 0x50
 801e012:	9401      	str	r4, [sp, #4]
 801e014:	f003 fa84 	bl	8021520 <__ssvfiscanf_r>
 801e018:	b01d      	add	sp, #116	@ 0x74
 801e01a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e01e:	b003      	add	sp, #12
 801e020:	4770      	bx	lr
 801e022:	bf00      	nop
 801e024:	0801e04f 	.word	0x0801e04f
 801e028:	200001c0 	.word	0x200001c0

0801e02c <__sread>:
 801e02c:	b510      	push	{r4, lr}
 801e02e:	460c      	mov	r4, r1
 801e030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e034:	f001 f85c 	bl	801f0f0 <_read_r>
 801e038:	2800      	cmp	r0, #0
 801e03a:	bfab      	itete	ge
 801e03c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e03e:	89a3      	ldrhlt	r3, [r4, #12]
 801e040:	181b      	addge	r3, r3, r0
 801e042:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e046:	bfac      	ite	ge
 801e048:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e04a:	81a3      	strhlt	r3, [r4, #12]
 801e04c:	bd10      	pop	{r4, pc}

0801e04e <__seofread>:
 801e04e:	2000      	movs	r0, #0
 801e050:	4770      	bx	lr

0801e052 <__swrite>:
 801e052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e056:	461f      	mov	r7, r3
 801e058:	898b      	ldrh	r3, [r1, #12]
 801e05a:	05db      	lsls	r3, r3, #23
 801e05c:	4605      	mov	r5, r0
 801e05e:	460c      	mov	r4, r1
 801e060:	4616      	mov	r6, r2
 801e062:	d505      	bpl.n	801e070 <__swrite+0x1e>
 801e064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e068:	2302      	movs	r3, #2
 801e06a:	2200      	movs	r2, #0
 801e06c:	f001 f82e 	bl	801f0cc <_lseek_r>
 801e070:	89a3      	ldrh	r3, [r4, #12]
 801e072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e07a:	81a3      	strh	r3, [r4, #12]
 801e07c:	4632      	mov	r2, r6
 801e07e:	463b      	mov	r3, r7
 801e080:	4628      	mov	r0, r5
 801e082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e086:	f001 b855 	b.w	801f134 <_write_r>

0801e08a <__sseek>:
 801e08a:	b510      	push	{r4, lr}
 801e08c:	460c      	mov	r4, r1
 801e08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e092:	f001 f81b 	bl	801f0cc <_lseek_r>
 801e096:	1c43      	adds	r3, r0, #1
 801e098:	89a3      	ldrh	r3, [r4, #12]
 801e09a:	bf15      	itete	ne
 801e09c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e09e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e0a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e0a6:	81a3      	strheq	r3, [r4, #12]
 801e0a8:	bf18      	it	ne
 801e0aa:	81a3      	strhne	r3, [r4, #12]
 801e0ac:	bd10      	pop	{r4, pc}

0801e0ae <__sclose>:
 801e0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0b2:	f000 bf8b 	b.w	801efcc <_close_r>

0801e0b6 <memset>:
 801e0b6:	4402      	add	r2, r0
 801e0b8:	4603      	mov	r3, r0
 801e0ba:	4293      	cmp	r3, r2
 801e0bc:	d100      	bne.n	801e0c0 <memset+0xa>
 801e0be:	4770      	bx	lr
 801e0c0:	f803 1b01 	strb.w	r1, [r3], #1
 801e0c4:	e7f9      	b.n	801e0ba <memset+0x4>

0801e0c6 <strchr>:
 801e0c6:	b2c9      	uxtb	r1, r1
 801e0c8:	4603      	mov	r3, r0
 801e0ca:	4618      	mov	r0, r3
 801e0cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e0d0:	b112      	cbz	r2, 801e0d8 <strchr+0x12>
 801e0d2:	428a      	cmp	r2, r1
 801e0d4:	d1f9      	bne.n	801e0ca <strchr+0x4>
 801e0d6:	4770      	bx	lr
 801e0d8:	2900      	cmp	r1, #0
 801e0da:	bf18      	it	ne
 801e0dc:	2000      	movne	r0, #0
 801e0de:	4770      	bx	lr

0801e0e0 <strncmp>:
 801e0e0:	b510      	push	{r4, lr}
 801e0e2:	b16a      	cbz	r2, 801e100 <strncmp+0x20>
 801e0e4:	3901      	subs	r1, #1
 801e0e6:	1884      	adds	r4, r0, r2
 801e0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e0ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e0f0:	429a      	cmp	r2, r3
 801e0f2:	d103      	bne.n	801e0fc <strncmp+0x1c>
 801e0f4:	42a0      	cmp	r0, r4
 801e0f6:	d001      	beq.n	801e0fc <strncmp+0x1c>
 801e0f8:	2a00      	cmp	r2, #0
 801e0fa:	d1f5      	bne.n	801e0e8 <strncmp+0x8>
 801e0fc:	1ad0      	subs	r0, r2, r3
 801e0fe:	bd10      	pop	{r4, pc}
 801e100:	4610      	mov	r0, r2
 801e102:	e7fc      	b.n	801e0fe <strncmp+0x1e>

0801e104 <strncpy>:
 801e104:	b510      	push	{r4, lr}
 801e106:	3901      	subs	r1, #1
 801e108:	4603      	mov	r3, r0
 801e10a:	b132      	cbz	r2, 801e11a <strncpy+0x16>
 801e10c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e110:	f803 4b01 	strb.w	r4, [r3], #1
 801e114:	3a01      	subs	r2, #1
 801e116:	2c00      	cmp	r4, #0
 801e118:	d1f7      	bne.n	801e10a <strncpy+0x6>
 801e11a:	441a      	add	r2, r3
 801e11c:	2100      	movs	r1, #0
 801e11e:	4293      	cmp	r3, r2
 801e120:	d100      	bne.n	801e124 <strncpy+0x20>
 801e122:	bd10      	pop	{r4, pc}
 801e124:	f803 1b01 	strb.w	r1, [r3], #1
 801e128:	e7f9      	b.n	801e11e <strncpy+0x1a>

0801e12a <difftime>:
 801e12a:	1a80      	subs	r0, r0, r2
 801e12c:	b508      	push	{r3, lr}
 801e12e:	eb61 0103 	sbc.w	r1, r1, r3
 801e132:	f7e2 fa43 	bl	80005bc <__aeabi_l2d>
 801e136:	ec41 0b10 	vmov	d0, r0, r1
 801e13a:	bd08      	pop	{r3, pc}

0801e13c <gmtime>:
 801e13c:	b538      	push	{r3, r4, r5, lr}
 801e13e:	4b0b      	ldr	r3, [pc, #44]	@ (801e16c <gmtime+0x30>)
 801e140:	681d      	ldr	r5, [r3, #0]
 801e142:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801e144:	4604      	mov	r4, r0
 801e146:	b953      	cbnz	r3, 801e15e <gmtime+0x22>
 801e148:	2024      	movs	r0, #36	@ 0x24
 801e14a:	f7fe f86b 	bl	801c224 <malloc>
 801e14e:	4602      	mov	r2, r0
 801e150:	6368      	str	r0, [r5, #52]	@ 0x34
 801e152:	b920      	cbnz	r0, 801e15e <gmtime+0x22>
 801e154:	4b06      	ldr	r3, [pc, #24]	@ (801e170 <gmtime+0x34>)
 801e156:	4807      	ldr	r0, [pc, #28]	@ (801e174 <gmtime+0x38>)
 801e158:	213d      	movs	r1, #61	@ 0x3d
 801e15a:	f001 f8a5 	bl	801f2a8 <__assert_func>
 801e15e:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801e160:	4620      	mov	r0, r4
 801e162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e166:	f000 b807 	b.w	801e178 <gmtime_r>
 801e16a:	bf00      	nop
 801e16c:	200001c0 	.word	0x200001c0
 801e170:	0802603d 	.word	0x0802603d
 801e174:	08026054 	.word	0x08026054

0801e178 <gmtime_r>:
 801e178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e17c:	4a4d      	ldr	r2, [pc, #308]	@ (801e2b4 <gmtime_r+0x13c>)
 801e17e:	460c      	mov	r4, r1
 801e180:	2300      	movs	r3, #0
 801e182:	e9d0 0100 	ldrd	r0, r1, [r0]
 801e186:	f7e2 fd8f 	bl	8000ca8 <__aeabi_ldivmod>
 801e18a:	2a00      	cmp	r2, #0
 801e18c:	bfbc      	itt	lt
 801e18e:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 801e192:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 801e196:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801e19a:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 801e19e:	fbb2 f3f1 	udiv	r3, r2, r1
 801e1a2:	fb01 2213 	mls	r2, r1, r3, r2
 801e1a6:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 801e1aa:	bfac      	ite	ge
 801e1ac:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 801e1b0:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 801e1b4:	60a3      	str	r3, [r4, #8]
 801e1b6:	fbb2 f3f1 	udiv	r3, r2, r1
 801e1ba:	fb01 2213 	mls	r2, r1, r3, r2
 801e1be:	6063      	str	r3, [r4, #4]
 801e1c0:	6022      	str	r2, [r4, #0]
 801e1c2:	1cc3      	adds	r3, r0, #3
 801e1c4:	2207      	movs	r2, #7
 801e1c6:	fb93 f2f2 	sdiv	r2, r3, r2
 801e1ca:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801e1ce:	1a9b      	subs	r3, r3, r2
 801e1d0:	4939      	ldr	r1, [pc, #228]	@ (801e2b8 <gmtime_r+0x140>)
 801e1d2:	d555      	bpl.n	801e280 <gmtime_r+0x108>
 801e1d4:	3307      	adds	r3, #7
 801e1d6:	61a3      	str	r3, [r4, #24]
 801e1d8:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 801e1dc:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 801e1e0:	fb93 f1f1 	sdiv	r1, r3, r1
 801e1e4:	4b35      	ldr	r3, [pc, #212]	@ (801e2bc <gmtime_r+0x144>)
 801e1e6:	fb03 0001 	mla	r0, r3, r1, r0
 801e1ea:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 801e1ee:	fbb0 f3f3 	udiv	r3, r0, r3
 801e1f2:	4403      	add	r3, r0
 801e1f4:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 801e1f8:	fbb0 f2fc 	udiv	r2, r0, ip
 801e1fc:	1a9b      	subs	r3, r3, r2
 801e1fe:	f240 176d 	movw	r7, #365	@ 0x16d
 801e202:	4a2f      	ldr	r2, [pc, #188]	@ (801e2c0 <gmtime_r+0x148>)
 801e204:	fbb0 f2f2 	udiv	r2, r0, r2
 801e208:	2664      	movs	r6, #100	@ 0x64
 801e20a:	1a9b      	subs	r3, r3, r2
 801e20c:	fbb3 f2f7 	udiv	r2, r3, r7
 801e210:	fbb3 f3fc 	udiv	r3, r3, ip
 801e214:	fbb2 f5f6 	udiv	r5, r2, r6
 801e218:	1aeb      	subs	r3, r5, r3
 801e21a:	4403      	add	r3, r0
 801e21c:	fb07 3312 	mls	r3, r7, r2, r3
 801e220:	2099      	movs	r0, #153	@ 0x99
 801e222:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 801e226:	3702      	adds	r7, #2
 801e228:	f103 0e01 	add.w	lr, r3, #1
 801e22c:	fbb7 fcf0 	udiv	ip, r7, r0
 801e230:	fb00 f00c 	mul.w	r0, r0, ip
 801e234:	3002      	adds	r0, #2
 801e236:	f04f 0805 	mov.w	r8, #5
 801e23a:	fbb0 f0f8 	udiv	r0, r0, r8
 801e23e:	ebae 0000 	sub.w	r0, lr, r0
 801e242:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 801e246:	4577      	cmp	r7, lr
 801e248:	bf8c      	ite	hi
 801e24a:	f06f 0709 	mvnhi.w	r7, #9
 801e24e:	2702      	movls	r7, #2
 801e250:	4467      	add	r7, ip
 801e252:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 801e256:	fb0c 2101 	mla	r1, ip, r1, r2
 801e25a:	2f01      	cmp	r7, #1
 801e25c:	bf98      	it	ls
 801e25e:	3101      	addls	r1, #1
 801e260:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 801e264:	d312      	bcc.n	801e28c <gmtime_r+0x114>
 801e266:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801e26a:	61e3      	str	r3, [r4, #28]
 801e26c:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 801e270:	2300      	movs	r3, #0
 801e272:	60e0      	str	r0, [r4, #12]
 801e274:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801e278:	6223      	str	r3, [r4, #32]
 801e27a:	4620      	mov	r0, r4
 801e27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e280:	2800      	cmp	r0, #0
 801e282:	61a3      	str	r3, [r4, #24]
 801e284:	dba8      	blt.n	801e1d8 <gmtime_r+0x60>
 801e286:	fb90 f1f1 	sdiv	r1, r0, r1
 801e28a:	e7ab      	b.n	801e1e4 <gmtime_r+0x6c>
 801e28c:	f012 0f03 	tst.w	r2, #3
 801e290:	d102      	bne.n	801e298 <gmtime_r+0x120>
 801e292:	fb06 2515 	mls	r5, r6, r5, r2
 801e296:	b95d      	cbnz	r5, 801e2b0 <gmtime_r+0x138>
 801e298:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 801e29c:	fbb2 f6f5 	udiv	r6, r2, r5
 801e2a0:	fb05 2216 	mls	r2, r5, r6, r2
 801e2a4:	fab2 f282 	clz	r2, r2
 801e2a8:	0952      	lsrs	r2, r2, #5
 801e2aa:	333b      	adds	r3, #59	@ 0x3b
 801e2ac:	4413      	add	r3, r2
 801e2ae:	e7dc      	b.n	801e26a <gmtime_r+0xf2>
 801e2b0:	2201      	movs	r2, #1
 801e2b2:	e7fa      	b.n	801e2aa <gmtime_r+0x132>
 801e2b4:	00015180 	.word	0x00015180
 801e2b8:	00023ab1 	.word	0x00023ab1
 801e2bc:	fffdc54f 	.word	0xfffdc54f
 801e2c0:	00023ab0 	.word	0x00023ab0

0801e2c4 <localtime_r>:
 801e2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2c8:	460c      	mov	r4, r1
 801e2ca:	4607      	mov	r7, r0
 801e2cc:	f003 fd38 	bl	8021d40 <__gettzinfo>
 801e2d0:	4621      	mov	r1, r4
 801e2d2:	4605      	mov	r5, r0
 801e2d4:	4638      	mov	r0, r7
 801e2d6:	f7ff ff4f 	bl	801e178 <gmtime_r>
 801e2da:	6943      	ldr	r3, [r0, #20]
 801e2dc:	0799      	lsls	r1, r3, #30
 801e2de:	4604      	mov	r4, r0
 801e2e0:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 801e2e4:	d106      	bne.n	801e2f4 <localtime_r+0x30>
 801e2e6:	2264      	movs	r2, #100	@ 0x64
 801e2e8:	fb98 f3f2 	sdiv	r3, r8, r2
 801e2ec:	fb02 8313 	mls	r3, r2, r3, r8
 801e2f0:	2b00      	cmp	r3, #0
 801e2f2:	d171      	bne.n	801e3d8 <localtime_r+0x114>
 801e2f4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801e2f8:	fb98 f3f2 	sdiv	r3, r8, r2
 801e2fc:	fb02 8313 	mls	r3, r2, r3, r8
 801e300:	fab3 f383 	clz	r3, r3
 801e304:	095b      	lsrs	r3, r3, #5
 801e306:	425e      	negs	r6, r3
 801e308:	4b64      	ldr	r3, [pc, #400]	@ (801e49c <localtime_r+0x1d8>)
 801e30a:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 801e30e:	441e      	add	r6, r3
 801e310:	f000 fc24 	bl	801eb5c <__tz_lock>
 801e314:	f000 fc2e 	bl	801eb74 <_tzset_unlocked>
 801e318:	4b61      	ldr	r3, [pc, #388]	@ (801e4a0 <localtime_r+0x1dc>)
 801e31a:	681b      	ldr	r3, [r3, #0]
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d06a      	beq.n	801e3f6 <localtime_r+0x132>
 801e320:	686b      	ldr	r3, [r5, #4]
 801e322:	4543      	cmp	r3, r8
 801e324:	d15a      	bne.n	801e3dc <localtime_r+0x118>
 801e326:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e32a:	682f      	ldr	r7, [r5, #0]
 801e32c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801e330:	2f00      	cmp	r7, #0
 801e332:	d15b      	bne.n	801e3ec <localtime_r+0x128>
 801e334:	4282      	cmp	r2, r0
 801e336:	eb73 0101 	sbcs.w	r1, r3, r1
 801e33a:	db5e      	blt.n	801e3fa <localtime_r+0x136>
 801e33c:	2301      	movs	r3, #1
 801e33e:	6223      	str	r3, [r4, #32]
 801e340:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801e342:	6861      	ldr	r1, [r4, #4]
 801e344:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801e348:	fb93 f0f2 	sdiv	r0, r3, r2
 801e34c:	fb02 3310 	mls	r3, r2, r0, r3
 801e350:	223c      	movs	r2, #60	@ 0x3c
 801e352:	fb93 f5f2 	sdiv	r5, r3, r2
 801e356:	fb02 3215 	mls	r2, r2, r5, r3
 801e35a:	6823      	ldr	r3, [r4, #0]
 801e35c:	1a9b      	subs	r3, r3, r2
 801e35e:	68a2      	ldr	r2, [r4, #8]
 801e360:	6023      	str	r3, [r4, #0]
 801e362:	1b49      	subs	r1, r1, r5
 801e364:	1a12      	subs	r2, r2, r0
 801e366:	2b3b      	cmp	r3, #59	@ 0x3b
 801e368:	6061      	str	r1, [r4, #4]
 801e36a:	60a2      	str	r2, [r4, #8]
 801e36c:	dd51      	ble.n	801e412 <localtime_r+0x14e>
 801e36e:	3101      	adds	r1, #1
 801e370:	6061      	str	r1, [r4, #4]
 801e372:	3b3c      	subs	r3, #60	@ 0x3c
 801e374:	6023      	str	r3, [r4, #0]
 801e376:	6863      	ldr	r3, [r4, #4]
 801e378:	2b3b      	cmp	r3, #59	@ 0x3b
 801e37a:	dd50      	ble.n	801e41e <localtime_r+0x15a>
 801e37c:	3201      	adds	r2, #1
 801e37e:	60a2      	str	r2, [r4, #8]
 801e380:	3b3c      	subs	r3, #60	@ 0x3c
 801e382:	6063      	str	r3, [r4, #4]
 801e384:	68a3      	ldr	r3, [r4, #8]
 801e386:	2b17      	cmp	r3, #23
 801e388:	dd4f      	ble.n	801e42a <localtime_r+0x166>
 801e38a:	69e2      	ldr	r2, [r4, #28]
 801e38c:	3201      	adds	r2, #1
 801e38e:	61e2      	str	r2, [r4, #28]
 801e390:	69a2      	ldr	r2, [r4, #24]
 801e392:	3201      	adds	r2, #1
 801e394:	2a07      	cmp	r2, #7
 801e396:	bfa8      	it	ge
 801e398:	2200      	movge	r2, #0
 801e39a:	61a2      	str	r2, [r4, #24]
 801e39c:	68e2      	ldr	r2, [r4, #12]
 801e39e:	3b18      	subs	r3, #24
 801e3a0:	3201      	adds	r2, #1
 801e3a2:	60a3      	str	r3, [r4, #8]
 801e3a4:	6923      	ldr	r3, [r4, #16]
 801e3a6:	60e2      	str	r2, [r4, #12]
 801e3a8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801e3ac:	428a      	cmp	r2, r1
 801e3ae:	dd0e      	ble.n	801e3ce <localtime_r+0x10a>
 801e3b0:	2b0b      	cmp	r3, #11
 801e3b2:	eba2 0201 	sub.w	r2, r2, r1
 801e3b6:	60e2      	str	r2, [r4, #12]
 801e3b8:	f103 0201 	add.w	r2, r3, #1
 801e3bc:	bf09      	itett	eq
 801e3be:	6963      	ldreq	r3, [r4, #20]
 801e3c0:	6122      	strne	r2, [r4, #16]
 801e3c2:	2200      	moveq	r2, #0
 801e3c4:	3301      	addeq	r3, #1
 801e3c6:	bf02      	ittt	eq
 801e3c8:	6122      	streq	r2, [r4, #16]
 801e3ca:	6163      	streq	r3, [r4, #20]
 801e3cc:	61e2      	streq	r2, [r4, #28]
 801e3ce:	f000 fbcb 	bl	801eb68 <__tz_unlock>
 801e3d2:	4620      	mov	r0, r4
 801e3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e3d8:	2301      	movs	r3, #1
 801e3da:	e794      	b.n	801e306 <localtime_r+0x42>
 801e3dc:	4640      	mov	r0, r8
 801e3de:	f000 fb09 	bl	801e9f4 <__tzcalc_limits>
 801e3e2:	2800      	cmp	r0, #0
 801e3e4:	d19f      	bne.n	801e326 <localtime_r+0x62>
 801e3e6:	f04f 33ff 	mov.w	r3, #4294967295
 801e3ea:	e004      	b.n	801e3f6 <localtime_r+0x132>
 801e3ec:	4282      	cmp	r2, r0
 801e3ee:	eb73 0101 	sbcs.w	r1, r3, r1
 801e3f2:	da02      	bge.n	801e3fa <localtime_r+0x136>
 801e3f4:	2300      	movs	r3, #0
 801e3f6:	6223      	str	r3, [r4, #32]
 801e3f8:	e009      	b.n	801e40e <localtime_r+0x14a>
 801e3fa:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 801e3fe:	4282      	cmp	r2, r0
 801e400:	418b      	sbcs	r3, r1
 801e402:	bfb4      	ite	lt
 801e404:	2301      	movlt	r3, #1
 801e406:	2300      	movge	r3, #0
 801e408:	6223      	str	r3, [r4, #32]
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	d198      	bne.n	801e340 <localtime_r+0x7c>
 801e40e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801e410:	e797      	b.n	801e342 <localtime_r+0x7e>
 801e412:	2b00      	cmp	r3, #0
 801e414:	daaf      	bge.n	801e376 <localtime_r+0xb2>
 801e416:	3901      	subs	r1, #1
 801e418:	6061      	str	r1, [r4, #4]
 801e41a:	333c      	adds	r3, #60	@ 0x3c
 801e41c:	e7aa      	b.n	801e374 <localtime_r+0xb0>
 801e41e:	2b00      	cmp	r3, #0
 801e420:	dab0      	bge.n	801e384 <localtime_r+0xc0>
 801e422:	3a01      	subs	r2, #1
 801e424:	60a2      	str	r2, [r4, #8]
 801e426:	333c      	adds	r3, #60	@ 0x3c
 801e428:	e7ab      	b.n	801e382 <localtime_r+0xbe>
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	dacf      	bge.n	801e3ce <localtime_r+0x10a>
 801e42e:	69e2      	ldr	r2, [r4, #28]
 801e430:	3a01      	subs	r2, #1
 801e432:	61e2      	str	r2, [r4, #28]
 801e434:	69a2      	ldr	r2, [r4, #24]
 801e436:	3a01      	subs	r2, #1
 801e438:	bf48      	it	mi
 801e43a:	2206      	movmi	r2, #6
 801e43c:	61a2      	str	r2, [r4, #24]
 801e43e:	68e2      	ldr	r2, [r4, #12]
 801e440:	3318      	adds	r3, #24
 801e442:	3a01      	subs	r2, #1
 801e444:	60e2      	str	r2, [r4, #12]
 801e446:	60a3      	str	r3, [r4, #8]
 801e448:	2a00      	cmp	r2, #0
 801e44a:	d1c0      	bne.n	801e3ce <localtime_r+0x10a>
 801e44c:	6923      	ldr	r3, [r4, #16]
 801e44e:	3b01      	subs	r3, #1
 801e450:	d405      	bmi.n	801e45e <localtime_r+0x19a>
 801e452:	6123      	str	r3, [r4, #16]
 801e454:	6923      	ldr	r3, [r4, #16]
 801e456:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e45a:	60e3      	str	r3, [r4, #12]
 801e45c:	e7b7      	b.n	801e3ce <localtime_r+0x10a>
 801e45e:	230b      	movs	r3, #11
 801e460:	6123      	str	r3, [r4, #16]
 801e462:	6963      	ldr	r3, [r4, #20]
 801e464:	1e5a      	subs	r2, r3, #1
 801e466:	6162      	str	r2, [r4, #20]
 801e468:	0792      	lsls	r2, r2, #30
 801e46a:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 801e46e:	d105      	bne.n	801e47c <localtime_r+0x1b8>
 801e470:	2164      	movs	r1, #100	@ 0x64
 801e472:	fb93 f2f1 	sdiv	r2, r3, r1
 801e476:	fb01 3212 	mls	r2, r1, r2, r3
 801e47a:	b962      	cbnz	r2, 801e496 <localtime_r+0x1d2>
 801e47c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801e480:	fb93 f1f2 	sdiv	r1, r3, r2
 801e484:	fb02 3311 	mls	r3, r2, r1, r3
 801e488:	fab3 f383 	clz	r3, r3
 801e48c:	095b      	lsrs	r3, r3, #5
 801e48e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 801e492:	61e3      	str	r3, [r4, #28]
 801e494:	e7de      	b.n	801e454 <localtime_r+0x190>
 801e496:	2301      	movs	r3, #1
 801e498:	e7f9      	b.n	801e48e <localtime_r+0x1ca>
 801e49a:	bf00      	nop
 801e49c:	08026454 	.word	0x08026454
 801e4a0:	200066c0 	.word	0x200066c0

0801e4a4 <validate_structure>:
 801e4a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e4a6:	6801      	ldr	r1, [r0, #0]
 801e4a8:	293b      	cmp	r1, #59	@ 0x3b
 801e4aa:	4604      	mov	r4, r0
 801e4ac:	d911      	bls.n	801e4d2 <validate_structure+0x2e>
 801e4ae:	223c      	movs	r2, #60	@ 0x3c
 801e4b0:	4668      	mov	r0, sp
 801e4b2:	f000 ff17 	bl	801f2e4 <div>
 801e4b6:	9a01      	ldr	r2, [sp, #4]
 801e4b8:	6863      	ldr	r3, [r4, #4]
 801e4ba:	9900      	ldr	r1, [sp, #0]
 801e4bc:	2a00      	cmp	r2, #0
 801e4be:	440b      	add	r3, r1
 801e4c0:	6063      	str	r3, [r4, #4]
 801e4c2:	bfbb      	ittet	lt
 801e4c4:	323c      	addlt	r2, #60	@ 0x3c
 801e4c6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801e4ca:	6022      	strge	r2, [r4, #0]
 801e4cc:	6022      	strlt	r2, [r4, #0]
 801e4ce:	bfb8      	it	lt
 801e4d0:	6063      	strlt	r3, [r4, #4]
 801e4d2:	6861      	ldr	r1, [r4, #4]
 801e4d4:	293b      	cmp	r1, #59	@ 0x3b
 801e4d6:	d911      	bls.n	801e4fc <validate_structure+0x58>
 801e4d8:	223c      	movs	r2, #60	@ 0x3c
 801e4da:	4668      	mov	r0, sp
 801e4dc:	f000 ff02 	bl	801f2e4 <div>
 801e4e0:	9a01      	ldr	r2, [sp, #4]
 801e4e2:	68a3      	ldr	r3, [r4, #8]
 801e4e4:	9900      	ldr	r1, [sp, #0]
 801e4e6:	2a00      	cmp	r2, #0
 801e4e8:	440b      	add	r3, r1
 801e4ea:	60a3      	str	r3, [r4, #8]
 801e4ec:	bfbb      	ittet	lt
 801e4ee:	323c      	addlt	r2, #60	@ 0x3c
 801e4f0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801e4f4:	6062      	strge	r2, [r4, #4]
 801e4f6:	6062      	strlt	r2, [r4, #4]
 801e4f8:	bfb8      	it	lt
 801e4fa:	60a3      	strlt	r3, [r4, #8]
 801e4fc:	68a1      	ldr	r1, [r4, #8]
 801e4fe:	2917      	cmp	r1, #23
 801e500:	d911      	bls.n	801e526 <validate_structure+0x82>
 801e502:	2218      	movs	r2, #24
 801e504:	4668      	mov	r0, sp
 801e506:	f000 feed 	bl	801f2e4 <div>
 801e50a:	9a01      	ldr	r2, [sp, #4]
 801e50c:	68e3      	ldr	r3, [r4, #12]
 801e50e:	9900      	ldr	r1, [sp, #0]
 801e510:	2a00      	cmp	r2, #0
 801e512:	440b      	add	r3, r1
 801e514:	60e3      	str	r3, [r4, #12]
 801e516:	bfbb      	ittet	lt
 801e518:	3218      	addlt	r2, #24
 801e51a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801e51e:	60a2      	strge	r2, [r4, #8]
 801e520:	60a2      	strlt	r2, [r4, #8]
 801e522:	bfb8      	it	lt
 801e524:	60e3      	strlt	r3, [r4, #12]
 801e526:	6921      	ldr	r1, [r4, #16]
 801e528:	290b      	cmp	r1, #11
 801e52a:	d911      	bls.n	801e550 <validate_structure+0xac>
 801e52c:	220c      	movs	r2, #12
 801e52e:	4668      	mov	r0, sp
 801e530:	f000 fed8 	bl	801f2e4 <div>
 801e534:	9a01      	ldr	r2, [sp, #4]
 801e536:	6963      	ldr	r3, [r4, #20]
 801e538:	9900      	ldr	r1, [sp, #0]
 801e53a:	2a00      	cmp	r2, #0
 801e53c:	440b      	add	r3, r1
 801e53e:	6163      	str	r3, [r4, #20]
 801e540:	bfbb      	ittet	lt
 801e542:	320c      	addlt	r2, #12
 801e544:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801e548:	6122      	strge	r2, [r4, #16]
 801e54a:	6122      	strlt	r2, [r4, #16]
 801e54c:	bfb8      	it	lt
 801e54e:	6163      	strlt	r3, [r4, #20]
 801e550:	6963      	ldr	r3, [r4, #20]
 801e552:	079a      	lsls	r2, r3, #30
 801e554:	d11c      	bne.n	801e590 <validate_structure+0xec>
 801e556:	2164      	movs	r1, #100	@ 0x64
 801e558:	fb93 f2f1 	sdiv	r2, r3, r1
 801e55c:	fb01 3212 	mls	r2, r1, r2, r3
 801e560:	b9c2      	cbnz	r2, 801e594 <validate_structure+0xf0>
 801e562:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 801e566:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801e56a:	fb93 f1f2 	sdiv	r1, r3, r2
 801e56e:	fb02 3311 	mls	r3, r2, r1, r3
 801e572:	2b00      	cmp	r3, #0
 801e574:	bf0c      	ite	eq
 801e576:	231d      	moveq	r3, #29
 801e578:	231c      	movne	r3, #28
 801e57a:	68e2      	ldr	r2, [r4, #12]
 801e57c:	2a00      	cmp	r2, #0
 801e57e:	dc0b      	bgt.n	801e598 <validate_structure+0xf4>
 801e580:	4d31      	ldr	r5, [pc, #196]	@ (801e648 <validate_structure+0x1a4>)
 801e582:	200b      	movs	r0, #11
 801e584:	2164      	movs	r1, #100	@ 0x64
 801e586:	68e6      	ldr	r6, [r4, #12]
 801e588:	2e00      	cmp	r6, #0
 801e58a:	dd30      	ble.n	801e5ee <validate_structure+0x14a>
 801e58c:	b003      	add	sp, #12
 801e58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e590:	231c      	movs	r3, #28
 801e592:	e7f2      	b.n	801e57a <validate_structure+0xd6>
 801e594:	231d      	movs	r3, #29
 801e596:	e7f0      	b.n	801e57a <validate_structure+0xd6>
 801e598:	4d2b      	ldr	r5, [pc, #172]	@ (801e648 <validate_structure+0x1a4>)
 801e59a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801e59e:	2a01      	cmp	r2, #1
 801e5a0:	bf14      	ite	ne
 801e5a2:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 801e5a6:	4618      	moveq	r0, r3
 801e5a8:	4281      	cmp	r1, r0
 801e5aa:	ddef      	ble.n	801e58c <validate_structure+0xe8>
 801e5ac:	3201      	adds	r2, #1
 801e5ae:	1a09      	subs	r1, r1, r0
 801e5b0:	2a0c      	cmp	r2, #12
 801e5b2:	60e1      	str	r1, [r4, #12]
 801e5b4:	6122      	str	r2, [r4, #16]
 801e5b6:	d1f0      	bne.n	801e59a <validate_structure+0xf6>
 801e5b8:	6963      	ldr	r3, [r4, #20]
 801e5ba:	2100      	movs	r1, #0
 801e5bc:	1c5a      	adds	r2, r3, #1
 801e5be:	6121      	str	r1, [r4, #16]
 801e5c0:	0791      	lsls	r1, r2, #30
 801e5c2:	6162      	str	r2, [r4, #20]
 801e5c4:	d13c      	bne.n	801e640 <validate_structure+0x19c>
 801e5c6:	2164      	movs	r1, #100	@ 0x64
 801e5c8:	fb92 f0f1 	sdiv	r0, r2, r1
 801e5cc:	fb01 2210 	mls	r2, r1, r0, r2
 801e5d0:	2a00      	cmp	r2, #0
 801e5d2:	d137      	bne.n	801e644 <validate_structure+0x1a0>
 801e5d4:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 801e5d8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801e5dc:	fb93 f1f2 	sdiv	r1, r3, r2
 801e5e0:	fb02 3311 	mls	r3, r2, r1, r3
 801e5e4:	2b00      	cmp	r3, #0
 801e5e6:	bf0c      	ite	eq
 801e5e8:	231d      	moveq	r3, #29
 801e5ea:	231c      	movne	r3, #28
 801e5ec:	e7d5      	b.n	801e59a <validate_structure+0xf6>
 801e5ee:	6922      	ldr	r2, [r4, #16]
 801e5f0:	3a01      	subs	r2, #1
 801e5f2:	6122      	str	r2, [r4, #16]
 801e5f4:	3201      	adds	r2, #1
 801e5f6:	d116      	bne.n	801e626 <validate_structure+0x182>
 801e5f8:	6963      	ldr	r3, [r4, #20]
 801e5fa:	1e5a      	subs	r2, r3, #1
 801e5fc:	0797      	lsls	r7, r2, #30
 801e5fe:	e9c4 0204 	strd	r0, r2, [r4, #16]
 801e602:	d119      	bne.n	801e638 <validate_structure+0x194>
 801e604:	fb92 f7f1 	sdiv	r7, r2, r1
 801e608:	fb01 2217 	mls	r2, r1, r7, r2
 801e60c:	b9b2      	cbnz	r2, 801e63c <validate_structure+0x198>
 801e60e:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 801e612:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801e616:	fb93 f7f2 	sdiv	r7, r3, r2
 801e61a:	fb02 3317 	mls	r3, r2, r7, r3
 801e61e:	2b00      	cmp	r3, #0
 801e620:	bf0c      	ite	eq
 801e622:	231d      	moveq	r3, #29
 801e624:	231c      	movne	r3, #28
 801e626:	6922      	ldr	r2, [r4, #16]
 801e628:	2a01      	cmp	r2, #1
 801e62a:	bf14      	ite	ne
 801e62c:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 801e630:	461a      	moveq	r2, r3
 801e632:	4432      	add	r2, r6
 801e634:	60e2      	str	r2, [r4, #12]
 801e636:	e7a6      	b.n	801e586 <validate_structure+0xe2>
 801e638:	231c      	movs	r3, #28
 801e63a:	e7f4      	b.n	801e626 <validate_structure+0x182>
 801e63c:	231d      	movs	r3, #29
 801e63e:	e7f2      	b.n	801e626 <validate_structure+0x182>
 801e640:	231c      	movs	r3, #28
 801e642:	e7aa      	b.n	801e59a <validate_structure+0xf6>
 801e644:	231d      	movs	r3, #29
 801e646:	e7a8      	b.n	801e59a <validate_structure+0xf6>
 801e648:	08026424 	.word	0x08026424

0801e64c <mktime>:
 801e64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e650:	b085      	sub	sp, #20
 801e652:	4607      	mov	r7, r0
 801e654:	f003 fb74 	bl	8021d40 <__gettzinfo>
 801e658:	4681      	mov	r9, r0
 801e65a:	4638      	mov	r0, r7
 801e65c:	f7ff ff22 	bl	801e4a4 <validate_structure>
 801e660:	e9d7 4300 	ldrd	r4, r3, [r7]
 801e664:	223c      	movs	r2, #60	@ 0x3c
 801e666:	fb02 4403 	mla	r4, r2, r3, r4
 801e66a:	68bb      	ldr	r3, [r7, #8]
 801e66c:	697d      	ldr	r5, [r7, #20]
 801e66e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801e672:	fb02 4403 	mla	r4, r2, r3, r4
 801e676:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 801e67a:	4ac3      	ldr	r2, [pc, #780]	@ (801e988 <mktime+0x33c>)
 801e67c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801e680:	3e01      	subs	r6, #1
 801e682:	2b01      	cmp	r3, #1
 801e684:	4416      	add	r6, r2
 801e686:	dd11      	ble.n	801e6ac <mktime+0x60>
 801e688:	07a9      	lsls	r1, r5, #30
 801e68a:	d10f      	bne.n	801e6ac <mktime+0x60>
 801e68c:	2264      	movs	r2, #100	@ 0x64
 801e68e:	fb95 f3f2 	sdiv	r3, r5, r2
 801e692:	fb02 5313 	mls	r3, r2, r3, r5
 801e696:	b943      	cbnz	r3, 801e6aa <mktime+0x5e>
 801e698:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 801e69c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801e6a0:	fb93 f1f2 	sdiv	r1, r3, r2
 801e6a4:	fb02 3311 	mls	r3, r2, r1, r3
 801e6a8:	b903      	cbnz	r3, 801e6ac <mktime+0x60>
 801e6aa:	3601      	adds	r6, #1
 801e6ac:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 801e6b0:	3310      	adds	r3, #16
 801e6b2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 801e6b6:	4293      	cmp	r3, r2
 801e6b8:	61fe      	str	r6, [r7, #28]
 801e6ba:	f200 8170 	bhi.w	801e99e <mktime+0x352>
 801e6be:	2d46      	cmp	r5, #70	@ 0x46
 801e6c0:	f340 80b6 	ble.w	801e830 <mktime+0x1e4>
 801e6c4:	2346      	movs	r3, #70	@ 0x46
 801e6c6:	f240 1c6d 	movw	ip, #365	@ 0x16d
 801e6ca:	2164      	movs	r1, #100	@ 0x64
 801e6cc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801e6d0:	079a      	lsls	r2, r3, #30
 801e6d2:	f040 80a7 	bne.w	801e824 <mktime+0x1d8>
 801e6d6:	fb93 f2f1 	sdiv	r2, r3, r1
 801e6da:	fb01 3212 	mls	r2, r1, r2, r3
 801e6de:	2a00      	cmp	r2, #0
 801e6e0:	f040 80a3 	bne.w	801e82a <mktime+0x1de>
 801e6e4:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 801e6e8:	fb92 fef0 	sdiv	lr, r2, r0
 801e6ec:	fb00 221e 	mls	r2, r0, lr, r2
 801e6f0:	2a00      	cmp	r2, #0
 801e6f2:	bf0c      	ite	eq
 801e6f4:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801e6f8:	4662      	movne	r2, ip
 801e6fa:	3301      	adds	r3, #1
 801e6fc:	429d      	cmp	r5, r3
 801e6fe:	4416      	add	r6, r2
 801e700:	d1e6      	bne.n	801e6d0 <mktime+0x84>
 801e702:	4ba2      	ldr	r3, [pc, #648]	@ (801e98c <mktime+0x340>)
 801e704:	ea4f 78e4 	mov.w	r8, r4, asr #31
 801e708:	fbc6 4803 	smlal	r4, r8, r6, r3
 801e70c:	f000 fa26 	bl	801eb5c <__tz_lock>
 801e710:	f000 fa30 	bl	801eb74 <_tzset_unlocked>
 801e714:	4b9e      	ldr	r3, [pc, #632]	@ (801e990 <mktime+0x344>)
 801e716:	681b      	ldr	r3, [r3, #0]
 801e718:	2b00      	cmp	r3, #0
 801e71a:	f000 8147 	beq.w	801e9ac <mktime+0x360>
 801e71e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 801e722:	6978      	ldr	r0, [r7, #20]
 801e724:	4653      	mov	r3, sl
 801e726:	2b01      	cmp	r3, #1
 801e728:	bfa8      	it	ge
 801e72a:	2301      	movge	r3, #1
 801e72c:	9301      	str	r3, [sp, #4]
 801e72e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e732:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 801e736:	4283      	cmp	r3, r0
 801e738:	f040 80bd 	bne.w	801e8b6 <mktime+0x26a>
 801e73c:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 801e740:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 801e744:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 801e748:	1a13      	subs	r3, r2, r0
 801e74a:	9303      	str	r3, [sp, #12]
 801e74c:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 801e750:	9302      	str	r3, [sp, #8]
 801e752:	9a02      	ldr	r2, [sp, #8]
 801e754:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 801e758:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 801e75c:	ebb2 0e03 	subs.w	lr, r2, r3
 801e760:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 801e764:	4574      	cmp	r4, lr
 801e766:	eb78 0201 	sbcs.w	r2, r8, r1
 801e76a:	f280 80c7 	bge.w	801e8fc <mktime+0x2b0>
 801e76e:	f8d9 2000 	ldr.w	r2, [r9]
 801e772:	2a00      	cmp	r2, #0
 801e774:	f000 80d0 	beq.w	801e918 <mktime+0x2cc>
 801e778:	9a03      	ldr	r2, [sp, #12]
 801e77a:	4294      	cmp	r4, r2
 801e77c:	eb78 020b 	sbcs.w	r2, r8, fp
 801e780:	f2c0 8111 	blt.w	801e9a6 <mktime+0x35a>
 801e784:	4574      	cmp	r4, lr
 801e786:	eb78 0101 	sbcs.w	r1, r8, r1
 801e78a:	bfb4      	ite	lt
 801e78c:	f04f 0b01 	movlt.w	fp, #1
 801e790:	f04f 0b00 	movge.w	fp, #0
 801e794:	f1ba 0f00 	cmp.w	sl, #0
 801e798:	f2c0 8094 	blt.w	801e8c4 <mktime+0x278>
 801e79c:	9a01      	ldr	r2, [sp, #4]
 801e79e:	ea82 0a0b 	eor.w	sl, r2, fp
 801e7a2:	f1ba 0f01 	cmp.w	sl, #1
 801e7a6:	f040 808d 	bne.w	801e8c4 <mktime+0x278>
 801e7aa:	f1bb 0f00 	cmp.w	fp, #0
 801e7ae:	f000 80c2 	beq.w	801e936 <mktime+0x2ea>
 801e7b2:	1a1b      	subs	r3, r3, r0
 801e7b4:	683a      	ldr	r2, [r7, #0]
 801e7b6:	441a      	add	r2, r3
 801e7b8:	191c      	adds	r4, r3, r4
 801e7ba:	603a      	str	r2, [r7, #0]
 801e7bc:	4638      	mov	r0, r7
 801e7be:	68fa      	ldr	r2, [r7, #12]
 801e7c0:	9201      	str	r2, [sp, #4]
 801e7c2:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801e7c6:	f7ff fe6d 	bl	801e4a4 <validate_structure>
 801e7ca:	68fb      	ldr	r3, [r7, #12]
 801e7cc:	9a01      	ldr	r2, [sp, #4]
 801e7ce:	1a9b      	subs	r3, r3, r2
 801e7d0:	d078      	beq.n	801e8c4 <mktime+0x278>
 801e7d2:	2b01      	cmp	r3, #1
 801e7d4:	f300 80b1 	bgt.w	801e93a <mktime+0x2ee>
 801e7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e7dc:	bfa8      	it	ge
 801e7de:	469a      	movge	sl, r3
 801e7e0:	69fb      	ldr	r3, [r7, #28]
 801e7e2:	eb1a 0303 	adds.w	r3, sl, r3
 801e7e6:	4456      	add	r6, sl
 801e7e8:	f140 80b0 	bpl.w	801e94c <mktime+0x300>
 801e7ec:	1e6b      	subs	r3, r5, #1
 801e7ee:	0799      	lsls	r1, r3, #30
 801e7f0:	f040 80a6 	bne.w	801e940 <mktime+0x2f4>
 801e7f4:	2264      	movs	r2, #100	@ 0x64
 801e7f6:	fb93 f1f2 	sdiv	r1, r3, r2
 801e7fa:	fb02 3311 	mls	r3, r2, r1, r3
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	f040 80a1 	bne.w	801e946 <mktime+0x2fa>
 801e804:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801e808:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 801e80c:	fb95 f2f3 	sdiv	r2, r5, r3
 801e810:	fb03 5512 	mls	r5, r3, r2, r5
 801e814:	2d00      	cmp	r5, #0
 801e816:	f240 136d 	movw	r3, #365	@ 0x16d
 801e81a:	bf18      	it	ne
 801e81c:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 801e820:	61fb      	str	r3, [r7, #28]
 801e822:	e04f      	b.n	801e8c4 <mktime+0x278>
 801e824:	f240 126d 	movw	r2, #365	@ 0x16d
 801e828:	e767      	b.n	801e6fa <mktime+0xae>
 801e82a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801e82e:	e764      	b.n	801e6fa <mktime+0xae>
 801e830:	f43f af67 	beq.w	801e702 <mktime+0xb6>
 801e834:	2345      	movs	r3, #69	@ 0x45
 801e836:	f240 1c6d 	movw	ip, #365	@ 0x16d
 801e83a:	2164      	movs	r1, #100	@ 0x64
 801e83c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801e840:	e012      	b.n	801e868 <mktime+0x21c>
 801e842:	bb62      	cbnz	r2, 801e89e <mktime+0x252>
 801e844:	fb93 f2f1 	sdiv	r2, r3, r1
 801e848:	fb01 3212 	mls	r2, r1, r2, r3
 801e84c:	bb52      	cbnz	r2, 801e8a4 <mktime+0x258>
 801e84e:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 801e852:	fb92 fef0 	sdiv	lr, r2, r0
 801e856:	fb00 221e 	mls	r2, r0, lr, r2
 801e85a:	2a00      	cmp	r2, #0
 801e85c:	bf0c      	ite	eq
 801e85e:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801e862:	4662      	movne	r2, ip
 801e864:	1ab6      	subs	r6, r6, r2
 801e866:	3b01      	subs	r3, #1
 801e868:	429d      	cmp	r5, r3
 801e86a:	f003 0203 	and.w	r2, r3, #3
 801e86e:	dbe8      	blt.n	801e842 <mktime+0x1f6>
 801e870:	b9da      	cbnz	r2, 801e8aa <mktime+0x25e>
 801e872:	2264      	movs	r2, #100	@ 0x64
 801e874:	fb95 f3f2 	sdiv	r3, r5, r2
 801e878:	fb02 5313 	mls	r3, r2, r3, r5
 801e87c:	b9c3      	cbnz	r3, 801e8b0 <mktime+0x264>
 801e87e:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 801e882:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801e886:	fb93 f1f2 	sdiv	r1, r3, r2
 801e88a:	fb02 3311 	mls	r3, r2, r1, r3
 801e88e:	2b00      	cmp	r3, #0
 801e890:	f240 136d 	movw	r3, #365	@ 0x16d
 801e894:	bf08      	it	eq
 801e896:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 801e89a:	1af6      	subs	r6, r6, r3
 801e89c:	e731      	b.n	801e702 <mktime+0xb6>
 801e89e:	f240 126d 	movw	r2, #365	@ 0x16d
 801e8a2:	e7df      	b.n	801e864 <mktime+0x218>
 801e8a4:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801e8a8:	e7dc      	b.n	801e864 <mktime+0x218>
 801e8aa:	f240 136d 	movw	r3, #365	@ 0x16d
 801e8ae:	e7f4      	b.n	801e89a <mktime+0x24e>
 801e8b0:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 801e8b4:	e7f1      	b.n	801e89a <mktime+0x24e>
 801e8b6:	f000 f89d 	bl	801e9f4 <__tzcalc_limits>
 801e8ba:	2800      	cmp	r0, #0
 801e8bc:	f47f af3e 	bne.w	801e73c <mktime+0xf0>
 801e8c0:	f8dd b004 	ldr.w	fp, [sp, #4]
 801e8c4:	f1bb 0f01 	cmp.w	fp, #1
 801e8c8:	d172      	bne.n	801e9b0 <mktime+0x364>
 801e8ca:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 801e8ce:	191c      	adds	r4, r3, r4
 801e8d0:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801e8d4:	f04f 0b01 	mov.w	fp, #1
 801e8d8:	f000 f946 	bl	801eb68 <__tz_unlock>
 801e8dc:	3604      	adds	r6, #4
 801e8de:	2307      	movs	r3, #7
 801e8e0:	fb96 f3f3 	sdiv	r3, r6, r3
 801e8e4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801e8e8:	1af6      	subs	r6, r6, r3
 801e8ea:	d456      	bmi.n	801e99a <mktime+0x34e>
 801e8ec:	f8c7 b020 	str.w	fp, [r7, #32]
 801e8f0:	61be      	str	r6, [r7, #24]
 801e8f2:	4620      	mov	r0, r4
 801e8f4:	4641      	mov	r1, r8
 801e8f6:	b005      	add	sp, #20
 801e8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8fc:	9a02      	ldr	r2, [sp, #8]
 801e8fe:	1a12      	subs	r2, r2, r0
 801e900:	9202      	str	r2, [sp, #8]
 801e902:	ea4f 72e0 	mov.w	r2, r0, asr #31
 801e906:	eb6c 0c02 	sbc.w	ip, ip, r2
 801e90a:	9a02      	ldr	r2, [sp, #8]
 801e90c:	4294      	cmp	r4, r2
 801e90e:	eb78 0c0c 	sbcs.w	ip, r8, ip
 801e912:	f6bf af2c 	bge.w	801e76e <mktime+0x122>
 801e916:	e7d3      	b.n	801e8c0 <mktime+0x274>
 801e918:	9a03      	ldr	r2, [sp, #12]
 801e91a:	4294      	cmp	r4, r2
 801e91c:	eb78 020b 	sbcs.w	r2, r8, fp
 801e920:	f6ff af30 	blt.w	801e784 <mktime+0x138>
 801e924:	f1ba 0f00 	cmp.w	sl, #0
 801e928:	dbcf      	blt.n	801e8ca <mktime+0x27e>
 801e92a:	f04f 0b01 	mov.w	fp, #1
 801e92e:	e735      	b.n	801e79c <mktime+0x150>
 801e930:	f04f 0b00 	mov.w	fp, #0
 801e934:	e732      	b.n	801e79c <mktime+0x150>
 801e936:	1ac3      	subs	r3, r0, r3
 801e938:	e73c      	b.n	801e7b4 <mktime+0x168>
 801e93a:	f04f 3aff 	mov.w	sl, #4294967295
 801e93e:	e74f      	b.n	801e7e0 <mktime+0x194>
 801e940:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 801e944:	e76c      	b.n	801e820 <mktime+0x1d4>
 801e946:	f240 136d 	movw	r3, #365	@ 0x16d
 801e94a:	e769      	b.n	801e820 <mktime+0x1d4>
 801e94c:	07aa      	lsls	r2, r5, #30
 801e94e:	d117      	bne.n	801e980 <mktime+0x334>
 801e950:	2164      	movs	r1, #100	@ 0x64
 801e952:	fb95 f2f1 	sdiv	r2, r5, r1
 801e956:	fb01 5212 	mls	r2, r1, r2, r5
 801e95a:	b9da      	cbnz	r2, 801e994 <mktime+0x348>
 801e95c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801e960:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 801e964:	fb95 f1f2 	sdiv	r1, r5, r2
 801e968:	fb02 5511 	mls	r5, r2, r1, r5
 801e96c:	2d00      	cmp	r5, #0
 801e96e:	f240 126d 	movw	r2, #365	@ 0x16d
 801e972:	bf08      	it	eq
 801e974:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801e978:	4293      	cmp	r3, r2
 801e97a:	bfa8      	it	ge
 801e97c:	1a9b      	subge	r3, r3, r2
 801e97e:	e74f      	b.n	801e820 <mktime+0x1d4>
 801e980:	f240 126d 	movw	r2, #365	@ 0x16d
 801e984:	e7f8      	b.n	801e978 <mktime+0x32c>
 801e986:	bf00      	nop
 801e988:	080263f4 	.word	0x080263f4
 801e98c:	00015180 	.word	0x00015180
 801e990:	200066c0 	.word	0x200066c0
 801e994:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801e998:	e7ee      	b.n	801e978 <mktime+0x32c>
 801e99a:	3607      	adds	r6, #7
 801e99c:	e7a6      	b.n	801e8ec <mktime+0x2a0>
 801e99e:	f04f 34ff 	mov.w	r4, #4294967295
 801e9a2:	46a0      	mov	r8, r4
 801e9a4:	e7a5      	b.n	801e8f2 <mktime+0x2a6>
 801e9a6:	f1ba 0f00 	cmp.w	sl, #0
 801e9aa:	dac1      	bge.n	801e930 <mktime+0x2e4>
 801e9ac:	f04f 0b00 	mov.w	fp, #0
 801e9b0:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 801e9b4:	191c      	adds	r4, r3, r4
 801e9b6:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801e9ba:	e78d      	b.n	801e8d8 <mktime+0x28c>

0801e9bc <time>:
 801e9bc:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 801e9be:	4b0c      	ldr	r3, [pc, #48]	@ (801e9f0 <time+0x34>)
 801e9c0:	f04f 36ff 	mov.w	r6, #4294967295
 801e9c4:	f04f 37ff 	mov.w	r7, #4294967295
 801e9c8:	4669      	mov	r1, sp
 801e9ca:	4604      	mov	r4, r0
 801e9cc:	2200      	movs	r2, #0
 801e9ce:	6818      	ldr	r0, [r3, #0]
 801e9d0:	e9cd 6700 	strd	r6, r7, [sp]
 801e9d4:	f000 fb68 	bl	801f0a8 <_gettimeofday_r>
 801e9d8:	2800      	cmp	r0, #0
 801e9da:	bfb8      	it	lt
 801e9dc:	e9cd 6700 	strdlt	r6, r7, [sp]
 801e9e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e9e4:	b10c      	cbz	r4, 801e9ea <time+0x2e>
 801e9e6:	e9c4 0100 	strd	r0, r1, [r4]
 801e9ea:	b004      	add	sp, #16
 801e9ec:	bdd0      	pop	{r4, r6, r7, pc}
 801e9ee:	bf00      	nop
 801e9f0:	200001c0 	.word	0x200001c0

0801e9f4 <__tzcalc_limits>:
 801e9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e9f8:	4604      	mov	r4, r0
 801e9fa:	f003 f9a1 	bl	8021d40 <__gettzinfo>
 801e9fe:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 801ea02:	429c      	cmp	r4, r3
 801ea04:	f340 80a3 	ble.w	801eb4e <__tzcalc_limits+0x15a>
 801ea08:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 801ea0c:	1865      	adds	r5, r4, r1
 801ea0e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 801ea12:	f240 126d 	movw	r2, #365	@ 0x16d
 801ea16:	10ad      	asrs	r5, r5, #2
 801ea18:	fb02 5503 	mla	r5, r2, r3, r5
 801ea1c:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 801ea20:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 801ea24:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 801ea28:	fb93 f3f2 	sdiv	r3, r3, r2
 801ea2c:	441d      	add	r5, r3
 801ea2e:	19a3      	adds	r3, r4, r6
 801ea30:	4e48      	ldr	r6, [pc, #288]	@ (801eb54 <__tzcalc_limits+0x160>)
 801ea32:	6044      	str	r4, [r0, #4]
 801ea34:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801ea38:	4601      	mov	r1, r0
 801ea3a:	fbb3 f3f2 	udiv	r3, r3, r2
 801ea3e:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 801ea42:	441d      	add	r5, r3
 801ea44:	7a0b      	ldrb	r3, [r1, #8]
 801ea46:	f8d1 c014 	ldr.w	ip, [r1, #20]
 801ea4a:	2b4a      	cmp	r3, #74	@ 0x4a
 801ea4c:	d138      	bne.n	801eac0 <__tzcalc_limits+0xcc>
 801ea4e:	07a2      	lsls	r2, r4, #30
 801ea50:	eb05 030c 	add.w	r3, r5, ip
 801ea54:	d106      	bne.n	801ea64 <__tzcalc_limits+0x70>
 801ea56:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 801ea5a:	fb94 f2fe 	sdiv	r2, r4, lr
 801ea5e:	fb0e 4212 	mls	r2, lr, r2, r4
 801ea62:	b932      	cbnz	r2, 801ea72 <__tzcalc_limits+0x7e>
 801ea64:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 801ea68:	fb94 f2fe 	sdiv	r2, r4, lr
 801ea6c:	fb0e 4212 	mls	r2, lr, r2, r4
 801ea70:	bb1a      	cbnz	r2, 801eaba <__tzcalc_limits+0xc6>
 801ea72:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 801ea76:	bfd4      	ite	le
 801ea78:	f04f 0c00 	movle.w	ip, #0
 801ea7c:	f04f 0c01 	movgt.w	ip, #1
 801ea80:	4463      	add	r3, ip
 801ea82:	3b01      	subs	r3, #1
 801ea84:	698a      	ldr	r2, [r1, #24]
 801ea86:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 801ea8a:	fbc3 2c06 	smlal	r2, ip, r3, r6
 801ea8e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801ea90:	18d2      	adds	r2, r2, r3
 801ea92:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 801ea96:	e9c1 2308 	strd	r2, r3, [r1, #32]
 801ea9a:	3128      	adds	r1, #40	@ 0x28
 801ea9c:	428f      	cmp	r7, r1
 801ea9e:	d1d1      	bne.n	801ea44 <__tzcalc_limits+0x50>
 801eaa0:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 801eaa4:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 801eaa8:	428c      	cmp	r4, r1
 801eaaa:	4193      	sbcs	r3, r2
 801eaac:	bfb4      	ite	lt
 801eaae:	2301      	movlt	r3, #1
 801eab0:	2300      	movge	r3, #0
 801eab2:	6003      	str	r3, [r0, #0]
 801eab4:	2001      	movs	r0, #1
 801eab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eaba:	f04f 0c00 	mov.w	ip, #0
 801eabe:	e7df      	b.n	801ea80 <__tzcalc_limits+0x8c>
 801eac0:	2b44      	cmp	r3, #68	@ 0x44
 801eac2:	d102      	bne.n	801eaca <__tzcalc_limits+0xd6>
 801eac4:	eb05 030c 	add.w	r3, r5, ip
 801eac8:	e7dc      	b.n	801ea84 <__tzcalc_limits+0x90>
 801eaca:	07a3      	lsls	r3, r4, #30
 801eacc:	d105      	bne.n	801eada <__tzcalc_limits+0xe6>
 801eace:	2264      	movs	r2, #100	@ 0x64
 801ead0:	fb94 f3f2 	sdiv	r3, r4, r2
 801ead4:	fb02 4313 	mls	r3, r2, r3, r4
 801ead8:	bb93      	cbnz	r3, 801eb40 <__tzcalc_limits+0x14c>
 801eada:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801eade:	fb94 f3f2 	sdiv	r3, r4, r2
 801eae2:	fb02 4313 	mls	r3, r2, r3, r4
 801eae6:	fab3 f383 	clz	r3, r3
 801eaea:	095b      	lsrs	r3, r3, #5
 801eaec:	f8df e068 	ldr.w	lr, [pc, #104]	@ 801eb58 <__tzcalc_limits+0x164>
 801eaf0:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801eaf4:	425b      	negs	r3, r3
 801eaf6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801eafa:	462a      	mov	r2, r5
 801eafc:	f04f 0800 	mov.w	r8, #0
 801eb00:	4473      	add	r3, lr
 801eb02:	f108 0801 	add.w	r8, r8, #1
 801eb06:	45c1      	cmp	r9, r8
 801eb08:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 801eb0c:	dc1a      	bgt.n	801eb44 <__tzcalc_limits+0x150>
 801eb0e:	f102 0804 	add.w	r8, r2, #4
 801eb12:	2307      	movs	r3, #7
 801eb14:	fb98 f3f3 	sdiv	r3, r8, r3
 801eb18:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801eb1c:	eba8 0303 	sub.w	r3, r8, r3
 801eb20:	ebbc 0c03 	subs.w	ip, ip, r3
 801eb24:	690b      	ldr	r3, [r1, #16]
 801eb26:	f103 33ff 	add.w	r3, r3, #4294967295
 801eb2a:	bf48      	it	mi
 801eb2c:	f10c 0c07 	addmi.w	ip, ip, #7
 801eb30:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801eb34:	449c      	add	ip, r3
 801eb36:	45f4      	cmp	ip, lr
 801eb38:	da06      	bge.n	801eb48 <__tzcalc_limits+0x154>
 801eb3a:	eb02 030c 	add.w	r3, r2, ip
 801eb3e:	e7a1      	b.n	801ea84 <__tzcalc_limits+0x90>
 801eb40:	2301      	movs	r3, #1
 801eb42:	e7d3      	b.n	801eaec <__tzcalc_limits+0xf8>
 801eb44:	4472      	add	r2, lr
 801eb46:	e7dc      	b.n	801eb02 <__tzcalc_limits+0x10e>
 801eb48:	f1ac 0c07 	sub.w	ip, ip, #7
 801eb4c:	e7f3      	b.n	801eb36 <__tzcalc_limits+0x142>
 801eb4e:	2000      	movs	r0, #0
 801eb50:	e7b1      	b.n	801eab6 <__tzcalc_limits+0xc2>
 801eb52:	bf00      	nop
 801eb54:	00015180 	.word	0x00015180
 801eb58:	08026450 	.word	0x08026450

0801eb5c <__tz_lock>:
 801eb5c:	4801      	ldr	r0, [pc, #4]	@ (801eb64 <__tz_lock+0x8>)
 801eb5e:	f000 bb26 	b.w	801f1ae <__retarget_lock_acquire>
 801eb62:	bf00      	nop
 801eb64:	200066c8 	.word	0x200066c8

0801eb68 <__tz_unlock>:
 801eb68:	4801      	ldr	r0, [pc, #4]	@ (801eb70 <__tz_unlock+0x8>)
 801eb6a:	f000 bb22 	b.w	801f1b2 <__retarget_lock_release>
 801eb6e:	bf00      	nop
 801eb70:	200066c8 	.word	0x200066c8

0801eb74 <_tzset_unlocked>:
 801eb74:	4b01      	ldr	r3, [pc, #4]	@ (801eb7c <_tzset_unlocked+0x8>)
 801eb76:	6818      	ldr	r0, [r3, #0]
 801eb78:	f000 b802 	b.w	801eb80 <_tzset_unlocked_r>
 801eb7c:	200001c0 	.word	0x200001c0

0801eb80 <_tzset_unlocked_r>:
 801eb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb84:	b08d      	sub	sp, #52	@ 0x34
 801eb86:	4607      	mov	r7, r0
 801eb88:	f003 f8da 	bl	8021d40 <__gettzinfo>
 801eb8c:	49bc      	ldr	r1, [pc, #752]	@ (801ee80 <_tzset_unlocked_r+0x300>)
 801eb8e:	4dbd      	ldr	r5, [pc, #756]	@ (801ee84 <_tzset_unlocked_r+0x304>)
 801eb90:	4604      	mov	r4, r0
 801eb92:	4638      	mov	r0, r7
 801eb94:	f001 fdc8 	bl	8020728 <_getenv_r>
 801eb98:	4606      	mov	r6, r0
 801eb9a:	bb10      	cbnz	r0, 801ebe2 <_tzset_unlocked_r+0x62>
 801eb9c:	4bba      	ldr	r3, [pc, #744]	@ (801ee88 <_tzset_unlocked_r+0x308>)
 801eb9e:	4abb      	ldr	r2, [pc, #748]	@ (801ee8c <_tzset_unlocked_r+0x30c>)
 801eba0:	6018      	str	r0, [r3, #0]
 801eba2:	4bbb      	ldr	r3, [pc, #748]	@ (801ee90 <_tzset_unlocked_r+0x310>)
 801eba4:	62a0      	str	r0, [r4, #40]	@ 0x28
 801eba6:	6018      	str	r0, [r3, #0]
 801eba8:	4bba      	ldr	r3, [pc, #744]	@ (801ee94 <_tzset_unlocked_r+0x314>)
 801ebaa:	6520      	str	r0, [r4, #80]	@ 0x50
 801ebac:	e9c3 2200 	strd	r2, r2, [r3]
 801ebb0:	214a      	movs	r1, #74	@ 0x4a
 801ebb2:	2200      	movs	r2, #0
 801ebb4:	2300      	movs	r3, #0
 801ebb6:	e9c4 0003 	strd	r0, r0, [r4, #12]
 801ebba:	e9c4 0005 	strd	r0, r0, [r4, #20]
 801ebbe:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 801ebc2:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 801ebc6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801ebca:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 801ebce:	6828      	ldr	r0, [r5, #0]
 801ebd0:	7221      	strb	r1, [r4, #8]
 801ebd2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 801ebd6:	f7fd fb2d 	bl	801c234 <free>
 801ebda:	602e      	str	r6, [r5, #0]
 801ebdc:	b00d      	add	sp, #52	@ 0x34
 801ebde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebe2:	6829      	ldr	r1, [r5, #0]
 801ebe4:	2900      	cmp	r1, #0
 801ebe6:	f040 808e 	bne.w	801ed06 <_tzset_unlocked_r+0x186>
 801ebea:	6828      	ldr	r0, [r5, #0]
 801ebec:	f7fd fb22 	bl	801c234 <free>
 801ebf0:	4630      	mov	r0, r6
 801ebf2:	f7e1 fb4d 	bl	8000290 <strlen>
 801ebf6:	1c41      	adds	r1, r0, #1
 801ebf8:	4638      	mov	r0, r7
 801ebfa:	f7fd fb45 	bl	801c288 <_malloc_r>
 801ebfe:	6028      	str	r0, [r5, #0]
 801ec00:	2800      	cmp	r0, #0
 801ec02:	f040 8086 	bne.w	801ed12 <_tzset_unlocked_r+0x192>
 801ec06:	4aa2      	ldr	r2, [pc, #648]	@ (801ee90 <_tzset_unlocked_r+0x310>)
 801ec08:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 801ee94 <_tzset_unlocked_r+0x314>
 801ec0c:	f8df a278 	ldr.w	sl, [pc, #632]	@ 801ee88 <_tzset_unlocked_r+0x308>
 801ec10:	2300      	movs	r3, #0
 801ec12:	6013      	str	r3, [r2, #0]
 801ec14:	4aa0      	ldr	r2, [pc, #640]	@ (801ee98 <_tzset_unlocked_r+0x318>)
 801ec16:	f8ca 3000 	str.w	r3, [sl]
 801ec1a:	2000      	movs	r0, #0
 801ec1c:	2100      	movs	r1, #0
 801ec1e:	e9c8 2200 	strd	r2, r2, [r8]
 801ec22:	e9c4 3303 	strd	r3, r3, [r4, #12]
 801ec26:	e9c4 3305 	strd	r3, r3, [r4, #20]
 801ec2a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801ec2e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 801ec32:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 801ec36:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 801ec3a:	224a      	movs	r2, #74	@ 0x4a
 801ec3c:	7222      	strb	r2, [r4, #8]
 801ec3e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ec40:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 801ec44:	6523      	str	r3, [r4, #80]	@ 0x50
 801ec46:	7833      	ldrb	r3, [r6, #0]
 801ec48:	2b3a      	cmp	r3, #58	@ 0x3a
 801ec4a:	bf08      	it	eq
 801ec4c:	3601      	addeq	r6, #1
 801ec4e:	7833      	ldrb	r3, [r6, #0]
 801ec50:	2b3c      	cmp	r3, #60	@ 0x3c
 801ec52:	d162      	bne.n	801ed1a <_tzset_unlocked_r+0x19a>
 801ec54:	1c75      	adds	r5, r6, #1
 801ec56:	4a91      	ldr	r2, [pc, #580]	@ (801ee9c <_tzset_unlocked_r+0x31c>)
 801ec58:	4991      	ldr	r1, [pc, #580]	@ (801eea0 <_tzset_unlocked_r+0x320>)
 801ec5a:	ab0a      	add	r3, sp, #40	@ 0x28
 801ec5c:	4628      	mov	r0, r5
 801ec5e:	f7ff f9b9 	bl	801dfd4 <siscanf>
 801ec62:	2800      	cmp	r0, #0
 801ec64:	ddba      	ble.n	801ebdc <_tzset_unlocked_r+0x5c>
 801ec66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ec68:	1eda      	subs	r2, r3, #3
 801ec6a:	2a07      	cmp	r2, #7
 801ec6c:	d8b6      	bhi.n	801ebdc <_tzset_unlocked_r+0x5c>
 801ec6e:	5ceb      	ldrb	r3, [r5, r3]
 801ec70:	2b3e      	cmp	r3, #62	@ 0x3e
 801ec72:	d1b3      	bne.n	801ebdc <_tzset_unlocked_r+0x5c>
 801ec74:	3602      	adds	r6, #2
 801ec76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ec78:	18f5      	adds	r5, r6, r3
 801ec7a:	5cf3      	ldrb	r3, [r6, r3]
 801ec7c:	2b2d      	cmp	r3, #45	@ 0x2d
 801ec7e:	d15a      	bne.n	801ed36 <_tzset_unlocked_r+0x1b6>
 801ec80:	3501      	adds	r5, #1
 801ec82:	f04f 39ff 	mov.w	r9, #4294967295
 801ec86:	2300      	movs	r3, #0
 801ec88:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ec8c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ec90:	af08      	add	r7, sp, #32
 801ec92:	ab0a      	add	r3, sp, #40	@ 0x28
 801ec94:	e9cd 3701 	strd	r3, r7, [sp, #4]
 801ec98:	9303      	str	r3, [sp, #12]
 801ec9a:	f10d 031e 	add.w	r3, sp, #30
 801ec9e:	9300      	str	r3, [sp, #0]
 801eca0:	4980      	ldr	r1, [pc, #512]	@ (801eea4 <_tzset_unlocked_r+0x324>)
 801eca2:	ab0a      	add	r3, sp, #40	@ 0x28
 801eca4:	aa07      	add	r2, sp, #28
 801eca6:	4628      	mov	r0, r5
 801eca8:	f7ff f994 	bl	801dfd4 <siscanf>
 801ecac:	2800      	cmp	r0, #0
 801ecae:	dd95      	ble.n	801ebdc <_tzset_unlocked_r+0x5c>
 801ecb0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801ecb4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801ecb8:	223c      	movs	r2, #60	@ 0x3c
 801ecba:	fb02 6603 	mla	r6, r2, r3, r6
 801ecbe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ecc2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801ecc6:	fb02 6603 	mla	r6, r2, r3, r6
 801ecca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eccc:	fb09 f606 	mul.w	r6, r9, r6
 801ecd0:	eb05 0903 	add.w	r9, r5, r3
 801ecd4:	5ceb      	ldrb	r3, [r5, r3]
 801ecd6:	2b3c      	cmp	r3, #60	@ 0x3c
 801ecd8:	f040 80ee 	bne.w	801eeb8 <_tzset_unlocked_r+0x338>
 801ecdc:	f109 0501 	add.w	r5, r9, #1
 801ece0:	4a71      	ldr	r2, [pc, #452]	@ (801eea8 <_tzset_unlocked_r+0x328>)
 801ece2:	496f      	ldr	r1, [pc, #444]	@ (801eea0 <_tzset_unlocked_r+0x320>)
 801ece4:	ab0a      	add	r3, sp, #40	@ 0x28
 801ece6:	4628      	mov	r0, r5
 801ece8:	f7ff f974 	bl	801dfd4 <siscanf>
 801ecec:	2800      	cmp	r0, #0
 801ecee:	dc28      	bgt.n	801ed42 <_tzset_unlocked_r+0x1c2>
 801ecf0:	f899 3001 	ldrb.w	r3, [r9, #1]
 801ecf4:	2b3e      	cmp	r3, #62	@ 0x3e
 801ecf6:	d124      	bne.n	801ed42 <_tzset_unlocked_r+0x1c2>
 801ecf8:	4b68      	ldr	r3, [pc, #416]	@ (801ee9c <_tzset_unlocked_r+0x31c>)
 801ecfa:	62a6      	str	r6, [r4, #40]	@ 0x28
 801ecfc:	e9c8 3300 	strd	r3, r3, [r8]
 801ed00:	f8ca 6000 	str.w	r6, [sl]
 801ed04:	e76a      	b.n	801ebdc <_tzset_unlocked_r+0x5c>
 801ed06:	f7e1 fa63 	bl	80001d0 <strcmp>
 801ed0a:	2800      	cmp	r0, #0
 801ed0c:	f47f af6d 	bne.w	801ebea <_tzset_unlocked_r+0x6a>
 801ed10:	e764      	b.n	801ebdc <_tzset_unlocked_r+0x5c>
 801ed12:	4631      	mov	r1, r6
 801ed14:	f000 fa4f 	bl	801f1b6 <strcpy>
 801ed18:	e775      	b.n	801ec06 <_tzset_unlocked_r+0x86>
 801ed1a:	4a60      	ldr	r2, [pc, #384]	@ (801ee9c <_tzset_unlocked_r+0x31c>)
 801ed1c:	4963      	ldr	r1, [pc, #396]	@ (801eeac <_tzset_unlocked_r+0x32c>)
 801ed1e:	ab0a      	add	r3, sp, #40	@ 0x28
 801ed20:	4630      	mov	r0, r6
 801ed22:	f7ff f957 	bl	801dfd4 <siscanf>
 801ed26:	2800      	cmp	r0, #0
 801ed28:	f77f af58 	ble.w	801ebdc <_tzset_unlocked_r+0x5c>
 801ed2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ed2e:	3b03      	subs	r3, #3
 801ed30:	2b07      	cmp	r3, #7
 801ed32:	d9a0      	bls.n	801ec76 <_tzset_unlocked_r+0xf6>
 801ed34:	e752      	b.n	801ebdc <_tzset_unlocked_r+0x5c>
 801ed36:	2b2b      	cmp	r3, #43	@ 0x2b
 801ed38:	bf08      	it	eq
 801ed3a:	3501      	addeq	r5, #1
 801ed3c:	f04f 0901 	mov.w	r9, #1
 801ed40:	e7a1      	b.n	801ec86 <_tzset_unlocked_r+0x106>
 801ed42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ed44:	1eda      	subs	r2, r3, #3
 801ed46:	2a07      	cmp	r2, #7
 801ed48:	f63f af48 	bhi.w	801ebdc <_tzset_unlocked_r+0x5c>
 801ed4c:	5ceb      	ldrb	r3, [r5, r3]
 801ed4e:	2b3e      	cmp	r3, #62	@ 0x3e
 801ed50:	f47f af44 	bne.w	801ebdc <_tzset_unlocked_r+0x5c>
 801ed54:	f109 0902 	add.w	r9, r9, #2
 801ed58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ed5a:	eb09 0503 	add.w	r5, r9, r3
 801ed5e:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ed62:	2b2d      	cmp	r3, #45	@ 0x2d
 801ed64:	f040 80b7 	bne.w	801eed6 <_tzset_unlocked_r+0x356>
 801ed68:	3501      	adds	r5, #1
 801ed6a:	f04f 39ff 	mov.w	r9, #4294967295
 801ed6e:	2300      	movs	r3, #0
 801ed70:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ed74:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ed78:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ed7c:	930a      	str	r3, [sp, #40]	@ 0x28
 801ed7e:	ab0a      	add	r3, sp, #40	@ 0x28
 801ed80:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801ed84:	9301      	str	r3, [sp, #4]
 801ed86:	f10d 031e 	add.w	r3, sp, #30
 801ed8a:	9300      	str	r3, [sp, #0]
 801ed8c:	4945      	ldr	r1, [pc, #276]	@ (801eea4 <_tzset_unlocked_r+0x324>)
 801ed8e:	ab0a      	add	r3, sp, #40	@ 0x28
 801ed90:	aa07      	add	r2, sp, #28
 801ed92:	4628      	mov	r0, r5
 801ed94:	f7ff f91e 	bl	801dfd4 <siscanf>
 801ed98:	2800      	cmp	r0, #0
 801ed9a:	f300 80a2 	bgt.w	801eee2 <_tzset_unlocked_r+0x362>
 801ed9e:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 801eda2:	9304      	str	r3, [sp, #16]
 801eda4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eda6:	4627      	mov	r7, r4
 801eda8:	441d      	add	r5, r3
 801edaa:	f04f 0b00 	mov.w	fp, #0
 801edae:	782b      	ldrb	r3, [r5, #0]
 801edb0:	2b2c      	cmp	r3, #44	@ 0x2c
 801edb2:	bf08      	it	eq
 801edb4:	3501      	addeq	r5, #1
 801edb6:	f895 9000 	ldrb.w	r9, [r5]
 801edba:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 801edbe:	f040 80a3 	bne.w	801ef08 <_tzset_unlocked_r+0x388>
 801edc2:	ab0a      	add	r3, sp, #40	@ 0x28
 801edc4:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 801edc8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801edcc:	aa09      	add	r2, sp, #36	@ 0x24
 801edce:	9200      	str	r2, [sp, #0]
 801edd0:	4937      	ldr	r1, [pc, #220]	@ (801eeb0 <_tzset_unlocked_r+0x330>)
 801edd2:	9303      	str	r3, [sp, #12]
 801edd4:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 801edd8:	4628      	mov	r0, r5
 801edda:	f7ff f8fb 	bl	801dfd4 <siscanf>
 801edde:	2803      	cmp	r0, #3
 801ede0:	f47f aefc 	bne.w	801ebdc <_tzset_unlocked_r+0x5c>
 801ede4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801ede8:	1e4b      	subs	r3, r1, #1
 801edea:	2b0b      	cmp	r3, #11
 801edec:	f63f aef6 	bhi.w	801ebdc <_tzset_unlocked_r+0x5c>
 801edf0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 801edf4:	1e53      	subs	r3, r2, #1
 801edf6:	2b04      	cmp	r3, #4
 801edf8:	f63f aef0 	bhi.w	801ebdc <_tzset_unlocked_r+0x5c>
 801edfc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 801ee00:	2b06      	cmp	r3, #6
 801ee02:	f63f aeeb 	bhi.w	801ebdc <_tzset_unlocked_r+0x5c>
 801ee06:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801ee0a:	f887 9008 	strb.w	r9, [r7, #8]
 801ee0e:	617b      	str	r3, [r7, #20]
 801ee10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ee12:	eb05 0903 	add.w	r9, r5, r3
 801ee16:	2500      	movs	r5, #0
 801ee18:	f04f 0302 	mov.w	r3, #2
 801ee1c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ee20:	f8ad 501e 	strh.w	r5, [sp, #30]
 801ee24:	f8ad 5020 	strh.w	r5, [sp, #32]
 801ee28:	950a      	str	r5, [sp, #40]	@ 0x28
 801ee2a:	f899 3000 	ldrb.w	r3, [r9]
 801ee2e:	2b2f      	cmp	r3, #47	@ 0x2f
 801ee30:	f040 8096 	bne.w	801ef60 <_tzset_unlocked_r+0x3e0>
 801ee34:	ab0a      	add	r3, sp, #40	@ 0x28
 801ee36:	aa08      	add	r2, sp, #32
 801ee38:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801ee3c:	f10d 021e 	add.w	r2, sp, #30
 801ee40:	9200      	str	r2, [sp, #0]
 801ee42:	491c      	ldr	r1, [pc, #112]	@ (801eeb4 <_tzset_unlocked_r+0x334>)
 801ee44:	9303      	str	r3, [sp, #12]
 801ee46:	aa07      	add	r2, sp, #28
 801ee48:	4648      	mov	r0, r9
 801ee4a:	f7ff f8c3 	bl	801dfd4 <siscanf>
 801ee4e:	42a8      	cmp	r0, r5
 801ee50:	f300 8086 	bgt.w	801ef60 <_tzset_unlocked_r+0x3e0>
 801ee54:	214a      	movs	r1, #74	@ 0x4a
 801ee56:	2200      	movs	r2, #0
 801ee58:	2300      	movs	r3, #0
 801ee5a:	e9c4 5503 	strd	r5, r5, [r4, #12]
 801ee5e:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801ee62:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801ee66:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 801ee6a:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 801ee6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 801ee72:	7221      	strb	r1, [r4, #8]
 801ee74:	62a5      	str	r5, [r4, #40]	@ 0x28
 801ee76:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 801ee7a:	6525      	str	r5, [r4, #80]	@ 0x50
 801ee7c:	e6ae      	b.n	801ebdc <_tzset_unlocked_r+0x5c>
 801ee7e:	bf00      	nop
 801ee80:	080260ac 	.word	0x080260ac
 801ee84:	200066a0 	.word	0x200066a0
 801ee88:	200066bc 	.word	0x200066bc
 801ee8c:	080260af 	.word	0x080260af
 801ee90:	200066c0 	.word	0x200066c0
 801ee94:	2000004c 	.word	0x2000004c
 801ee98:	0802613d 	.word	0x0802613d
 801ee9c:	200066b0 	.word	0x200066b0
 801eea0:	080260b3 	.word	0x080260b3
 801eea4:	080260e8 	.word	0x080260e8
 801eea8:	200066a4 	.word	0x200066a4
 801eeac:	080260c6 	.word	0x080260c6
 801eeb0:	080260d4 	.word	0x080260d4
 801eeb4:	080260e7 	.word	0x080260e7
 801eeb8:	4a3e      	ldr	r2, [pc, #248]	@ (801efb4 <_tzset_unlocked_r+0x434>)
 801eeba:	493f      	ldr	r1, [pc, #252]	@ (801efb8 <_tzset_unlocked_r+0x438>)
 801eebc:	ab0a      	add	r3, sp, #40	@ 0x28
 801eebe:	4648      	mov	r0, r9
 801eec0:	f7ff f888 	bl	801dfd4 <siscanf>
 801eec4:	2800      	cmp	r0, #0
 801eec6:	f77f af17 	ble.w	801ecf8 <_tzset_unlocked_r+0x178>
 801eeca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eecc:	3b03      	subs	r3, #3
 801eece:	2b07      	cmp	r3, #7
 801eed0:	f67f af42 	bls.w	801ed58 <_tzset_unlocked_r+0x1d8>
 801eed4:	e682      	b.n	801ebdc <_tzset_unlocked_r+0x5c>
 801eed6:	2b2b      	cmp	r3, #43	@ 0x2b
 801eed8:	bf08      	it	eq
 801eeda:	3501      	addeq	r5, #1
 801eedc:	f04f 0901 	mov.w	r9, #1
 801eee0:	e745      	b.n	801ed6e <_tzset_unlocked_r+0x1ee>
 801eee2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801eee6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801eeea:	213c      	movs	r1, #60	@ 0x3c
 801eeec:	fb01 3302 	mla	r3, r1, r2, r3
 801eef0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801eef4:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801eef8:	fb01 3302 	mla	r3, r1, r2, r3
 801eefc:	fb09 f303 	mul.w	r3, r9, r3
 801ef00:	e74f      	b.n	801eda2 <_tzset_unlocked_r+0x222>
 801ef02:	f04f 0b01 	mov.w	fp, #1
 801ef06:	e752      	b.n	801edae <_tzset_unlocked_r+0x22e>
 801ef08:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 801ef0c:	bf06      	itte	eq
 801ef0e:	3501      	addeq	r5, #1
 801ef10:	464b      	moveq	r3, r9
 801ef12:	2344      	movne	r3, #68	@ 0x44
 801ef14:	220a      	movs	r2, #10
 801ef16:	a90b      	add	r1, sp, #44	@ 0x2c
 801ef18:	4628      	mov	r0, r5
 801ef1a:	9305      	str	r3, [sp, #20]
 801ef1c:	f002 f938 	bl	8021190 <strtoul>
 801ef20:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 801ef24:	9b05      	ldr	r3, [sp, #20]
 801ef26:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 801ef2a:	45a9      	cmp	r9, r5
 801ef2c:	d114      	bne.n	801ef58 <_tzset_unlocked_r+0x3d8>
 801ef2e:	234d      	movs	r3, #77	@ 0x4d
 801ef30:	f1bb 0f00 	cmp.w	fp, #0
 801ef34:	d107      	bne.n	801ef46 <_tzset_unlocked_r+0x3c6>
 801ef36:	7223      	strb	r3, [r4, #8]
 801ef38:	2103      	movs	r1, #3
 801ef3a:	2302      	movs	r3, #2
 801ef3c:	e9c4 1303 	strd	r1, r3, [r4, #12]
 801ef40:	f8c4 b014 	str.w	fp, [r4, #20]
 801ef44:	e767      	b.n	801ee16 <_tzset_unlocked_r+0x296>
 801ef46:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 801ef4a:	220b      	movs	r2, #11
 801ef4c:	2301      	movs	r3, #1
 801ef4e:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 801ef52:	2300      	movs	r3, #0
 801ef54:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801ef56:	e75e      	b.n	801ee16 <_tzset_unlocked_r+0x296>
 801ef58:	b280      	uxth	r0, r0
 801ef5a:	723b      	strb	r3, [r7, #8]
 801ef5c:	6178      	str	r0, [r7, #20]
 801ef5e:	e75a      	b.n	801ee16 <_tzset_unlocked_r+0x296>
 801ef60:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801ef64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ef68:	213c      	movs	r1, #60	@ 0x3c
 801ef6a:	fb01 3302 	mla	r3, r1, r2, r3
 801ef6e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801ef72:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801ef76:	fb01 3302 	mla	r3, r1, r2, r3
 801ef7a:	61bb      	str	r3, [r7, #24]
 801ef7c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801ef7e:	3728      	adds	r7, #40	@ 0x28
 801ef80:	444d      	add	r5, r9
 801ef82:	f1bb 0f00 	cmp.w	fp, #0
 801ef86:	d0bc      	beq.n	801ef02 <_tzset_unlocked_r+0x382>
 801ef88:	9b04      	ldr	r3, [sp, #16]
 801ef8a:	6523      	str	r3, [r4, #80]	@ 0x50
 801ef8c:	4b0b      	ldr	r3, [pc, #44]	@ (801efbc <_tzset_unlocked_r+0x43c>)
 801ef8e:	f8c8 3000 	str.w	r3, [r8]
 801ef92:	6860      	ldr	r0, [r4, #4]
 801ef94:	4b07      	ldr	r3, [pc, #28]	@ (801efb4 <_tzset_unlocked_r+0x434>)
 801ef96:	62a6      	str	r6, [r4, #40]	@ 0x28
 801ef98:	f8c8 3004 	str.w	r3, [r8, #4]
 801ef9c:	f7ff fd2a 	bl	801e9f4 <__tzcalc_limits>
 801efa0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801efa2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801efa4:	f8ca 2000 	str.w	r2, [sl]
 801efa8:	1a9b      	subs	r3, r3, r2
 801efaa:	4a05      	ldr	r2, [pc, #20]	@ (801efc0 <_tzset_unlocked_r+0x440>)
 801efac:	bf18      	it	ne
 801efae:	2301      	movne	r3, #1
 801efb0:	6013      	str	r3, [r2, #0]
 801efb2:	e613      	b.n	801ebdc <_tzset_unlocked_r+0x5c>
 801efb4:	200066a4 	.word	0x200066a4
 801efb8:	080260c6 	.word	0x080260c6
 801efbc:	200066b0 	.word	0x200066b0
 801efc0:	200066c0 	.word	0x200066c0

0801efc4 <_localeconv_r>:
 801efc4:	4800      	ldr	r0, [pc, #0]	@ (801efc8 <_localeconv_r+0x4>)
 801efc6:	4770      	bx	lr
 801efc8:	20000144 	.word	0x20000144

0801efcc <_close_r>:
 801efcc:	b538      	push	{r3, r4, r5, lr}
 801efce:	4d06      	ldr	r5, [pc, #24]	@ (801efe8 <_close_r+0x1c>)
 801efd0:	2300      	movs	r3, #0
 801efd2:	4604      	mov	r4, r0
 801efd4:	4608      	mov	r0, r1
 801efd6:	602b      	str	r3, [r5, #0]
 801efd8:	f7e4 f928 	bl	800322c <_close>
 801efdc:	1c43      	adds	r3, r0, #1
 801efde:	d102      	bne.n	801efe6 <_close_r+0x1a>
 801efe0:	682b      	ldr	r3, [r5, #0]
 801efe2:	b103      	cbz	r3, 801efe6 <_close_r+0x1a>
 801efe4:	6023      	str	r3, [r4, #0]
 801efe6:	bd38      	pop	{r3, r4, r5, pc}
 801efe8:	200066c4 	.word	0x200066c4

0801efec <_reclaim_reent>:
 801efec:	4b2d      	ldr	r3, [pc, #180]	@ (801f0a4 <_reclaim_reent+0xb8>)
 801efee:	681b      	ldr	r3, [r3, #0]
 801eff0:	4283      	cmp	r3, r0
 801eff2:	b570      	push	{r4, r5, r6, lr}
 801eff4:	4604      	mov	r4, r0
 801eff6:	d053      	beq.n	801f0a0 <_reclaim_reent+0xb4>
 801eff8:	69c3      	ldr	r3, [r0, #28]
 801effa:	b31b      	cbz	r3, 801f044 <_reclaim_reent+0x58>
 801effc:	68db      	ldr	r3, [r3, #12]
 801effe:	b163      	cbz	r3, 801f01a <_reclaim_reent+0x2e>
 801f000:	2500      	movs	r5, #0
 801f002:	69e3      	ldr	r3, [r4, #28]
 801f004:	68db      	ldr	r3, [r3, #12]
 801f006:	5959      	ldr	r1, [r3, r5]
 801f008:	b9b1      	cbnz	r1, 801f038 <_reclaim_reent+0x4c>
 801f00a:	3504      	adds	r5, #4
 801f00c:	2d80      	cmp	r5, #128	@ 0x80
 801f00e:	d1f8      	bne.n	801f002 <_reclaim_reent+0x16>
 801f010:	69e3      	ldr	r3, [r4, #28]
 801f012:	4620      	mov	r0, r4
 801f014:	68d9      	ldr	r1, [r3, #12]
 801f016:	f000 ffc7 	bl	801ffa8 <_free_r>
 801f01a:	69e3      	ldr	r3, [r4, #28]
 801f01c:	6819      	ldr	r1, [r3, #0]
 801f01e:	b111      	cbz	r1, 801f026 <_reclaim_reent+0x3a>
 801f020:	4620      	mov	r0, r4
 801f022:	f000 ffc1 	bl	801ffa8 <_free_r>
 801f026:	69e3      	ldr	r3, [r4, #28]
 801f028:	689d      	ldr	r5, [r3, #8]
 801f02a:	b15d      	cbz	r5, 801f044 <_reclaim_reent+0x58>
 801f02c:	4629      	mov	r1, r5
 801f02e:	4620      	mov	r0, r4
 801f030:	682d      	ldr	r5, [r5, #0]
 801f032:	f000 ffb9 	bl	801ffa8 <_free_r>
 801f036:	e7f8      	b.n	801f02a <_reclaim_reent+0x3e>
 801f038:	680e      	ldr	r6, [r1, #0]
 801f03a:	4620      	mov	r0, r4
 801f03c:	f000 ffb4 	bl	801ffa8 <_free_r>
 801f040:	4631      	mov	r1, r6
 801f042:	e7e1      	b.n	801f008 <_reclaim_reent+0x1c>
 801f044:	6961      	ldr	r1, [r4, #20]
 801f046:	b111      	cbz	r1, 801f04e <_reclaim_reent+0x62>
 801f048:	4620      	mov	r0, r4
 801f04a:	f000 ffad 	bl	801ffa8 <_free_r>
 801f04e:	69e1      	ldr	r1, [r4, #28]
 801f050:	b111      	cbz	r1, 801f058 <_reclaim_reent+0x6c>
 801f052:	4620      	mov	r0, r4
 801f054:	f000 ffa8 	bl	801ffa8 <_free_r>
 801f058:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801f05a:	b111      	cbz	r1, 801f062 <_reclaim_reent+0x76>
 801f05c:	4620      	mov	r0, r4
 801f05e:	f000 ffa3 	bl	801ffa8 <_free_r>
 801f062:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f064:	b111      	cbz	r1, 801f06c <_reclaim_reent+0x80>
 801f066:	4620      	mov	r0, r4
 801f068:	f000 ff9e 	bl	801ffa8 <_free_r>
 801f06c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801f06e:	b111      	cbz	r1, 801f076 <_reclaim_reent+0x8a>
 801f070:	4620      	mov	r0, r4
 801f072:	f000 ff99 	bl	801ffa8 <_free_r>
 801f076:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801f078:	b111      	cbz	r1, 801f080 <_reclaim_reent+0x94>
 801f07a:	4620      	mov	r0, r4
 801f07c:	f000 ff94 	bl	801ffa8 <_free_r>
 801f080:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801f082:	b111      	cbz	r1, 801f08a <_reclaim_reent+0x9e>
 801f084:	4620      	mov	r0, r4
 801f086:	f000 ff8f 	bl	801ffa8 <_free_r>
 801f08a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801f08c:	b111      	cbz	r1, 801f094 <_reclaim_reent+0xa8>
 801f08e:	4620      	mov	r0, r4
 801f090:	f000 ff8a 	bl	801ffa8 <_free_r>
 801f094:	6a23      	ldr	r3, [r4, #32]
 801f096:	b11b      	cbz	r3, 801f0a0 <_reclaim_reent+0xb4>
 801f098:	4620      	mov	r0, r4
 801f09a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f09e:	4718      	bx	r3
 801f0a0:	bd70      	pop	{r4, r5, r6, pc}
 801f0a2:	bf00      	nop
 801f0a4:	200001c0 	.word	0x200001c0

0801f0a8 <_gettimeofday_r>:
 801f0a8:	b538      	push	{r3, r4, r5, lr}
 801f0aa:	4d07      	ldr	r5, [pc, #28]	@ (801f0c8 <_gettimeofday_r+0x20>)
 801f0ac:	2300      	movs	r3, #0
 801f0ae:	4604      	mov	r4, r0
 801f0b0:	4608      	mov	r0, r1
 801f0b2:	4611      	mov	r1, r2
 801f0b4:	602b      	str	r3, [r5, #0]
 801f0b6:	f7e2 ffe9 	bl	800208c <_gettimeofday>
 801f0ba:	1c43      	adds	r3, r0, #1
 801f0bc:	d102      	bne.n	801f0c4 <_gettimeofday_r+0x1c>
 801f0be:	682b      	ldr	r3, [r5, #0]
 801f0c0:	b103      	cbz	r3, 801f0c4 <_gettimeofday_r+0x1c>
 801f0c2:	6023      	str	r3, [r4, #0]
 801f0c4:	bd38      	pop	{r3, r4, r5, pc}
 801f0c6:	bf00      	nop
 801f0c8:	200066c4 	.word	0x200066c4

0801f0cc <_lseek_r>:
 801f0cc:	b538      	push	{r3, r4, r5, lr}
 801f0ce:	4d07      	ldr	r5, [pc, #28]	@ (801f0ec <_lseek_r+0x20>)
 801f0d0:	4604      	mov	r4, r0
 801f0d2:	4608      	mov	r0, r1
 801f0d4:	4611      	mov	r1, r2
 801f0d6:	2200      	movs	r2, #0
 801f0d8:	602a      	str	r2, [r5, #0]
 801f0da:	461a      	mov	r2, r3
 801f0dc:	f7e4 f8cd 	bl	800327a <_lseek>
 801f0e0:	1c43      	adds	r3, r0, #1
 801f0e2:	d102      	bne.n	801f0ea <_lseek_r+0x1e>
 801f0e4:	682b      	ldr	r3, [r5, #0]
 801f0e6:	b103      	cbz	r3, 801f0ea <_lseek_r+0x1e>
 801f0e8:	6023      	str	r3, [r4, #0]
 801f0ea:	bd38      	pop	{r3, r4, r5, pc}
 801f0ec:	200066c4 	.word	0x200066c4

0801f0f0 <_read_r>:
 801f0f0:	b538      	push	{r3, r4, r5, lr}
 801f0f2:	4d07      	ldr	r5, [pc, #28]	@ (801f110 <_read_r+0x20>)
 801f0f4:	4604      	mov	r4, r0
 801f0f6:	4608      	mov	r0, r1
 801f0f8:	4611      	mov	r1, r2
 801f0fa:	2200      	movs	r2, #0
 801f0fc:	602a      	str	r2, [r5, #0]
 801f0fe:	461a      	mov	r2, r3
 801f100:	f7e4 f85b 	bl	80031ba <_read>
 801f104:	1c43      	adds	r3, r0, #1
 801f106:	d102      	bne.n	801f10e <_read_r+0x1e>
 801f108:	682b      	ldr	r3, [r5, #0]
 801f10a:	b103      	cbz	r3, 801f10e <_read_r+0x1e>
 801f10c:	6023      	str	r3, [r4, #0]
 801f10e:	bd38      	pop	{r3, r4, r5, pc}
 801f110:	200066c4 	.word	0x200066c4

0801f114 <_sbrk_r>:
 801f114:	b538      	push	{r3, r4, r5, lr}
 801f116:	4d06      	ldr	r5, [pc, #24]	@ (801f130 <_sbrk_r+0x1c>)
 801f118:	2300      	movs	r3, #0
 801f11a:	4604      	mov	r4, r0
 801f11c:	4608      	mov	r0, r1
 801f11e:	602b      	str	r3, [r5, #0]
 801f120:	f7e4 f8b8 	bl	8003294 <_sbrk>
 801f124:	1c43      	adds	r3, r0, #1
 801f126:	d102      	bne.n	801f12e <_sbrk_r+0x1a>
 801f128:	682b      	ldr	r3, [r5, #0]
 801f12a:	b103      	cbz	r3, 801f12e <_sbrk_r+0x1a>
 801f12c:	6023      	str	r3, [r4, #0]
 801f12e:	bd38      	pop	{r3, r4, r5, pc}
 801f130:	200066c4 	.word	0x200066c4

0801f134 <_write_r>:
 801f134:	b538      	push	{r3, r4, r5, lr}
 801f136:	4d07      	ldr	r5, [pc, #28]	@ (801f154 <_write_r+0x20>)
 801f138:	4604      	mov	r4, r0
 801f13a:	4608      	mov	r0, r1
 801f13c:	4611      	mov	r1, r2
 801f13e:	2200      	movs	r2, #0
 801f140:	602a      	str	r2, [r5, #0]
 801f142:	461a      	mov	r2, r3
 801f144:	f7e4 f856 	bl	80031f4 <_write>
 801f148:	1c43      	adds	r3, r0, #1
 801f14a:	d102      	bne.n	801f152 <_write_r+0x1e>
 801f14c:	682b      	ldr	r3, [r5, #0]
 801f14e:	b103      	cbz	r3, 801f152 <_write_r+0x1e>
 801f150:	6023      	str	r3, [r4, #0]
 801f152:	bd38      	pop	{r3, r4, r5, pc}
 801f154:	200066c4 	.word	0x200066c4

0801f158 <__errno>:
 801f158:	4b01      	ldr	r3, [pc, #4]	@ (801f160 <__errno+0x8>)
 801f15a:	6818      	ldr	r0, [r3, #0]
 801f15c:	4770      	bx	lr
 801f15e:	bf00      	nop
 801f160:	200001c0 	.word	0x200001c0

0801f164 <__libc_init_array>:
 801f164:	b570      	push	{r4, r5, r6, lr}
 801f166:	4d0d      	ldr	r5, [pc, #52]	@ (801f19c <__libc_init_array+0x38>)
 801f168:	4c0d      	ldr	r4, [pc, #52]	@ (801f1a0 <__libc_init_array+0x3c>)
 801f16a:	1b64      	subs	r4, r4, r5
 801f16c:	10a4      	asrs	r4, r4, #2
 801f16e:	2600      	movs	r6, #0
 801f170:	42a6      	cmp	r6, r4
 801f172:	d109      	bne.n	801f188 <__libc_init_array+0x24>
 801f174:	4d0b      	ldr	r5, [pc, #44]	@ (801f1a4 <__libc_init_array+0x40>)
 801f176:	4c0c      	ldr	r4, [pc, #48]	@ (801f1a8 <__libc_init_array+0x44>)
 801f178:	f006 fca6 	bl	8025ac8 <_init>
 801f17c:	1b64      	subs	r4, r4, r5
 801f17e:	10a4      	asrs	r4, r4, #2
 801f180:	2600      	movs	r6, #0
 801f182:	42a6      	cmp	r6, r4
 801f184:	d105      	bne.n	801f192 <__libc_init_array+0x2e>
 801f186:	bd70      	pop	{r4, r5, r6, pc}
 801f188:	f855 3b04 	ldr.w	r3, [r5], #4
 801f18c:	4798      	blx	r3
 801f18e:	3601      	adds	r6, #1
 801f190:	e7ee      	b.n	801f170 <__libc_init_array+0xc>
 801f192:	f855 3b04 	ldr.w	r3, [r5], #4
 801f196:	4798      	blx	r3
 801f198:	3601      	adds	r6, #1
 801f19a:	e7f2      	b.n	801f182 <__libc_init_array+0x1e>
 801f19c:	08026880 	.word	0x08026880
 801f1a0:	08026880 	.word	0x08026880
 801f1a4:	08026880 	.word	0x08026880
 801f1a8:	08026884 	.word	0x08026884

0801f1ac <__retarget_lock_init_recursive>:
 801f1ac:	4770      	bx	lr

0801f1ae <__retarget_lock_acquire>:
 801f1ae:	4770      	bx	lr

0801f1b0 <__retarget_lock_acquire_recursive>:
 801f1b0:	4770      	bx	lr

0801f1b2 <__retarget_lock_release>:
 801f1b2:	4770      	bx	lr

0801f1b4 <__retarget_lock_release_recursive>:
 801f1b4:	4770      	bx	lr

0801f1b6 <strcpy>:
 801f1b6:	4603      	mov	r3, r0
 801f1b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f1bc:	f803 2b01 	strb.w	r2, [r3], #1
 801f1c0:	2a00      	cmp	r2, #0
 801f1c2:	d1f9      	bne.n	801f1b8 <strcpy+0x2>
 801f1c4:	4770      	bx	lr

0801f1c6 <memcpy>:
 801f1c6:	440a      	add	r2, r1
 801f1c8:	4291      	cmp	r1, r2
 801f1ca:	f100 33ff 	add.w	r3, r0, #4294967295
 801f1ce:	d100      	bne.n	801f1d2 <memcpy+0xc>
 801f1d0:	4770      	bx	lr
 801f1d2:	b510      	push	{r4, lr}
 801f1d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f1d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f1dc:	4291      	cmp	r1, r2
 801f1de:	d1f9      	bne.n	801f1d4 <memcpy+0xe>
 801f1e0:	bd10      	pop	{r4, pc}
 801f1e2:	0000      	movs	r0, r0
 801f1e4:	0000      	movs	r0, r0
	...

0801f1e8 <nan>:
 801f1e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801f1f0 <nan+0x8>
 801f1ec:	4770      	bx	lr
 801f1ee:	bf00      	nop
 801f1f0:	00000000 	.word	0x00000000
 801f1f4:	7ff80000 	.word	0x7ff80000

0801f1f8 <nanf>:
 801f1f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801f200 <nanf+0x8>
 801f1fc:	4770      	bx	lr
 801f1fe:	bf00      	nop
 801f200:	7fc00000 	.word	0x7fc00000

0801f204 <modf>:
 801f204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f206:	ec55 4b10 	vmov	r4, r5, d0
 801f20a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f20e:	f2a3 32ff 	subw	r2, r3, #1023	@ 0x3ff
 801f212:	2a13      	cmp	r2, #19
 801f214:	4606      	mov	r6, r0
 801f216:	462f      	mov	r7, r5
 801f218:	dc21      	bgt.n	801f25e <modf+0x5a>
 801f21a:	2a00      	cmp	r2, #0
 801f21c:	da07      	bge.n	801f22e <modf+0x2a>
 801f21e:	2200      	movs	r2, #0
 801f220:	f005 4300 	and.w	r3, r5, #2147483648	@ 0x80000000
 801f224:	e9c0 2300 	strd	r2, r3, [r0]
 801f228:	ec45 4b10 	vmov	d0, r4, r5
 801f22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f22e:	481d      	ldr	r0, [pc, #116]	@ (801f2a4 <modf+0xa0>)
 801f230:	4110      	asrs	r0, r2
 801f232:	ea05 0300 	and.w	r3, r5, r0
 801f236:	4323      	orrs	r3, r4
 801f238:	d105      	bne.n	801f246 <modf+0x42>
 801f23a:	e9c6 4500 	strd	r4, r5, [r6]
 801f23e:	f007 4500 	and.w	r5, r7, #2147483648	@ 0x80000000
 801f242:	461c      	mov	r4, r3
 801f244:	e7f0      	b.n	801f228 <modf+0x24>
 801f246:	2200      	movs	r2, #0
 801f248:	ea25 0300 	bic.w	r3, r5, r0
 801f24c:	4620      	mov	r0, r4
 801f24e:	4629      	mov	r1, r5
 801f250:	e9c6 2300 	strd	r2, r3, [r6]
 801f254:	f7e1 f828 	bl	80002a8 <__aeabi_dsub>
 801f258:	4604      	mov	r4, r0
 801f25a:	460d      	mov	r5, r1
 801f25c:	e7e4      	b.n	801f228 <modf+0x24>
 801f25e:	2a33      	cmp	r2, #51	@ 0x33
 801f260:	dd13      	ble.n	801f28a <modf+0x86>
 801f262:	ed86 0b00 	vstr	d0, [r6]
 801f266:	f002 fd6f 	bl	8021d48 <__fpclassifyd>
 801f26a:	b950      	cbnz	r0, 801f282 <modf+0x7e>
 801f26c:	4622      	mov	r2, r4
 801f26e:	462b      	mov	r3, r5
 801f270:	4620      	mov	r0, r4
 801f272:	4629      	mov	r1, r5
 801f274:	f7e1 f81a 	bl	80002ac <__adddf3>
 801f278:	4604      	mov	r4, r0
 801f27a:	460d      	mov	r5, r1
 801f27c:	e9c6 4500 	strd	r4, r5, [r6]
 801f280:	e7d2      	b.n	801f228 <modf+0x24>
 801f282:	2400      	movs	r4, #0
 801f284:	f005 4500 	and.w	r5, r5, #2147483648	@ 0x80000000
 801f288:	e7ce      	b.n	801f228 <modf+0x24>
 801f28a:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801f28e:	f04f 30ff 	mov.w	r0, #4294967295
 801f292:	40d8      	lsrs	r0, r3
 801f294:	ea14 0300 	ands.w	r3, r4, r0
 801f298:	d0cf      	beq.n	801f23a <modf+0x36>
 801f29a:	462b      	mov	r3, r5
 801f29c:	ea24 0200 	bic.w	r2, r4, r0
 801f2a0:	e7d4      	b.n	801f24c <modf+0x48>
 801f2a2:	bf00      	nop
 801f2a4:	000fffff 	.word	0x000fffff

0801f2a8 <__assert_func>:
 801f2a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f2aa:	4614      	mov	r4, r2
 801f2ac:	461a      	mov	r2, r3
 801f2ae:	4b09      	ldr	r3, [pc, #36]	@ (801f2d4 <__assert_func+0x2c>)
 801f2b0:	681b      	ldr	r3, [r3, #0]
 801f2b2:	4605      	mov	r5, r0
 801f2b4:	68d8      	ldr	r0, [r3, #12]
 801f2b6:	b14c      	cbz	r4, 801f2cc <__assert_func+0x24>
 801f2b8:	4b07      	ldr	r3, [pc, #28]	@ (801f2d8 <__assert_func+0x30>)
 801f2ba:	9100      	str	r1, [sp, #0]
 801f2bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f2c0:	4906      	ldr	r1, [pc, #24]	@ (801f2dc <__assert_func+0x34>)
 801f2c2:	462b      	mov	r3, r5
 801f2c4:	f002 fc9c 	bl	8021c00 <fiprintf>
 801f2c8:	f002 fd62 	bl	8021d90 <abort>
 801f2cc:	4b04      	ldr	r3, [pc, #16]	@ (801f2e0 <__assert_func+0x38>)
 801f2ce:	461c      	mov	r4, r3
 801f2d0:	e7f3      	b.n	801f2ba <__assert_func+0x12>
 801f2d2:	bf00      	nop
 801f2d4:	200001c0 	.word	0x200001c0
 801f2d8:	08026102 	.word	0x08026102
 801f2dc:	0802610f 	.word	0x0802610f
 801f2e0:	0802613d 	.word	0x0802613d

0801f2e4 <div>:
 801f2e4:	b510      	push	{r4, lr}
 801f2e6:	fb91 f4f2 	sdiv	r4, r1, r2
 801f2ea:	fb02 1114 	mls	r1, r2, r4, r1
 801f2ee:	6004      	str	r4, [r0, #0]
 801f2f0:	6041      	str	r1, [r0, #4]
 801f2f2:	bd10      	pop	{r4, pc}

0801f2f4 <quorem>:
 801f2f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2f8:	6903      	ldr	r3, [r0, #16]
 801f2fa:	690c      	ldr	r4, [r1, #16]
 801f2fc:	42a3      	cmp	r3, r4
 801f2fe:	4607      	mov	r7, r0
 801f300:	db7e      	blt.n	801f400 <quorem+0x10c>
 801f302:	3c01      	subs	r4, #1
 801f304:	f101 0814 	add.w	r8, r1, #20
 801f308:	00a3      	lsls	r3, r4, #2
 801f30a:	f100 0514 	add.w	r5, r0, #20
 801f30e:	9300      	str	r3, [sp, #0]
 801f310:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f314:	9301      	str	r3, [sp, #4]
 801f316:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801f31a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f31e:	3301      	adds	r3, #1
 801f320:	429a      	cmp	r2, r3
 801f322:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801f326:	fbb2 f6f3 	udiv	r6, r2, r3
 801f32a:	d32e      	bcc.n	801f38a <quorem+0x96>
 801f32c:	f04f 0a00 	mov.w	sl, #0
 801f330:	46c4      	mov	ip, r8
 801f332:	46ae      	mov	lr, r5
 801f334:	46d3      	mov	fp, sl
 801f336:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f33a:	b298      	uxth	r0, r3
 801f33c:	fb06 a000 	mla	r0, r6, r0, sl
 801f340:	0c02      	lsrs	r2, r0, #16
 801f342:	0c1b      	lsrs	r3, r3, #16
 801f344:	fb06 2303 	mla	r3, r6, r3, r2
 801f348:	f8de 2000 	ldr.w	r2, [lr]
 801f34c:	b280      	uxth	r0, r0
 801f34e:	b292      	uxth	r2, r2
 801f350:	1a12      	subs	r2, r2, r0
 801f352:	445a      	add	r2, fp
 801f354:	f8de 0000 	ldr.w	r0, [lr]
 801f358:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f35c:	b29b      	uxth	r3, r3
 801f35e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801f362:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801f366:	b292      	uxth	r2, r2
 801f368:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801f36c:	45e1      	cmp	r9, ip
 801f36e:	f84e 2b04 	str.w	r2, [lr], #4
 801f372:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801f376:	d2de      	bcs.n	801f336 <quorem+0x42>
 801f378:	9b00      	ldr	r3, [sp, #0]
 801f37a:	58eb      	ldr	r3, [r5, r3]
 801f37c:	b92b      	cbnz	r3, 801f38a <quorem+0x96>
 801f37e:	9b01      	ldr	r3, [sp, #4]
 801f380:	3b04      	subs	r3, #4
 801f382:	429d      	cmp	r5, r3
 801f384:	461a      	mov	r2, r3
 801f386:	d32f      	bcc.n	801f3e8 <quorem+0xf4>
 801f388:	613c      	str	r4, [r7, #16]
 801f38a:	4638      	mov	r0, r7
 801f38c:	f001 fca2 	bl	8020cd4 <__mcmp>
 801f390:	2800      	cmp	r0, #0
 801f392:	db25      	blt.n	801f3e0 <quorem+0xec>
 801f394:	4629      	mov	r1, r5
 801f396:	2000      	movs	r0, #0
 801f398:	f858 2b04 	ldr.w	r2, [r8], #4
 801f39c:	f8d1 c000 	ldr.w	ip, [r1]
 801f3a0:	fa1f fe82 	uxth.w	lr, r2
 801f3a4:	fa1f f38c 	uxth.w	r3, ip
 801f3a8:	eba3 030e 	sub.w	r3, r3, lr
 801f3ac:	4403      	add	r3, r0
 801f3ae:	0c12      	lsrs	r2, r2, #16
 801f3b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801f3b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801f3b8:	b29b      	uxth	r3, r3
 801f3ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f3be:	45c1      	cmp	r9, r8
 801f3c0:	f841 3b04 	str.w	r3, [r1], #4
 801f3c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 801f3c8:	d2e6      	bcs.n	801f398 <quorem+0xa4>
 801f3ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f3ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f3d2:	b922      	cbnz	r2, 801f3de <quorem+0xea>
 801f3d4:	3b04      	subs	r3, #4
 801f3d6:	429d      	cmp	r5, r3
 801f3d8:	461a      	mov	r2, r3
 801f3da:	d30b      	bcc.n	801f3f4 <quorem+0x100>
 801f3dc:	613c      	str	r4, [r7, #16]
 801f3de:	3601      	adds	r6, #1
 801f3e0:	4630      	mov	r0, r6
 801f3e2:	b003      	add	sp, #12
 801f3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3e8:	6812      	ldr	r2, [r2, #0]
 801f3ea:	3b04      	subs	r3, #4
 801f3ec:	2a00      	cmp	r2, #0
 801f3ee:	d1cb      	bne.n	801f388 <quorem+0x94>
 801f3f0:	3c01      	subs	r4, #1
 801f3f2:	e7c6      	b.n	801f382 <quorem+0x8e>
 801f3f4:	6812      	ldr	r2, [r2, #0]
 801f3f6:	3b04      	subs	r3, #4
 801f3f8:	2a00      	cmp	r2, #0
 801f3fa:	d1ef      	bne.n	801f3dc <quorem+0xe8>
 801f3fc:	3c01      	subs	r4, #1
 801f3fe:	e7ea      	b.n	801f3d6 <quorem+0xe2>
 801f400:	2000      	movs	r0, #0
 801f402:	e7ee      	b.n	801f3e2 <quorem+0xee>
 801f404:	0000      	movs	r0, r0
	...

0801f408 <_dtoa_r>:
 801f408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f40c:	69c7      	ldr	r7, [r0, #28]
 801f40e:	b097      	sub	sp, #92	@ 0x5c
 801f410:	ed8d 0b04 	vstr	d0, [sp, #16]
 801f414:	ec55 4b10 	vmov	r4, r5, d0
 801f418:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801f41a:	9107      	str	r1, [sp, #28]
 801f41c:	4681      	mov	r9, r0
 801f41e:	920c      	str	r2, [sp, #48]	@ 0x30
 801f420:	9311      	str	r3, [sp, #68]	@ 0x44
 801f422:	b97f      	cbnz	r7, 801f444 <_dtoa_r+0x3c>
 801f424:	2010      	movs	r0, #16
 801f426:	f7fc fefd 	bl	801c224 <malloc>
 801f42a:	4602      	mov	r2, r0
 801f42c:	f8c9 001c 	str.w	r0, [r9, #28]
 801f430:	b920      	cbnz	r0, 801f43c <_dtoa_r+0x34>
 801f432:	4ba9      	ldr	r3, [pc, #676]	@ (801f6d8 <_dtoa_r+0x2d0>)
 801f434:	21ef      	movs	r1, #239	@ 0xef
 801f436:	48a9      	ldr	r0, [pc, #676]	@ (801f6dc <_dtoa_r+0x2d4>)
 801f438:	f7ff ff36 	bl	801f2a8 <__assert_func>
 801f43c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801f440:	6007      	str	r7, [r0, #0]
 801f442:	60c7      	str	r7, [r0, #12]
 801f444:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801f448:	6819      	ldr	r1, [r3, #0]
 801f44a:	b159      	cbz	r1, 801f464 <_dtoa_r+0x5c>
 801f44c:	685a      	ldr	r2, [r3, #4]
 801f44e:	604a      	str	r2, [r1, #4]
 801f450:	2301      	movs	r3, #1
 801f452:	4093      	lsls	r3, r2
 801f454:	608b      	str	r3, [r1, #8]
 801f456:	4648      	mov	r0, r9
 801f458:	f001 f9c0 	bl	80207dc <_Bfree>
 801f45c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801f460:	2200      	movs	r2, #0
 801f462:	601a      	str	r2, [r3, #0]
 801f464:	1e2b      	subs	r3, r5, #0
 801f466:	bfb9      	ittee	lt
 801f468:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801f46c:	9305      	strlt	r3, [sp, #20]
 801f46e:	2300      	movge	r3, #0
 801f470:	6033      	strge	r3, [r6, #0]
 801f472:	9f05      	ldr	r7, [sp, #20]
 801f474:	4b9a      	ldr	r3, [pc, #616]	@ (801f6e0 <_dtoa_r+0x2d8>)
 801f476:	bfbc      	itt	lt
 801f478:	2201      	movlt	r2, #1
 801f47a:	6032      	strlt	r2, [r6, #0]
 801f47c:	43bb      	bics	r3, r7
 801f47e:	d112      	bne.n	801f4a6 <_dtoa_r+0x9e>
 801f480:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f482:	f242 730f 	movw	r3, #9999	@ 0x270f
 801f486:	6013      	str	r3, [r2, #0]
 801f488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f48c:	4323      	orrs	r3, r4
 801f48e:	f000 855a 	beq.w	801ff46 <_dtoa_r+0xb3e>
 801f492:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f494:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801f6f4 <_dtoa_r+0x2ec>
 801f498:	2b00      	cmp	r3, #0
 801f49a:	f000 855c 	beq.w	801ff56 <_dtoa_r+0xb4e>
 801f49e:	f10a 0303 	add.w	r3, sl, #3
 801f4a2:	f000 bd56 	b.w	801ff52 <_dtoa_r+0xb4a>
 801f4a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 801f4aa:	2200      	movs	r2, #0
 801f4ac:	ec51 0b17 	vmov	r0, r1, d7
 801f4b0:	2300      	movs	r3, #0
 801f4b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801f4b6:	f7e1 fb17 	bl	8000ae8 <__aeabi_dcmpeq>
 801f4ba:	4680      	mov	r8, r0
 801f4bc:	b158      	cbz	r0, 801f4d6 <_dtoa_r+0xce>
 801f4be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f4c0:	2301      	movs	r3, #1
 801f4c2:	6013      	str	r3, [r2, #0]
 801f4c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f4c6:	b113      	cbz	r3, 801f4ce <_dtoa_r+0xc6>
 801f4c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f4ca:	4b86      	ldr	r3, [pc, #536]	@ (801f6e4 <_dtoa_r+0x2dc>)
 801f4cc:	6013      	str	r3, [r2, #0]
 801f4ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801f6f8 <_dtoa_r+0x2f0>
 801f4d2:	f000 bd40 	b.w	801ff56 <_dtoa_r+0xb4e>
 801f4d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801f4da:	aa14      	add	r2, sp, #80	@ 0x50
 801f4dc:	a915      	add	r1, sp, #84	@ 0x54
 801f4de:	4648      	mov	r0, r9
 801f4e0:	f001 fd18 	bl	8020f14 <__d2b>
 801f4e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801f4e8:	9002      	str	r0, [sp, #8]
 801f4ea:	2e00      	cmp	r6, #0
 801f4ec:	d078      	beq.n	801f5e0 <_dtoa_r+0x1d8>
 801f4ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f4f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801f4f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f4f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801f4fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801f500:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801f504:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801f508:	4619      	mov	r1, r3
 801f50a:	2200      	movs	r2, #0
 801f50c:	4b76      	ldr	r3, [pc, #472]	@ (801f6e8 <_dtoa_r+0x2e0>)
 801f50e:	f7e0 fecb 	bl	80002a8 <__aeabi_dsub>
 801f512:	a36b      	add	r3, pc, #428	@ (adr r3, 801f6c0 <_dtoa_r+0x2b8>)
 801f514:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f518:	f7e1 f87e 	bl	8000618 <__aeabi_dmul>
 801f51c:	a36a      	add	r3, pc, #424	@ (adr r3, 801f6c8 <_dtoa_r+0x2c0>)
 801f51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f522:	f7e0 fec3 	bl	80002ac <__adddf3>
 801f526:	4604      	mov	r4, r0
 801f528:	4630      	mov	r0, r6
 801f52a:	460d      	mov	r5, r1
 801f52c:	f7e1 f80a 	bl	8000544 <__aeabi_i2d>
 801f530:	a367      	add	r3, pc, #412	@ (adr r3, 801f6d0 <_dtoa_r+0x2c8>)
 801f532:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f536:	f7e1 f86f 	bl	8000618 <__aeabi_dmul>
 801f53a:	4602      	mov	r2, r0
 801f53c:	460b      	mov	r3, r1
 801f53e:	4620      	mov	r0, r4
 801f540:	4629      	mov	r1, r5
 801f542:	f7e0 feb3 	bl	80002ac <__adddf3>
 801f546:	4604      	mov	r4, r0
 801f548:	460d      	mov	r5, r1
 801f54a:	f7e1 fb15 	bl	8000b78 <__aeabi_d2iz>
 801f54e:	2200      	movs	r2, #0
 801f550:	4607      	mov	r7, r0
 801f552:	2300      	movs	r3, #0
 801f554:	4620      	mov	r0, r4
 801f556:	4629      	mov	r1, r5
 801f558:	f7e1 fad0 	bl	8000afc <__aeabi_dcmplt>
 801f55c:	b140      	cbz	r0, 801f570 <_dtoa_r+0x168>
 801f55e:	4638      	mov	r0, r7
 801f560:	f7e0 fff0 	bl	8000544 <__aeabi_i2d>
 801f564:	4622      	mov	r2, r4
 801f566:	462b      	mov	r3, r5
 801f568:	f7e1 fabe 	bl	8000ae8 <__aeabi_dcmpeq>
 801f56c:	b900      	cbnz	r0, 801f570 <_dtoa_r+0x168>
 801f56e:	3f01      	subs	r7, #1
 801f570:	2f16      	cmp	r7, #22
 801f572:	d852      	bhi.n	801f61a <_dtoa_r+0x212>
 801f574:	4b5d      	ldr	r3, [pc, #372]	@ (801f6ec <_dtoa_r+0x2e4>)
 801f576:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f57e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801f582:	f7e1 fabb 	bl	8000afc <__aeabi_dcmplt>
 801f586:	2800      	cmp	r0, #0
 801f588:	d049      	beq.n	801f61e <_dtoa_r+0x216>
 801f58a:	3f01      	subs	r7, #1
 801f58c:	2300      	movs	r3, #0
 801f58e:	9310      	str	r3, [sp, #64]	@ 0x40
 801f590:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f592:	1b9b      	subs	r3, r3, r6
 801f594:	1e5a      	subs	r2, r3, #1
 801f596:	bf45      	ittet	mi
 801f598:	f1c3 0301 	rsbmi	r3, r3, #1
 801f59c:	9300      	strmi	r3, [sp, #0]
 801f59e:	2300      	movpl	r3, #0
 801f5a0:	2300      	movmi	r3, #0
 801f5a2:	9206      	str	r2, [sp, #24]
 801f5a4:	bf54      	ite	pl
 801f5a6:	9300      	strpl	r3, [sp, #0]
 801f5a8:	9306      	strmi	r3, [sp, #24]
 801f5aa:	2f00      	cmp	r7, #0
 801f5ac:	db39      	blt.n	801f622 <_dtoa_r+0x21a>
 801f5ae:	9b06      	ldr	r3, [sp, #24]
 801f5b0:	970d      	str	r7, [sp, #52]	@ 0x34
 801f5b2:	443b      	add	r3, r7
 801f5b4:	9306      	str	r3, [sp, #24]
 801f5b6:	2300      	movs	r3, #0
 801f5b8:	9308      	str	r3, [sp, #32]
 801f5ba:	9b07      	ldr	r3, [sp, #28]
 801f5bc:	2b09      	cmp	r3, #9
 801f5be:	d863      	bhi.n	801f688 <_dtoa_r+0x280>
 801f5c0:	2b05      	cmp	r3, #5
 801f5c2:	bfc4      	itt	gt
 801f5c4:	3b04      	subgt	r3, #4
 801f5c6:	9307      	strgt	r3, [sp, #28]
 801f5c8:	9b07      	ldr	r3, [sp, #28]
 801f5ca:	f1a3 0302 	sub.w	r3, r3, #2
 801f5ce:	bfcc      	ite	gt
 801f5d0:	2400      	movgt	r4, #0
 801f5d2:	2401      	movle	r4, #1
 801f5d4:	2b03      	cmp	r3, #3
 801f5d6:	d863      	bhi.n	801f6a0 <_dtoa_r+0x298>
 801f5d8:	e8df f003 	tbb	[pc, r3]
 801f5dc:	2b375452 	.word	0x2b375452
 801f5e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801f5e4:	441e      	add	r6, r3
 801f5e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801f5ea:	2b20      	cmp	r3, #32
 801f5ec:	bfc1      	itttt	gt
 801f5ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801f5f2:	409f      	lslgt	r7, r3
 801f5f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801f5f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 801f5fc:	bfd6      	itet	le
 801f5fe:	f1c3 0320 	rsble	r3, r3, #32
 801f602:	ea47 0003 	orrgt.w	r0, r7, r3
 801f606:	fa04 f003 	lslle.w	r0, r4, r3
 801f60a:	f7e0 ff8b 	bl	8000524 <__aeabi_ui2d>
 801f60e:	2201      	movs	r2, #1
 801f610:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801f614:	3e01      	subs	r6, #1
 801f616:	9212      	str	r2, [sp, #72]	@ 0x48
 801f618:	e776      	b.n	801f508 <_dtoa_r+0x100>
 801f61a:	2301      	movs	r3, #1
 801f61c:	e7b7      	b.n	801f58e <_dtoa_r+0x186>
 801f61e:	9010      	str	r0, [sp, #64]	@ 0x40
 801f620:	e7b6      	b.n	801f590 <_dtoa_r+0x188>
 801f622:	9b00      	ldr	r3, [sp, #0]
 801f624:	1bdb      	subs	r3, r3, r7
 801f626:	9300      	str	r3, [sp, #0]
 801f628:	427b      	negs	r3, r7
 801f62a:	9308      	str	r3, [sp, #32]
 801f62c:	2300      	movs	r3, #0
 801f62e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f630:	e7c3      	b.n	801f5ba <_dtoa_r+0x1b2>
 801f632:	2301      	movs	r3, #1
 801f634:	9309      	str	r3, [sp, #36]	@ 0x24
 801f636:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f638:	eb07 0b03 	add.w	fp, r7, r3
 801f63c:	f10b 0301 	add.w	r3, fp, #1
 801f640:	2b01      	cmp	r3, #1
 801f642:	9303      	str	r3, [sp, #12]
 801f644:	bfb8      	it	lt
 801f646:	2301      	movlt	r3, #1
 801f648:	e006      	b.n	801f658 <_dtoa_r+0x250>
 801f64a:	2301      	movs	r3, #1
 801f64c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f64e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f650:	2b00      	cmp	r3, #0
 801f652:	dd28      	ble.n	801f6a6 <_dtoa_r+0x29e>
 801f654:	469b      	mov	fp, r3
 801f656:	9303      	str	r3, [sp, #12]
 801f658:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801f65c:	2100      	movs	r1, #0
 801f65e:	2204      	movs	r2, #4
 801f660:	f102 0514 	add.w	r5, r2, #20
 801f664:	429d      	cmp	r5, r3
 801f666:	d926      	bls.n	801f6b6 <_dtoa_r+0x2ae>
 801f668:	6041      	str	r1, [r0, #4]
 801f66a:	4648      	mov	r0, r9
 801f66c:	f001 f876 	bl	802075c <_Balloc>
 801f670:	4682      	mov	sl, r0
 801f672:	2800      	cmp	r0, #0
 801f674:	d142      	bne.n	801f6fc <_dtoa_r+0x2f4>
 801f676:	4b1e      	ldr	r3, [pc, #120]	@ (801f6f0 <_dtoa_r+0x2e8>)
 801f678:	4602      	mov	r2, r0
 801f67a:	f240 11af 	movw	r1, #431	@ 0x1af
 801f67e:	e6da      	b.n	801f436 <_dtoa_r+0x2e>
 801f680:	2300      	movs	r3, #0
 801f682:	e7e3      	b.n	801f64c <_dtoa_r+0x244>
 801f684:	2300      	movs	r3, #0
 801f686:	e7d5      	b.n	801f634 <_dtoa_r+0x22c>
 801f688:	2401      	movs	r4, #1
 801f68a:	2300      	movs	r3, #0
 801f68c:	9307      	str	r3, [sp, #28]
 801f68e:	9409      	str	r4, [sp, #36]	@ 0x24
 801f690:	f04f 3bff 	mov.w	fp, #4294967295
 801f694:	2200      	movs	r2, #0
 801f696:	f8cd b00c 	str.w	fp, [sp, #12]
 801f69a:	2312      	movs	r3, #18
 801f69c:	920c      	str	r2, [sp, #48]	@ 0x30
 801f69e:	e7db      	b.n	801f658 <_dtoa_r+0x250>
 801f6a0:	2301      	movs	r3, #1
 801f6a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801f6a4:	e7f4      	b.n	801f690 <_dtoa_r+0x288>
 801f6a6:	f04f 0b01 	mov.w	fp, #1
 801f6aa:	f8cd b00c 	str.w	fp, [sp, #12]
 801f6ae:	465b      	mov	r3, fp
 801f6b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801f6b4:	e7d0      	b.n	801f658 <_dtoa_r+0x250>
 801f6b6:	3101      	adds	r1, #1
 801f6b8:	0052      	lsls	r2, r2, #1
 801f6ba:	e7d1      	b.n	801f660 <_dtoa_r+0x258>
 801f6bc:	f3af 8000 	nop.w
 801f6c0:	636f4361 	.word	0x636f4361
 801f6c4:	3fd287a7 	.word	0x3fd287a7
 801f6c8:	8b60c8b3 	.word	0x8b60c8b3
 801f6cc:	3fc68a28 	.word	0x3fc68a28
 801f6d0:	509f79fb 	.word	0x509f79fb
 801f6d4:	3fd34413 	.word	0x3fd34413
 801f6d8:	0802603d 	.word	0x0802603d
 801f6dc:	0802614b 	.word	0x0802614b
 801f6e0:	7ff00000 	.word	0x7ff00000
 801f6e4:	08026295 	.word	0x08026295
 801f6e8:	3ff80000 	.word	0x3ff80000
 801f6ec:	080264e8 	.word	0x080264e8
 801f6f0:	080261a3 	.word	0x080261a3
 801f6f4:	08026147 	.word	0x08026147
 801f6f8:	08026294 	.word	0x08026294
 801f6fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801f700:	6018      	str	r0, [r3, #0]
 801f702:	9b03      	ldr	r3, [sp, #12]
 801f704:	2b0e      	cmp	r3, #14
 801f706:	f200 80a1 	bhi.w	801f84c <_dtoa_r+0x444>
 801f70a:	2c00      	cmp	r4, #0
 801f70c:	f000 809e 	beq.w	801f84c <_dtoa_r+0x444>
 801f710:	2f00      	cmp	r7, #0
 801f712:	dd33      	ble.n	801f77c <_dtoa_r+0x374>
 801f714:	4b9c      	ldr	r3, [pc, #624]	@ (801f988 <_dtoa_r+0x580>)
 801f716:	f007 020f 	and.w	r2, r7, #15
 801f71a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f71e:	ed93 7b00 	vldr	d7, [r3]
 801f722:	05f8      	lsls	r0, r7, #23
 801f724:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801f728:	ea4f 1427 	mov.w	r4, r7, asr #4
 801f72c:	d516      	bpl.n	801f75c <_dtoa_r+0x354>
 801f72e:	4b97      	ldr	r3, [pc, #604]	@ (801f98c <_dtoa_r+0x584>)
 801f730:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801f734:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f738:	f7e1 f898 	bl	800086c <__aeabi_ddiv>
 801f73c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f740:	f004 040f 	and.w	r4, r4, #15
 801f744:	2603      	movs	r6, #3
 801f746:	4d91      	ldr	r5, [pc, #580]	@ (801f98c <_dtoa_r+0x584>)
 801f748:	b954      	cbnz	r4, 801f760 <_dtoa_r+0x358>
 801f74a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801f74e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f752:	f7e1 f88b 	bl	800086c <__aeabi_ddiv>
 801f756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f75a:	e028      	b.n	801f7ae <_dtoa_r+0x3a6>
 801f75c:	2602      	movs	r6, #2
 801f75e:	e7f2      	b.n	801f746 <_dtoa_r+0x33e>
 801f760:	07e1      	lsls	r1, r4, #31
 801f762:	d508      	bpl.n	801f776 <_dtoa_r+0x36e>
 801f764:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801f768:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f76c:	f7e0 ff54 	bl	8000618 <__aeabi_dmul>
 801f770:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801f774:	3601      	adds	r6, #1
 801f776:	1064      	asrs	r4, r4, #1
 801f778:	3508      	adds	r5, #8
 801f77a:	e7e5      	b.n	801f748 <_dtoa_r+0x340>
 801f77c:	f000 80af 	beq.w	801f8de <_dtoa_r+0x4d6>
 801f780:	427c      	negs	r4, r7
 801f782:	4b81      	ldr	r3, [pc, #516]	@ (801f988 <_dtoa_r+0x580>)
 801f784:	4d81      	ldr	r5, [pc, #516]	@ (801f98c <_dtoa_r+0x584>)
 801f786:	f004 020f 	and.w	r2, r4, #15
 801f78a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f792:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801f796:	f7e0 ff3f 	bl	8000618 <__aeabi_dmul>
 801f79a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f79e:	1124      	asrs	r4, r4, #4
 801f7a0:	2300      	movs	r3, #0
 801f7a2:	2602      	movs	r6, #2
 801f7a4:	2c00      	cmp	r4, #0
 801f7a6:	f040 808f 	bne.w	801f8c8 <_dtoa_r+0x4c0>
 801f7aa:	2b00      	cmp	r3, #0
 801f7ac:	d1d3      	bne.n	801f756 <_dtoa_r+0x34e>
 801f7ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f7b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801f7b4:	2b00      	cmp	r3, #0
 801f7b6:	f000 8094 	beq.w	801f8e2 <_dtoa_r+0x4da>
 801f7ba:	4b75      	ldr	r3, [pc, #468]	@ (801f990 <_dtoa_r+0x588>)
 801f7bc:	2200      	movs	r2, #0
 801f7be:	4620      	mov	r0, r4
 801f7c0:	4629      	mov	r1, r5
 801f7c2:	f7e1 f99b 	bl	8000afc <__aeabi_dcmplt>
 801f7c6:	2800      	cmp	r0, #0
 801f7c8:	f000 808b 	beq.w	801f8e2 <_dtoa_r+0x4da>
 801f7cc:	9b03      	ldr	r3, [sp, #12]
 801f7ce:	2b00      	cmp	r3, #0
 801f7d0:	f000 8087 	beq.w	801f8e2 <_dtoa_r+0x4da>
 801f7d4:	f1bb 0f00 	cmp.w	fp, #0
 801f7d8:	dd34      	ble.n	801f844 <_dtoa_r+0x43c>
 801f7da:	4620      	mov	r0, r4
 801f7dc:	4b6d      	ldr	r3, [pc, #436]	@ (801f994 <_dtoa_r+0x58c>)
 801f7de:	2200      	movs	r2, #0
 801f7e0:	4629      	mov	r1, r5
 801f7e2:	f7e0 ff19 	bl	8000618 <__aeabi_dmul>
 801f7e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f7ea:	f107 38ff 	add.w	r8, r7, #4294967295
 801f7ee:	3601      	adds	r6, #1
 801f7f0:	465c      	mov	r4, fp
 801f7f2:	4630      	mov	r0, r6
 801f7f4:	f7e0 fea6 	bl	8000544 <__aeabi_i2d>
 801f7f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f7fc:	f7e0 ff0c 	bl	8000618 <__aeabi_dmul>
 801f800:	4b65      	ldr	r3, [pc, #404]	@ (801f998 <_dtoa_r+0x590>)
 801f802:	2200      	movs	r2, #0
 801f804:	f7e0 fd52 	bl	80002ac <__adddf3>
 801f808:	4605      	mov	r5, r0
 801f80a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f80e:	2c00      	cmp	r4, #0
 801f810:	d16a      	bne.n	801f8e8 <_dtoa_r+0x4e0>
 801f812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f816:	4b61      	ldr	r3, [pc, #388]	@ (801f99c <_dtoa_r+0x594>)
 801f818:	2200      	movs	r2, #0
 801f81a:	f7e0 fd45 	bl	80002a8 <__aeabi_dsub>
 801f81e:	4602      	mov	r2, r0
 801f820:	460b      	mov	r3, r1
 801f822:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f826:	462a      	mov	r2, r5
 801f828:	4633      	mov	r3, r6
 801f82a:	f7e1 f985 	bl	8000b38 <__aeabi_dcmpgt>
 801f82e:	2800      	cmp	r0, #0
 801f830:	f040 8298 	bne.w	801fd64 <_dtoa_r+0x95c>
 801f834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f838:	462a      	mov	r2, r5
 801f83a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f83e:	f7e1 f95d 	bl	8000afc <__aeabi_dcmplt>
 801f842:	bb38      	cbnz	r0, 801f894 <_dtoa_r+0x48c>
 801f844:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801f848:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801f84c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f84e:	2b00      	cmp	r3, #0
 801f850:	f2c0 8157 	blt.w	801fb02 <_dtoa_r+0x6fa>
 801f854:	2f0e      	cmp	r7, #14
 801f856:	f300 8154 	bgt.w	801fb02 <_dtoa_r+0x6fa>
 801f85a:	4b4b      	ldr	r3, [pc, #300]	@ (801f988 <_dtoa_r+0x580>)
 801f85c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f860:	ed93 7b00 	vldr	d7, [r3]
 801f864:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f866:	2b00      	cmp	r3, #0
 801f868:	ed8d 7b00 	vstr	d7, [sp]
 801f86c:	f280 80e5 	bge.w	801fa3a <_dtoa_r+0x632>
 801f870:	9b03      	ldr	r3, [sp, #12]
 801f872:	2b00      	cmp	r3, #0
 801f874:	f300 80e1 	bgt.w	801fa3a <_dtoa_r+0x632>
 801f878:	d10c      	bne.n	801f894 <_dtoa_r+0x48c>
 801f87a:	4b48      	ldr	r3, [pc, #288]	@ (801f99c <_dtoa_r+0x594>)
 801f87c:	2200      	movs	r2, #0
 801f87e:	ec51 0b17 	vmov	r0, r1, d7
 801f882:	f7e0 fec9 	bl	8000618 <__aeabi_dmul>
 801f886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f88a:	f7e1 f94b 	bl	8000b24 <__aeabi_dcmpge>
 801f88e:	2800      	cmp	r0, #0
 801f890:	f000 8266 	beq.w	801fd60 <_dtoa_r+0x958>
 801f894:	2400      	movs	r4, #0
 801f896:	4625      	mov	r5, r4
 801f898:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f89a:	4656      	mov	r6, sl
 801f89c:	ea6f 0803 	mvn.w	r8, r3
 801f8a0:	2700      	movs	r7, #0
 801f8a2:	4621      	mov	r1, r4
 801f8a4:	4648      	mov	r0, r9
 801f8a6:	f000 ff99 	bl	80207dc <_Bfree>
 801f8aa:	2d00      	cmp	r5, #0
 801f8ac:	f000 80bd 	beq.w	801fa2a <_dtoa_r+0x622>
 801f8b0:	b12f      	cbz	r7, 801f8be <_dtoa_r+0x4b6>
 801f8b2:	42af      	cmp	r7, r5
 801f8b4:	d003      	beq.n	801f8be <_dtoa_r+0x4b6>
 801f8b6:	4639      	mov	r1, r7
 801f8b8:	4648      	mov	r0, r9
 801f8ba:	f000 ff8f 	bl	80207dc <_Bfree>
 801f8be:	4629      	mov	r1, r5
 801f8c0:	4648      	mov	r0, r9
 801f8c2:	f000 ff8b 	bl	80207dc <_Bfree>
 801f8c6:	e0b0      	b.n	801fa2a <_dtoa_r+0x622>
 801f8c8:	07e2      	lsls	r2, r4, #31
 801f8ca:	d505      	bpl.n	801f8d8 <_dtoa_r+0x4d0>
 801f8cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f8d0:	f7e0 fea2 	bl	8000618 <__aeabi_dmul>
 801f8d4:	3601      	adds	r6, #1
 801f8d6:	2301      	movs	r3, #1
 801f8d8:	1064      	asrs	r4, r4, #1
 801f8da:	3508      	adds	r5, #8
 801f8dc:	e762      	b.n	801f7a4 <_dtoa_r+0x39c>
 801f8de:	2602      	movs	r6, #2
 801f8e0:	e765      	b.n	801f7ae <_dtoa_r+0x3a6>
 801f8e2:	9c03      	ldr	r4, [sp, #12]
 801f8e4:	46b8      	mov	r8, r7
 801f8e6:	e784      	b.n	801f7f2 <_dtoa_r+0x3ea>
 801f8e8:	4b27      	ldr	r3, [pc, #156]	@ (801f988 <_dtoa_r+0x580>)
 801f8ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f8ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f8f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f8f4:	4454      	add	r4, sl
 801f8f6:	2900      	cmp	r1, #0
 801f8f8:	d054      	beq.n	801f9a4 <_dtoa_r+0x59c>
 801f8fa:	4929      	ldr	r1, [pc, #164]	@ (801f9a0 <_dtoa_r+0x598>)
 801f8fc:	2000      	movs	r0, #0
 801f8fe:	f7e0 ffb5 	bl	800086c <__aeabi_ddiv>
 801f902:	4633      	mov	r3, r6
 801f904:	462a      	mov	r2, r5
 801f906:	f7e0 fccf 	bl	80002a8 <__aeabi_dsub>
 801f90a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801f90e:	4656      	mov	r6, sl
 801f910:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f914:	f7e1 f930 	bl	8000b78 <__aeabi_d2iz>
 801f918:	4605      	mov	r5, r0
 801f91a:	f7e0 fe13 	bl	8000544 <__aeabi_i2d>
 801f91e:	4602      	mov	r2, r0
 801f920:	460b      	mov	r3, r1
 801f922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f926:	f7e0 fcbf 	bl	80002a8 <__aeabi_dsub>
 801f92a:	3530      	adds	r5, #48	@ 0x30
 801f92c:	4602      	mov	r2, r0
 801f92e:	460b      	mov	r3, r1
 801f930:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f934:	f806 5b01 	strb.w	r5, [r6], #1
 801f938:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801f93c:	f7e1 f8de 	bl	8000afc <__aeabi_dcmplt>
 801f940:	2800      	cmp	r0, #0
 801f942:	d172      	bne.n	801fa2a <_dtoa_r+0x622>
 801f944:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f948:	4911      	ldr	r1, [pc, #68]	@ (801f990 <_dtoa_r+0x588>)
 801f94a:	2000      	movs	r0, #0
 801f94c:	f7e0 fcac 	bl	80002a8 <__aeabi_dsub>
 801f950:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801f954:	f7e1 f8d2 	bl	8000afc <__aeabi_dcmplt>
 801f958:	2800      	cmp	r0, #0
 801f95a:	f040 80b4 	bne.w	801fac6 <_dtoa_r+0x6be>
 801f95e:	42a6      	cmp	r6, r4
 801f960:	f43f af70 	beq.w	801f844 <_dtoa_r+0x43c>
 801f964:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801f968:	4b0a      	ldr	r3, [pc, #40]	@ (801f994 <_dtoa_r+0x58c>)
 801f96a:	2200      	movs	r2, #0
 801f96c:	f7e0 fe54 	bl	8000618 <__aeabi_dmul>
 801f970:	4b08      	ldr	r3, [pc, #32]	@ (801f994 <_dtoa_r+0x58c>)
 801f972:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801f976:	2200      	movs	r2, #0
 801f978:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f97c:	f7e0 fe4c 	bl	8000618 <__aeabi_dmul>
 801f980:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f984:	e7c4      	b.n	801f910 <_dtoa_r+0x508>
 801f986:	bf00      	nop
 801f988:	080264e8 	.word	0x080264e8
 801f98c:	080264c0 	.word	0x080264c0
 801f990:	3ff00000 	.word	0x3ff00000
 801f994:	40240000 	.word	0x40240000
 801f998:	401c0000 	.word	0x401c0000
 801f99c:	40140000 	.word	0x40140000
 801f9a0:	3fe00000 	.word	0x3fe00000
 801f9a4:	4631      	mov	r1, r6
 801f9a6:	4628      	mov	r0, r5
 801f9a8:	f7e0 fe36 	bl	8000618 <__aeabi_dmul>
 801f9ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801f9b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 801f9b2:	4656      	mov	r6, sl
 801f9b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f9b8:	f7e1 f8de 	bl	8000b78 <__aeabi_d2iz>
 801f9bc:	4605      	mov	r5, r0
 801f9be:	f7e0 fdc1 	bl	8000544 <__aeabi_i2d>
 801f9c2:	4602      	mov	r2, r0
 801f9c4:	460b      	mov	r3, r1
 801f9c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f9ca:	f7e0 fc6d 	bl	80002a8 <__aeabi_dsub>
 801f9ce:	3530      	adds	r5, #48	@ 0x30
 801f9d0:	f806 5b01 	strb.w	r5, [r6], #1
 801f9d4:	4602      	mov	r2, r0
 801f9d6:	460b      	mov	r3, r1
 801f9d8:	42a6      	cmp	r6, r4
 801f9da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f9de:	f04f 0200 	mov.w	r2, #0
 801f9e2:	d124      	bne.n	801fa2e <_dtoa_r+0x626>
 801f9e4:	4baf      	ldr	r3, [pc, #700]	@ (801fca4 <_dtoa_r+0x89c>)
 801f9e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801f9ea:	f7e0 fc5f 	bl	80002ac <__adddf3>
 801f9ee:	4602      	mov	r2, r0
 801f9f0:	460b      	mov	r3, r1
 801f9f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f9f6:	f7e1 f89f 	bl	8000b38 <__aeabi_dcmpgt>
 801f9fa:	2800      	cmp	r0, #0
 801f9fc:	d163      	bne.n	801fac6 <_dtoa_r+0x6be>
 801f9fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801fa02:	49a8      	ldr	r1, [pc, #672]	@ (801fca4 <_dtoa_r+0x89c>)
 801fa04:	2000      	movs	r0, #0
 801fa06:	f7e0 fc4f 	bl	80002a8 <__aeabi_dsub>
 801fa0a:	4602      	mov	r2, r0
 801fa0c:	460b      	mov	r3, r1
 801fa0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801fa12:	f7e1 f873 	bl	8000afc <__aeabi_dcmplt>
 801fa16:	2800      	cmp	r0, #0
 801fa18:	f43f af14 	beq.w	801f844 <_dtoa_r+0x43c>
 801fa1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801fa1e:	1e73      	subs	r3, r6, #1
 801fa20:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fa22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801fa26:	2b30      	cmp	r3, #48	@ 0x30
 801fa28:	d0f8      	beq.n	801fa1c <_dtoa_r+0x614>
 801fa2a:	4647      	mov	r7, r8
 801fa2c:	e03b      	b.n	801faa6 <_dtoa_r+0x69e>
 801fa2e:	4b9e      	ldr	r3, [pc, #632]	@ (801fca8 <_dtoa_r+0x8a0>)
 801fa30:	f7e0 fdf2 	bl	8000618 <__aeabi_dmul>
 801fa34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801fa38:	e7bc      	b.n	801f9b4 <_dtoa_r+0x5ac>
 801fa3a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801fa3e:	4656      	mov	r6, sl
 801fa40:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fa44:	4620      	mov	r0, r4
 801fa46:	4629      	mov	r1, r5
 801fa48:	f7e0 ff10 	bl	800086c <__aeabi_ddiv>
 801fa4c:	f7e1 f894 	bl	8000b78 <__aeabi_d2iz>
 801fa50:	4680      	mov	r8, r0
 801fa52:	f7e0 fd77 	bl	8000544 <__aeabi_i2d>
 801fa56:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fa5a:	f7e0 fddd 	bl	8000618 <__aeabi_dmul>
 801fa5e:	4602      	mov	r2, r0
 801fa60:	460b      	mov	r3, r1
 801fa62:	4620      	mov	r0, r4
 801fa64:	4629      	mov	r1, r5
 801fa66:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801fa6a:	f7e0 fc1d 	bl	80002a8 <__aeabi_dsub>
 801fa6e:	f806 4b01 	strb.w	r4, [r6], #1
 801fa72:	9d03      	ldr	r5, [sp, #12]
 801fa74:	eba6 040a 	sub.w	r4, r6, sl
 801fa78:	42a5      	cmp	r5, r4
 801fa7a:	4602      	mov	r2, r0
 801fa7c:	460b      	mov	r3, r1
 801fa7e:	d133      	bne.n	801fae8 <_dtoa_r+0x6e0>
 801fa80:	f7e0 fc14 	bl	80002ac <__adddf3>
 801fa84:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fa88:	4604      	mov	r4, r0
 801fa8a:	460d      	mov	r5, r1
 801fa8c:	f7e1 f854 	bl	8000b38 <__aeabi_dcmpgt>
 801fa90:	b9c0      	cbnz	r0, 801fac4 <_dtoa_r+0x6bc>
 801fa92:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fa96:	4620      	mov	r0, r4
 801fa98:	4629      	mov	r1, r5
 801fa9a:	f7e1 f825 	bl	8000ae8 <__aeabi_dcmpeq>
 801fa9e:	b110      	cbz	r0, 801faa6 <_dtoa_r+0x69e>
 801faa0:	f018 0f01 	tst.w	r8, #1
 801faa4:	d10e      	bne.n	801fac4 <_dtoa_r+0x6bc>
 801faa6:	9902      	ldr	r1, [sp, #8]
 801faa8:	4648      	mov	r0, r9
 801faaa:	f000 fe97 	bl	80207dc <_Bfree>
 801faae:	2300      	movs	r3, #0
 801fab0:	7033      	strb	r3, [r6, #0]
 801fab2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fab4:	3701      	adds	r7, #1
 801fab6:	601f      	str	r7, [r3, #0]
 801fab8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801faba:	2b00      	cmp	r3, #0
 801fabc:	f000 824b 	beq.w	801ff56 <_dtoa_r+0xb4e>
 801fac0:	601e      	str	r6, [r3, #0]
 801fac2:	e248      	b.n	801ff56 <_dtoa_r+0xb4e>
 801fac4:	46b8      	mov	r8, r7
 801fac6:	4633      	mov	r3, r6
 801fac8:	461e      	mov	r6, r3
 801faca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801face:	2a39      	cmp	r2, #57	@ 0x39
 801fad0:	d106      	bne.n	801fae0 <_dtoa_r+0x6d8>
 801fad2:	459a      	cmp	sl, r3
 801fad4:	d1f8      	bne.n	801fac8 <_dtoa_r+0x6c0>
 801fad6:	2230      	movs	r2, #48	@ 0x30
 801fad8:	f108 0801 	add.w	r8, r8, #1
 801fadc:	f88a 2000 	strb.w	r2, [sl]
 801fae0:	781a      	ldrb	r2, [r3, #0]
 801fae2:	3201      	adds	r2, #1
 801fae4:	701a      	strb	r2, [r3, #0]
 801fae6:	e7a0      	b.n	801fa2a <_dtoa_r+0x622>
 801fae8:	4b6f      	ldr	r3, [pc, #444]	@ (801fca8 <_dtoa_r+0x8a0>)
 801faea:	2200      	movs	r2, #0
 801faec:	f7e0 fd94 	bl	8000618 <__aeabi_dmul>
 801faf0:	2200      	movs	r2, #0
 801faf2:	2300      	movs	r3, #0
 801faf4:	4604      	mov	r4, r0
 801faf6:	460d      	mov	r5, r1
 801faf8:	f7e0 fff6 	bl	8000ae8 <__aeabi_dcmpeq>
 801fafc:	2800      	cmp	r0, #0
 801fafe:	d09f      	beq.n	801fa40 <_dtoa_r+0x638>
 801fb00:	e7d1      	b.n	801faa6 <_dtoa_r+0x69e>
 801fb02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fb04:	2a00      	cmp	r2, #0
 801fb06:	f000 80ea 	beq.w	801fcde <_dtoa_r+0x8d6>
 801fb0a:	9a07      	ldr	r2, [sp, #28]
 801fb0c:	2a01      	cmp	r2, #1
 801fb0e:	f300 80cd 	bgt.w	801fcac <_dtoa_r+0x8a4>
 801fb12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fb14:	2a00      	cmp	r2, #0
 801fb16:	f000 80c1 	beq.w	801fc9c <_dtoa_r+0x894>
 801fb1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801fb1e:	9c08      	ldr	r4, [sp, #32]
 801fb20:	9e00      	ldr	r6, [sp, #0]
 801fb22:	9a00      	ldr	r2, [sp, #0]
 801fb24:	441a      	add	r2, r3
 801fb26:	9200      	str	r2, [sp, #0]
 801fb28:	9a06      	ldr	r2, [sp, #24]
 801fb2a:	2101      	movs	r1, #1
 801fb2c:	441a      	add	r2, r3
 801fb2e:	4648      	mov	r0, r9
 801fb30:	9206      	str	r2, [sp, #24]
 801fb32:	f000 ff51 	bl	80209d8 <__i2b>
 801fb36:	4605      	mov	r5, r0
 801fb38:	b166      	cbz	r6, 801fb54 <_dtoa_r+0x74c>
 801fb3a:	9b06      	ldr	r3, [sp, #24]
 801fb3c:	2b00      	cmp	r3, #0
 801fb3e:	dd09      	ble.n	801fb54 <_dtoa_r+0x74c>
 801fb40:	42b3      	cmp	r3, r6
 801fb42:	9a00      	ldr	r2, [sp, #0]
 801fb44:	bfa8      	it	ge
 801fb46:	4633      	movge	r3, r6
 801fb48:	1ad2      	subs	r2, r2, r3
 801fb4a:	9200      	str	r2, [sp, #0]
 801fb4c:	9a06      	ldr	r2, [sp, #24]
 801fb4e:	1af6      	subs	r6, r6, r3
 801fb50:	1ad3      	subs	r3, r2, r3
 801fb52:	9306      	str	r3, [sp, #24]
 801fb54:	9b08      	ldr	r3, [sp, #32]
 801fb56:	b30b      	cbz	r3, 801fb9c <_dtoa_r+0x794>
 801fb58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb5a:	2b00      	cmp	r3, #0
 801fb5c:	f000 80c6 	beq.w	801fcec <_dtoa_r+0x8e4>
 801fb60:	2c00      	cmp	r4, #0
 801fb62:	f000 80c0 	beq.w	801fce6 <_dtoa_r+0x8de>
 801fb66:	4629      	mov	r1, r5
 801fb68:	4622      	mov	r2, r4
 801fb6a:	4648      	mov	r0, r9
 801fb6c:	f000 ffec 	bl	8020b48 <__pow5mult>
 801fb70:	9a02      	ldr	r2, [sp, #8]
 801fb72:	4601      	mov	r1, r0
 801fb74:	4605      	mov	r5, r0
 801fb76:	4648      	mov	r0, r9
 801fb78:	f000 ff44 	bl	8020a04 <__multiply>
 801fb7c:	9902      	ldr	r1, [sp, #8]
 801fb7e:	4680      	mov	r8, r0
 801fb80:	4648      	mov	r0, r9
 801fb82:	f000 fe2b 	bl	80207dc <_Bfree>
 801fb86:	9b08      	ldr	r3, [sp, #32]
 801fb88:	1b1b      	subs	r3, r3, r4
 801fb8a:	9308      	str	r3, [sp, #32]
 801fb8c:	f000 80b1 	beq.w	801fcf2 <_dtoa_r+0x8ea>
 801fb90:	9a08      	ldr	r2, [sp, #32]
 801fb92:	4641      	mov	r1, r8
 801fb94:	4648      	mov	r0, r9
 801fb96:	f000 ffd7 	bl	8020b48 <__pow5mult>
 801fb9a:	9002      	str	r0, [sp, #8]
 801fb9c:	2101      	movs	r1, #1
 801fb9e:	4648      	mov	r0, r9
 801fba0:	f000 ff1a 	bl	80209d8 <__i2b>
 801fba4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fba6:	4604      	mov	r4, r0
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	f000 81d8 	beq.w	801ff5e <_dtoa_r+0xb56>
 801fbae:	461a      	mov	r2, r3
 801fbb0:	4601      	mov	r1, r0
 801fbb2:	4648      	mov	r0, r9
 801fbb4:	f000 ffc8 	bl	8020b48 <__pow5mult>
 801fbb8:	9b07      	ldr	r3, [sp, #28]
 801fbba:	2b01      	cmp	r3, #1
 801fbbc:	4604      	mov	r4, r0
 801fbbe:	f300 809f 	bgt.w	801fd00 <_dtoa_r+0x8f8>
 801fbc2:	9b04      	ldr	r3, [sp, #16]
 801fbc4:	2b00      	cmp	r3, #0
 801fbc6:	f040 8097 	bne.w	801fcf8 <_dtoa_r+0x8f0>
 801fbca:	9b05      	ldr	r3, [sp, #20]
 801fbcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	f040 8093 	bne.w	801fcfc <_dtoa_r+0x8f4>
 801fbd6:	9b05      	ldr	r3, [sp, #20]
 801fbd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801fbdc:	0d1b      	lsrs	r3, r3, #20
 801fbde:	051b      	lsls	r3, r3, #20
 801fbe0:	b133      	cbz	r3, 801fbf0 <_dtoa_r+0x7e8>
 801fbe2:	9b00      	ldr	r3, [sp, #0]
 801fbe4:	3301      	adds	r3, #1
 801fbe6:	9300      	str	r3, [sp, #0]
 801fbe8:	9b06      	ldr	r3, [sp, #24]
 801fbea:	3301      	adds	r3, #1
 801fbec:	9306      	str	r3, [sp, #24]
 801fbee:	2301      	movs	r3, #1
 801fbf0:	9308      	str	r3, [sp, #32]
 801fbf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fbf4:	2b00      	cmp	r3, #0
 801fbf6:	f000 81b8 	beq.w	801ff6a <_dtoa_r+0xb62>
 801fbfa:	6923      	ldr	r3, [r4, #16]
 801fbfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801fc00:	6918      	ldr	r0, [r3, #16]
 801fc02:	f000 fe9d 	bl	8020940 <__hi0bits>
 801fc06:	f1c0 0020 	rsb	r0, r0, #32
 801fc0a:	9b06      	ldr	r3, [sp, #24]
 801fc0c:	4418      	add	r0, r3
 801fc0e:	f010 001f 	ands.w	r0, r0, #31
 801fc12:	f000 8082 	beq.w	801fd1a <_dtoa_r+0x912>
 801fc16:	f1c0 0320 	rsb	r3, r0, #32
 801fc1a:	2b04      	cmp	r3, #4
 801fc1c:	dd73      	ble.n	801fd06 <_dtoa_r+0x8fe>
 801fc1e:	9b00      	ldr	r3, [sp, #0]
 801fc20:	f1c0 001c 	rsb	r0, r0, #28
 801fc24:	4403      	add	r3, r0
 801fc26:	9300      	str	r3, [sp, #0]
 801fc28:	9b06      	ldr	r3, [sp, #24]
 801fc2a:	4403      	add	r3, r0
 801fc2c:	4406      	add	r6, r0
 801fc2e:	9306      	str	r3, [sp, #24]
 801fc30:	9b00      	ldr	r3, [sp, #0]
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	dd05      	ble.n	801fc42 <_dtoa_r+0x83a>
 801fc36:	9902      	ldr	r1, [sp, #8]
 801fc38:	461a      	mov	r2, r3
 801fc3a:	4648      	mov	r0, r9
 801fc3c:	f000 ffde 	bl	8020bfc <__lshift>
 801fc40:	9002      	str	r0, [sp, #8]
 801fc42:	9b06      	ldr	r3, [sp, #24]
 801fc44:	2b00      	cmp	r3, #0
 801fc46:	dd05      	ble.n	801fc54 <_dtoa_r+0x84c>
 801fc48:	4621      	mov	r1, r4
 801fc4a:	461a      	mov	r2, r3
 801fc4c:	4648      	mov	r0, r9
 801fc4e:	f000 ffd5 	bl	8020bfc <__lshift>
 801fc52:	4604      	mov	r4, r0
 801fc54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fc56:	2b00      	cmp	r3, #0
 801fc58:	d061      	beq.n	801fd1e <_dtoa_r+0x916>
 801fc5a:	9802      	ldr	r0, [sp, #8]
 801fc5c:	4621      	mov	r1, r4
 801fc5e:	f001 f839 	bl	8020cd4 <__mcmp>
 801fc62:	2800      	cmp	r0, #0
 801fc64:	da5b      	bge.n	801fd1e <_dtoa_r+0x916>
 801fc66:	2300      	movs	r3, #0
 801fc68:	9902      	ldr	r1, [sp, #8]
 801fc6a:	220a      	movs	r2, #10
 801fc6c:	4648      	mov	r0, r9
 801fc6e:	f000 fdd7 	bl	8020820 <__multadd>
 801fc72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc74:	9002      	str	r0, [sp, #8]
 801fc76:	f107 38ff 	add.w	r8, r7, #4294967295
 801fc7a:	2b00      	cmp	r3, #0
 801fc7c:	f000 8177 	beq.w	801ff6e <_dtoa_r+0xb66>
 801fc80:	4629      	mov	r1, r5
 801fc82:	2300      	movs	r3, #0
 801fc84:	220a      	movs	r2, #10
 801fc86:	4648      	mov	r0, r9
 801fc88:	f000 fdca 	bl	8020820 <__multadd>
 801fc8c:	f1bb 0f00 	cmp.w	fp, #0
 801fc90:	4605      	mov	r5, r0
 801fc92:	dc6f      	bgt.n	801fd74 <_dtoa_r+0x96c>
 801fc94:	9b07      	ldr	r3, [sp, #28]
 801fc96:	2b02      	cmp	r3, #2
 801fc98:	dc49      	bgt.n	801fd2e <_dtoa_r+0x926>
 801fc9a:	e06b      	b.n	801fd74 <_dtoa_r+0x96c>
 801fc9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fc9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801fca2:	e73c      	b.n	801fb1e <_dtoa_r+0x716>
 801fca4:	3fe00000 	.word	0x3fe00000
 801fca8:	40240000 	.word	0x40240000
 801fcac:	9b03      	ldr	r3, [sp, #12]
 801fcae:	1e5c      	subs	r4, r3, #1
 801fcb0:	9b08      	ldr	r3, [sp, #32]
 801fcb2:	42a3      	cmp	r3, r4
 801fcb4:	db09      	blt.n	801fcca <_dtoa_r+0x8c2>
 801fcb6:	1b1c      	subs	r4, r3, r4
 801fcb8:	9b03      	ldr	r3, [sp, #12]
 801fcba:	2b00      	cmp	r3, #0
 801fcbc:	f6bf af30 	bge.w	801fb20 <_dtoa_r+0x718>
 801fcc0:	9b00      	ldr	r3, [sp, #0]
 801fcc2:	9a03      	ldr	r2, [sp, #12]
 801fcc4:	1a9e      	subs	r6, r3, r2
 801fcc6:	2300      	movs	r3, #0
 801fcc8:	e72b      	b.n	801fb22 <_dtoa_r+0x71a>
 801fcca:	9b08      	ldr	r3, [sp, #32]
 801fccc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fcce:	9408      	str	r4, [sp, #32]
 801fcd0:	1ae3      	subs	r3, r4, r3
 801fcd2:	441a      	add	r2, r3
 801fcd4:	9e00      	ldr	r6, [sp, #0]
 801fcd6:	9b03      	ldr	r3, [sp, #12]
 801fcd8:	920d      	str	r2, [sp, #52]	@ 0x34
 801fcda:	2400      	movs	r4, #0
 801fcdc:	e721      	b.n	801fb22 <_dtoa_r+0x71a>
 801fcde:	9c08      	ldr	r4, [sp, #32]
 801fce0:	9e00      	ldr	r6, [sp, #0]
 801fce2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801fce4:	e728      	b.n	801fb38 <_dtoa_r+0x730>
 801fce6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801fcea:	e751      	b.n	801fb90 <_dtoa_r+0x788>
 801fcec:	9a08      	ldr	r2, [sp, #32]
 801fcee:	9902      	ldr	r1, [sp, #8]
 801fcf0:	e750      	b.n	801fb94 <_dtoa_r+0x78c>
 801fcf2:	f8cd 8008 	str.w	r8, [sp, #8]
 801fcf6:	e751      	b.n	801fb9c <_dtoa_r+0x794>
 801fcf8:	2300      	movs	r3, #0
 801fcfa:	e779      	b.n	801fbf0 <_dtoa_r+0x7e8>
 801fcfc:	9b04      	ldr	r3, [sp, #16]
 801fcfe:	e777      	b.n	801fbf0 <_dtoa_r+0x7e8>
 801fd00:	2300      	movs	r3, #0
 801fd02:	9308      	str	r3, [sp, #32]
 801fd04:	e779      	b.n	801fbfa <_dtoa_r+0x7f2>
 801fd06:	d093      	beq.n	801fc30 <_dtoa_r+0x828>
 801fd08:	9a00      	ldr	r2, [sp, #0]
 801fd0a:	331c      	adds	r3, #28
 801fd0c:	441a      	add	r2, r3
 801fd0e:	9200      	str	r2, [sp, #0]
 801fd10:	9a06      	ldr	r2, [sp, #24]
 801fd12:	441a      	add	r2, r3
 801fd14:	441e      	add	r6, r3
 801fd16:	9206      	str	r2, [sp, #24]
 801fd18:	e78a      	b.n	801fc30 <_dtoa_r+0x828>
 801fd1a:	4603      	mov	r3, r0
 801fd1c:	e7f4      	b.n	801fd08 <_dtoa_r+0x900>
 801fd1e:	9b03      	ldr	r3, [sp, #12]
 801fd20:	2b00      	cmp	r3, #0
 801fd22:	46b8      	mov	r8, r7
 801fd24:	dc20      	bgt.n	801fd68 <_dtoa_r+0x960>
 801fd26:	469b      	mov	fp, r3
 801fd28:	9b07      	ldr	r3, [sp, #28]
 801fd2a:	2b02      	cmp	r3, #2
 801fd2c:	dd1e      	ble.n	801fd6c <_dtoa_r+0x964>
 801fd2e:	f1bb 0f00 	cmp.w	fp, #0
 801fd32:	f47f adb1 	bne.w	801f898 <_dtoa_r+0x490>
 801fd36:	4621      	mov	r1, r4
 801fd38:	465b      	mov	r3, fp
 801fd3a:	2205      	movs	r2, #5
 801fd3c:	4648      	mov	r0, r9
 801fd3e:	f000 fd6f 	bl	8020820 <__multadd>
 801fd42:	4601      	mov	r1, r0
 801fd44:	4604      	mov	r4, r0
 801fd46:	9802      	ldr	r0, [sp, #8]
 801fd48:	f000 ffc4 	bl	8020cd4 <__mcmp>
 801fd4c:	2800      	cmp	r0, #0
 801fd4e:	f77f ada3 	ble.w	801f898 <_dtoa_r+0x490>
 801fd52:	4656      	mov	r6, sl
 801fd54:	2331      	movs	r3, #49	@ 0x31
 801fd56:	f806 3b01 	strb.w	r3, [r6], #1
 801fd5a:	f108 0801 	add.w	r8, r8, #1
 801fd5e:	e59f      	b.n	801f8a0 <_dtoa_r+0x498>
 801fd60:	9c03      	ldr	r4, [sp, #12]
 801fd62:	46b8      	mov	r8, r7
 801fd64:	4625      	mov	r5, r4
 801fd66:	e7f4      	b.n	801fd52 <_dtoa_r+0x94a>
 801fd68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801fd6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd6e:	2b00      	cmp	r3, #0
 801fd70:	f000 8101 	beq.w	801ff76 <_dtoa_r+0xb6e>
 801fd74:	2e00      	cmp	r6, #0
 801fd76:	dd05      	ble.n	801fd84 <_dtoa_r+0x97c>
 801fd78:	4629      	mov	r1, r5
 801fd7a:	4632      	mov	r2, r6
 801fd7c:	4648      	mov	r0, r9
 801fd7e:	f000 ff3d 	bl	8020bfc <__lshift>
 801fd82:	4605      	mov	r5, r0
 801fd84:	9b08      	ldr	r3, [sp, #32]
 801fd86:	2b00      	cmp	r3, #0
 801fd88:	d05c      	beq.n	801fe44 <_dtoa_r+0xa3c>
 801fd8a:	6869      	ldr	r1, [r5, #4]
 801fd8c:	4648      	mov	r0, r9
 801fd8e:	f000 fce5 	bl	802075c <_Balloc>
 801fd92:	4606      	mov	r6, r0
 801fd94:	b928      	cbnz	r0, 801fda2 <_dtoa_r+0x99a>
 801fd96:	4b82      	ldr	r3, [pc, #520]	@ (801ffa0 <_dtoa_r+0xb98>)
 801fd98:	4602      	mov	r2, r0
 801fd9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801fd9e:	f7ff bb4a 	b.w	801f436 <_dtoa_r+0x2e>
 801fda2:	692a      	ldr	r2, [r5, #16]
 801fda4:	3202      	adds	r2, #2
 801fda6:	0092      	lsls	r2, r2, #2
 801fda8:	f105 010c 	add.w	r1, r5, #12
 801fdac:	300c      	adds	r0, #12
 801fdae:	f7ff fa0a 	bl	801f1c6 <memcpy>
 801fdb2:	2201      	movs	r2, #1
 801fdb4:	4631      	mov	r1, r6
 801fdb6:	4648      	mov	r0, r9
 801fdb8:	f000 ff20 	bl	8020bfc <__lshift>
 801fdbc:	f10a 0301 	add.w	r3, sl, #1
 801fdc0:	9300      	str	r3, [sp, #0]
 801fdc2:	eb0a 030b 	add.w	r3, sl, fp
 801fdc6:	9308      	str	r3, [sp, #32]
 801fdc8:	9b04      	ldr	r3, [sp, #16]
 801fdca:	f003 0301 	and.w	r3, r3, #1
 801fdce:	462f      	mov	r7, r5
 801fdd0:	9306      	str	r3, [sp, #24]
 801fdd2:	4605      	mov	r5, r0
 801fdd4:	9b00      	ldr	r3, [sp, #0]
 801fdd6:	9802      	ldr	r0, [sp, #8]
 801fdd8:	4621      	mov	r1, r4
 801fdda:	f103 3bff 	add.w	fp, r3, #4294967295
 801fdde:	f7ff fa89 	bl	801f2f4 <quorem>
 801fde2:	4603      	mov	r3, r0
 801fde4:	3330      	adds	r3, #48	@ 0x30
 801fde6:	9003      	str	r0, [sp, #12]
 801fde8:	4639      	mov	r1, r7
 801fdea:	9802      	ldr	r0, [sp, #8]
 801fdec:	9309      	str	r3, [sp, #36]	@ 0x24
 801fdee:	f000 ff71 	bl	8020cd4 <__mcmp>
 801fdf2:	462a      	mov	r2, r5
 801fdf4:	9004      	str	r0, [sp, #16]
 801fdf6:	4621      	mov	r1, r4
 801fdf8:	4648      	mov	r0, r9
 801fdfa:	f000 ff87 	bl	8020d0c <__mdiff>
 801fdfe:	68c2      	ldr	r2, [r0, #12]
 801fe00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe02:	4606      	mov	r6, r0
 801fe04:	bb02      	cbnz	r2, 801fe48 <_dtoa_r+0xa40>
 801fe06:	4601      	mov	r1, r0
 801fe08:	9802      	ldr	r0, [sp, #8]
 801fe0a:	f000 ff63 	bl	8020cd4 <__mcmp>
 801fe0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe10:	4602      	mov	r2, r0
 801fe12:	4631      	mov	r1, r6
 801fe14:	4648      	mov	r0, r9
 801fe16:	920c      	str	r2, [sp, #48]	@ 0x30
 801fe18:	9309      	str	r3, [sp, #36]	@ 0x24
 801fe1a:	f000 fcdf 	bl	80207dc <_Bfree>
 801fe1e:	9b07      	ldr	r3, [sp, #28]
 801fe20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fe22:	9e00      	ldr	r6, [sp, #0]
 801fe24:	ea42 0103 	orr.w	r1, r2, r3
 801fe28:	9b06      	ldr	r3, [sp, #24]
 801fe2a:	4319      	orrs	r1, r3
 801fe2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe2e:	d10d      	bne.n	801fe4c <_dtoa_r+0xa44>
 801fe30:	2b39      	cmp	r3, #57	@ 0x39
 801fe32:	d027      	beq.n	801fe84 <_dtoa_r+0xa7c>
 801fe34:	9a04      	ldr	r2, [sp, #16]
 801fe36:	2a00      	cmp	r2, #0
 801fe38:	dd01      	ble.n	801fe3e <_dtoa_r+0xa36>
 801fe3a:	9b03      	ldr	r3, [sp, #12]
 801fe3c:	3331      	adds	r3, #49	@ 0x31
 801fe3e:	f88b 3000 	strb.w	r3, [fp]
 801fe42:	e52e      	b.n	801f8a2 <_dtoa_r+0x49a>
 801fe44:	4628      	mov	r0, r5
 801fe46:	e7b9      	b.n	801fdbc <_dtoa_r+0x9b4>
 801fe48:	2201      	movs	r2, #1
 801fe4a:	e7e2      	b.n	801fe12 <_dtoa_r+0xa0a>
 801fe4c:	9904      	ldr	r1, [sp, #16]
 801fe4e:	2900      	cmp	r1, #0
 801fe50:	db04      	blt.n	801fe5c <_dtoa_r+0xa54>
 801fe52:	9807      	ldr	r0, [sp, #28]
 801fe54:	4301      	orrs	r1, r0
 801fe56:	9806      	ldr	r0, [sp, #24]
 801fe58:	4301      	orrs	r1, r0
 801fe5a:	d120      	bne.n	801fe9e <_dtoa_r+0xa96>
 801fe5c:	2a00      	cmp	r2, #0
 801fe5e:	ddee      	ble.n	801fe3e <_dtoa_r+0xa36>
 801fe60:	9902      	ldr	r1, [sp, #8]
 801fe62:	9300      	str	r3, [sp, #0]
 801fe64:	2201      	movs	r2, #1
 801fe66:	4648      	mov	r0, r9
 801fe68:	f000 fec8 	bl	8020bfc <__lshift>
 801fe6c:	4621      	mov	r1, r4
 801fe6e:	9002      	str	r0, [sp, #8]
 801fe70:	f000 ff30 	bl	8020cd4 <__mcmp>
 801fe74:	2800      	cmp	r0, #0
 801fe76:	9b00      	ldr	r3, [sp, #0]
 801fe78:	dc02      	bgt.n	801fe80 <_dtoa_r+0xa78>
 801fe7a:	d1e0      	bne.n	801fe3e <_dtoa_r+0xa36>
 801fe7c:	07da      	lsls	r2, r3, #31
 801fe7e:	d5de      	bpl.n	801fe3e <_dtoa_r+0xa36>
 801fe80:	2b39      	cmp	r3, #57	@ 0x39
 801fe82:	d1da      	bne.n	801fe3a <_dtoa_r+0xa32>
 801fe84:	2339      	movs	r3, #57	@ 0x39
 801fe86:	f88b 3000 	strb.w	r3, [fp]
 801fe8a:	4633      	mov	r3, r6
 801fe8c:	461e      	mov	r6, r3
 801fe8e:	3b01      	subs	r3, #1
 801fe90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801fe94:	2a39      	cmp	r2, #57	@ 0x39
 801fe96:	d04e      	beq.n	801ff36 <_dtoa_r+0xb2e>
 801fe98:	3201      	adds	r2, #1
 801fe9a:	701a      	strb	r2, [r3, #0]
 801fe9c:	e501      	b.n	801f8a2 <_dtoa_r+0x49a>
 801fe9e:	2a00      	cmp	r2, #0
 801fea0:	dd03      	ble.n	801feaa <_dtoa_r+0xaa2>
 801fea2:	2b39      	cmp	r3, #57	@ 0x39
 801fea4:	d0ee      	beq.n	801fe84 <_dtoa_r+0xa7c>
 801fea6:	3301      	adds	r3, #1
 801fea8:	e7c9      	b.n	801fe3e <_dtoa_r+0xa36>
 801feaa:	9a00      	ldr	r2, [sp, #0]
 801feac:	9908      	ldr	r1, [sp, #32]
 801feae:	f802 3c01 	strb.w	r3, [r2, #-1]
 801feb2:	428a      	cmp	r2, r1
 801feb4:	d028      	beq.n	801ff08 <_dtoa_r+0xb00>
 801feb6:	9902      	ldr	r1, [sp, #8]
 801feb8:	2300      	movs	r3, #0
 801feba:	220a      	movs	r2, #10
 801febc:	4648      	mov	r0, r9
 801febe:	f000 fcaf 	bl	8020820 <__multadd>
 801fec2:	42af      	cmp	r7, r5
 801fec4:	9002      	str	r0, [sp, #8]
 801fec6:	f04f 0300 	mov.w	r3, #0
 801feca:	f04f 020a 	mov.w	r2, #10
 801fece:	4639      	mov	r1, r7
 801fed0:	4648      	mov	r0, r9
 801fed2:	d107      	bne.n	801fee4 <_dtoa_r+0xadc>
 801fed4:	f000 fca4 	bl	8020820 <__multadd>
 801fed8:	4607      	mov	r7, r0
 801feda:	4605      	mov	r5, r0
 801fedc:	9b00      	ldr	r3, [sp, #0]
 801fede:	3301      	adds	r3, #1
 801fee0:	9300      	str	r3, [sp, #0]
 801fee2:	e777      	b.n	801fdd4 <_dtoa_r+0x9cc>
 801fee4:	f000 fc9c 	bl	8020820 <__multadd>
 801fee8:	4629      	mov	r1, r5
 801feea:	4607      	mov	r7, r0
 801feec:	2300      	movs	r3, #0
 801feee:	220a      	movs	r2, #10
 801fef0:	4648      	mov	r0, r9
 801fef2:	f000 fc95 	bl	8020820 <__multadd>
 801fef6:	4605      	mov	r5, r0
 801fef8:	e7f0      	b.n	801fedc <_dtoa_r+0xad4>
 801fefa:	f1bb 0f00 	cmp.w	fp, #0
 801fefe:	bfcc      	ite	gt
 801ff00:	465e      	movgt	r6, fp
 801ff02:	2601      	movle	r6, #1
 801ff04:	4456      	add	r6, sl
 801ff06:	2700      	movs	r7, #0
 801ff08:	9902      	ldr	r1, [sp, #8]
 801ff0a:	9300      	str	r3, [sp, #0]
 801ff0c:	2201      	movs	r2, #1
 801ff0e:	4648      	mov	r0, r9
 801ff10:	f000 fe74 	bl	8020bfc <__lshift>
 801ff14:	4621      	mov	r1, r4
 801ff16:	9002      	str	r0, [sp, #8]
 801ff18:	f000 fedc 	bl	8020cd4 <__mcmp>
 801ff1c:	2800      	cmp	r0, #0
 801ff1e:	dcb4      	bgt.n	801fe8a <_dtoa_r+0xa82>
 801ff20:	d102      	bne.n	801ff28 <_dtoa_r+0xb20>
 801ff22:	9b00      	ldr	r3, [sp, #0]
 801ff24:	07db      	lsls	r3, r3, #31
 801ff26:	d4b0      	bmi.n	801fe8a <_dtoa_r+0xa82>
 801ff28:	4633      	mov	r3, r6
 801ff2a:	461e      	mov	r6, r3
 801ff2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ff30:	2a30      	cmp	r2, #48	@ 0x30
 801ff32:	d0fa      	beq.n	801ff2a <_dtoa_r+0xb22>
 801ff34:	e4b5      	b.n	801f8a2 <_dtoa_r+0x49a>
 801ff36:	459a      	cmp	sl, r3
 801ff38:	d1a8      	bne.n	801fe8c <_dtoa_r+0xa84>
 801ff3a:	2331      	movs	r3, #49	@ 0x31
 801ff3c:	f108 0801 	add.w	r8, r8, #1
 801ff40:	f88a 3000 	strb.w	r3, [sl]
 801ff44:	e4ad      	b.n	801f8a2 <_dtoa_r+0x49a>
 801ff46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ff48:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801ffa4 <_dtoa_r+0xb9c>
 801ff4c:	b11b      	cbz	r3, 801ff56 <_dtoa_r+0xb4e>
 801ff4e:	f10a 0308 	add.w	r3, sl, #8
 801ff52:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ff54:	6013      	str	r3, [r2, #0]
 801ff56:	4650      	mov	r0, sl
 801ff58:	b017      	add	sp, #92	@ 0x5c
 801ff5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff5e:	9b07      	ldr	r3, [sp, #28]
 801ff60:	2b01      	cmp	r3, #1
 801ff62:	f77f ae2e 	ble.w	801fbc2 <_dtoa_r+0x7ba>
 801ff66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ff68:	9308      	str	r3, [sp, #32]
 801ff6a:	2001      	movs	r0, #1
 801ff6c:	e64d      	b.n	801fc0a <_dtoa_r+0x802>
 801ff6e:	f1bb 0f00 	cmp.w	fp, #0
 801ff72:	f77f aed9 	ble.w	801fd28 <_dtoa_r+0x920>
 801ff76:	4656      	mov	r6, sl
 801ff78:	9802      	ldr	r0, [sp, #8]
 801ff7a:	4621      	mov	r1, r4
 801ff7c:	f7ff f9ba 	bl	801f2f4 <quorem>
 801ff80:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801ff84:	f806 3b01 	strb.w	r3, [r6], #1
 801ff88:	eba6 020a 	sub.w	r2, r6, sl
 801ff8c:	4593      	cmp	fp, r2
 801ff8e:	ddb4      	ble.n	801fefa <_dtoa_r+0xaf2>
 801ff90:	9902      	ldr	r1, [sp, #8]
 801ff92:	2300      	movs	r3, #0
 801ff94:	220a      	movs	r2, #10
 801ff96:	4648      	mov	r0, r9
 801ff98:	f000 fc42 	bl	8020820 <__multadd>
 801ff9c:	9002      	str	r0, [sp, #8]
 801ff9e:	e7eb      	b.n	801ff78 <_dtoa_r+0xb70>
 801ffa0:	080261a3 	.word	0x080261a3
 801ffa4:	0802613e 	.word	0x0802613e

0801ffa8 <_free_r>:
 801ffa8:	b538      	push	{r3, r4, r5, lr}
 801ffaa:	4605      	mov	r5, r0
 801ffac:	2900      	cmp	r1, #0
 801ffae:	d041      	beq.n	8020034 <_free_r+0x8c>
 801ffb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ffb4:	1f0c      	subs	r4, r1, #4
 801ffb6:	2b00      	cmp	r3, #0
 801ffb8:	bfb8      	it	lt
 801ffba:	18e4      	addlt	r4, r4, r3
 801ffbc:	f7fc f9e4 	bl	801c388 <__malloc_lock>
 801ffc0:	4a1d      	ldr	r2, [pc, #116]	@ (8020038 <_free_r+0x90>)
 801ffc2:	6813      	ldr	r3, [r2, #0]
 801ffc4:	b933      	cbnz	r3, 801ffd4 <_free_r+0x2c>
 801ffc6:	6063      	str	r3, [r4, #4]
 801ffc8:	6014      	str	r4, [r2, #0]
 801ffca:	4628      	mov	r0, r5
 801ffcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ffd0:	f7fc b9e0 	b.w	801c394 <__malloc_unlock>
 801ffd4:	42a3      	cmp	r3, r4
 801ffd6:	d908      	bls.n	801ffea <_free_r+0x42>
 801ffd8:	6820      	ldr	r0, [r4, #0]
 801ffda:	1821      	adds	r1, r4, r0
 801ffdc:	428b      	cmp	r3, r1
 801ffde:	bf01      	itttt	eq
 801ffe0:	6819      	ldreq	r1, [r3, #0]
 801ffe2:	685b      	ldreq	r3, [r3, #4]
 801ffe4:	1809      	addeq	r1, r1, r0
 801ffe6:	6021      	streq	r1, [r4, #0]
 801ffe8:	e7ed      	b.n	801ffc6 <_free_r+0x1e>
 801ffea:	461a      	mov	r2, r3
 801ffec:	685b      	ldr	r3, [r3, #4]
 801ffee:	b10b      	cbz	r3, 801fff4 <_free_r+0x4c>
 801fff0:	42a3      	cmp	r3, r4
 801fff2:	d9fa      	bls.n	801ffea <_free_r+0x42>
 801fff4:	6811      	ldr	r1, [r2, #0]
 801fff6:	1850      	adds	r0, r2, r1
 801fff8:	42a0      	cmp	r0, r4
 801fffa:	d10b      	bne.n	8020014 <_free_r+0x6c>
 801fffc:	6820      	ldr	r0, [r4, #0]
 801fffe:	4401      	add	r1, r0
 8020000:	1850      	adds	r0, r2, r1
 8020002:	4283      	cmp	r3, r0
 8020004:	6011      	str	r1, [r2, #0]
 8020006:	d1e0      	bne.n	801ffca <_free_r+0x22>
 8020008:	6818      	ldr	r0, [r3, #0]
 802000a:	685b      	ldr	r3, [r3, #4]
 802000c:	6053      	str	r3, [r2, #4]
 802000e:	4408      	add	r0, r1
 8020010:	6010      	str	r0, [r2, #0]
 8020012:	e7da      	b.n	801ffca <_free_r+0x22>
 8020014:	d902      	bls.n	802001c <_free_r+0x74>
 8020016:	230c      	movs	r3, #12
 8020018:	602b      	str	r3, [r5, #0]
 802001a:	e7d6      	b.n	801ffca <_free_r+0x22>
 802001c:	6820      	ldr	r0, [r4, #0]
 802001e:	1821      	adds	r1, r4, r0
 8020020:	428b      	cmp	r3, r1
 8020022:	bf04      	itt	eq
 8020024:	6819      	ldreq	r1, [r3, #0]
 8020026:	685b      	ldreq	r3, [r3, #4]
 8020028:	6063      	str	r3, [r4, #4]
 802002a:	bf04      	itt	eq
 802002c:	1809      	addeq	r1, r1, r0
 802002e:	6021      	streq	r1, [r4, #0]
 8020030:	6054      	str	r4, [r2, #4]
 8020032:	e7ca      	b.n	801ffca <_free_r+0x22>
 8020034:	bd38      	pop	{r3, r4, r5, pc}
 8020036:	bf00      	nop
 8020038:	20006560 	.word	0x20006560

0802003c <rshift>:
 802003c:	6903      	ldr	r3, [r0, #16]
 802003e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8020042:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020046:	ea4f 1261 	mov.w	r2, r1, asr #5
 802004a:	f100 0414 	add.w	r4, r0, #20
 802004e:	dd45      	ble.n	80200dc <rshift+0xa0>
 8020050:	f011 011f 	ands.w	r1, r1, #31
 8020054:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8020058:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802005c:	d10c      	bne.n	8020078 <rshift+0x3c>
 802005e:	f100 0710 	add.w	r7, r0, #16
 8020062:	4629      	mov	r1, r5
 8020064:	42b1      	cmp	r1, r6
 8020066:	d334      	bcc.n	80200d2 <rshift+0x96>
 8020068:	1a9b      	subs	r3, r3, r2
 802006a:	009b      	lsls	r3, r3, #2
 802006c:	1eea      	subs	r2, r5, #3
 802006e:	4296      	cmp	r6, r2
 8020070:	bf38      	it	cc
 8020072:	2300      	movcc	r3, #0
 8020074:	4423      	add	r3, r4
 8020076:	e015      	b.n	80200a4 <rshift+0x68>
 8020078:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802007c:	f1c1 0820 	rsb	r8, r1, #32
 8020080:	40cf      	lsrs	r7, r1
 8020082:	f105 0e04 	add.w	lr, r5, #4
 8020086:	46a1      	mov	r9, r4
 8020088:	4576      	cmp	r6, lr
 802008a:	46f4      	mov	ip, lr
 802008c:	d815      	bhi.n	80200ba <rshift+0x7e>
 802008e:	1a9a      	subs	r2, r3, r2
 8020090:	0092      	lsls	r2, r2, #2
 8020092:	3a04      	subs	r2, #4
 8020094:	3501      	adds	r5, #1
 8020096:	42ae      	cmp	r6, r5
 8020098:	bf38      	it	cc
 802009a:	2200      	movcc	r2, #0
 802009c:	18a3      	adds	r3, r4, r2
 802009e:	50a7      	str	r7, [r4, r2]
 80200a0:	b107      	cbz	r7, 80200a4 <rshift+0x68>
 80200a2:	3304      	adds	r3, #4
 80200a4:	1b1a      	subs	r2, r3, r4
 80200a6:	42a3      	cmp	r3, r4
 80200a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80200ac:	bf08      	it	eq
 80200ae:	2300      	moveq	r3, #0
 80200b0:	6102      	str	r2, [r0, #16]
 80200b2:	bf08      	it	eq
 80200b4:	6143      	streq	r3, [r0, #20]
 80200b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80200ba:	f8dc c000 	ldr.w	ip, [ip]
 80200be:	fa0c fc08 	lsl.w	ip, ip, r8
 80200c2:	ea4c 0707 	orr.w	r7, ip, r7
 80200c6:	f849 7b04 	str.w	r7, [r9], #4
 80200ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80200ce:	40cf      	lsrs	r7, r1
 80200d0:	e7da      	b.n	8020088 <rshift+0x4c>
 80200d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80200d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80200da:	e7c3      	b.n	8020064 <rshift+0x28>
 80200dc:	4623      	mov	r3, r4
 80200de:	e7e1      	b.n	80200a4 <rshift+0x68>

080200e0 <__hexdig_fun>:
 80200e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80200e4:	2b09      	cmp	r3, #9
 80200e6:	d802      	bhi.n	80200ee <__hexdig_fun+0xe>
 80200e8:	3820      	subs	r0, #32
 80200ea:	b2c0      	uxtb	r0, r0
 80200ec:	4770      	bx	lr
 80200ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80200f2:	2b05      	cmp	r3, #5
 80200f4:	d801      	bhi.n	80200fa <__hexdig_fun+0x1a>
 80200f6:	3847      	subs	r0, #71	@ 0x47
 80200f8:	e7f7      	b.n	80200ea <__hexdig_fun+0xa>
 80200fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80200fe:	2b05      	cmp	r3, #5
 8020100:	d801      	bhi.n	8020106 <__hexdig_fun+0x26>
 8020102:	3827      	subs	r0, #39	@ 0x27
 8020104:	e7f1      	b.n	80200ea <__hexdig_fun+0xa>
 8020106:	2000      	movs	r0, #0
 8020108:	4770      	bx	lr
	...

0802010c <__gethex>:
 802010c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020110:	b085      	sub	sp, #20
 8020112:	468a      	mov	sl, r1
 8020114:	9302      	str	r3, [sp, #8]
 8020116:	680b      	ldr	r3, [r1, #0]
 8020118:	9001      	str	r0, [sp, #4]
 802011a:	4690      	mov	r8, r2
 802011c:	1c9c      	adds	r4, r3, #2
 802011e:	46a1      	mov	r9, r4
 8020120:	f814 0b01 	ldrb.w	r0, [r4], #1
 8020124:	2830      	cmp	r0, #48	@ 0x30
 8020126:	d0fa      	beq.n	802011e <__gethex+0x12>
 8020128:	eba9 0303 	sub.w	r3, r9, r3
 802012c:	f1a3 0b02 	sub.w	fp, r3, #2
 8020130:	f7ff ffd6 	bl	80200e0 <__hexdig_fun>
 8020134:	4605      	mov	r5, r0
 8020136:	2800      	cmp	r0, #0
 8020138:	d168      	bne.n	802020c <__gethex+0x100>
 802013a:	49a0      	ldr	r1, [pc, #640]	@ (80203bc <__gethex+0x2b0>)
 802013c:	2201      	movs	r2, #1
 802013e:	4648      	mov	r0, r9
 8020140:	f7fd ffce 	bl	801e0e0 <strncmp>
 8020144:	4607      	mov	r7, r0
 8020146:	2800      	cmp	r0, #0
 8020148:	d167      	bne.n	802021a <__gethex+0x10e>
 802014a:	f899 0001 	ldrb.w	r0, [r9, #1]
 802014e:	4626      	mov	r6, r4
 8020150:	f7ff ffc6 	bl	80200e0 <__hexdig_fun>
 8020154:	2800      	cmp	r0, #0
 8020156:	d062      	beq.n	802021e <__gethex+0x112>
 8020158:	4623      	mov	r3, r4
 802015a:	7818      	ldrb	r0, [r3, #0]
 802015c:	2830      	cmp	r0, #48	@ 0x30
 802015e:	4699      	mov	r9, r3
 8020160:	f103 0301 	add.w	r3, r3, #1
 8020164:	d0f9      	beq.n	802015a <__gethex+0x4e>
 8020166:	f7ff ffbb 	bl	80200e0 <__hexdig_fun>
 802016a:	fab0 f580 	clz	r5, r0
 802016e:	096d      	lsrs	r5, r5, #5
 8020170:	f04f 0b01 	mov.w	fp, #1
 8020174:	464a      	mov	r2, r9
 8020176:	4616      	mov	r6, r2
 8020178:	3201      	adds	r2, #1
 802017a:	7830      	ldrb	r0, [r6, #0]
 802017c:	f7ff ffb0 	bl	80200e0 <__hexdig_fun>
 8020180:	2800      	cmp	r0, #0
 8020182:	d1f8      	bne.n	8020176 <__gethex+0x6a>
 8020184:	498d      	ldr	r1, [pc, #564]	@ (80203bc <__gethex+0x2b0>)
 8020186:	2201      	movs	r2, #1
 8020188:	4630      	mov	r0, r6
 802018a:	f7fd ffa9 	bl	801e0e0 <strncmp>
 802018e:	2800      	cmp	r0, #0
 8020190:	d13f      	bne.n	8020212 <__gethex+0x106>
 8020192:	b944      	cbnz	r4, 80201a6 <__gethex+0x9a>
 8020194:	1c74      	adds	r4, r6, #1
 8020196:	4622      	mov	r2, r4
 8020198:	4616      	mov	r6, r2
 802019a:	3201      	adds	r2, #1
 802019c:	7830      	ldrb	r0, [r6, #0]
 802019e:	f7ff ff9f 	bl	80200e0 <__hexdig_fun>
 80201a2:	2800      	cmp	r0, #0
 80201a4:	d1f8      	bne.n	8020198 <__gethex+0x8c>
 80201a6:	1ba4      	subs	r4, r4, r6
 80201a8:	00a7      	lsls	r7, r4, #2
 80201aa:	7833      	ldrb	r3, [r6, #0]
 80201ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80201b0:	2b50      	cmp	r3, #80	@ 0x50
 80201b2:	d13e      	bne.n	8020232 <__gethex+0x126>
 80201b4:	7873      	ldrb	r3, [r6, #1]
 80201b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80201b8:	d033      	beq.n	8020222 <__gethex+0x116>
 80201ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80201bc:	d034      	beq.n	8020228 <__gethex+0x11c>
 80201be:	1c71      	adds	r1, r6, #1
 80201c0:	2400      	movs	r4, #0
 80201c2:	7808      	ldrb	r0, [r1, #0]
 80201c4:	f7ff ff8c 	bl	80200e0 <__hexdig_fun>
 80201c8:	1e43      	subs	r3, r0, #1
 80201ca:	b2db      	uxtb	r3, r3
 80201cc:	2b18      	cmp	r3, #24
 80201ce:	d830      	bhi.n	8020232 <__gethex+0x126>
 80201d0:	f1a0 0210 	sub.w	r2, r0, #16
 80201d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80201d8:	f7ff ff82 	bl	80200e0 <__hexdig_fun>
 80201dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80201e0:	fa5f fc8c 	uxtb.w	ip, ip
 80201e4:	f1bc 0f18 	cmp.w	ip, #24
 80201e8:	f04f 030a 	mov.w	r3, #10
 80201ec:	d91e      	bls.n	802022c <__gethex+0x120>
 80201ee:	b104      	cbz	r4, 80201f2 <__gethex+0xe6>
 80201f0:	4252      	negs	r2, r2
 80201f2:	4417      	add	r7, r2
 80201f4:	f8ca 1000 	str.w	r1, [sl]
 80201f8:	b1ed      	cbz	r5, 8020236 <__gethex+0x12a>
 80201fa:	f1bb 0f00 	cmp.w	fp, #0
 80201fe:	bf0c      	ite	eq
 8020200:	2506      	moveq	r5, #6
 8020202:	2500      	movne	r5, #0
 8020204:	4628      	mov	r0, r5
 8020206:	b005      	add	sp, #20
 8020208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802020c:	2500      	movs	r5, #0
 802020e:	462c      	mov	r4, r5
 8020210:	e7b0      	b.n	8020174 <__gethex+0x68>
 8020212:	2c00      	cmp	r4, #0
 8020214:	d1c7      	bne.n	80201a6 <__gethex+0x9a>
 8020216:	4627      	mov	r7, r4
 8020218:	e7c7      	b.n	80201aa <__gethex+0x9e>
 802021a:	464e      	mov	r6, r9
 802021c:	462f      	mov	r7, r5
 802021e:	2501      	movs	r5, #1
 8020220:	e7c3      	b.n	80201aa <__gethex+0x9e>
 8020222:	2400      	movs	r4, #0
 8020224:	1cb1      	adds	r1, r6, #2
 8020226:	e7cc      	b.n	80201c2 <__gethex+0xb6>
 8020228:	2401      	movs	r4, #1
 802022a:	e7fb      	b.n	8020224 <__gethex+0x118>
 802022c:	fb03 0002 	mla	r0, r3, r2, r0
 8020230:	e7ce      	b.n	80201d0 <__gethex+0xc4>
 8020232:	4631      	mov	r1, r6
 8020234:	e7de      	b.n	80201f4 <__gethex+0xe8>
 8020236:	eba6 0309 	sub.w	r3, r6, r9
 802023a:	3b01      	subs	r3, #1
 802023c:	4629      	mov	r1, r5
 802023e:	2b07      	cmp	r3, #7
 8020240:	dc0a      	bgt.n	8020258 <__gethex+0x14c>
 8020242:	9801      	ldr	r0, [sp, #4]
 8020244:	f000 fa8a 	bl	802075c <_Balloc>
 8020248:	4604      	mov	r4, r0
 802024a:	b940      	cbnz	r0, 802025e <__gethex+0x152>
 802024c:	4b5c      	ldr	r3, [pc, #368]	@ (80203c0 <__gethex+0x2b4>)
 802024e:	4602      	mov	r2, r0
 8020250:	21e4      	movs	r1, #228	@ 0xe4
 8020252:	485c      	ldr	r0, [pc, #368]	@ (80203c4 <__gethex+0x2b8>)
 8020254:	f7ff f828 	bl	801f2a8 <__assert_func>
 8020258:	3101      	adds	r1, #1
 802025a:	105b      	asrs	r3, r3, #1
 802025c:	e7ef      	b.n	802023e <__gethex+0x132>
 802025e:	f100 0a14 	add.w	sl, r0, #20
 8020262:	2300      	movs	r3, #0
 8020264:	4655      	mov	r5, sl
 8020266:	469b      	mov	fp, r3
 8020268:	45b1      	cmp	r9, r6
 802026a:	d337      	bcc.n	80202dc <__gethex+0x1d0>
 802026c:	f845 bb04 	str.w	fp, [r5], #4
 8020270:	eba5 050a 	sub.w	r5, r5, sl
 8020274:	10ad      	asrs	r5, r5, #2
 8020276:	6125      	str	r5, [r4, #16]
 8020278:	4658      	mov	r0, fp
 802027a:	f000 fb61 	bl	8020940 <__hi0bits>
 802027e:	016d      	lsls	r5, r5, #5
 8020280:	f8d8 6000 	ldr.w	r6, [r8]
 8020284:	1a2d      	subs	r5, r5, r0
 8020286:	42b5      	cmp	r5, r6
 8020288:	dd54      	ble.n	8020334 <__gethex+0x228>
 802028a:	1bad      	subs	r5, r5, r6
 802028c:	4629      	mov	r1, r5
 802028e:	4620      	mov	r0, r4
 8020290:	f000 feed 	bl	802106e <__any_on>
 8020294:	4681      	mov	r9, r0
 8020296:	b178      	cbz	r0, 80202b8 <__gethex+0x1ac>
 8020298:	1e6b      	subs	r3, r5, #1
 802029a:	1159      	asrs	r1, r3, #5
 802029c:	f003 021f 	and.w	r2, r3, #31
 80202a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80202a4:	f04f 0901 	mov.w	r9, #1
 80202a8:	fa09 f202 	lsl.w	r2, r9, r2
 80202ac:	420a      	tst	r2, r1
 80202ae:	d003      	beq.n	80202b8 <__gethex+0x1ac>
 80202b0:	454b      	cmp	r3, r9
 80202b2:	dc36      	bgt.n	8020322 <__gethex+0x216>
 80202b4:	f04f 0902 	mov.w	r9, #2
 80202b8:	4629      	mov	r1, r5
 80202ba:	4620      	mov	r0, r4
 80202bc:	f7ff febe 	bl	802003c <rshift>
 80202c0:	442f      	add	r7, r5
 80202c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80202c6:	42bb      	cmp	r3, r7
 80202c8:	da42      	bge.n	8020350 <__gethex+0x244>
 80202ca:	9801      	ldr	r0, [sp, #4]
 80202cc:	4621      	mov	r1, r4
 80202ce:	f000 fa85 	bl	80207dc <_Bfree>
 80202d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80202d4:	2300      	movs	r3, #0
 80202d6:	6013      	str	r3, [r2, #0]
 80202d8:	25a3      	movs	r5, #163	@ 0xa3
 80202da:	e793      	b.n	8020204 <__gethex+0xf8>
 80202dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80202e0:	2a2e      	cmp	r2, #46	@ 0x2e
 80202e2:	d012      	beq.n	802030a <__gethex+0x1fe>
 80202e4:	2b20      	cmp	r3, #32
 80202e6:	d104      	bne.n	80202f2 <__gethex+0x1e6>
 80202e8:	f845 bb04 	str.w	fp, [r5], #4
 80202ec:	f04f 0b00 	mov.w	fp, #0
 80202f0:	465b      	mov	r3, fp
 80202f2:	7830      	ldrb	r0, [r6, #0]
 80202f4:	9303      	str	r3, [sp, #12]
 80202f6:	f7ff fef3 	bl	80200e0 <__hexdig_fun>
 80202fa:	9b03      	ldr	r3, [sp, #12]
 80202fc:	f000 000f 	and.w	r0, r0, #15
 8020300:	4098      	lsls	r0, r3
 8020302:	ea4b 0b00 	orr.w	fp, fp, r0
 8020306:	3304      	adds	r3, #4
 8020308:	e7ae      	b.n	8020268 <__gethex+0x15c>
 802030a:	45b1      	cmp	r9, r6
 802030c:	d8ea      	bhi.n	80202e4 <__gethex+0x1d8>
 802030e:	492b      	ldr	r1, [pc, #172]	@ (80203bc <__gethex+0x2b0>)
 8020310:	9303      	str	r3, [sp, #12]
 8020312:	2201      	movs	r2, #1
 8020314:	4630      	mov	r0, r6
 8020316:	f7fd fee3 	bl	801e0e0 <strncmp>
 802031a:	9b03      	ldr	r3, [sp, #12]
 802031c:	2800      	cmp	r0, #0
 802031e:	d1e1      	bne.n	80202e4 <__gethex+0x1d8>
 8020320:	e7a2      	b.n	8020268 <__gethex+0x15c>
 8020322:	1ea9      	subs	r1, r5, #2
 8020324:	4620      	mov	r0, r4
 8020326:	f000 fea2 	bl	802106e <__any_on>
 802032a:	2800      	cmp	r0, #0
 802032c:	d0c2      	beq.n	80202b4 <__gethex+0x1a8>
 802032e:	f04f 0903 	mov.w	r9, #3
 8020332:	e7c1      	b.n	80202b8 <__gethex+0x1ac>
 8020334:	da09      	bge.n	802034a <__gethex+0x23e>
 8020336:	1b75      	subs	r5, r6, r5
 8020338:	4621      	mov	r1, r4
 802033a:	9801      	ldr	r0, [sp, #4]
 802033c:	462a      	mov	r2, r5
 802033e:	f000 fc5d 	bl	8020bfc <__lshift>
 8020342:	1b7f      	subs	r7, r7, r5
 8020344:	4604      	mov	r4, r0
 8020346:	f100 0a14 	add.w	sl, r0, #20
 802034a:	f04f 0900 	mov.w	r9, #0
 802034e:	e7b8      	b.n	80202c2 <__gethex+0x1b6>
 8020350:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020354:	42bd      	cmp	r5, r7
 8020356:	dd6f      	ble.n	8020438 <__gethex+0x32c>
 8020358:	1bed      	subs	r5, r5, r7
 802035a:	42ae      	cmp	r6, r5
 802035c:	dc34      	bgt.n	80203c8 <__gethex+0x2bc>
 802035e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020362:	2b02      	cmp	r3, #2
 8020364:	d022      	beq.n	80203ac <__gethex+0x2a0>
 8020366:	2b03      	cmp	r3, #3
 8020368:	d024      	beq.n	80203b4 <__gethex+0x2a8>
 802036a:	2b01      	cmp	r3, #1
 802036c:	d115      	bne.n	802039a <__gethex+0x28e>
 802036e:	42ae      	cmp	r6, r5
 8020370:	d113      	bne.n	802039a <__gethex+0x28e>
 8020372:	2e01      	cmp	r6, #1
 8020374:	d10b      	bne.n	802038e <__gethex+0x282>
 8020376:	9a02      	ldr	r2, [sp, #8]
 8020378:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802037c:	6013      	str	r3, [r2, #0]
 802037e:	2301      	movs	r3, #1
 8020380:	6123      	str	r3, [r4, #16]
 8020382:	f8ca 3000 	str.w	r3, [sl]
 8020386:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020388:	2562      	movs	r5, #98	@ 0x62
 802038a:	601c      	str	r4, [r3, #0]
 802038c:	e73a      	b.n	8020204 <__gethex+0xf8>
 802038e:	1e71      	subs	r1, r6, #1
 8020390:	4620      	mov	r0, r4
 8020392:	f000 fe6c 	bl	802106e <__any_on>
 8020396:	2800      	cmp	r0, #0
 8020398:	d1ed      	bne.n	8020376 <__gethex+0x26a>
 802039a:	9801      	ldr	r0, [sp, #4]
 802039c:	4621      	mov	r1, r4
 802039e:	f000 fa1d 	bl	80207dc <_Bfree>
 80203a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80203a4:	2300      	movs	r3, #0
 80203a6:	6013      	str	r3, [r2, #0]
 80203a8:	2550      	movs	r5, #80	@ 0x50
 80203aa:	e72b      	b.n	8020204 <__gethex+0xf8>
 80203ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80203ae:	2b00      	cmp	r3, #0
 80203b0:	d1f3      	bne.n	802039a <__gethex+0x28e>
 80203b2:	e7e0      	b.n	8020376 <__gethex+0x26a>
 80203b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80203b6:	2b00      	cmp	r3, #0
 80203b8:	d1dd      	bne.n	8020376 <__gethex+0x26a>
 80203ba:	e7ee      	b.n	802039a <__gethex+0x28e>
 80203bc:	08026004 	.word	0x08026004
 80203c0:	080261a3 	.word	0x080261a3
 80203c4:	080261b4 	.word	0x080261b4
 80203c8:	1e6f      	subs	r7, r5, #1
 80203ca:	f1b9 0f00 	cmp.w	r9, #0
 80203ce:	d130      	bne.n	8020432 <__gethex+0x326>
 80203d0:	b127      	cbz	r7, 80203dc <__gethex+0x2d0>
 80203d2:	4639      	mov	r1, r7
 80203d4:	4620      	mov	r0, r4
 80203d6:	f000 fe4a 	bl	802106e <__any_on>
 80203da:	4681      	mov	r9, r0
 80203dc:	117a      	asrs	r2, r7, #5
 80203de:	2301      	movs	r3, #1
 80203e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80203e4:	f007 071f 	and.w	r7, r7, #31
 80203e8:	40bb      	lsls	r3, r7
 80203ea:	4213      	tst	r3, r2
 80203ec:	4629      	mov	r1, r5
 80203ee:	4620      	mov	r0, r4
 80203f0:	bf18      	it	ne
 80203f2:	f049 0902 	orrne.w	r9, r9, #2
 80203f6:	f7ff fe21 	bl	802003c <rshift>
 80203fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80203fe:	1b76      	subs	r6, r6, r5
 8020400:	2502      	movs	r5, #2
 8020402:	f1b9 0f00 	cmp.w	r9, #0
 8020406:	d047      	beq.n	8020498 <__gethex+0x38c>
 8020408:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802040c:	2b02      	cmp	r3, #2
 802040e:	d015      	beq.n	802043c <__gethex+0x330>
 8020410:	2b03      	cmp	r3, #3
 8020412:	d017      	beq.n	8020444 <__gethex+0x338>
 8020414:	2b01      	cmp	r3, #1
 8020416:	d109      	bne.n	802042c <__gethex+0x320>
 8020418:	f019 0f02 	tst.w	r9, #2
 802041c:	d006      	beq.n	802042c <__gethex+0x320>
 802041e:	f8da 3000 	ldr.w	r3, [sl]
 8020422:	ea49 0903 	orr.w	r9, r9, r3
 8020426:	f019 0f01 	tst.w	r9, #1
 802042a:	d10e      	bne.n	802044a <__gethex+0x33e>
 802042c:	f045 0510 	orr.w	r5, r5, #16
 8020430:	e032      	b.n	8020498 <__gethex+0x38c>
 8020432:	f04f 0901 	mov.w	r9, #1
 8020436:	e7d1      	b.n	80203dc <__gethex+0x2d0>
 8020438:	2501      	movs	r5, #1
 802043a:	e7e2      	b.n	8020402 <__gethex+0x2f6>
 802043c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802043e:	f1c3 0301 	rsb	r3, r3, #1
 8020442:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020446:	2b00      	cmp	r3, #0
 8020448:	d0f0      	beq.n	802042c <__gethex+0x320>
 802044a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802044e:	f104 0314 	add.w	r3, r4, #20
 8020452:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8020456:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802045a:	f04f 0c00 	mov.w	ip, #0
 802045e:	4618      	mov	r0, r3
 8020460:	f853 2b04 	ldr.w	r2, [r3], #4
 8020464:	f1b2 3fff 	cmp.w	r2, #4294967295
 8020468:	d01b      	beq.n	80204a2 <__gethex+0x396>
 802046a:	3201      	adds	r2, #1
 802046c:	6002      	str	r2, [r0, #0]
 802046e:	2d02      	cmp	r5, #2
 8020470:	f104 0314 	add.w	r3, r4, #20
 8020474:	d13c      	bne.n	80204f0 <__gethex+0x3e4>
 8020476:	f8d8 2000 	ldr.w	r2, [r8]
 802047a:	3a01      	subs	r2, #1
 802047c:	42b2      	cmp	r2, r6
 802047e:	d109      	bne.n	8020494 <__gethex+0x388>
 8020480:	1171      	asrs	r1, r6, #5
 8020482:	2201      	movs	r2, #1
 8020484:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8020488:	f006 061f 	and.w	r6, r6, #31
 802048c:	fa02 f606 	lsl.w	r6, r2, r6
 8020490:	421e      	tst	r6, r3
 8020492:	d13a      	bne.n	802050a <__gethex+0x3fe>
 8020494:	f045 0520 	orr.w	r5, r5, #32
 8020498:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802049a:	601c      	str	r4, [r3, #0]
 802049c:	9b02      	ldr	r3, [sp, #8]
 802049e:	601f      	str	r7, [r3, #0]
 80204a0:	e6b0      	b.n	8020204 <__gethex+0xf8>
 80204a2:	4299      	cmp	r1, r3
 80204a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80204a8:	d8d9      	bhi.n	802045e <__gethex+0x352>
 80204aa:	68a3      	ldr	r3, [r4, #8]
 80204ac:	459b      	cmp	fp, r3
 80204ae:	db17      	blt.n	80204e0 <__gethex+0x3d4>
 80204b0:	6861      	ldr	r1, [r4, #4]
 80204b2:	9801      	ldr	r0, [sp, #4]
 80204b4:	3101      	adds	r1, #1
 80204b6:	f000 f951 	bl	802075c <_Balloc>
 80204ba:	4681      	mov	r9, r0
 80204bc:	b918      	cbnz	r0, 80204c6 <__gethex+0x3ba>
 80204be:	4b1a      	ldr	r3, [pc, #104]	@ (8020528 <__gethex+0x41c>)
 80204c0:	4602      	mov	r2, r0
 80204c2:	2184      	movs	r1, #132	@ 0x84
 80204c4:	e6c5      	b.n	8020252 <__gethex+0x146>
 80204c6:	6922      	ldr	r2, [r4, #16]
 80204c8:	3202      	adds	r2, #2
 80204ca:	f104 010c 	add.w	r1, r4, #12
 80204ce:	0092      	lsls	r2, r2, #2
 80204d0:	300c      	adds	r0, #12
 80204d2:	f7fe fe78 	bl	801f1c6 <memcpy>
 80204d6:	4621      	mov	r1, r4
 80204d8:	9801      	ldr	r0, [sp, #4]
 80204da:	f000 f97f 	bl	80207dc <_Bfree>
 80204de:	464c      	mov	r4, r9
 80204e0:	6923      	ldr	r3, [r4, #16]
 80204e2:	1c5a      	adds	r2, r3, #1
 80204e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80204e8:	6122      	str	r2, [r4, #16]
 80204ea:	2201      	movs	r2, #1
 80204ec:	615a      	str	r2, [r3, #20]
 80204ee:	e7be      	b.n	802046e <__gethex+0x362>
 80204f0:	6922      	ldr	r2, [r4, #16]
 80204f2:	455a      	cmp	r2, fp
 80204f4:	dd0b      	ble.n	802050e <__gethex+0x402>
 80204f6:	2101      	movs	r1, #1
 80204f8:	4620      	mov	r0, r4
 80204fa:	f7ff fd9f 	bl	802003c <rshift>
 80204fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020502:	3701      	adds	r7, #1
 8020504:	42bb      	cmp	r3, r7
 8020506:	f6ff aee0 	blt.w	80202ca <__gethex+0x1be>
 802050a:	2501      	movs	r5, #1
 802050c:	e7c2      	b.n	8020494 <__gethex+0x388>
 802050e:	f016 061f 	ands.w	r6, r6, #31
 8020512:	d0fa      	beq.n	802050a <__gethex+0x3fe>
 8020514:	4453      	add	r3, sl
 8020516:	f1c6 0620 	rsb	r6, r6, #32
 802051a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802051e:	f000 fa0f 	bl	8020940 <__hi0bits>
 8020522:	42b0      	cmp	r0, r6
 8020524:	dbe7      	blt.n	80204f6 <__gethex+0x3ea>
 8020526:	e7f0      	b.n	802050a <__gethex+0x3fe>
 8020528:	080261a3 	.word	0x080261a3

0802052c <L_shift>:
 802052c:	f1c2 0208 	rsb	r2, r2, #8
 8020530:	0092      	lsls	r2, r2, #2
 8020532:	b570      	push	{r4, r5, r6, lr}
 8020534:	f1c2 0620 	rsb	r6, r2, #32
 8020538:	6843      	ldr	r3, [r0, #4]
 802053a:	6804      	ldr	r4, [r0, #0]
 802053c:	fa03 f506 	lsl.w	r5, r3, r6
 8020540:	432c      	orrs	r4, r5
 8020542:	40d3      	lsrs	r3, r2
 8020544:	6004      	str	r4, [r0, #0]
 8020546:	f840 3f04 	str.w	r3, [r0, #4]!
 802054a:	4288      	cmp	r0, r1
 802054c:	d3f4      	bcc.n	8020538 <L_shift+0xc>
 802054e:	bd70      	pop	{r4, r5, r6, pc}

08020550 <__match>:
 8020550:	b530      	push	{r4, r5, lr}
 8020552:	6803      	ldr	r3, [r0, #0]
 8020554:	3301      	adds	r3, #1
 8020556:	f811 4b01 	ldrb.w	r4, [r1], #1
 802055a:	b914      	cbnz	r4, 8020562 <__match+0x12>
 802055c:	6003      	str	r3, [r0, #0]
 802055e:	2001      	movs	r0, #1
 8020560:	bd30      	pop	{r4, r5, pc}
 8020562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020566:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 802056a:	2d19      	cmp	r5, #25
 802056c:	bf98      	it	ls
 802056e:	3220      	addls	r2, #32
 8020570:	42a2      	cmp	r2, r4
 8020572:	d0f0      	beq.n	8020556 <__match+0x6>
 8020574:	2000      	movs	r0, #0
 8020576:	e7f3      	b.n	8020560 <__match+0x10>

08020578 <__hexnan>:
 8020578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802057c:	680b      	ldr	r3, [r1, #0]
 802057e:	6801      	ldr	r1, [r0, #0]
 8020580:	115e      	asrs	r6, r3, #5
 8020582:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8020586:	f013 031f 	ands.w	r3, r3, #31
 802058a:	b087      	sub	sp, #28
 802058c:	bf18      	it	ne
 802058e:	3604      	addne	r6, #4
 8020590:	2500      	movs	r5, #0
 8020592:	1f37      	subs	r7, r6, #4
 8020594:	4682      	mov	sl, r0
 8020596:	4690      	mov	r8, r2
 8020598:	9301      	str	r3, [sp, #4]
 802059a:	f846 5c04 	str.w	r5, [r6, #-4]
 802059e:	46b9      	mov	r9, r7
 80205a0:	463c      	mov	r4, r7
 80205a2:	9502      	str	r5, [sp, #8]
 80205a4:	46ab      	mov	fp, r5
 80205a6:	784a      	ldrb	r2, [r1, #1]
 80205a8:	1c4b      	adds	r3, r1, #1
 80205aa:	9303      	str	r3, [sp, #12]
 80205ac:	b342      	cbz	r2, 8020600 <__hexnan+0x88>
 80205ae:	4610      	mov	r0, r2
 80205b0:	9105      	str	r1, [sp, #20]
 80205b2:	9204      	str	r2, [sp, #16]
 80205b4:	f7ff fd94 	bl	80200e0 <__hexdig_fun>
 80205b8:	2800      	cmp	r0, #0
 80205ba:	d151      	bne.n	8020660 <__hexnan+0xe8>
 80205bc:	9a04      	ldr	r2, [sp, #16]
 80205be:	9905      	ldr	r1, [sp, #20]
 80205c0:	2a20      	cmp	r2, #32
 80205c2:	d818      	bhi.n	80205f6 <__hexnan+0x7e>
 80205c4:	9b02      	ldr	r3, [sp, #8]
 80205c6:	459b      	cmp	fp, r3
 80205c8:	dd13      	ble.n	80205f2 <__hexnan+0x7a>
 80205ca:	454c      	cmp	r4, r9
 80205cc:	d206      	bcs.n	80205dc <__hexnan+0x64>
 80205ce:	2d07      	cmp	r5, #7
 80205d0:	dc04      	bgt.n	80205dc <__hexnan+0x64>
 80205d2:	462a      	mov	r2, r5
 80205d4:	4649      	mov	r1, r9
 80205d6:	4620      	mov	r0, r4
 80205d8:	f7ff ffa8 	bl	802052c <L_shift>
 80205dc:	4544      	cmp	r4, r8
 80205de:	d952      	bls.n	8020686 <__hexnan+0x10e>
 80205e0:	2300      	movs	r3, #0
 80205e2:	f1a4 0904 	sub.w	r9, r4, #4
 80205e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80205ea:	f8cd b008 	str.w	fp, [sp, #8]
 80205ee:	464c      	mov	r4, r9
 80205f0:	461d      	mov	r5, r3
 80205f2:	9903      	ldr	r1, [sp, #12]
 80205f4:	e7d7      	b.n	80205a6 <__hexnan+0x2e>
 80205f6:	2a29      	cmp	r2, #41	@ 0x29
 80205f8:	d157      	bne.n	80206aa <__hexnan+0x132>
 80205fa:	3102      	adds	r1, #2
 80205fc:	f8ca 1000 	str.w	r1, [sl]
 8020600:	f1bb 0f00 	cmp.w	fp, #0
 8020604:	d051      	beq.n	80206aa <__hexnan+0x132>
 8020606:	454c      	cmp	r4, r9
 8020608:	d206      	bcs.n	8020618 <__hexnan+0xa0>
 802060a:	2d07      	cmp	r5, #7
 802060c:	dc04      	bgt.n	8020618 <__hexnan+0xa0>
 802060e:	462a      	mov	r2, r5
 8020610:	4649      	mov	r1, r9
 8020612:	4620      	mov	r0, r4
 8020614:	f7ff ff8a 	bl	802052c <L_shift>
 8020618:	4544      	cmp	r4, r8
 802061a:	d936      	bls.n	802068a <__hexnan+0x112>
 802061c:	f1a8 0204 	sub.w	r2, r8, #4
 8020620:	4623      	mov	r3, r4
 8020622:	f853 1b04 	ldr.w	r1, [r3], #4
 8020626:	f842 1f04 	str.w	r1, [r2, #4]!
 802062a:	429f      	cmp	r7, r3
 802062c:	d2f9      	bcs.n	8020622 <__hexnan+0xaa>
 802062e:	1b3b      	subs	r3, r7, r4
 8020630:	f023 0303 	bic.w	r3, r3, #3
 8020634:	3304      	adds	r3, #4
 8020636:	3401      	adds	r4, #1
 8020638:	3e03      	subs	r6, #3
 802063a:	42b4      	cmp	r4, r6
 802063c:	bf88      	it	hi
 802063e:	2304      	movhi	r3, #4
 8020640:	4443      	add	r3, r8
 8020642:	2200      	movs	r2, #0
 8020644:	f843 2b04 	str.w	r2, [r3], #4
 8020648:	429f      	cmp	r7, r3
 802064a:	d2fb      	bcs.n	8020644 <__hexnan+0xcc>
 802064c:	683b      	ldr	r3, [r7, #0]
 802064e:	b91b      	cbnz	r3, 8020658 <__hexnan+0xe0>
 8020650:	4547      	cmp	r7, r8
 8020652:	d128      	bne.n	80206a6 <__hexnan+0x12e>
 8020654:	2301      	movs	r3, #1
 8020656:	603b      	str	r3, [r7, #0]
 8020658:	2005      	movs	r0, #5
 802065a:	b007      	add	sp, #28
 802065c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020660:	3501      	adds	r5, #1
 8020662:	2d08      	cmp	r5, #8
 8020664:	f10b 0b01 	add.w	fp, fp, #1
 8020668:	dd06      	ble.n	8020678 <__hexnan+0x100>
 802066a:	4544      	cmp	r4, r8
 802066c:	d9c1      	bls.n	80205f2 <__hexnan+0x7a>
 802066e:	2300      	movs	r3, #0
 8020670:	f844 3c04 	str.w	r3, [r4, #-4]
 8020674:	2501      	movs	r5, #1
 8020676:	3c04      	subs	r4, #4
 8020678:	6822      	ldr	r2, [r4, #0]
 802067a:	f000 000f 	and.w	r0, r0, #15
 802067e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8020682:	6020      	str	r0, [r4, #0]
 8020684:	e7b5      	b.n	80205f2 <__hexnan+0x7a>
 8020686:	2508      	movs	r5, #8
 8020688:	e7b3      	b.n	80205f2 <__hexnan+0x7a>
 802068a:	9b01      	ldr	r3, [sp, #4]
 802068c:	2b00      	cmp	r3, #0
 802068e:	d0dd      	beq.n	802064c <__hexnan+0xd4>
 8020690:	f1c3 0320 	rsb	r3, r3, #32
 8020694:	f04f 32ff 	mov.w	r2, #4294967295
 8020698:	40da      	lsrs	r2, r3
 802069a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802069e:	4013      	ands	r3, r2
 80206a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80206a4:	e7d2      	b.n	802064c <__hexnan+0xd4>
 80206a6:	3f04      	subs	r7, #4
 80206a8:	e7d0      	b.n	802064c <__hexnan+0xd4>
 80206aa:	2004      	movs	r0, #4
 80206ac:	e7d5      	b.n	802065a <__hexnan+0xe2>
	...

080206b0 <_findenv_r>:
 80206b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206b4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8020724 <_findenv_r+0x74>
 80206b8:	4606      	mov	r6, r0
 80206ba:	4689      	mov	r9, r1
 80206bc:	4617      	mov	r7, r2
 80206be:	f001 fb83 	bl	8021dc8 <__env_lock>
 80206c2:	f8da 4000 	ldr.w	r4, [sl]
 80206c6:	b134      	cbz	r4, 80206d6 <_findenv_r+0x26>
 80206c8:	464b      	mov	r3, r9
 80206ca:	4698      	mov	r8, r3
 80206cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80206d0:	b13a      	cbz	r2, 80206e2 <_findenv_r+0x32>
 80206d2:	2a3d      	cmp	r2, #61	@ 0x3d
 80206d4:	d1f9      	bne.n	80206ca <_findenv_r+0x1a>
 80206d6:	4630      	mov	r0, r6
 80206d8:	f001 fb7c 	bl	8021dd4 <__env_unlock>
 80206dc:	2000      	movs	r0, #0
 80206de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206e2:	eba8 0809 	sub.w	r8, r8, r9
 80206e6:	46a3      	mov	fp, r4
 80206e8:	f854 0b04 	ldr.w	r0, [r4], #4
 80206ec:	2800      	cmp	r0, #0
 80206ee:	d0f2      	beq.n	80206d6 <_findenv_r+0x26>
 80206f0:	4642      	mov	r2, r8
 80206f2:	4649      	mov	r1, r9
 80206f4:	f7fd fcf4 	bl	801e0e0 <strncmp>
 80206f8:	2800      	cmp	r0, #0
 80206fa:	d1f4      	bne.n	80206e6 <_findenv_r+0x36>
 80206fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8020700:	eb03 0508 	add.w	r5, r3, r8
 8020704:	f813 3008 	ldrb.w	r3, [r3, r8]
 8020708:	2b3d      	cmp	r3, #61	@ 0x3d
 802070a:	d1ec      	bne.n	80206e6 <_findenv_r+0x36>
 802070c:	f8da 3000 	ldr.w	r3, [sl]
 8020710:	ebab 0303 	sub.w	r3, fp, r3
 8020714:	109b      	asrs	r3, r3, #2
 8020716:	4630      	mov	r0, r6
 8020718:	603b      	str	r3, [r7, #0]
 802071a:	f001 fb5b 	bl	8021dd4 <__env_unlock>
 802071e:	1c68      	adds	r0, r5, #1
 8020720:	e7dd      	b.n	80206de <_findenv_r+0x2e>
 8020722:	bf00      	nop
 8020724:	2000002c 	.word	0x2000002c

08020728 <_getenv_r>:
 8020728:	b507      	push	{r0, r1, r2, lr}
 802072a:	aa01      	add	r2, sp, #4
 802072c:	f7ff ffc0 	bl	80206b0 <_findenv_r>
 8020730:	b003      	add	sp, #12
 8020732:	f85d fb04 	ldr.w	pc, [sp], #4

08020736 <__ascii_mbtowc>:
 8020736:	b082      	sub	sp, #8
 8020738:	b901      	cbnz	r1, 802073c <__ascii_mbtowc+0x6>
 802073a:	a901      	add	r1, sp, #4
 802073c:	b142      	cbz	r2, 8020750 <__ascii_mbtowc+0x1a>
 802073e:	b14b      	cbz	r3, 8020754 <__ascii_mbtowc+0x1e>
 8020740:	7813      	ldrb	r3, [r2, #0]
 8020742:	600b      	str	r3, [r1, #0]
 8020744:	7812      	ldrb	r2, [r2, #0]
 8020746:	1e10      	subs	r0, r2, #0
 8020748:	bf18      	it	ne
 802074a:	2001      	movne	r0, #1
 802074c:	b002      	add	sp, #8
 802074e:	4770      	bx	lr
 8020750:	4610      	mov	r0, r2
 8020752:	e7fb      	b.n	802074c <__ascii_mbtowc+0x16>
 8020754:	f06f 0001 	mvn.w	r0, #1
 8020758:	e7f8      	b.n	802074c <__ascii_mbtowc+0x16>
	...

0802075c <_Balloc>:
 802075c:	b570      	push	{r4, r5, r6, lr}
 802075e:	69c6      	ldr	r6, [r0, #28]
 8020760:	4604      	mov	r4, r0
 8020762:	460d      	mov	r5, r1
 8020764:	b976      	cbnz	r6, 8020784 <_Balloc+0x28>
 8020766:	2010      	movs	r0, #16
 8020768:	f7fb fd5c 	bl	801c224 <malloc>
 802076c:	4602      	mov	r2, r0
 802076e:	61e0      	str	r0, [r4, #28]
 8020770:	b920      	cbnz	r0, 802077c <_Balloc+0x20>
 8020772:	4b18      	ldr	r3, [pc, #96]	@ (80207d4 <_Balloc+0x78>)
 8020774:	4818      	ldr	r0, [pc, #96]	@ (80207d8 <_Balloc+0x7c>)
 8020776:	216b      	movs	r1, #107	@ 0x6b
 8020778:	f7fe fd96 	bl	801f2a8 <__assert_func>
 802077c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020780:	6006      	str	r6, [r0, #0]
 8020782:	60c6      	str	r6, [r0, #12]
 8020784:	69e6      	ldr	r6, [r4, #28]
 8020786:	68f3      	ldr	r3, [r6, #12]
 8020788:	b183      	cbz	r3, 80207ac <_Balloc+0x50>
 802078a:	69e3      	ldr	r3, [r4, #28]
 802078c:	68db      	ldr	r3, [r3, #12]
 802078e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020792:	b9b8      	cbnz	r0, 80207c4 <_Balloc+0x68>
 8020794:	2101      	movs	r1, #1
 8020796:	fa01 f605 	lsl.w	r6, r1, r5
 802079a:	1d72      	adds	r2, r6, #5
 802079c:	0092      	lsls	r2, r2, #2
 802079e:	4620      	mov	r0, r4
 80207a0:	f001 fafd 	bl	8021d9e <_calloc_r>
 80207a4:	b160      	cbz	r0, 80207c0 <_Balloc+0x64>
 80207a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80207aa:	e00e      	b.n	80207ca <_Balloc+0x6e>
 80207ac:	2221      	movs	r2, #33	@ 0x21
 80207ae:	2104      	movs	r1, #4
 80207b0:	4620      	mov	r0, r4
 80207b2:	f001 faf4 	bl	8021d9e <_calloc_r>
 80207b6:	69e3      	ldr	r3, [r4, #28]
 80207b8:	60f0      	str	r0, [r6, #12]
 80207ba:	68db      	ldr	r3, [r3, #12]
 80207bc:	2b00      	cmp	r3, #0
 80207be:	d1e4      	bne.n	802078a <_Balloc+0x2e>
 80207c0:	2000      	movs	r0, #0
 80207c2:	bd70      	pop	{r4, r5, r6, pc}
 80207c4:	6802      	ldr	r2, [r0, #0]
 80207c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80207ca:	2300      	movs	r3, #0
 80207cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80207d0:	e7f7      	b.n	80207c2 <_Balloc+0x66>
 80207d2:	bf00      	nop
 80207d4:	0802603d 	.word	0x0802603d
 80207d8:	08026214 	.word	0x08026214

080207dc <_Bfree>:
 80207dc:	b570      	push	{r4, r5, r6, lr}
 80207de:	69c6      	ldr	r6, [r0, #28]
 80207e0:	4605      	mov	r5, r0
 80207e2:	460c      	mov	r4, r1
 80207e4:	b976      	cbnz	r6, 8020804 <_Bfree+0x28>
 80207e6:	2010      	movs	r0, #16
 80207e8:	f7fb fd1c 	bl	801c224 <malloc>
 80207ec:	4602      	mov	r2, r0
 80207ee:	61e8      	str	r0, [r5, #28]
 80207f0:	b920      	cbnz	r0, 80207fc <_Bfree+0x20>
 80207f2:	4b09      	ldr	r3, [pc, #36]	@ (8020818 <_Bfree+0x3c>)
 80207f4:	4809      	ldr	r0, [pc, #36]	@ (802081c <_Bfree+0x40>)
 80207f6:	218f      	movs	r1, #143	@ 0x8f
 80207f8:	f7fe fd56 	bl	801f2a8 <__assert_func>
 80207fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020800:	6006      	str	r6, [r0, #0]
 8020802:	60c6      	str	r6, [r0, #12]
 8020804:	b13c      	cbz	r4, 8020816 <_Bfree+0x3a>
 8020806:	69eb      	ldr	r3, [r5, #28]
 8020808:	6862      	ldr	r2, [r4, #4]
 802080a:	68db      	ldr	r3, [r3, #12]
 802080c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020810:	6021      	str	r1, [r4, #0]
 8020812:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020816:	bd70      	pop	{r4, r5, r6, pc}
 8020818:	0802603d 	.word	0x0802603d
 802081c:	08026214 	.word	0x08026214

08020820 <__multadd>:
 8020820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020824:	690d      	ldr	r5, [r1, #16]
 8020826:	4607      	mov	r7, r0
 8020828:	460c      	mov	r4, r1
 802082a:	461e      	mov	r6, r3
 802082c:	f101 0c14 	add.w	ip, r1, #20
 8020830:	2000      	movs	r0, #0
 8020832:	f8dc 3000 	ldr.w	r3, [ip]
 8020836:	b299      	uxth	r1, r3
 8020838:	fb02 6101 	mla	r1, r2, r1, r6
 802083c:	0c1e      	lsrs	r6, r3, #16
 802083e:	0c0b      	lsrs	r3, r1, #16
 8020840:	fb02 3306 	mla	r3, r2, r6, r3
 8020844:	b289      	uxth	r1, r1
 8020846:	3001      	adds	r0, #1
 8020848:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802084c:	4285      	cmp	r5, r0
 802084e:	f84c 1b04 	str.w	r1, [ip], #4
 8020852:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020856:	dcec      	bgt.n	8020832 <__multadd+0x12>
 8020858:	b30e      	cbz	r6, 802089e <__multadd+0x7e>
 802085a:	68a3      	ldr	r3, [r4, #8]
 802085c:	42ab      	cmp	r3, r5
 802085e:	dc19      	bgt.n	8020894 <__multadd+0x74>
 8020860:	6861      	ldr	r1, [r4, #4]
 8020862:	4638      	mov	r0, r7
 8020864:	3101      	adds	r1, #1
 8020866:	f7ff ff79 	bl	802075c <_Balloc>
 802086a:	4680      	mov	r8, r0
 802086c:	b928      	cbnz	r0, 802087a <__multadd+0x5a>
 802086e:	4602      	mov	r2, r0
 8020870:	4b0c      	ldr	r3, [pc, #48]	@ (80208a4 <__multadd+0x84>)
 8020872:	480d      	ldr	r0, [pc, #52]	@ (80208a8 <__multadd+0x88>)
 8020874:	21ba      	movs	r1, #186	@ 0xba
 8020876:	f7fe fd17 	bl	801f2a8 <__assert_func>
 802087a:	6922      	ldr	r2, [r4, #16]
 802087c:	3202      	adds	r2, #2
 802087e:	f104 010c 	add.w	r1, r4, #12
 8020882:	0092      	lsls	r2, r2, #2
 8020884:	300c      	adds	r0, #12
 8020886:	f7fe fc9e 	bl	801f1c6 <memcpy>
 802088a:	4621      	mov	r1, r4
 802088c:	4638      	mov	r0, r7
 802088e:	f7ff ffa5 	bl	80207dc <_Bfree>
 8020892:	4644      	mov	r4, r8
 8020894:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020898:	3501      	adds	r5, #1
 802089a:	615e      	str	r6, [r3, #20]
 802089c:	6125      	str	r5, [r4, #16]
 802089e:	4620      	mov	r0, r4
 80208a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80208a4:	080261a3 	.word	0x080261a3
 80208a8:	08026214 	.word	0x08026214

080208ac <__s2b>:
 80208ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80208b0:	460c      	mov	r4, r1
 80208b2:	4615      	mov	r5, r2
 80208b4:	461f      	mov	r7, r3
 80208b6:	2209      	movs	r2, #9
 80208b8:	3308      	adds	r3, #8
 80208ba:	4606      	mov	r6, r0
 80208bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80208c0:	2100      	movs	r1, #0
 80208c2:	2201      	movs	r2, #1
 80208c4:	429a      	cmp	r2, r3
 80208c6:	db09      	blt.n	80208dc <__s2b+0x30>
 80208c8:	4630      	mov	r0, r6
 80208ca:	f7ff ff47 	bl	802075c <_Balloc>
 80208ce:	b940      	cbnz	r0, 80208e2 <__s2b+0x36>
 80208d0:	4602      	mov	r2, r0
 80208d2:	4b19      	ldr	r3, [pc, #100]	@ (8020938 <__s2b+0x8c>)
 80208d4:	4819      	ldr	r0, [pc, #100]	@ (802093c <__s2b+0x90>)
 80208d6:	21d3      	movs	r1, #211	@ 0xd3
 80208d8:	f7fe fce6 	bl	801f2a8 <__assert_func>
 80208dc:	0052      	lsls	r2, r2, #1
 80208de:	3101      	adds	r1, #1
 80208e0:	e7f0      	b.n	80208c4 <__s2b+0x18>
 80208e2:	9b08      	ldr	r3, [sp, #32]
 80208e4:	6143      	str	r3, [r0, #20]
 80208e6:	2d09      	cmp	r5, #9
 80208e8:	f04f 0301 	mov.w	r3, #1
 80208ec:	6103      	str	r3, [r0, #16]
 80208ee:	dd16      	ble.n	802091e <__s2b+0x72>
 80208f0:	f104 0909 	add.w	r9, r4, #9
 80208f4:	46c8      	mov	r8, r9
 80208f6:	442c      	add	r4, r5
 80208f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80208fc:	4601      	mov	r1, r0
 80208fe:	3b30      	subs	r3, #48	@ 0x30
 8020900:	220a      	movs	r2, #10
 8020902:	4630      	mov	r0, r6
 8020904:	f7ff ff8c 	bl	8020820 <__multadd>
 8020908:	45a0      	cmp	r8, r4
 802090a:	d1f5      	bne.n	80208f8 <__s2b+0x4c>
 802090c:	f1a5 0408 	sub.w	r4, r5, #8
 8020910:	444c      	add	r4, r9
 8020912:	1b2d      	subs	r5, r5, r4
 8020914:	1963      	adds	r3, r4, r5
 8020916:	42bb      	cmp	r3, r7
 8020918:	db04      	blt.n	8020924 <__s2b+0x78>
 802091a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802091e:	340a      	adds	r4, #10
 8020920:	2509      	movs	r5, #9
 8020922:	e7f6      	b.n	8020912 <__s2b+0x66>
 8020924:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020928:	4601      	mov	r1, r0
 802092a:	3b30      	subs	r3, #48	@ 0x30
 802092c:	220a      	movs	r2, #10
 802092e:	4630      	mov	r0, r6
 8020930:	f7ff ff76 	bl	8020820 <__multadd>
 8020934:	e7ee      	b.n	8020914 <__s2b+0x68>
 8020936:	bf00      	nop
 8020938:	080261a3 	.word	0x080261a3
 802093c:	08026214 	.word	0x08026214

08020940 <__hi0bits>:
 8020940:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8020944:	4603      	mov	r3, r0
 8020946:	bf36      	itet	cc
 8020948:	0403      	lslcc	r3, r0, #16
 802094a:	2000      	movcs	r0, #0
 802094c:	2010      	movcc	r0, #16
 802094e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020952:	bf3c      	itt	cc
 8020954:	021b      	lslcc	r3, r3, #8
 8020956:	3008      	addcc	r0, #8
 8020958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802095c:	bf3c      	itt	cc
 802095e:	011b      	lslcc	r3, r3, #4
 8020960:	3004      	addcc	r0, #4
 8020962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020966:	bf3c      	itt	cc
 8020968:	009b      	lslcc	r3, r3, #2
 802096a:	3002      	addcc	r0, #2
 802096c:	2b00      	cmp	r3, #0
 802096e:	db05      	blt.n	802097c <__hi0bits+0x3c>
 8020970:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8020974:	f100 0001 	add.w	r0, r0, #1
 8020978:	bf08      	it	eq
 802097a:	2020      	moveq	r0, #32
 802097c:	4770      	bx	lr

0802097e <__lo0bits>:
 802097e:	6803      	ldr	r3, [r0, #0]
 8020980:	4602      	mov	r2, r0
 8020982:	f013 0007 	ands.w	r0, r3, #7
 8020986:	d00b      	beq.n	80209a0 <__lo0bits+0x22>
 8020988:	07d9      	lsls	r1, r3, #31
 802098a:	d421      	bmi.n	80209d0 <__lo0bits+0x52>
 802098c:	0798      	lsls	r0, r3, #30
 802098e:	bf49      	itett	mi
 8020990:	085b      	lsrmi	r3, r3, #1
 8020992:	089b      	lsrpl	r3, r3, #2
 8020994:	2001      	movmi	r0, #1
 8020996:	6013      	strmi	r3, [r2, #0]
 8020998:	bf5c      	itt	pl
 802099a:	6013      	strpl	r3, [r2, #0]
 802099c:	2002      	movpl	r0, #2
 802099e:	4770      	bx	lr
 80209a0:	b299      	uxth	r1, r3
 80209a2:	b909      	cbnz	r1, 80209a8 <__lo0bits+0x2a>
 80209a4:	0c1b      	lsrs	r3, r3, #16
 80209a6:	2010      	movs	r0, #16
 80209a8:	b2d9      	uxtb	r1, r3
 80209aa:	b909      	cbnz	r1, 80209b0 <__lo0bits+0x32>
 80209ac:	3008      	adds	r0, #8
 80209ae:	0a1b      	lsrs	r3, r3, #8
 80209b0:	0719      	lsls	r1, r3, #28
 80209b2:	bf04      	itt	eq
 80209b4:	091b      	lsreq	r3, r3, #4
 80209b6:	3004      	addeq	r0, #4
 80209b8:	0799      	lsls	r1, r3, #30
 80209ba:	bf04      	itt	eq
 80209bc:	089b      	lsreq	r3, r3, #2
 80209be:	3002      	addeq	r0, #2
 80209c0:	07d9      	lsls	r1, r3, #31
 80209c2:	d403      	bmi.n	80209cc <__lo0bits+0x4e>
 80209c4:	085b      	lsrs	r3, r3, #1
 80209c6:	f100 0001 	add.w	r0, r0, #1
 80209ca:	d003      	beq.n	80209d4 <__lo0bits+0x56>
 80209cc:	6013      	str	r3, [r2, #0]
 80209ce:	4770      	bx	lr
 80209d0:	2000      	movs	r0, #0
 80209d2:	4770      	bx	lr
 80209d4:	2020      	movs	r0, #32
 80209d6:	4770      	bx	lr

080209d8 <__i2b>:
 80209d8:	b510      	push	{r4, lr}
 80209da:	460c      	mov	r4, r1
 80209dc:	2101      	movs	r1, #1
 80209de:	f7ff febd 	bl	802075c <_Balloc>
 80209e2:	4602      	mov	r2, r0
 80209e4:	b928      	cbnz	r0, 80209f2 <__i2b+0x1a>
 80209e6:	4b05      	ldr	r3, [pc, #20]	@ (80209fc <__i2b+0x24>)
 80209e8:	4805      	ldr	r0, [pc, #20]	@ (8020a00 <__i2b+0x28>)
 80209ea:	f240 1145 	movw	r1, #325	@ 0x145
 80209ee:	f7fe fc5b 	bl	801f2a8 <__assert_func>
 80209f2:	2301      	movs	r3, #1
 80209f4:	6144      	str	r4, [r0, #20]
 80209f6:	6103      	str	r3, [r0, #16]
 80209f8:	bd10      	pop	{r4, pc}
 80209fa:	bf00      	nop
 80209fc:	080261a3 	.word	0x080261a3
 8020a00:	08026214 	.word	0x08026214

08020a04 <__multiply>:
 8020a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a08:	4617      	mov	r7, r2
 8020a0a:	690a      	ldr	r2, [r1, #16]
 8020a0c:	693b      	ldr	r3, [r7, #16]
 8020a0e:	429a      	cmp	r2, r3
 8020a10:	bfa8      	it	ge
 8020a12:	463b      	movge	r3, r7
 8020a14:	4689      	mov	r9, r1
 8020a16:	bfa4      	itt	ge
 8020a18:	460f      	movge	r7, r1
 8020a1a:	4699      	movge	r9, r3
 8020a1c:	693d      	ldr	r5, [r7, #16]
 8020a1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8020a22:	68bb      	ldr	r3, [r7, #8]
 8020a24:	6879      	ldr	r1, [r7, #4]
 8020a26:	eb05 060a 	add.w	r6, r5, sl
 8020a2a:	42b3      	cmp	r3, r6
 8020a2c:	b085      	sub	sp, #20
 8020a2e:	bfb8      	it	lt
 8020a30:	3101      	addlt	r1, #1
 8020a32:	f7ff fe93 	bl	802075c <_Balloc>
 8020a36:	b930      	cbnz	r0, 8020a46 <__multiply+0x42>
 8020a38:	4602      	mov	r2, r0
 8020a3a:	4b41      	ldr	r3, [pc, #260]	@ (8020b40 <__multiply+0x13c>)
 8020a3c:	4841      	ldr	r0, [pc, #260]	@ (8020b44 <__multiply+0x140>)
 8020a3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8020a42:	f7fe fc31 	bl	801f2a8 <__assert_func>
 8020a46:	f100 0414 	add.w	r4, r0, #20
 8020a4a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8020a4e:	4623      	mov	r3, r4
 8020a50:	2200      	movs	r2, #0
 8020a52:	4573      	cmp	r3, lr
 8020a54:	d320      	bcc.n	8020a98 <__multiply+0x94>
 8020a56:	f107 0814 	add.w	r8, r7, #20
 8020a5a:	f109 0114 	add.w	r1, r9, #20
 8020a5e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8020a62:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8020a66:	9302      	str	r3, [sp, #8]
 8020a68:	1beb      	subs	r3, r5, r7
 8020a6a:	3b15      	subs	r3, #21
 8020a6c:	f023 0303 	bic.w	r3, r3, #3
 8020a70:	3304      	adds	r3, #4
 8020a72:	3715      	adds	r7, #21
 8020a74:	42bd      	cmp	r5, r7
 8020a76:	bf38      	it	cc
 8020a78:	2304      	movcc	r3, #4
 8020a7a:	9301      	str	r3, [sp, #4]
 8020a7c:	9b02      	ldr	r3, [sp, #8]
 8020a7e:	9103      	str	r1, [sp, #12]
 8020a80:	428b      	cmp	r3, r1
 8020a82:	d80c      	bhi.n	8020a9e <__multiply+0x9a>
 8020a84:	2e00      	cmp	r6, #0
 8020a86:	dd03      	ble.n	8020a90 <__multiply+0x8c>
 8020a88:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	d055      	beq.n	8020b3c <__multiply+0x138>
 8020a90:	6106      	str	r6, [r0, #16]
 8020a92:	b005      	add	sp, #20
 8020a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a98:	f843 2b04 	str.w	r2, [r3], #4
 8020a9c:	e7d9      	b.n	8020a52 <__multiply+0x4e>
 8020a9e:	f8b1 a000 	ldrh.w	sl, [r1]
 8020aa2:	f1ba 0f00 	cmp.w	sl, #0
 8020aa6:	d01f      	beq.n	8020ae8 <__multiply+0xe4>
 8020aa8:	46c4      	mov	ip, r8
 8020aaa:	46a1      	mov	r9, r4
 8020aac:	2700      	movs	r7, #0
 8020aae:	f85c 2b04 	ldr.w	r2, [ip], #4
 8020ab2:	f8d9 3000 	ldr.w	r3, [r9]
 8020ab6:	fa1f fb82 	uxth.w	fp, r2
 8020aba:	b29b      	uxth	r3, r3
 8020abc:	fb0a 330b 	mla	r3, sl, fp, r3
 8020ac0:	443b      	add	r3, r7
 8020ac2:	f8d9 7000 	ldr.w	r7, [r9]
 8020ac6:	0c12      	lsrs	r2, r2, #16
 8020ac8:	0c3f      	lsrs	r7, r7, #16
 8020aca:	fb0a 7202 	mla	r2, sl, r2, r7
 8020ace:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8020ad2:	b29b      	uxth	r3, r3
 8020ad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020ad8:	4565      	cmp	r5, ip
 8020ada:	f849 3b04 	str.w	r3, [r9], #4
 8020ade:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8020ae2:	d8e4      	bhi.n	8020aae <__multiply+0xaa>
 8020ae4:	9b01      	ldr	r3, [sp, #4]
 8020ae6:	50e7      	str	r7, [r4, r3]
 8020ae8:	9b03      	ldr	r3, [sp, #12]
 8020aea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8020aee:	3104      	adds	r1, #4
 8020af0:	f1b9 0f00 	cmp.w	r9, #0
 8020af4:	d020      	beq.n	8020b38 <__multiply+0x134>
 8020af6:	6823      	ldr	r3, [r4, #0]
 8020af8:	4647      	mov	r7, r8
 8020afa:	46a4      	mov	ip, r4
 8020afc:	f04f 0a00 	mov.w	sl, #0
 8020b00:	f8b7 b000 	ldrh.w	fp, [r7]
 8020b04:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8020b08:	fb09 220b 	mla	r2, r9, fp, r2
 8020b0c:	4452      	add	r2, sl
 8020b0e:	b29b      	uxth	r3, r3
 8020b10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020b14:	f84c 3b04 	str.w	r3, [ip], #4
 8020b18:	f857 3b04 	ldr.w	r3, [r7], #4
 8020b1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020b20:	f8bc 3000 	ldrh.w	r3, [ip]
 8020b24:	fb09 330a 	mla	r3, r9, sl, r3
 8020b28:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8020b2c:	42bd      	cmp	r5, r7
 8020b2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020b32:	d8e5      	bhi.n	8020b00 <__multiply+0xfc>
 8020b34:	9a01      	ldr	r2, [sp, #4]
 8020b36:	50a3      	str	r3, [r4, r2]
 8020b38:	3404      	adds	r4, #4
 8020b3a:	e79f      	b.n	8020a7c <__multiply+0x78>
 8020b3c:	3e01      	subs	r6, #1
 8020b3e:	e7a1      	b.n	8020a84 <__multiply+0x80>
 8020b40:	080261a3 	.word	0x080261a3
 8020b44:	08026214 	.word	0x08026214

08020b48 <__pow5mult>:
 8020b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020b4c:	4615      	mov	r5, r2
 8020b4e:	f012 0203 	ands.w	r2, r2, #3
 8020b52:	4607      	mov	r7, r0
 8020b54:	460e      	mov	r6, r1
 8020b56:	d007      	beq.n	8020b68 <__pow5mult+0x20>
 8020b58:	4c25      	ldr	r4, [pc, #148]	@ (8020bf0 <__pow5mult+0xa8>)
 8020b5a:	3a01      	subs	r2, #1
 8020b5c:	2300      	movs	r3, #0
 8020b5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020b62:	f7ff fe5d 	bl	8020820 <__multadd>
 8020b66:	4606      	mov	r6, r0
 8020b68:	10ad      	asrs	r5, r5, #2
 8020b6a:	d03d      	beq.n	8020be8 <__pow5mult+0xa0>
 8020b6c:	69fc      	ldr	r4, [r7, #28]
 8020b6e:	b97c      	cbnz	r4, 8020b90 <__pow5mult+0x48>
 8020b70:	2010      	movs	r0, #16
 8020b72:	f7fb fb57 	bl	801c224 <malloc>
 8020b76:	4602      	mov	r2, r0
 8020b78:	61f8      	str	r0, [r7, #28]
 8020b7a:	b928      	cbnz	r0, 8020b88 <__pow5mult+0x40>
 8020b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8020bf4 <__pow5mult+0xac>)
 8020b7e:	481e      	ldr	r0, [pc, #120]	@ (8020bf8 <__pow5mult+0xb0>)
 8020b80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8020b84:	f7fe fb90 	bl	801f2a8 <__assert_func>
 8020b88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020b8c:	6004      	str	r4, [r0, #0]
 8020b8e:	60c4      	str	r4, [r0, #12]
 8020b90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8020b94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020b98:	b94c      	cbnz	r4, 8020bae <__pow5mult+0x66>
 8020b9a:	f240 2171 	movw	r1, #625	@ 0x271
 8020b9e:	4638      	mov	r0, r7
 8020ba0:	f7ff ff1a 	bl	80209d8 <__i2b>
 8020ba4:	2300      	movs	r3, #0
 8020ba6:	f8c8 0008 	str.w	r0, [r8, #8]
 8020baa:	4604      	mov	r4, r0
 8020bac:	6003      	str	r3, [r0, #0]
 8020bae:	f04f 0900 	mov.w	r9, #0
 8020bb2:	07eb      	lsls	r3, r5, #31
 8020bb4:	d50a      	bpl.n	8020bcc <__pow5mult+0x84>
 8020bb6:	4631      	mov	r1, r6
 8020bb8:	4622      	mov	r2, r4
 8020bba:	4638      	mov	r0, r7
 8020bbc:	f7ff ff22 	bl	8020a04 <__multiply>
 8020bc0:	4631      	mov	r1, r6
 8020bc2:	4680      	mov	r8, r0
 8020bc4:	4638      	mov	r0, r7
 8020bc6:	f7ff fe09 	bl	80207dc <_Bfree>
 8020bca:	4646      	mov	r6, r8
 8020bcc:	106d      	asrs	r5, r5, #1
 8020bce:	d00b      	beq.n	8020be8 <__pow5mult+0xa0>
 8020bd0:	6820      	ldr	r0, [r4, #0]
 8020bd2:	b938      	cbnz	r0, 8020be4 <__pow5mult+0x9c>
 8020bd4:	4622      	mov	r2, r4
 8020bd6:	4621      	mov	r1, r4
 8020bd8:	4638      	mov	r0, r7
 8020bda:	f7ff ff13 	bl	8020a04 <__multiply>
 8020bde:	6020      	str	r0, [r4, #0]
 8020be0:	f8c0 9000 	str.w	r9, [r0]
 8020be4:	4604      	mov	r4, r0
 8020be6:	e7e4      	b.n	8020bb2 <__pow5mult+0x6a>
 8020be8:	4630      	mov	r0, r6
 8020bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020bee:	bf00      	nop
 8020bf0:	080264b4 	.word	0x080264b4
 8020bf4:	0802603d 	.word	0x0802603d
 8020bf8:	08026214 	.word	0x08026214

08020bfc <__lshift>:
 8020bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020c00:	460c      	mov	r4, r1
 8020c02:	6849      	ldr	r1, [r1, #4]
 8020c04:	6923      	ldr	r3, [r4, #16]
 8020c06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020c0a:	68a3      	ldr	r3, [r4, #8]
 8020c0c:	4607      	mov	r7, r0
 8020c0e:	4691      	mov	r9, r2
 8020c10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020c14:	f108 0601 	add.w	r6, r8, #1
 8020c18:	42b3      	cmp	r3, r6
 8020c1a:	db0b      	blt.n	8020c34 <__lshift+0x38>
 8020c1c:	4638      	mov	r0, r7
 8020c1e:	f7ff fd9d 	bl	802075c <_Balloc>
 8020c22:	4605      	mov	r5, r0
 8020c24:	b948      	cbnz	r0, 8020c3a <__lshift+0x3e>
 8020c26:	4602      	mov	r2, r0
 8020c28:	4b28      	ldr	r3, [pc, #160]	@ (8020ccc <__lshift+0xd0>)
 8020c2a:	4829      	ldr	r0, [pc, #164]	@ (8020cd0 <__lshift+0xd4>)
 8020c2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8020c30:	f7fe fb3a 	bl	801f2a8 <__assert_func>
 8020c34:	3101      	adds	r1, #1
 8020c36:	005b      	lsls	r3, r3, #1
 8020c38:	e7ee      	b.n	8020c18 <__lshift+0x1c>
 8020c3a:	2300      	movs	r3, #0
 8020c3c:	f100 0114 	add.w	r1, r0, #20
 8020c40:	f100 0210 	add.w	r2, r0, #16
 8020c44:	4618      	mov	r0, r3
 8020c46:	4553      	cmp	r3, sl
 8020c48:	db33      	blt.n	8020cb2 <__lshift+0xb6>
 8020c4a:	6920      	ldr	r0, [r4, #16]
 8020c4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020c50:	f104 0314 	add.w	r3, r4, #20
 8020c54:	f019 091f 	ands.w	r9, r9, #31
 8020c58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020c5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020c60:	d02b      	beq.n	8020cba <__lshift+0xbe>
 8020c62:	f1c9 0e20 	rsb	lr, r9, #32
 8020c66:	468a      	mov	sl, r1
 8020c68:	2200      	movs	r2, #0
 8020c6a:	6818      	ldr	r0, [r3, #0]
 8020c6c:	fa00 f009 	lsl.w	r0, r0, r9
 8020c70:	4310      	orrs	r0, r2
 8020c72:	f84a 0b04 	str.w	r0, [sl], #4
 8020c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8020c7a:	459c      	cmp	ip, r3
 8020c7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8020c80:	d8f3      	bhi.n	8020c6a <__lshift+0x6e>
 8020c82:	ebac 0304 	sub.w	r3, ip, r4
 8020c86:	3b15      	subs	r3, #21
 8020c88:	f023 0303 	bic.w	r3, r3, #3
 8020c8c:	3304      	adds	r3, #4
 8020c8e:	f104 0015 	add.w	r0, r4, #21
 8020c92:	4560      	cmp	r0, ip
 8020c94:	bf88      	it	hi
 8020c96:	2304      	movhi	r3, #4
 8020c98:	50ca      	str	r2, [r1, r3]
 8020c9a:	b10a      	cbz	r2, 8020ca0 <__lshift+0xa4>
 8020c9c:	f108 0602 	add.w	r6, r8, #2
 8020ca0:	3e01      	subs	r6, #1
 8020ca2:	4638      	mov	r0, r7
 8020ca4:	612e      	str	r6, [r5, #16]
 8020ca6:	4621      	mov	r1, r4
 8020ca8:	f7ff fd98 	bl	80207dc <_Bfree>
 8020cac:	4628      	mov	r0, r5
 8020cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020cb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8020cb6:	3301      	adds	r3, #1
 8020cb8:	e7c5      	b.n	8020c46 <__lshift+0x4a>
 8020cba:	3904      	subs	r1, #4
 8020cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8020cc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8020cc4:	459c      	cmp	ip, r3
 8020cc6:	d8f9      	bhi.n	8020cbc <__lshift+0xc0>
 8020cc8:	e7ea      	b.n	8020ca0 <__lshift+0xa4>
 8020cca:	bf00      	nop
 8020ccc:	080261a3 	.word	0x080261a3
 8020cd0:	08026214 	.word	0x08026214

08020cd4 <__mcmp>:
 8020cd4:	690a      	ldr	r2, [r1, #16]
 8020cd6:	4603      	mov	r3, r0
 8020cd8:	6900      	ldr	r0, [r0, #16]
 8020cda:	1a80      	subs	r0, r0, r2
 8020cdc:	b530      	push	{r4, r5, lr}
 8020cde:	d10e      	bne.n	8020cfe <__mcmp+0x2a>
 8020ce0:	3314      	adds	r3, #20
 8020ce2:	3114      	adds	r1, #20
 8020ce4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8020ce8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8020cec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8020cf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8020cf4:	4295      	cmp	r5, r2
 8020cf6:	d003      	beq.n	8020d00 <__mcmp+0x2c>
 8020cf8:	d205      	bcs.n	8020d06 <__mcmp+0x32>
 8020cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8020cfe:	bd30      	pop	{r4, r5, pc}
 8020d00:	42a3      	cmp	r3, r4
 8020d02:	d3f3      	bcc.n	8020cec <__mcmp+0x18>
 8020d04:	e7fb      	b.n	8020cfe <__mcmp+0x2a>
 8020d06:	2001      	movs	r0, #1
 8020d08:	e7f9      	b.n	8020cfe <__mcmp+0x2a>
	...

08020d0c <__mdiff>:
 8020d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d10:	4689      	mov	r9, r1
 8020d12:	4606      	mov	r6, r0
 8020d14:	4611      	mov	r1, r2
 8020d16:	4648      	mov	r0, r9
 8020d18:	4614      	mov	r4, r2
 8020d1a:	f7ff ffdb 	bl	8020cd4 <__mcmp>
 8020d1e:	1e05      	subs	r5, r0, #0
 8020d20:	d112      	bne.n	8020d48 <__mdiff+0x3c>
 8020d22:	4629      	mov	r1, r5
 8020d24:	4630      	mov	r0, r6
 8020d26:	f7ff fd19 	bl	802075c <_Balloc>
 8020d2a:	4602      	mov	r2, r0
 8020d2c:	b928      	cbnz	r0, 8020d3a <__mdiff+0x2e>
 8020d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8020e2c <__mdiff+0x120>)
 8020d30:	f240 2137 	movw	r1, #567	@ 0x237
 8020d34:	483e      	ldr	r0, [pc, #248]	@ (8020e30 <__mdiff+0x124>)
 8020d36:	f7fe fab7 	bl	801f2a8 <__assert_func>
 8020d3a:	2301      	movs	r3, #1
 8020d3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020d40:	4610      	mov	r0, r2
 8020d42:	b003      	add	sp, #12
 8020d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d48:	bfbc      	itt	lt
 8020d4a:	464b      	movlt	r3, r9
 8020d4c:	46a1      	movlt	r9, r4
 8020d4e:	4630      	mov	r0, r6
 8020d50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020d54:	bfba      	itte	lt
 8020d56:	461c      	movlt	r4, r3
 8020d58:	2501      	movlt	r5, #1
 8020d5a:	2500      	movge	r5, #0
 8020d5c:	f7ff fcfe 	bl	802075c <_Balloc>
 8020d60:	4602      	mov	r2, r0
 8020d62:	b918      	cbnz	r0, 8020d6c <__mdiff+0x60>
 8020d64:	4b31      	ldr	r3, [pc, #196]	@ (8020e2c <__mdiff+0x120>)
 8020d66:	f240 2145 	movw	r1, #581	@ 0x245
 8020d6a:	e7e3      	b.n	8020d34 <__mdiff+0x28>
 8020d6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8020d70:	6926      	ldr	r6, [r4, #16]
 8020d72:	60c5      	str	r5, [r0, #12]
 8020d74:	f109 0310 	add.w	r3, r9, #16
 8020d78:	f109 0514 	add.w	r5, r9, #20
 8020d7c:	f104 0e14 	add.w	lr, r4, #20
 8020d80:	f100 0b14 	add.w	fp, r0, #20
 8020d84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8020d88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8020d8c:	9301      	str	r3, [sp, #4]
 8020d8e:	46d9      	mov	r9, fp
 8020d90:	f04f 0c00 	mov.w	ip, #0
 8020d94:	9b01      	ldr	r3, [sp, #4]
 8020d96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8020d9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8020d9e:	9301      	str	r3, [sp, #4]
 8020da0:	fa1f f38a 	uxth.w	r3, sl
 8020da4:	4619      	mov	r1, r3
 8020da6:	b283      	uxth	r3, r0
 8020da8:	1acb      	subs	r3, r1, r3
 8020daa:	0c00      	lsrs	r0, r0, #16
 8020dac:	4463      	add	r3, ip
 8020dae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8020db2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8020db6:	b29b      	uxth	r3, r3
 8020db8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8020dbc:	4576      	cmp	r6, lr
 8020dbe:	f849 3b04 	str.w	r3, [r9], #4
 8020dc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020dc6:	d8e5      	bhi.n	8020d94 <__mdiff+0x88>
 8020dc8:	1b33      	subs	r3, r6, r4
 8020dca:	3b15      	subs	r3, #21
 8020dcc:	f023 0303 	bic.w	r3, r3, #3
 8020dd0:	3415      	adds	r4, #21
 8020dd2:	3304      	adds	r3, #4
 8020dd4:	42a6      	cmp	r6, r4
 8020dd6:	bf38      	it	cc
 8020dd8:	2304      	movcc	r3, #4
 8020dda:	441d      	add	r5, r3
 8020ddc:	445b      	add	r3, fp
 8020dde:	461e      	mov	r6, r3
 8020de0:	462c      	mov	r4, r5
 8020de2:	4544      	cmp	r4, r8
 8020de4:	d30e      	bcc.n	8020e04 <__mdiff+0xf8>
 8020de6:	f108 0103 	add.w	r1, r8, #3
 8020dea:	1b49      	subs	r1, r1, r5
 8020dec:	f021 0103 	bic.w	r1, r1, #3
 8020df0:	3d03      	subs	r5, #3
 8020df2:	45a8      	cmp	r8, r5
 8020df4:	bf38      	it	cc
 8020df6:	2100      	movcc	r1, #0
 8020df8:	440b      	add	r3, r1
 8020dfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020dfe:	b191      	cbz	r1, 8020e26 <__mdiff+0x11a>
 8020e00:	6117      	str	r7, [r2, #16]
 8020e02:	e79d      	b.n	8020d40 <__mdiff+0x34>
 8020e04:	f854 1b04 	ldr.w	r1, [r4], #4
 8020e08:	46e6      	mov	lr, ip
 8020e0a:	0c08      	lsrs	r0, r1, #16
 8020e0c:	fa1c fc81 	uxtah	ip, ip, r1
 8020e10:	4471      	add	r1, lr
 8020e12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8020e16:	b289      	uxth	r1, r1
 8020e18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8020e1c:	f846 1b04 	str.w	r1, [r6], #4
 8020e20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020e24:	e7dd      	b.n	8020de2 <__mdiff+0xd6>
 8020e26:	3f01      	subs	r7, #1
 8020e28:	e7e7      	b.n	8020dfa <__mdiff+0xee>
 8020e2a:	bf00      	nop
 8020e2c:	080261a3 	.word	0x080261a3
 8020e30:	08026214 	.word	0x08026214

08020e34 <__ulp>:
 8020e34:	b082      	sub	sp, #8
 8020e36:	ed8d 0b00 	vstr	d0, [sp]
 8020e3a:	9a01      	ldr	r2, [sp, #4]
 8020e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8020e7c <__ulp+0x48>)
 8020e3e:	4013      	ands	r3, r2
 8020e40:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	dc08      	bgt.n	8020e5a <__ulp+0x26>
 8020e48:	425b      	negs	r3, r3
 8020e4a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8020e4e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8020e52:	da04      	bge.n	8020e5e <__ulp+0x2a>
 8020e54:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8020e58:	4113      	asrs	r3, r2
 8020e5a:	2200      	movs	r2, #0
 8020e5c:	e008      	b.n	8020e70 <__ulp+0x3c>
 8020e5e:	f1a2 0314 	sub.w	r3, r2, #20
 8020e62:	2b1e      	cmp	r3, #30
 8020e64:	bfda      	itte	le
 8020e66:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8020e6a:	40da      	lsrle	r2, r3
 8020e6c:	2201      	movgt	r2, #1
 8020e6e:	2300      	movs	r3, #0
 8020e70:	4619      	mov	r1, r3
 8020e72:	4610      	mov	r0, r2
 8020e74:	ec41 0b10 	vmov	d0, r0, r1
 8020e78:	b002      	add	sp, #8
 8020e7a:	4770      	bx	lr
 8020e7c:	7ff00000 	.word	0x7ff00000

08020e80 <__b2d>:
 8020e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e84:	6906      	ldr	r6, [r0, #16]
 8020e86:	f100 0814 	add.w	r8, r0, #20
 8020e8a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8020e8e:	1f37      	subs	r7, r6, #4
 8020e90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020e94:	4610      	mov	r0, r2
 8020e96:	f7ff fd53 	bl	8020940 <__hi0bits>
 8020e9a:	f1c0 0320 	rsb	r3, r0, #32
 8020e9e:	280a      	cmp	r0, #10
 8020ea0:	600b      	str	r3, [r1, #0]
 8020ea2:	491b      	ldr	r1, [pc, #108]	@ (8020f10 <__b2d+0x90>)
 8020ea4:	dc15      	bgt.n	8020ed2 <__b2d+0x52>
 8020ea6:	f1c0 0c0b 	rsb	ip, r0, #11
 8020eaa:	fa22 f30c 	lsr.w	r3, r2, ip
 8020eae:	45b8      	cmp	r8, r7
 8020eb0:	ea43 0501 	orr.w	r5, r3, r1
 8020eb4:	bf34      	ite	cc
 8020eb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020eba:	2300      	movcs	r3, #0
 8020ebc:	3015      	adds	r0, #21
 8020ebe:	fa02 f000 	lsl.w	r0, r2, r0
 8020ec2:	fa23 f30c 	lsr.w	r3, r3, ip
 8020ec6:	4303      	orrs	r3, r0
 8020ec8:	461c      	mov	r4, r3
 8020eca:	ec45 4b10 	vmov	d0, r4, r5
 8020ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ed2:	45b8      	cmp	r8, r7
 8020ed4:	bf3a      	itte	cc
 8020ed6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020eda:	f1a6 0708 	subcc.w	r7, r6, #8
 8020ede:	2300      	movcs	r3, #0
 8020ee0:	380b      	subs	r0, #11
 8020ee2:	d012      	beq.n	8020f0a <__b2d+0x8a>
 8020ee4:	f1c0 0120 	rsb	r1, r0, #32
 8020ee8:	fa23 f401 	lsr.w	r4, r3, r1
 8020eec:	4082      	lsls	r2, r0
 8020eee:	4322      	orrs	r2, r4
 8020ef0:	4547      	cmp	r7, r8
 8020ef2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8020ef6:	bf8c      	ite	hi
 8020ef8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8020efc:	2200      	movls	r2, #0
 8020efe:	4083      	lsls	r3, r0
 8020f00:	40ca      	lsrs	r2, r1
 8020f02:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8020f06:	4313      	orrs	r3, r2
 8020f08:	e7de      	b.n	8020ec8 <__b2d+0x48>
 8020f0a:	ea42 0501 	orr.w	r5, r2, r1
 8020f0e:	e7db      	b.n	8020ec8 <__b2d+0x48>
 8020f10:	3ff00000 	.word	0x3ff00000

08020f14 <__d2b>:
 8020f14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020f18:	460f      	mov	r7, r1
 8020f1a:	2101      	movs	r1, #1
 8020f1c:	ec59 8b10 	vmov	r8, r9, d0
 8020f20:	4616      	mov	r6, r2
 8020f22:	f7ff fc1b 	bl	802075c <_Balloc>
 8020f26:	4604      	mov	r4, r0
 8020f28:	b930      	cbnz	r0, 8020f38 <__d2b+0x24>
 8020f2a:	4602      	mov	r2, r0
 8020f2c:	4b23      	ldr	r3, [pc, #140]	@ (8020fbc <__d2b+0xa8>)
 8020f2e:	4824      	ldr	r0, [pc, #144]	@ (8020fc0 <__d2b+0xac>)
 8020f30:	f240 310f 	movw	r1, #783	@ 0x30f
 8020f34:	f7fe f9b8 	bl	801f2a8 <__assert_func>
 8020f38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020f3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020f40:	b10d      	cbz	r5, 8020f46 <__d2b+0x32>
 8020f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020f46:	9301      	str	r3, [sp, #4]
 8020f48:	f1b8 0300 	subs.w	r3, r8, #0
 8020f4c:	d023      	beq.n	8020f96 <__d2b+0x82>
 8020f4e:	4668      	mov	r0, sp
 8020f50:	9300      	str	r3, [sp, #0]
 8020f52:	f7ff fd14 	bl	802097e <__lo0bits>
 8020f56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8020f5a:	b1d0      	cbz	r0, 8020f92 <__d2b+0x7e>
 8020f5c:	f1c0 0320 	rsb	r3, r0, #32
 8020f60:	fa02 f303 	lsl.w	r3, r2, r3
 8020f64:	430b      	orrs	r3, r1
 8020f66:	40c2      	lsrs	r2, r0
 8020f68:	6163      	str	r3, [r4, #20]
 8020f6a:	9201      	str	r2, [sp, #4]
 8020f6c:	9b01      	ldr	r3, [sp, #4]
 8020f6e:	61a3      	str	r3, [r4, #24]
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	bf0c      	ite	eq
 8020f74:	2201      	moveq	r2, #1
 8020f76:	2202      	movne	r2, #2
 8020f78:	6122      	str	r2, [r4, #16]
 8020f7a:	b1a5      	cbz	r5, 8020fa6 <__d2b+0x92>
 8020f7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8020f80:	4405      	add	r5, r0
 8020f82:	603d      	str	r5, [r7, #0]
 8020f84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8020f88:	6030      	str	r0, [r6, #0]
 8020f8a:	4620      	mov	r0, r4
 8020f8c:	b003      	add	sp, #12
 8020f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020f92:	6161      	str	r1, [r4, #20]
 8020f94:	e7ea      	b.n	8020f6c <__d2b+0x58>
 8020f96:	a801      	add	r0, sp, #4
 8020f98:	f7ff fcf1 	bl	802097e <__lo0bits>
 8020f9c:	9b01      	ldr	r3, [sp, #4]
 8020f9e:	6163      	str	r3, [r4, #20]
 8020fa0:	3020      	adds	r0, #32
 8020fa2:	2201      	movs	r2, #1
 8020fa4:	e7e8      	b.n	8020f78 <__d2b+0x64>
 8020fa6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020faa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8020fae:	6038      	str	r0, [r7, #0]
 8020fb0:	6918      	ldr	r0, [r3, #16]
 8020fb2:	f7ff fcc5 	bl	8020940 <__hi0bits>
 8020fb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020fba:	e7e5      	b.n	8020f88 <__d2b+0x74>
 8020fbc:	080261a3 	.word	0x080261a3
 8020fc0:	08026214 	.word	0x08026214

08020fc4 <__ratio>:
 8020fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fc8:	b085      	sub	sp, #20
 8020fca:	e9cd 1000 	strd	r1, r0, [sp]
 8020fce:	a902      	add	r1, sp, #8
 8020fd0:	f7ff ff56 	bl	8020e80 <__b2d>
 8020fd4:	9800      	ldr	r0, [sp, #0]
 8020fd6:	a903      	add	r1, sp, #12
 8020fd8:	ec55 4b10 	vmov	r4, r5, d0
 8020fdc:	f7ff ff50 	bl	8020e80 <__b2d>
 8020fe0:	9b01      	ldr	r3, [sp, #4]
 8020fe2:	6919      	ldr	r1, [r3, #16]
 8020fe4:	9b00      	ldr	r3, [sp, #0]
 8020fe6:	691b      	ldr	r3, [r3, #16]
 8020fe8:	1ac9      	subs	r1, r1, r3
 8020fea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8020fee:	1a9b      	subs	r3, r3, r2
 8020ff0:	ec5b ab10 	vmov	sl, fp, d0
 8020ff4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8020ff8:	2b00      	cmp	r3, #0
 8020ffa:	bfce      	itee	gt
 8020ffc:	462a      	movgt	r2, r5
 8020ffe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8021002:	465a      	movle	r2, fp
 8021004:	462f      	mov	r7, r5
 8021006:	46d9      	mov	r9, fp
 8021008:	bfcc      	ite	gt
 802100a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802100e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8021012:	464b      	mov	r3, r9
 8021014:	4652      	mov	r2, sl
 8021016:	4620      	mov	r0, r4
 8021018:	4639      	mov	r1, r7
 802101a:	f7df fc27 	bl	800086c <__aeabi_ddiv>
 802101e:	ec41 0b10 	vmov	d0, r0, r1
 8021022:	b005      	add	sp, #20
 8021024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021028 <__copybits>:
 8021028:	3901      	subs	r1, #1
 802102a:	b570      	push	{r4, r5, r6, lr}
 802102c:	1149      	asrs	r1, r1, #5
 802102e:	6914      	ldr	r4, [r2, #16]
 8021030:	3101      	adds	r1, #1
 8021032:	f102 0314 	add.w	r3, r2, #20
 8021036:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802103a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802103e:	1f05      	subs	r5, r0, #4
 8021040:	42a3      	cmp	r3, r4
 8021042:	d30c      	bcc.n	802105e <__copybits+0x36>
 8021044:	1aa3      	subs	r3, r4, r2
 8021046:	3b11      	subs	r3, #17
 8021048:	f023 0303 	bic.w	r3, r3, #3
 802104c:	3211      	adds	r2, #17
 802104e:	42a2      	cmp	r2, r4
 8021050:	bf88      	it	hi
 8021052:	2300      	movhi	r3, #0
 8021054:	4418      	add	r0, r3
 8021056:	2300      	movs	r3, #0
 8021058:	4288      	cmp	r0, r1
 802105a:	d305      	bcc.n	8021068 <__copybits+0x40>
 802105c:	bd70      	pop	{r4, r5, r6, pc}
 802105e:	f853 6b04 	ldr.w	r6, [r3], #4
 8021062:	f845 6f04 	str.w	r6, [r5, #4]!
 8021066:	e7eb      	b.n	8021040 <__copybits+0x18>
 8021068:	f840 3b04 	str.w	r3, [r0], #4
 802106c:	e7f4      	b.n	8021058 <__copybits+0x30>

0802106e <__any_on>:
 802106e:	f100 0214 	add.w	r2, r0, #20
 8021072:	6900      	ldr	r0, [r0, #16]
 8021074:	114b      	asrs	r3, r1, #5
 8021076:	4298      	cmp	r0, r3
 8021078:	b510      	push	{r4, lr}
 802107a:	db11      	blt.n	80210a0 <__any_on+0x32>
 802107c:	dd0a      	ble.n	8021094 <__any_on+0x26>
 802107e:	f011 011f 	ands.w	r1, r1, #31
 8021082:	d007      	beq.n	8021094 <__any_on+0x26>
 8021084:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8021088:	fa24 f001 	lsr.w	r0, r4, r1
 802108c:	fa00 f101 	lsl.w	r1, r0, r1
 8021090:	428c      	cmp	r4, r1
 8021092:	d10b      	bne.n	80210ac <__any_on+0x3e>
 8021094:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021098:	4293      	cmp	r3, r2
 802109a:	d803      	bhi.n	80210a4 <__any_on+0x36>
 802109c:	2000      	movs	r0, #0
 802109e:	bd10      	pop	{r4, pc}
 80210a0:	4603      	mov	r3, r0
 80210a2:	e7f7      	b.n	8021094 <__any_on+0x26>
 80210a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80210a8:	2900      	cmp	r1, #0
 80210aa:	d0f5      	beq.n	8021098 <__any_on+0x2a>
 80210ac:	2001      	movs	r0, #1
 80210ae:	e7f6      	b.n	802109e <__any_on+0x30>

080210b0 <_strtoul_l.isra.0>:
 80210b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80210b4:	4e34      	ldr	r6, [pc, #208]	@ (8021188 <_strtoul_l.isra.0+0xd8>)
 80210b6:	4686      	mov	lr, r0
 80210b8:	460d      	mov	r5, r1
 80210ba:	4628      	mov	r0, r5
 80210bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80210c0:	5d37      	ldrb	r7, [r6, r4]
 80210c2:	f017 0708 	ands.w	r7, r7, #8
 80210c6:	d1f8      	bne.n	80210ba <_strtoul_l.isra.0+0xa>
 80210c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80210ca:	d110      	bne.n	80210ee <_strtoul_l.isra.0+0x3e>
 80210cc:	782c      	ldrb	r4, [r5, #0]
 80210ce:	2701      	movs	r7, #1
 80210d0:	1c85      	adds	r5, r0, #2
 80210d2:	f033 0010 	bics.w	r0, r3, #16
 80210d6:	d115      	bne.n	8021104 <_strtoul_l.isra.0+0x54>
 80210d8:	2c30      	cmp	r4, #48	@ 0x30
 80210da:	d10d      	bne.n	80210f8 <_strtoul_l.isra.0+0x48>
 80210dc:	7828      	ldrb	r0, [r5, #0]
 80210de:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80210e2:	2858      	cmp	r0, #88	@ 0x58
 80210e4:	d108      	bne.n	80210f8 <_strtoul_l.isra.0+0x48>
 80210e6:	786c      	ldrb	r4, [r5, #1]
 80210e8:	3502      	adds	r5, #2
 80210ea:	2310      	movs	r3, #16
 80210ec:	e00a      	b.n	8021104 <_strtoul_l.isra.0+0x54>
 80210ee:	2c2b      	cmp	r4, #43	@ 0x2b
 80210f0:	bf04      	itt	eq
 80210f2:	782c      	ldrbeq	r4, [r5, #0]
 80210f4:	1c85      	addeq	r5, r0, #2
 80210f6:	e7ec      	b.n	80210d2 <_strtoul_l.isra.0+0x22>
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	d1f6      	bne.n	80210ea <_strtoul_l.isra.0+0x3a>
 80210fc:	2c30      	cmp	r4, #48	@ 0x30
 80210fe:	bf14      	ite	ne
 8021100:	230a      	movne	r3, #10
 8021102:	2308      	moveq	r3, #8
 8021104:	f04f 38ff 	mov.w	r8, #4294967295
 8021108:	2600      	movs	r6, #0
 802110a:	fbb8 f8f3 	udiv	r8, r8, r3
 802110e:	fb03 f908 	mul.w	r9, r3, r8
 8021112:	ea6f 0909 	mvn.w	r9, r9
 8021116:	4630      	mov	r0, r6
 8021118:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802111c:	f1bc 0f09 	cmp.w	ip, #9
 8021120:	d810      	bhi.n	8021144 <_strtoul_l.isra.0+0x94>
 8021122:	4664      	mov	r4, ip
 8021124:	42a3      	cmp	r3, r4
 8021126:	dd1e      	ble.n	8021166 <_strtoul_l.isra.0+0xb6>
 8021128:	f1b6 3fff 	cmp.w	r6, #4294967295
 802112c:	d007      	beq.n	802113e <_strtoul_l.isra.0+0x8e>
 802112e:	4580      	cmp	r8, r0
 8021130:	d316      	bcc.n	8021160 <_strtoul_l.isra.0+0xb0>
 8021132:	d101      	bne.n	8021138 <_strtoul_l.isra.0+0x88>
 8021134:	45a1      	cmp	r9, r4
 8021136:	db13      	blt.n	8021160 <_strtoul_l.isra.0+0xb0>
 8021138:	fb00 4003 	mla	r0, r0, r3, r4
 802113c:	2601      	movs	r6, #1
 802113e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021142:	e7e9      	b.n	8021118 <_strtoul_l.isra.0+0x68>
 8021144:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8021148:	f1bc 0f19 	cmp.w	ip, #25
 802114c:	d801      	bhi.n	8021152 <_strtoul_l.isra.0+0xa2>
 802114e:	3c37      	subs	r4, #55	@ 0x37
 8021150:	e7e8      	b.n	8021124 <_strtoul_l.isra.0+0x74>
 8021152:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8021156:	f1bc 0f19 	cmp.w	ip, #25
 802115a:	d804      	bhi.n	8021166 <_strtoul_l.isra.0+0xb6>
 802115c:	3c57      	subs	r4, #87	@ 0x57
 802115e:	e7e1      	b.n	8021124 <_strtoul_l.isra.0+0x74>
 8021160:	f04f 36ff 	mov.w	r6, #4294967295
 8021164:	e7eb      	b.n	802113e <_strtoul_l.isra.0+0x8e>
 8021166:	1c73      	adds	r3, r6, #1
 8021168:	d106      	bne.n	8021178 <_strtoul_l.isra.0+0xc8>
 802116a:	2322      	movs	r3, #34	@ 0x22
 802116c:	f8ce 3000 	str.w	r3, [lr]
 8021170:	4630      	mov	r0, r6
 8021172:	b932      	cbnz	r2, 8021182 <_strtoul_l.isra.0+0xd2>
 8021174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021178:	b107      	cbz	r7, 802117c <_strtoul_l.isra.0+0xcc>
 802117a:	4240      	negs	r0, r0
 802117c:	2a00      	cmp	r2, #0
 802117e:	d0f9      	beq.n	8021174 <_strtoul_l.isra.0+0xc4>
 8021180:	b106      	cbz	r6, 8021184 <_strtoul_l.isra.0+0xd4>
 8021182:	1e69      	subs	r1, r5, #1
 8021184:	6011      	str	r1, [r2, #0]
 8021186:	e7f5      	b.n	8021174 <_strtoul_l.isra.0+0xc4>
 8021188:	080262f1 	.word	0x080262f1

0802118c <_strtoul_r>:
 802118c:	f7ff bf90 	b.w	80210b0 <_strtoul_l.isra.0>

08021190 <strtoul>:
 8021190:	4613      	mov	r3, r2
 8021192:	460a      	mov	r2, r1
 8021194:	4601      	mov	r1, r0
 8021196:	4802      	ldr	r0, [pc, #8]	@ (80211a0 <strtoul+0x10>)
 8021198:	6800      	ldr	r0, [r0, #0]
 802119a:	f7ff bf89 	b.w	80210b0 <_strtoul_l.isra.0>
 802119e:	bf00      	nop
 80211a0:	200001c0 	.word	0x200001c0

080211a4 <__ascii_wctomb>:
 80211a4:	4603      	mov	r3, r0
 80211a6:	4608      	mov	r0, r1
 80211a8:	b141      	cbz	r1, 80211bc <__ascii_wctomb+0x18>
 80211aa:	2aff      	cmp	r2, #255	@ 0xff
 80211ac:	d904      	bls.n	80211b8 <__ascii_wctomb+0x14>
 80211ae:	228a      	movs	r2, #138	@ 0x8a
 80211b0:	601a      	str	r2, [r3, #0]
 80211b2:	f04f 30ff 	mov.w	r0, #4294967295
 80211b6:	4770      	bx	lr
 80211b8:	700a      	strb	r2, [r1, #0]
 80211ba:	2001      	movs	r0, #1
 80211bc:	4770      	bx	lr

080211be <__ssputs_r>:
 80211be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80211c2:	688e      	ldr	r6, [r1, #8]
 80211c4:	461f      	mov	r7, r3
 80211c6:	42be      	cmp	r6, r7
 80211c8:	680b      	ldr	r3, [r1, #0]
 80211ca:	4682      	mov	sl, r0
 80211cc:	460c      	mov	r4, r1
 80211ce:	4690      	mov	r8, r2
 80211d0:	d82d      	bhi.n	802122e <__ssputs_r+0x70>
 80211d2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80211d6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80211da:	d026      	beq.n	802122a <__ssputs_r+0x6c>
 80211dc:	6965      	ldr	r5, [r4, #20]
 80211de:	6909      	ldr	r1, [r1, #16]
 80211e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80211e4:	eba3 0901 	sub.w	r9, r3, r1
 80211e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80211ec:	1c7b      	adds	r3, r7, #1
 80211ee:	444b      	add	r3, r9
 80211f0:	106d      	asrs	r5, r5, #1
 80211f2:	429d      	cmp	r5, r3
 80211f4:	bf38      	it	cc
 80211f6:	461d      	movcc	r5, r3
 80211f8:	0553      	lsls	r3, r2, #21
 80211fa:	d527      	bpl.n	802124c <__ssputs_r+0x8e>
 80211fc:	4629      	mov	r1, r5
 80211fe:	f7fb f843 	bl	801c288 <_malloc_r>
 8021202:	4606      	mov	r6, r0
 8021204:	b360      	cbz	r0, 8021260 <__ssputs_r+0xa2>
 8021206:	6921      	ldr	r1, [r4, #16]
 8021208:	464a      	mov	r2, r9
 802120a:	f7fd ffdc 	bl	801f1c6 <memcpy>
 802120e:	89a3      	ldrh	r3, [r4, #12]
 8021210:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8021214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021218:	81a3      	strh	r3, [r4, #12]
 802121a:	6126      	str	r6, [r4, #16]
 802121c:	6165      	str	r5, [r4, #20]
 802121e:	444e      	add	r6, r9
 8021220:	eba5 0509 	sub.w	r5, r5, r9
 8021224:	6026      	str	r6, [r4, #0]
 8021226:	60a5      	str	r5, [r4, #8]
 8021228:	463e      	mov	r6, r7
 802122a:	42be      	cmp	r6, r7
 802122c:	d900      	bls.n	8021230 <__ssputs_r+0x72>
 802122e:	463e      	mov	r6, r7
 8021230:	6820      	ldr	r0, [r4, #0]
 8021232:	4632      	mov	r2, r6
 8021234:	4641      	mov	r1, r8
 8021236:	f000 fd68 	bl	8021d0a <memmove>
 802123a:	68a3      	ldr	r3, [r4, #8]
 802123c:	1b9b      	subs	r3, r3, r6
 802123e:	60a3      	str	r3, [r4, #8]
 8021240:	6823      	ldr	r3, [r4, #0]
 8021242:	4433      	add	r3, r6
 8021244:	6023      	str	r3, [r4, #0]
 8021246:	2000      	movs	r0, #0
 8021248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802124c:	462a      	mov	r2, r5
 802124e:	f000 fdc7 	bl	8021de0 <_realloc_r>
 8021252:	4606      	mov	r6, r0
 8021254:	2800      	cmp	r0, #0
 8021256:	d1e0      	bne.n	802121a <__ssputs_r+0x5c>
 8021258:	6921      	ldr	r1, [r4, #16]
 802125a:	4650      	mov	r0, sl
 802125c:	f7fe fea4 	bl	801ffa8 <_free_r>
 8021260:	230c      	movs	r3, #12
 8021262:	f8ca 3000 	str.w	r3, [sl]
 8021266:	89a3      	ldrh	r3, [r4, #12]
 8021268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802126c:	81a3      	strh	r3, [r4, #12]
 802126e:	f04f 30ff 	mov.w	r0, #4294967295
 8021272:	e7e9      	b.n	8021248 <__ssputs_r+0x8a>

08021274 <_svfiprintf_r>:
 8021274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021278:	4698      	mov	r8, r3
 802127a:	898b      	ldrh	r3, [r1, #12]
 802127c:	061b      	lsls	r3, r3, #24
 802127e:	b09d      	sub	sp, #116	@ 0x74
 8021280:	4607      	mov	r7, r0
 8021282:	460d      	mov	r5, r1
 8021284:	4614      	mov	r4, r2
 8021286:	d510      	bpl.n	80212aa <_svfiprintf_r+0x36>
 8021288:	690b      	ldr	r3, [r1, #16]
 802128a:	b973      	cbnz	r3, 80212aa <_svfiprintf_r+0x36>
 802128c:	2140      	movs	r1, #64	@ 0x40
 802128e:	f7fa fffb 	bl	801c288 <_malloc_r>
 8021292:	6028      	str	r0, [r5, #0]
 8021294:	6128      	str	r0, [r5, #16]
 8021296:	b930      	cbnz	r0, 80212a6 <_svfiprintf_r+0x32>
 8021298:	230c      	movs	r3, #12
 802129a:	603b      	str	r3, [r7, #0]
 802129c:	f04f 30ff 	mov.w	r0, #4294967295
 80212a0:	b01d      	add	sp, #116	@ 0x74
 80212a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212a6:	2340      	movs	r3, #64	@ 0x40
 80212a8:	616b      	str	r3, [r5, #20]
 80212aa:	2300      	movs	r3, #0
 80212ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80212ae:	2320      	movs	r3, #32
 80212b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80212b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80212b8:	2330      	movs	r3, #48	@ 0x30
 80212ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8021458 <_svfiprintf_r+0x1e4>
 80212be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80212c2:	f04f 0901 	mov.w	r9, #1
 80212c6:	4623      	mov	r3, r4
 80212c8:	469a      	mov	sl, r3
 80212ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80212ce:	b10a      	cbz	r2, 80212d4 <_svfiprintf_r+0x60>
 80212d0:	2a25      	cmp	r2, #37	@ 0x25
 80212d2:	d1f9      	bne.n	80212c8 <_svfiprintf_r+0x54>
 80212d4:	ebba 0b04 	subs.w	fp, sl, r4
 80212d8:	d00b      	beq.n	80212f2 <_svfiprintf_r+0x7e>
 80212da:	465b      	mov	r3, fp
 80212dc:	4622      	mov	r2, r4
 80212de:	4629      	mov	r1, r5
 80212e0:	4638      	mov	r0, r7
 80212e2:	f7ff ff6c 	bl	80211be <__ssputs_r>
 80212e6:	3001      	adds	r0, #1
 80212e8:	f000 80a7 	beq.w	802143a <_svfiprintf_r+0x1c6>
 80212ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80212ee:	445a      	add	r2, fp
 80212f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80212f2:	f89a 3000 	ldrb.w	r3, [sl]
 80212f6:	2b00      	cmp	r3, #0
 80212f8:	f000 809f 	beq.w	802143a <_svfiprintf_r+0x1c6>
 80212fc:	2300      	movs	r3, #0
 80212fe:	f04f 32ff 	mov.w	r2, #4294967295
 8021302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021306:	f10a 0a01 	add.w	sl, sl, #1
 802130a:	9304      	str	r3, [sp, #16]
 802130c:	9307      	str	r3, [sp, #28]
 802130e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021312:	931a      	str	r3, [sp, #104]	@ 0x68
 8021314:	4654      	mov	r4, sl
 8021316:	2205      	movs	r2, #5
 8021318:	f814 1b01 	ldrb.w	r1, [r4], #1
 802131c:	484e      	ldr	r0, [pc, #312]	@ (8021458 <_svfiprintf_r+0x1e4>)
 802131e:	f7de ff67 	bl	80001f0 <memchr>
 8021322:	9a04      	ldr	r2, [sp, #16]
 8021324:	b9d8      	cbnz	r0, 802135e <_svfiprintf_r+0xea>
 8021326:	06d0      	lsls	r0, r2, #27
 8021328:	bf44      	itt	mi
 802132a:	2320      	movmi	r3, #32
 802132c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021330:	0711      	lsls	r1, r2, #28
 8021332:	bf44      	itt	mi
 8021334:	232b      	movmi	r3, #43	@ 0x2b
 8021336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802133a:	f89a 3000 	ldrb.w	r3, [sl]
 802133e:	2b2a      	cmp	r3, #42	@ 0x2a
 8021340:	d015      	beq.n	802136e <_svfiprintf_r+0xfa>
 8021342:	9a07      	ldr	r2, [sp, #28]
 8021344:	4654      	mov	r4, sl
 8021346:	2000      	movs	r0, #0
 8021348:	f04f 0c0a 	mov.w	ip, #10
 802134c:	4621      	mov	r1, r4
 802134e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021352:	3b30      	subs	r3, #48	@ 0x30
 8021354:	2b09      	cmp	r3, #9
 8021356:	d94b      	bls.n	80213f0 <_svfiprintf_r+0x17c>
 8021358:	b1b0      	cbz	r0, 8021388 <_svfiprintf_r+0x114>
 802135a:	9207      	str	r2, [sp, #28]
 802135c:	e014      	b.n	8021388 <_svfiprintf_r+0x114>
 802135e:	eba0 0308 	sub.w	r3, r0, r8
 8021362:	fa09 f303 	lsl.w	r3, r9, r3
 8021366:	4313      	orrs	r3, r2
 8021368:	9304      	str	r3, [sp, #16]
 802136a:	46a2      	mov	sl, r4
 802136c:	e7d2      	b.n	8021314 <_svfiprintf_r+0xa0>
 802136e:	9b03      	ldr	r3, [sp, #12]
 8021370:	1d19      	adds	r1, r3, #4
 8021372:	681b      	ldr	r3, [r3, #0]
 8021374:	9103      	str	r1, [sp, #12]
 8021376:	2b00      	cmp	r3, #0
 8021378:	bfbb      	ittet	lt
 802137a:	425b      	neglt	r3, r3
 802137c:	f042 0202 	orrlt.w	r2, r2, #2
 8021380:	9307      	strge	r3, [sp, #28]
 8021382:	9307      	strlt	r3, [sp, #28]
 8021384:	bfb8      	it	lt
 8021386:	9204      	strlt	r2, [sp, #16]
 8021388:	7823      	ldrb	r3, [r4, #0]
 802138a:	2b2e      	cmp	r3, #46	@ 0x2e
 802138c:	d10a      	bne.n	80213a4 <_svfiprintf_r+0x130>
 802138e:	7863      	ldrb	r3, [r4, #1]
 8021390:	2b2a      	cmp	r3, #42	@ 0x2a
 8021392:	d132      	bne.n	80213fa <_svfiprintf_r+0x186>
 8021394:	9b03      	ldr	r3, [sp, #12]
 8021396:	1d1a      	adds	r2, r3, #4
 8021398:	681b      	ldr	r3, [r3, #0]
 802139a:	9203      	str	r2, [sp, #12]
 802139c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80213a0:	3402      	adds	r4, #2
 80213a2:	9305      	str	r3, [sp, #20]
 80213a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8021468 <_svfiprintf_r+0x1f4>
 80213a8:	7821      	ldrb	r1, [r4, #0]
 80213aa:	2203      	movs	r2, #3
 80213ac:	4650      	mov	r0, sl
 80213ae:	f7de ff1f 	bl	80001f0 <memchr>
 80213b2:	b138      	cbz	r0, 80213c4 <_svfiprintf_r+0x150>
 80213b4:	9b04      	ldr	r3, [sp, #16]
 80213b6:	eba0 000a 	sub.w	r0, r0, sl
 80213ba:	2240      	movs	r2, #64	@ 0x40
 80213bc:	4082      	lsls	r2, r0
 80213be:	4313      	orrs	r3, r2
 80213c0:	3401      	adds	r4, #1
 80213c2:	9304      	str	r3, [sp, #16]
 80213c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80213c8:	4824      	ldr	r0, [pc, #144]	@ (802145c <_svfiprintf_r+0x1e8>)
 80213ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80213ce:	2206      	movs	r2, #6
 80213d0:	f7de ff0e 	bl	80001f0 <memchr>
 80213d4:	2800      	cmp	r0, #0
 80213d6:	d036      	beq.n	8021446 <_svfiprintf_r+0x1d2>
 80213d8:	4b21      	ldr	r3, [pc, #132]	@ (8021460 <_svfiprintf_r+0x1ec>)
 80213da:	bb1b      	cbnz	r3, 8021424 <_svfiprintf_r+0x1b0>
 80213dc:	9b03      	ldr	r3, [sp, #12]
 80213de:	3307      	adds	r3, #7
 80213e0:	f023 0307 	bic.w	r3, r3, #7
 80213e4:	3308      	adds	r3, #8
 80213e6:	9303      	str	r3, [sp, #12]
 80213e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213ea:	4433      	add	r3, r6
 80213ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80213ee:	e76a      	b.n	80212c6 <_svfiprintf_r+0x52>
 80213f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80213f4:	460c      	mov	r4, r1
 80213f6:	2001      	movs	r0, #1
 80213f8:	e7a8      	b.n	802134c <_svfiprintf_r+0xd8>
 80213fa:	2300      	movs	r3, #0
 80213fc:	3401      	adds	r4, #1
 80213fe:	9305      	str	r3, [sp, #20]
 8021400:	4619      	mov	r1, r3
 8021402:	f04f 0c0a 	mov.w	ip, #10
 8021406:	4620      	mov	r0, r4
 8021408:	f810 2b01 	ldrb.w	r2, [r0], #1
 802140c:	3a30      	subs	r2, #48	@ 0x30
 802140e:	2a09      	cmp	r2, #9
 8021410:	d903      	bls.n	802141a <_svfiprintf_r+0x1a6>
 8021412:	2b00      	cmp	r3, #0
 8021414:	d0c6      	beq.n	80213a4 <_svfiprintf_r+0x130>
 8021416:	9105      	str	r1, [sp, #20]
 8021418:	e7c4      	b.n	80213a4 <_svfiprintf_r+0x130>
 802141a:	fb0c 2101 	mla	r1, ip, r1, r2
 802141e:	4604      	mov	r4, r0
 8021420:	2301      	movs	r3, #1
 8021422:	e7f0      	b.n	8021406 <_svfiprintf_r+0x192>
 8021424:	ab03      	add	r3, sp, #12
 8021426:	9300      	str	r3, [sp, #0]
 8021428:	462a      	mov	r2, r5
 802142a:	4b0e      	ldr	r3, [pc, #56]	@ (8021464 <_svfiprintf_r+0x1f0>)
 802142c:	a904      	add	r1, sp, #16
 802142e:	4638      	mov	r0, r7
 8021430:	f7fb fef2 	bl	801d218 <_printf_float>
 8021434:	1c42      	adds	r2, r0, #1
 8021436:	4606      	mov	r6, r0
 8021438:	d1d6      	bne.n	80213e8 <_svfiprintf_r+0x174>
 802143a:	89ab      	ldrh	r3, [r5, #12]
 802143c:	065b      	lsls	r3, r3, #25
 802143e:	f53f af2d 	bmi.w	802129c <_svfiprintf_r+0x28>
 8021442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021444:	e72c      	b.n	80212a0 <_svfiprintf_r+0x2c>
 8021446:	ab03      	add	r3, sp, #12
 8021448:	9300      	str	r3, [sp, #0]
 802144a:	462a      	mov	r2, r5
 802144c:	4b05      	ldr	r3, [pc, #20]	@ (8021464 <_svfiprintf_r+0x1f0>)
 802144e:	a904      	add	r1, sp, #16
 8021450:	4638      	mov	r0, r7
 8021452:	f7fc f979 	bl	801d748 <_printf_i>
 8021456:	e7ed      	b.n	8021434 <_svfiprintf_r+0x1c0>
 8021458:	0802626d 	.word	0x0802626d
 802145c:	08026277 	.word	0x08026277
 8021460:	0801d219 	.word	0x0801d219
 8021464:	080211bf 	.word	0x080211bf
 8021468:	08026273 	.word	0x08026273

0802146c <_sungetc_r>:
 802146c:	b538      	push	{r3, r4, r5, lr}
 802146e:	1c4b      	adds	r3, r1, #1
 8021470:	4614      	mov	r4, r2
 8021472:	d103      	bne.n	802147c <_sungetc_r+0x10>
 8021474:	f04f 35ff 	mov.w	r5, #4294967295
 8021478:	4628      	mov	r0, r5
 802147a:	bd38      	pop	{r3, r4, r5, pc}
 802147c:	8993      	ldrh	r3, [r2, #12]
 802147e:	f023 0320 	bic.w	r3, r3, #32
 8021482:	8193      	strh	r3, [r2, #12]
 8021484:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021486:	6852      	ldr	r2, [r2, #4]
 8021488:	b2cd      	uxtb	r5, r1
 802148a:	b18b      	cbz	r3, 80214b0 <_sungetc_r+0x44>
 802148c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802148e:	4293      	cmp	r3, r2
 8021490:	dd08      	ble.n	80214a4 <_sungetc_r+0x38>
 8021492:	6823      	ldr	r3, [r4, #0]
 8021494:	1e5a      	subs	r2, r3, #1
 8021496:	6022      	str	r2, [r4, #0]
 8021498:	f803 5c01 	strb.w	r5, [r3, #-1]
 802149c:	6863      	ldr	r3, [r4, #4]
 802149e:	3301      	adds	r3, #1
 80214a0:	6063      	str	r3, [r4, #4]
 80214a2:	e7e9      	b.n	8021478 <_sungetc_r+0xc>
 80214a4:	4621      	mov	r1, r4
 80214a6:	f000 fbf6 	bl	8021c96 <__submore>
 80214aa:	2800      	cmp	r0, #0
 80214ac:	d0f1      	beq.n	8021492 <_sungetc_r+0x26>
 80214ae:	e7e1      	b.n	8021474 <_sungetc_r+0x8>
 80214b0:	6921      	ldr	r1, [r4, #16]
 80214b2:	6823      	ldr	r3, [r4, #0]
 80214b4:	b151      	cbz	r1, 80214cc <_sungetc_r+0x60>
 80214b6:	4299      	cmp	r1, r3
 80214b8:	d208      	bcs.n	80214cc <_sungetc_r+0x60>
 80214ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80214be:	42a9      	cmp	r1, r5
 80214c0:	d104      	bne.n	80214cc <_sungetc_r+0x60>
 80214c2:	3b01      	subs	r3, #1
 80214c4:	3201      	adds	r2, #1
 80214c6:	6023      	str	r3, [r4, #0]
 80214c8:	6062      	str	r2, [r4, #4]
 80214ca:	e7d5      	b.n	8021478 <_sungetc_r+0xc>
 80214cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80214d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80214d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80214d6:	2303      	movs	r3, #3
 80214d8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80214da:	4623      	mov	r3, r4
 80214dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80214e0:	6023      	str	r3, [r4, #0]
 80214e2:	2301      	movs	r3, #1
 80214e4:	e7dc      	b.n	80214a0 <_sungetc_r+0x34>

080214e6 <__ssrefill_r>:
 80214e6:	b510      	push	{r4, lr}
 80214e8:	460c      	mov	r4, r1
 80214ea:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80214ec:	b169      	cbz	r1, 802150a <__ssrefill_r+0x24>
 80214ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80214f2:	4299      	cmp	r1, r3
 80214f4:	d001      	beq.n	80214fa <__ssrefill_r+0x14>
 80214f6:	f7fe fd57 	bl	801ffa8 <_free_r>
 80214fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80214fc:	6063      	str	r3, [r4, #4]
 80214fe:	2000      	movs	r0, #0
 8021500:	6360      	str	r0, [r4, #52]	@ 0x34
 8021502:	b113      	cbz	r3, 802150a <__ssrefill_r+0x24>
 8021504:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8021506:	6023      	str	r3, [r4, #0]
 8021508:	bd10      	pop	{r4, pc}
 802150a:	6923      	ldr	r3, [r4, #16]
 802150c:	6023      	str	r3, [r4, #0]
 802150e:	2300      	movs	r3, #0
 8021510:	6063      	str	r3, [r4, #4]
 8021512:	89a3      	ldrh	r3, [r4, #12]
 8021514:	f043 0320 	orr.w	r3, r3, #32
 8021518:	81a3      	strh	r3, [r4, #12]
 802151a:	f04f 30ff 	mov.w	r0, #4294967295
 802151e:	e7f3      	b.n	8021508 <__ssrefill_r+0x22>

08021520 <__ssvfiscanf_r>:
 8021520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021524:	460c      	mov	r4, r1
 8021526:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 802152a:	2100      	movs	r1, #0
 802152c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8021530:	49a6      	ldr	r1, [pc, #664]	@ (80217cc <__ssvfiscanf_r+0x2ac>)
 8021532:	91a0      	str	r1, [sp, #640]	@ 0x280
 8021534:	f10d 0804 	add.w	r8, sp, #4
 8021538:	49a5      	ldr	r1, [pc, #660]	@ (80217d0 <__ssvfiscanf_r+0x2b0>)
 802153a:	4fa6      	ldr	r7, [pc, #664]	@ (80217d4 <__ssvfiscanf_r+0x2b4>)
 802153c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8021540:	4606      	mov	r6, r0
 8021542:	91a1      	str	r1, [sp, #644]	@ 0x284
 8021544:	9300      	str	r3, [sp, #0]
 8021546:	f892 9000 	ldrb.w	r9, [r2]
 802154a:	f1b9 0f00 	cmp.w	r9, #0
 802154e:	f000 8158 	beq.w	8021802 <__ssvfiscanf_r+0x2e2>
 8021552:	f817 3009 	ldrb.w	r3, [r7, r9]
 8021556:	f013 0308 	ands.w	r3, r3, #8
 802155a:	f102 0501 	add.w	r5, r2, #1
 802155e:	d019      	beq.n	8021594 <__ssvfiscanf_r+0x74>
 8021560:	6863      	ldr	r3, [r4, #4]
 8021562:	2b00      	cmp	r3, #0
 8021564:	dd0f      	ble.n	8021586 <__ssvfiscanf_r+0x66>
 8021566:	6823      	ldr	r3, [r4, #0]
 8021568:	781a      	ldrb	r2, [r3, #0]
 802156a:	5cba      	ldrb	r2, [r7, r2]
 802156c:	0712      	lsls	r2, r2, #28
 802156e:	d401      	bmi.n	8021574 <__ssvfiscanf_r+0x54>
 8021570:	462a      	mov	r2, r5
 8021572:	e7e8      	b.n	8021546 <__ssvfiscanf_r+0x26>
 8021574:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8021576:	3201      	adds	r2, #1
 8021578:	9245      	str	r2, [sp, #276]	@ 0x114
 802157a:	6862      	ldr	r2, [r4, #4]
 802157c:	3301      	adds	r3, #1
 802157e:	3a01      	subs	r2, #1
 8021580:	6062      	str	r2, [r4, #4]
 8021582:	6023      	str	r3, [r4, #0]
 8021584:	e7ec      	b.n	8021560 <__ssvfiscanf_r+0x40>
 8021586:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8021588:	4621      	mov	r1, r4
 802158a:	4630      	mov	r0, r6
 802158c:	4798      	blx	r3
 802158e:	2800      	cmp	r0, #0
 8021590:	d0e9      	beq.n	8021566 <__ssvfiscanf_r+0x46>
 8021592:	e7ed      	b.n	8021570 <__ssvfiscanf_r+0x50>
 8021594:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8021598:	f040 8085 	bne.w	80216a6 <__ssvfiscanf_r+0x186>
 802159c:	9341      	str	r3, [sp, #260]	@ 0x104
 802159e:	9343      	str	r3, [sp, #268]	@ 0x10c
 80215a0:	7853      	ldrb	r3, [r2, #1]
 80215a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80215a4:	bf02      	ittt	eq
 80215a6:	2310      	moveq	r3, #16
 80215a8:	1c95      	addeq	r5, r2, #2
 80215aa:	9341      	streq	r3, [sp, #260]	@ 0x104
 80215ac:	220a      	movs	r2, #10
 80215ae:	46aa      	mov	sl, r5
 80215b0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80215b4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80215b8:	2b09      	cmp	r3, #9
 80215ba:	d91e      	bls.n	80215fa <__ssvfiscanf_r+0xda>
 80215bc:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80217d8 <__ssvfiscanf_r+0x2b8>
 80215c0:	2203      	movs	r2, #3
 80215c2:	4658      	mov	r0, fp
 80215c4:	f7de fe14 	bl	80001f0 <memchr>
 80215c8:	b138      	cbz	r0, 80215da <__ssvfiscanf_r+0xba>
 80215ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80215cc:	eba0 000b 	sub.w	r0, r0, fp
 80215d0:	2301      	movs	r3, #1
 80215d2:	4083      	lsls	r3, r0
 80215d4:	4313      	orrs	r3, r2
 80215d6:	9341      	str	r3, [sp, #260]	@ 0x104
 80215d8:	4655      	mov	r5, sl
 80215da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80215de:	2b78      	cmp	r3, #120	@ 0x78
 80215e0:	d806      	bhi.n	80215f0 <__ssvfiscanf_r+0xd0>
 80215e2:	2b57      	cmp	r3, #87	@ 0x57
 80215e4:	d810      	bhi.n	8021608 <__ssvfiscanf_r+0xe8>
 80215e6:	2b25      	cmp	r3, #37	@ 0x25
 80215e8:	d05d      	beq.n	80216a6 <__ssvfiscanf_r+0x186>
 80215ea:	d857      	bhi.n	802169c <__ssvfiscanf_r+0x17c>
 80215ec:	2b00      	cmp	r3, #0
 80215ee:	d075      	beq.n	80216dc <__ssvfiscanf_r+0x1bc>
 80215f0:	2303      	movs	r3, #3
 80215f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80215f4:	230a      	movs	r3, #10
 80215f6:	9342      	str	r3, [sp, #264]	@ 0x108
 80215f8:	e088      	b.n	802170c <__ssvfiscanf_r+0x1ec>
 80215fa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80215fc:	fb02 1103 	mla	r1, r2, r3, r1
 8021600:	3930      	subs	r1, #48	@ 0x30
 8021602:	9143      	str	r1, [sp, #268]	@ 0x10c
 8021604:	4655      	mov	r5, sl
 8021606:	e7d2      	b.n	80215ae <__ssvfiscanf_r+0x8e>
 8021608:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 802160c:	2a20      	cmp	r2, #32
 802160e:	d8ef      	bhi.n	80215f0 <__ssvfiscanf_r+0xd0>
 8021610:	a101      	add	r1, pc, #4	@ (adr r1, 8021618 <__ssvfiscanf_r+0xf8>)
 8021612:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8021616:	bf00      	nop
 8021618:	080216eb 	.word	0x080216eb
 802161c:	080215f1 	.word	0x080215f1
 8021620:	080215f1 	.word	0x080215f1
 8021624:	08021745 	.word	0x08021745
 8021628:	080215f1 	.word	0x080215f1
 802162c:	080215f1 	.word	0x080215f1
 8021630:	080215f1 	.word	0x080215f1
 8021634:	080215f1 	.word	0x080215f1
 8021638:	080215f1 	.word	0x080215f1
 802163c:	080215f1 	.word	0x080215f1
 8021640:	080215f1 	.word	0x080215f1
 8021644:	0802175b 	.word	0x0802175b
 8021648:	08021741 	.word	0x08021741
 802164c:	080216a3 	.word	0x080216a3
 8021650:	080216a3 	.word	0x080216a3
 8021654:	080216a3 	.word	0x080216a3
 8021658:	080215f1 	.word	0x080215f1
 802165c:	080216fd 	.word	0x080216fd
 8021660:	080215f1 	.word	0x080215f1
 8021664:	080215f1 	.word	0x080215f1
 8021668:	080215f1 	.word	0x080215f1
 802166c:	080215f1 	.word	0x080215f1
 8021670:	0802176b 	.word	0x0802176b
 8021674:	08021705 	.word	0x08021705
 8021678:	080216e3 	.word	0x080216e3
 802167c:	080215f1 	.word	0x080215f1
 8021680:	080215f1 	.word	0x080215f1
 8021684:	08021767 	.word	0x08021767
 8021688:	080215f1 	.word	0x080215f1
 802168c:	08021741 	.word	0x08021741
 8021690:	080215f1 	.word	0x080215f1
 8021694:	080215f1 	.word	0x080215f1
 8021698:	080216eb 	.word	0x080216eb
 802169c:	3b45      	subs	r3, #69	@ 0x45
 802169e:	2b02      	cmp	r3, #2
 80216a0:	d8a6      	bhi.n	80215f0 <__ssvfiscanf_r+0xd0>
 80216a2:	2305      	movs	r3, #5
 80216a4:	e031      	b.n	802170a <__ssvfiscanf_r+0x1ea>
 80216a6:	6863      	ldr	r3, [r4, #4]
 80216a8:	2b00      	cmp	r3, #0
 80216aa:	dd0d      	ble.n	80216c8 <__ssvfiscanf_r+0x1a8>
 80216ac:	6823      	ldr	r3, [r4, #0]
 80216ae:	781a      	ldrb	r2, [r3, #0]
 80216b0:	454a      	cmp	r2, r9
 80216b2:	f040 80a6 	bne.w	8021802 <__ssvfiscanf_r+0x2e2>
 80216b6:	3301      	adds	r3, #1
 80216b8:	6862      	ldr	r2, [r4, #4]
 80216ba:	6023      	str	r3, [r4, #0]
 80216bc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80216be:	3a01      	subs	r2, #1
 80216c0:	3301      	adds	r3, #1
 80216c2:	6062      	str	r2, [r4, #4]
 80216c4:	9345      	str	r3, [sp, #276]	@ 0x114
 80216c6:	e753      	b.n	8021570 <__ssvfiscanf_r+0x50>
 80216c8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80216ca:	4621      	mov	r1, r4
 80216cc:	4630      	mov	r0, r6
 80216ce:	4798      	blx	r3
 80216d0:	2800      	cmp	r0, #0
 80216d2:	d0eb      	beq.n	80216ac <__ssvfiscanf_r+0x18c>
 80216d4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80216d6:	2800      	cmp	r0, #0
 80216d8:	f040 808b 	bne.w	80217f2 <__ssvfiscanf_r+0x2d2>
 80216dc:	f04f 30ff 	mov.w	r0, #4294967295
 80216e0:	e08b      	b.n	80217fa <__ssvfiscanf_r+0x2da>
 80216e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80216e4:	f042 0220 	orr.w	r2, r2, #32
 80216e8:	9241      	str	r2, [sp, #260]	@ 0x104
 80216ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80216ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80216f0:	9241      	str	r2, [sp, #260]	@ 0x104
 80216f2:	2210      	movs	r2, #16
 80216f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80216f6:	9242      	str	r2, [sp, #264]	@ 0x108
 80216f8:	d902      	bls.n	8021700 <__ssvfiscanf_r+0x1e0>
 80216fa:	e005      	b.n	8021708 <__ssvfiscanf_r+0x1e8>
 80216fc:	2300      	movs	r3, #0
 80216fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8021700:	2303      	movs	r3, #3
 8021702:	e002      	b.n	802170a <__ssvfiscanf_r+0x1ea>
 8021704:	2308      	movs	r3, #8
 8021706:	9342      	str	r3, [sp, #264]	@ 0x108
 8021708:	2304      	movs	r3, #4
 802170a:	9347      	str	r3, [sp, #284]	@ 0x11c
 802170c:	6863      	ldr	r3, [r4, #4]
 802170e:	2b00      	cmp	r3, #0
 8021710:	dd39      	ble.n	8021786 <__ssvfiscanf_r+0x266>
 8021712:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8021714:	0659      	lsls	r1, r3, #25
 8021716:	d404      	bmi.n	8021722 <__ssvfiscanf_r+0x202>
 8021718:	6823      	ldr	r3, [r4, #0]
 802171a:	781a      	ldrb	r2, [r3, #0]
 802171c:	5cba      	ldrb	r2, [r7, r2]
 802171e:	0712      	lsls	r2, r2, #28
 8021720:	d438      	bmi.n	8021794 <__ssvfiscanf_r+0x274>
 8021722:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8021724:	2b02      	cmp	r3, #2
 8021726:	dc47      	bgt.n	80217b8 <__ssvfiscanf_r+0x298>
 8021728:	466b      	mov	r3, sp
 802172a:	4622      	mov	r2, r4
 802172c:	a941      	add	r1, sp, #260	@ 0x104
 802172e:	4630      	mov	r0, r6
 8021730:	f000 f86c 	bl	802180c <_scanf_chars>
 8021734:	2801      	cmp	r0, #1
 8021736:	d064      	beq.n	8021802 <__ssvfiscanf_r+0x2e2>
 8021738:	2802      	cmp	r0, #2
 802173a:	f47f af19 	bne.w	8021570 <__ssvfiscanf_r+0x50>
 802173e:	e7c9      	b.n	80216d4 <__ssvfiscanf_r+0x1b4>
 8021740:	220a      	movs	r2, #10
 8021742:	e7d7      	b.n	80216f4 <__ssvfiscanf_r+0x1d4>
 8021744:	4629      	mov	r1, r5
 8021746:	4640      	mov	r0, r8
 8021748:	f000 fa6c 	bl	8021c24 <__sccl>
 802174c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802174e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021752:	9341      	str	r3, [sp, #260]	@ 0x104
 8021754:	4605      	mov	r5, r0
 8021756:	2301      	movs	r3, #1
 8021758:	e7d7      	b.n	802170a <__ssvfiscanf_r+0x1ea>
 802175a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802175c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021760:	9341      	str	r3, [sp, #260]	@ 0x104
 8021762:	2300      	movs	r3, #0
 8021764:	e7d1      	b.n	802170a <__ssvfiscanf_r+0x1ea>
 8021766:	2302      	movs	r3, #2
 8021768:	e7cf      	b.n	802170a <__ssvfiscanf_r+0x1ea>
 802176a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 802176c:	06c3      	lsls	r3, r0, #27
 802176e:	f53f aeff 	bmi.w	8021570 <__ssvfiscanf_r+0x50>
 8021772:	9b00      	ldr	r3, [sp, #0]
 8021774:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8021776:	1d19      	adds	r1, r3, #4
 8021778:	9100      	str	r1, [sp, #0]
 802177a:	681b      	ldr	r3, [r3, #0]
 802177c:	07c0      	lsls	r0, r0, #31
 802177e:	bf4c      	ite	mi
 8021780:	801a      	strhmi	r2, [r3, #0]
 8021782:	601a      	strpl	r2, [r3, #0]
 8021784:	e6f4      	b.n	8021570 <__ssvfiscanf_r+0x50>
 8021786:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8021788:	4621      	mov	r1, r4
 802178a:	4630      	mov	r0, r6
 802178c:	4798      	blx	r3
 802178e:	2800      	cmp	r0, #0
 8021790:	d0bf      	beq.n	8021712 <__ssvfiscanf_r+0x1f2>
 8021792:	e79f      	b.n	80216d4 <__ssvfiscanf_r+0x1b4>
 8021794:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8021796:	3201      	adds	r2, #1
 8021798:	9245      	str	r2, [sp, #276]	@ 0x114
 802179a:	6862      	ldr	r2, [r4, #4]
 802179c:	3a01      	subs	r2, #1
 802179e:	2a00      	cmp	r2, #0
 80217a0:	6062      	str	r2, [r4, #4]
 80217a2:	dd02      	ble.n	80217aa <__ssvfiscanf_r+0x28a>
 80217a4:	3301      	adds	r3, #1
 80217a6:	6023      	str	r3, [r4, #0]
 80217a8:	e7b6      	b.n	8021718 <__ssvfiscanf_r+0x1f8>
 80217aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80217ac:	4621      	mov	r1, r4
 80217ae:	4630      	mov	r0, r6
 80217b0:	4798      	blx	r3
 80217b2:	2800      	cmp	r0, #0
 80217b4:	d0b0      	beq.n	8021718 <__ssvfiscanf_r+0x1f8>
 80217b6:	e78d      	b.n	80216d4 <__ssvfiscanf_r+0x1b4>
 80217b8:	2b04      	cmp	r3, #4
 80217ba:	dc0f      	bgt.n	80217dc <__ssvfiscanf_r+0x2bc>
 80217bc:	466b      	mov	r3, sp
 80217be:	4622      	mov	r2, r4
 80217c0:	a941      	add	r1, sp, #260	@ 0x104
 80217c2:	4630      	mov	r0, r6
 80217c4:	f000 f87c 	bl	80218c0 <_scanf_i>
 80217c8:	e7b4      	b.n	8021734 <__ssvfiscanf_r+0x214>
 80217ca:	bf00      	nop
 80217cc:	0802146d 	.word	0x0802146d
 80217d0:	080214e7 	.word	0x080214e7
 80217d4:	080262f1 	.word	0x080262f1
 80217d8:	08026273 	.word	0x08026273
 80217dc:	4b0a      	ldr	r3, [pc, #40]	@ (8021808 <__ssvfiscanf_r+0x2e8>)
 80217de:	2b00      	cmp	r3, #0
 80217e0:	f43f aec6 	beq.w	8021570 <__ssvfiscanf_r+0x50>
 80217e4:	466b      	mov	r3, sp
 80217e6:	4622      	mov	r2, r4
 80217e8:	a941      	add	r1, sp, #260	@ 0x104
 80217ea:	4630      	mov	r0, r6
 80217ec:	f7fc f8ca 	bl	801d984 <_scanf_float>
 80217f0:	e7a0      	b.n	8021734 <__ssvfiscanf_r+0x214>
 80217f2:	89a3      	ldrh	r3, [r4, #12]
 80217f4:	065b      	lsls	r3, r3, #25
 80217f6:	f53f af71 	bmi.w	80216dc <__ssvfiscanf_r+0x1bc>
 80217fa:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80217fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021802:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8021804:	e7f9      	b.n	80217fa <__ssvfiscanf_r+0x2da>
 8021806:	bf00      	nop
 8021808:	0801d985 	.word	0x0801d985

0802180c <_scanf_chars>:
 802180c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021810:	4615      	mov	r5, r2
 8021812:	688a      	ldr	r2, [r1, #8]
 8021814:	4680      	mov	r8, r0
 8021816:	460c      	mov	r4, r1
 8021818:	b932      	cbnz	r2, 8021828 <_scanf_chars+0x1c>
 802181a:	698a      	ldr	r2, [r1, #24]
 802181c:	2a00      	cmp	r2, #0
 802181e:	bf14      	ite	ne
 8021820:	f04f 32ff 	movne.w	r2, #4294967295
 8021824:	2201      	moveq	r2, #1
 8021826:	608a      	str	r2, [r1, #8]
 8021828:	6822      	ldr	r2, [r4, #0]
 802182a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80218bc <_scanf_chars+0xb0>
 802182e:	06d1      	lsls	r1, r2, #27
 8021830:	bf5f      	itttt	pl
 8021832:	681a      	ldrpl	r2, [r3, #0]
 8021834:	1d11      	addpl	r1, r2, #4
 8021836:	6019      	strpl	r1, [r3, #0]
 8021838:	6816      	ldrpl	r6, [r2, #0]
 802183a:	2700      	movs	r7, #0
 802183c:	69a0      	ldr	r0, [r4, #24]
 802183e:	b188      	cbz	r0, 8021864 <_scanf_chars+0x58>
 8021840:	2801      	cmp	r0, #1
 8021842:	d107      	bne.n	8021854 <_scanf_chars+0x48>
 8021844:	682b      	ldr	r3, [r5, #0]
 8021846:	781a      	ldrb	r2, [r3, #0]
 8021848:	6963      	ldr	r3, [r4, #20]
 802184a:	5c9b      	ldrb	r3, [r3, r2]
 802184c:	b953      	cbnz	r3, 8021864 <_scanf_chars+0x58>
 802184e:	2f00      	cmp	r7, #0
 8021850:	d031      	beq.n	80218b6 <_scanf_chars+0xaa>
 8021852:	e022      	b.n	802189a <_scanf_chars+0x8e>
 8021854:	2802      	cmp	r0, #2
 8021856:	d120      	bne.n	802189a <_scanf_chars+0x8e>
 8021858:	682b      	ldr	r3, [r5, #0]
 802185a:	781b      	ldrb	r3, [r3, #0]
 802185c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8021860:	071b      	lsls	r3, r3, #28
 8021862:	d41a      	bmi.n	802189a <_scanf_chars+0x8e>
 8021864:	6823      	ldr	r3, [r4, #0]
 8021866:	06da      	lsls	r2, r3, #27
 8021868:	bf5e      	ittt	pl
 802186a:	682b      	ldrpl	r3, [r5, #0]
 802186c:	781b      	ldrbpl	r3, [r3, #0]
 802186e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8021872:	682a      	ldr	r2, [r5, #0]
 8021874:	686b      	ldr	r3, [r5, #4]
 8021876:	3201      	adds	r2, #1
 8021878:	602a      	str	r2, [r5, #0]
 802187a:	68a2      	ldr	r2, [r4, #8]
 802187c:	3b01      	subs	r3, #1
 802187e:	3a01      	subs	r2, #1
 8021880:	606b      	str	r3, [r5, #4]
 8021882:	3701      	adds	r7, #1
 8021884:	60a2      	str	r2, [r4, #8]
 8021886:	b142      	cbz	r2, 802189a <_scanf_chars+0x8e>
 8021888:	2b00      	cmp	r3, #0
 802188a:	dcd7      	bgt.n	802183c <_scanf_chars+0x30>
 802188c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8021890:	4629      	mov	r1, r5
 8021892:	4640      	mov	r0, r8
 8021894:	4798      	blx	r3
 8021896:	2800      	cmp	r0, #0
 8021898:	d0d0      	beq.n	802183c <_scanf_chars+0x30>
 802189a:	6823      	ldr	r3, [r4, #0]
 802189c:	f013 0310 	ands.w	r3, r3, #16
 80218a0:	d105      	bne.n	80218ae <_scanf_chars+0xa2>
 80218a2:	68e2      	ldr	r2, [r4, #12]
 80218a4:	3201      	adds	r2, #1
 80218a6:	60e2      	str	r2, [r4, #12]
 80218a8:	69a2      	ldr	r2, [r4, #24]
 80218aa:	b102      	cbz	r2, 80218ae <_scanf_chars+0xa2>
 80218ac:	7033      	strb	r3, [r6, #0]
 80218ae:	6923      	ldr	r3, [r4, #16]
 80218b0:	443b      	add	r3, r7
 80218b2:	6123      	str	r3, [r4, #16]
 80218b4:	2000      	movs	r0, #0
 80218b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80218ba:	bf00      	nop
 80218bc:	080262f1 	.word	0x080262f1

080218c0 <_scanf_i>:
 80218c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218c4:	4698      	mov	r8, r3
 80218c6:	4b74      	ldr	r3, [pc, #464]	@ (8021a98 <_scanf_i+0x1d8>)
 80218c8:	460c      	mov	r4, r1
 80218ca:	4682      	mov	sl, r0
 80218cc:	4616      	mov	r6, r2
 80218ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80218d2:	b087      	sub	sp, #28
 80218d4:	ab03      	add	r3, sp, #12
 80218d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80218da:	4b70      	ldr	r3, [pc, #448]	@ (8021a9c <_scanf_i+0x1dc>)
 80218dc:	69a1      	ldr	r1, [r4, #24]
 80218de:	4a70      	ldr	r2, [pc, #448]	@ (8021aa0 <_scanf_i+0x1e0>)
 80218e0:	2903      	cmp	r1, #3
 80218e2:	bf08      	it	eq
 80218e4:	461a      	moveq	r2, r3
 80218e6:	68a3      	ldr	r3, [r4, #8]
 80218e8:	9201      	str	r2, [sp, #4]
 80218ea:	1e5a      	subs	r2, r3, #1
 80218ec:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80218f0:	bf88      	it	hi
 80218f2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80218f6:	4627      	mov	r7, r4
 80218f8:	bf82      	ittt	hi
 80218fa:	eb03 0905 	addhi.w	r9, r3, r5
 80218fe:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8021902:	60a3      	strhi	r3, [r4, #8]
 8021904:	f857 3b1c 	ldr.w	r3, [r7], #28
 8021908:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 802190c:	bf98      	it	ls
 802190e:	f04f 0900 	movls.w	r9, #0
 8021912:	6023      	str	r3, [r4, #0]
 8021914:	463d      	mov	r5, r7
 8021916:	f04f 0b00 	mov.w	fp, #0
 802191a:	6831      	ldr	r1, [r6, #0]
 802191c:	ab03      	add	r3, sp, #12
 802191e:	7809      	ldrb	r1, [r1, #0]
 8021920:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8021924:	2202      	movs	r2, #2
 8021926:	f7de fc63 	bl	80001f0 <memchr>
 802192a:	b328      	cbz	r0, 8021978 <_scanf_i+0xb8>
 802192c:	f1bb 0f01 	cmp.w	fp, #1
 8021930:	d159      	bne.n	80219e6 <_scanf_i+0x126>
 8021932:	6862      	ldr	r2, [r4, #4]
 8021934:	b92a      	cbnz	r2, 8021942 <_scanf_i+0x82>
 8021936:	6822      	ldr	r2, [r4, #0]
 8021938:	2108      	movs	r1, #8
 802193a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802193e:	6061      	str	r1, [r4, #4]
 8021940:	6022      	str	r2, [r4, #0]
 8021942:	6822      	ldr	r2, [r4, #0]
 8021944:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8021948:	6022      	str	r2, [r4, #0]
 802194a:	68a2      	ldr	r2, [r4, #8]
 802194c:	1e51      	subs	r1, r2, #1
 802194e:	60a1      	str	r1, [r4, #8]
 8021950:	b192      	cbz	r2, 8021978 <_scanf_i+0xb8>
 8021952:	6832      	ldr	r2, [r6, #0]
 8021954:	1c51      	adds	r1, r2, #1
 8021956:	6031      	str	r1, [r6, #0]
 8021958:	7812      	ldrb	r2, [r2, #0]
 802195a:	f805 2b01 	strb.w	r2, [r5], #1
 802195e:	6872      	ldr	r2, [r6, #4]
 8021960:	3a01      	subs	r2, #1
 8021962:	2a00      	cmp	r2, #0
 8021964:	6072      	str	r2, [r6, #4]
 8021966:	dc07      	bgt.n	8021978 <_scanf_i+0xb8>
 8021968:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 802196c:	4631      	mov	r1, r6
 802196e:	4650      	mov	r0, sl
 8021970:	4790      	blx	r2
 8021972:	2800      	cmp	r0, #0
 8021974:	f040 8085 	bne.w	8021a82 <_scanf_i+0x1c2>
 8021978:	f10b 0b01 	add.w	fp, fp, #1
 802197c:	f1bb 0f03 	cmp.w	fp, #3
 8021980:	d1cb      	bne.n	802191a <_scanf_i+0x5a>
 8021982:	6863      	ldr	r3, [r4, #4]
 8021984:	b90b      	cbnz	r3, 802198a <_scanf_i+0xca>
 8021986:	230a      	movs	r3, #10
 8021988:	6063      	str	r3, [r4, #4]
 802198a:	6863      	ldr	r3, [r4, #4]
 802198c:	4945      	ldr	r1, [pc, #276]	@ (8021aa4 <_scanf_i+0x1e4>)
 802198e:	6960      	ldr	r0, [r4, #20]
 8021990:	1ac9      	subs	r1, r1, r3
 8021992:	f000 f947 	bl	8021c24 <__sccl>
 8021996:	f04f 0b00 	mov.w	fp, #0
 802199a:	68a3      	ldr	r3, [r4, #8]
 802199c:	6822      	ldr	r2, [r4, #0]
 802199e:	2b00      	cmp	r3, #0
 80219a0:	d03d      	beq.n	8021a1e <_scanf_i+0x15e>
 80219a2:	6831      	ldr	r1, [r6, #0]
 80219a4:	6960      	ldr	r0, [r4, #20]
 80219a6:	f891 c000 	ldrb.w	ip, [r1]
 80219aa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80219ae:	2800      	cmp	r0, #0
 80219b0:	d035      	beq.n	8021a1e <_scanf_i+0x15e>
 80219b2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80219b6:	d124      	bne.n	8021a02 <_scanf_i+0x142>
 80219b8:	0510      	lsls	r0, r2, #20
 80219ba:	d522      	bpl.n	8021a02 <_scanf_i+0x142>
 80219bc:	f10b 0b01 	add.w	fp, fp, #1
 80219c0:	f1b9 0f00 	cmp.w	r9, #0
 80219c4:	d003      	beq.n	80219ce <_scanf_i+0x10e>
 80219c6:	3301      	adds	r3, #1
 80219c8:	f109 39ff 	add.w	r9, r9, #4294967295
 80219cc:	60a3      	str	r3, [r4, #8]
 80219ce:	6873      	ldr	r3, [r6, #4]
 80219d0:	3b01      	subs	r3, #1
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	6073      	str	r3, [r6, #4]
 80219d6:	dd1b      	ble.n	8021a10 <_scanf_i+0x150>
 80219d8:	6833      	ldr	r3, [r6, #0]
 80219da:	3301      	adds	r3, #1
 80219dc:	6033      	str	r3, [r6, #0]
 80219de:	68a3      	ldr	r3, [r4, #8]
 80219e0:	3b01      	subs	r3, #1
 80219e2:	60a3      	str	r3, [r4, #8]
 80219e4:	e7d9      	b.n	802199a <_scanf_i+0xda>
 80219e6:	f1bb 0f02 	cmp.w	fp, #2
 80219ea:	d1ae      	bne.n	802194a <_scanf_i+0x8a>
 80219ec:	6822      	ldr	r2, [r4, #0]
 80219ee:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80219f2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80219f6:	d1c4      	bne.n	8021982 <_scanf_i+0xc2>
 80219f8:	2110      	movs	r1, #16
 80219fa:	6061      	str	r1, [r4, #4]
 80219fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8021a00:	e7a2      	b.n	8021948 <_scanf_i+0x88>
 8021a02:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8021a06:	6022      	str	r2, [r4, #0]
 8021a08:	780b      	ldrb	r3, [r1, #0]
 8021a0a:	f805 3b01 	strb.w	r3, [r5], #1
 8021a0e:	e7de      	b.n	80219ce <_scanf_i+0x10e>
 8021a10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8021a14:	4631      	mov	r1, r6
 8021a16:	4650      	mov	r0, sl
 8021a18:	4798      	blx	r3
 8021a1a:	2800      	cmp	r0, #0
 8021a1c:	d0df      	beq.n	80219de <_scanf_i+0x11e>
 8021a1e:	6823      	ldr	r3, [r4, #0]
 8021a20:	05d9      	lsls	r1, r3, #23
 8021a22:	d50d      	bpl.n	8021a40 <_scanf_i+0x180>
 8021a24:	42bd      	cmp	r5, r7
 8021a26:	d909      	bls.n	8021a3c <_scanf_i+0x17c>
 8021a28:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8021a2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8021a30:	4632      	mov	r2, r6
 8021a32:	4650      	mov	r0, sl
 8021a34:	4798      	blx	r3
 8021a36:	f105 39ff 	add.w	r9, r5, #4294967295
 8021a3a:	464d      	mov	r5, r9
 8021a3c:	42bd      	cmp	r5, r7
 8021a3e:	d028      	beq.n	8021a92 <_scanf_i+0x1d2>
 8021a40:	6822      	ldr	r2, [r4, #0]
 8021a42:	f012 0210 	ands.w	r2, r2, #16
 8021a46:	d113      	bne.n	8021a70 <_scanf_i+0x1b0>
 8021a48:	702a      	strb	r2, [r5, #0]
 8021a4a:	6863      	ldr	r3, [r4, #4]
 8021a4c:	9e01      	ldr	r6, [sp, #4]
 8021a4e:	4639      	mov	r1, r7
 8021a50:	4650      	mov	r0, sl
 8021a52:	47b0      	blx	r6
 8021a54:	f8d8 3000 	ldr.w	r3, [r8]
 8021a58:	6821      	ldr	r1, [r4, #0]
 8021a5a:	1d1a      	adds	r2, r3, #4
 8021a5c:	f8c8 2000 	str.w	r2, [r8]
 8021a60:	f011 0f20 	tst.w	r1, #32
 8021a64:	681b      	ldr	r3, [r3, #0]
 8021a66:	d00f      	beq.n	8021a88 <_scanf_i+0x1c8>
 8021a68:	6018      	str	r0, [r3, #0]
 8021a6a:	68e3      	ldr	r3, [r4, #12]
 8021a6c:	3301      	adds	r3, #1
 8021a6e:	60e3      	str	r3, [r4, #12]
 8021a70:	6923      	ldr	r3, [r4, #16]
 8021a72:	1bed      	subs	r5, r5, r7
 8021a74:	445d      	add	r5, fp
 8021a76:	442b      	add	r3, r5
 8021a78:	6123      	str	r3, [r4, #16]
 8021a7a:	2000      	movs	r0, #0
 8021a7c:	b007      	add	sp, #28
 8021a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a82:	f04f 0b00 	mov.w	fp, #0
 8021a86:	e7ca      	b.n	8021a1e <_scanf_i+0x15e>
 8021a88:	07ca      	lsls	r2, r1, #31
 8021a8a:	bf4c      	ite	mi
 8021a8c:	8018      	strhmi	r0, [r3, #0]
 8021a8e:	6018      	strpl	r0, [r3, #0]
 8021a90:	e7eb      	b.n	8021a6a <_scanf_i+0x1aa>
 8021a92:	2001      	movs	r0, #1
 8021a94:	e7f2      	b.n	8021a7c <_scanf_i+0x1bc>
 8021a96:	bf00      	nop
 8021a98:	08025fb0 	.word	0x08025fb0
 8021a9c:	0801d0c1 	.word	0x0801d0c1
 8021aa0:	0802118d 	.word	0x0802118d
 8021aa4:	0802628e 	.word	0x0802628e

08021aa8 <__sflush_r>:
 8021aa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ab0:	0716      	lsls	r6, r2, #28
 8021ab2:	4605      	mov	r5, r0
 8021ab4:	460c      	mov	r4, r1
 8021ab6:	d454      	bmi.n	8021b62 <__sflush_r+0xba>
 8021ab8:	684b      	ldr	r3, [r1, #4]
 8021aba:	2b00      	cmp	r3, #0
 8021abc:	dc02      	bgt.n	8021ac4 <__sflush_r+0x1c>
 8021abe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021ac0:	2b00      	cmp	r3, #0
 8021ac2:	dd48      	ble.n	8021b56 <__sflush_r+0xae>
 8021ac4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021ac6:	2e00      	cmp	r6, #0
 8021ac8:	d045      	beq.n	8021b56 <__sflush_r+0xae>
 8021aca:	2300      	movs	r3, #0
 8021acc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021ad0:	682f      	ldr	r7, [r5, #0]
 8021ad2:	6a21      	ldr	r1, [r4, #32]
 8021ad4:	602b      	str	r3, [r5, #0]
 8021ad6:	d030      	beq.n	8021b3a <__sflush_r+0x92>
 8021ad8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021ada:	89a3      	ldrh	r3, [r4, #12]
 8021adc:	0759      	lsls	r1, r3, #29
 8021ade:	d505      	bpl.n	8021aec <__sflush_r+0x44>
 8021ae0:	6863      	ldr	r3, [r4, #4]
 8021ae2:	1ad2      	subs	r2, r2, r3
 8021ae4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021ae6:	b10b      	cbz	r3, 8021aec <__sflush_r+0x44>
 8021ae8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021aea:	1ad2      	subs	r2, r2, r3
 8021aec:	2300      	movs	r3, #0
 8021aee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021af0:	6a21      	ldr	r1, [r4, #32]
 8021af2:	4628      	mov	r0, r5
 8021af4:	47b0      	blx	r6
 8021af6:	1c43      	adds	r3, r0, #1
 8021af8:	89a3      	ldrh	r3, [r4, #12]
 8021afa:	d106      	bne.n	8021b0a <__sflush_r+0x62>
 8021afc:	6829      	ldr	r1, [r5, #0]
 8021afe:	291d      	cmp	r1, #29
 8021b00:	d82b      	bhi.n	8021b5a <__sflush_r+0xb2>
 8021b02:	4a2a      	ldr	r2, [pc, #168]	@ (8021bac <__sflush_r+0x104>)
 8021b04:	40ca      	lsrs	r2, r1
 8021b06:	07d6      	lsls	r6, r2, #31
 8021b08:	d527      	bpl.n	8021b5a <__sflush_r+0xb2>
 8021b0a:	2200      	movs	r2, #0
 8021b0c:	6062      	str	r2, [r4, #4]
 8021b0e:	04d9      	lsls	r1, r3, #19
 8021b10:	6922      	ldr	r2, [r4, #16]
 8021b12:	6022      	str	r2, [r4, #0]
 8021b14:	d504      	bpl.n	8021b20 <__sflush_r+0x78>
 8021b16:	1c42      	adds	r2, r0, #1
 8021b18:	d101      	bne.n	8021b1e <__sflush_r+0x76>
 8021b1a:	682b      	ldr	r3, [r5, #0]
 8021b1c:	b903      	cbnz	r3, 8021b20 <__sflush_r+0x78>
 8021b1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8021b20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021b22:	602f      	str	r7, [r5, #0]
 8021b24:	b1b9      	cbz	r1, 8021b56 <__sflush_r+0xae>
 8021b26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021b2a:	4299      	cmp	r1, r3
 8021b2c:	d002      	beq.n	8021b34 <__sflush_r+0x8c>
 8021b2e:	4628      	mov	r0, r5
 8021b30:	f7fe fa3a 	bl	801ffa8 <_free_r>
 8021b34:	2300      	movs	r3, #0
 8021b36:	6363      	str	r3, [r4, #52]	@ 0x34
 8021b38:	e00d      	b.n	8021b56 <__sflush_r+0xae>
 8021b3a:	2301      	movs	r3, #1
 8021b3c:	4628      	mov	r0, r5
 8021b3e:	47b0      	blx	r6
 8021b40:	4602      	mov	r2, r0
 8021b42:	1c50      	adds	r0, r2, #1
 8021b44:	d1c9      	bne.n	8021ada <__sflush_r+0x32>
 8021b46:	682b      	ldr	r3, [r5, #0]
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	d0c6      	beq.n	8021ada <__sflush_r+0x32>
 8021b4c:	2b1d      	cmp	r3, #29
 8021b4e:	d001      	beq.n	8021b54 <__sflush_r+0xac>
 8021b50:	2b16      	cmp	r3, #22
 8021b52:	d11e      	bne.n	8021b92 <__sflush_r+0xea>
 8021b54:	602f      	str	r7, [r5, #0]
 8021b56:	2000      	movs	r0, #0
 8021b58:	e022      	b.n	8021ba0 <__sflush_r+0xf8>
 8021b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021b5e:	b21b      	sxth	r3, r3
 8021b60:	e01b      	b.n	8021b9a <__sflush_r+0xf2>
 8021b62:	690f      	ldr	r7, [r1, #16]
 8021b64:	2f00      	cmp	r7, #0
 8021b66:	d0f6      	beq.n	8021b56 <__sflush_r+0xae>
 8021b68:	0793      	lsls	r3, r2, #30
 8021b6a:	680e      	ldr	r6, [r1, #0]
 8021b6c:	bf08      	it	eq
 8021b6e:	694b      	ldreq	r3, [r1, #20]
 8021b70:	600f      	str	r7, [r1, #0]
 8021b72:	bf18      	it	ne
 8021b74:	2300      	movne	r3, #0
 8021b76:	eba6 0807 	sub.w	r8, r6, r7
 8021b7a:	608b      	str	r3, [r1, #8]
 8021b7c:	f1b8 0f00 	cmp.w	r8, #0
 8021b80:	dde9      	ble.n	8021b56 <__sflush_r+0xae>
 8021b82:	6a21      	ldr	r1, [r4, #32]
 8021b84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021b86:	4643      	mov	r3, r8
 8021b88:	463a      	mov	r2, r7
 8021b8a:	4628      	mov	r0, r5
 8021b8c:	47b0      	blx	r6
 8021b8e:	2800      	cmp	r0, #0
 8021b90:	dc08      	bgt.n	8021ba4 <__sflush_r+0xfc>
 8021b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021b9a:	81a3      	strh	r3, [r4, #12]
 8021b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8021ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021ba4:	4407      	add	r7, r0
 8021ba6:	eba8 0800 	sub.w	r8, r8, r0
 8021baa:	e7e7      	b.n	8021b7c <__sflush_r+0xd4>
 8021bac:	20400001 	.word	0x20400001

08021bb0 <_fflush_r>:
 8021bb0:	b538      	push	{r3, r4, r5, lr}
 8021bb2:	690b      	ldr	r3, [r1, #16]
 8021bb4:	4605      	mov	r5, r0
 8021bb6:	460c      	mov	r4, r1
 8021bb8:	b913      	cbnz	r3, 8021bc0 <_fflush_r+0x10>
 8021bba:	2500      	movs	r5, #0
 8021bbc:	4628      	mov	r0, r5
 8021bbe:	bd38      	pop	{r3, r4, r5, pc}
 8021bc0:	b118      	cbz	r0, 8021bca <_fflush_r+0x1a>
 8021bc2:	6a03      	ldr	r3, [r0, #32]
 8021bc4:	b90b      	cbnz	r3, 8021bca <_fflush_r+0x1a>
 8021bc6:	f7fc f977 	bl	801deb8 <__sinit>
 8021bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021bce:	2b00      	cmp	r3, #0
 8021bd0:	d0f3      	beq.n	8021bba <_fflush_r+0xa>
 8021bd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021bd4:	07d0      	lsls	r0, r2, #31
 8021bd6:	d404      	bmi.n	8021be2 <_fflush_r+0x32>
 8021bd8:	0599      	lsls	r1, r3, #22
 8021bda:	d402      	bmi.n	8021be2 <_fflush_r+0x32>
 8021bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021bde:	f7fd fae7 	bl	801f1b0 <__retarget_lock_acquire_recursive>
 8021be2:	4628      	mov	r0, r5
 8021be4:	4621      	mov	r1, r4
 8021be6:	f7ff ff5f 	bl	8021aa8 <__sflush_r>
 8021bea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021bec:	07da      	lsls	r2, r3, #31
 8021bee:	4605      	mov	r5, r0
 8021bf0:	d4e4      	bmi.n	8021bbc <_fflush_r+0xc>
 8021bf2:	89a3      	ldrh	r3, [r4, #12]
 8021bf4:	059b      	lsls	r3, r3, #22
 8021bf6:	d4e1      	bmi.n	8021bbc <_fflush_r+0xc>
 8021bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021bfa:	f7fd fadb 	bl	801f1b4 <__retarget_lock_release_recursive>
 8021bfe:	e7dd      	b.n	8021bbc <_fflush_r+0xc>

08021c00 <fiprintf>:
 8021c00:	b40e      	push	{r1, r2, r3}
 8021c02:	b503      	push	{r0, r1, lr}
 8021c04:	4601      	mov	r1, r0
 8021c06:	ab03      	add	r3, sp, #12
 8021c08:	4805      	ldr	r0, [pc, #20]	@ (8021c20 <fiprintf+0x20>)
 8021c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8021c0e:	6800      	ldr	r0, [r0, #0]
 8021c10:	9301      	str	r3, [sp, #4]
 8021c12:	f000 f93d 	bl	8021e90 <_vfiprintf_r>
 8021c16:	b002      	add	sp, #8
 8021c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8021c1c:	b003      	add	sp, #12
 8021c1e:	4770      	bx	lr
 8021c20:	200001c0 	.word	0x200001c0

08021c24 <__sccl>:
 8021c24:	b570      	push	{r4, r5, r6, lr}
 8021c26:	780b      	ldrb	r3, [r1, #0]
 8021c28:	4604      	mov	r4, r0
 8021c2a:	2b5e      	cmp	r3, #94	@ 0x5e
 8021c2c:	bf0b      	itete	eq
 8021c2e:	784b      	ldrbeq	r3, [r1, #1]
 8021c30:	1c4a      	addne	r2, r1, #1
 8021c32:	1c8a      	addeq	r2, r1, #2
 8021c34:	2100      	movne	r1, #0
 8021c36:	bf08      	it	eq
 8021c38:	2101      	moveq	r1, #1
 8021c3a:	3801      	subs	r0, #1
 8021c3c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8021c40:	f800 1f01 	strb.w	r1, [r0, #1]!
 8021c44:	42a8      	cmp	r0, r5
 8021c46:	d1fb      	bne.n	8021c40 <__sccl+0x1c>
 8021c48:	b90b      	cbnz	r3, 8021c4e <__sccl+0x2a>
 8021c4a:	1e50      	subs	r0, r2, #1
 8021c4c:	bd70      	pop	{r4, r5, r6, pc}
 8021c4e:	f081 0101 	eor.w	r1, r1, #1
 8021c52:	54e1      	strb	r1, [r4, r3]
 8021c54:	4610      	mov	r0, r2
 8021c56:	4602      	mov	r2, r0
 8021c58:	f812 5b01 	ldrb.w	r5, [r2], #1
 8021c5c:	2d2d      	cmp	r5, #45	@ 0x2d
 8021c5e:	d005      	beq.n	8021c6c <__sccl+0x48>
 8021c60:	2d5d      	cmp	r5, #93	@ 0x5d
 8021c62:	d016      	beq.n	8021c92 <__sccl+0x6e>
 8021c64:	2d00      	cmp	r5, #0
 8021c66:	d0f1      	beq.n	8021c4c <__sccl+0x28>
 8021c68:	462b      	mov	r3, r5
 8021c6a:	e7f2      	b.n	8021c52 <__sccl+0x2e>
 8021c6c:	7846      	ldrb	r6, [r0, #1]
 8021c6e:	2e5d      	cmp	r6, #93	@ 0x5d
 8021c70:	d0fa      	beq.n	8021c68 <__sccl+0x44>
 8021c72:	42b3      	cmp	r3, r6
 8021c74:	dcf8      	bgt.n	8021c68 <__sccl+0x44>
 8021c76:	3002      	adds	r0, #2
 8021c78:	461a      	mov	r2, r3
 8021c7a:	3201      	adds	r2, #1
 8021c7c:	4296      	cmp	r6, r2
 8021c7e:	54a1      	strb	r1, [r4, r2]
 8021c80:	dcfb      	bgt.n	8021c7a <__sccl+0x56>
 8021c82:	1af2      	subs	r2, r6, r3
 8021c84:	3a01      	subs	r2, #1
 8021c86:	1c5d      	adds	r5, r3, #1
 8021c88:	42b3      	cmp	r3, r6
 8021c8a:	bfa8      	it	ge
 8021c8c:	2200      	movge	r2, #0
 8021c8e:	18ab      	adds	r3, r5, r2
 8021c90:	e7e1      	b.n	8021c56 <__sccl+0x32>
 8021c92:	4610      	mov	r0, r2
 8021c94:	e7da      	b.n	8021c4c <__sccl+0x28>

08021c96 <__submore>:
 8021c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c9a:	460c      	mov	r4, r1
 8021c9c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8021c9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021ca2:	4299      	cmp	r1, r3
 8021ca4:	d11d      	bne.n	8021ce2 <__submore+0x4c>
 8021ca6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8021caa:	f7fa faed 	bl	801c288 <_malloc_r>
 8021cae:	b918      	cbnz	r0, 8021cb8 <__submore+0x22>
 8021cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8021cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021cb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021cbc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8021cbe:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8021cc2:	6360      	str	r0, [r4, #52]	@ 0x34
 8021cc4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8021cc8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8021ccc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8021cd0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8021cd4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8021cd8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8021cdc:	6020      	str	r0, [r4, #0]
 8021cde:	2000      	movs	r0, #0
 8021ce0:	e7e8      	b.n	8021cb4 <__submore+0x1e>
 8021ce2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8021ce4:	0077      	lsls	r7, r6, #1
 8021ce6:	463a      	mov	r2, r7
 8021ce8:	f000 f87a 	bl	8021de0 <_realloc_r>
 8021cec:	4605      	mov	r5, r0
 8021cee:	2800      	cmp	r0, #0
 8021cf0:	d0de      	beq.n	8021cb0 <__submore+0x1a>
 8021cf2:	eb00 0806 	add.w	r8, r0, r6
 8021cf6:	4601      	mov	r1, r0
 8021cf8:	4632      	mov	r2, r6
 8021cfa:	4640      	mov	r0, r8
 8021cfc:	f7fd fa63 	bl	801f1c6 <memcpy>
 8021d00:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8021d04:	f8c4 8000 	str.w	r8, [r4]
 8021d08:	e7e9      	b.n	8021cde <__submore+0x48>

08021d0a <memmove>:
 8021d0a:	4288      	cmp	r0, r1
 8021d0c:	b510      	push	{r4, lr}
 8021d0e:	eb01 0402 	add.w	r4, r1, r2
 8021d12:	d902      	bls.n	8021d1a <memmove+0x10>
 8021d14:	4284      	cmp	r4, r0
 8021d16:	4623      	mov	r3, r4
 8021d18:	d807      	bhi.n	8021d2a <memmove+0x20>
 8021d1a:	1e43      	subs	r3, r0, #1
 8021d1c:	42a1      	cmp	r1, r4
 8021d1e:	d008      	beq.n	8021d32 <memmove+0x28>
 8021d20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021d24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021d28:	e7f8      	b.n	8021d1c <memmove+0x12>
 8021d2a:	4402      	add	r2, r0
 8021d2c:	4601      	mov	r1, r0
 8021d2e:	428a      	cmp	r2, r1
 8021d30:	d100      	bne.n	8021d34 <memmove+0x2a>
 8021d32:	bd10      	pop	{r4, pc}
 8021d34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021d38:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021d3c:	e7f7      	b.n	8021d2e <memmove+0x24>
	...

08021d40 <__gettzinfo>:
 8021d40:	4800      	ldr	r0, [pc, #0]	@ (8021d44 <__gettzinfo+0x4>)
 8021d42:	4770      	bx	lr
 8021d44:	20000210 	.word	0x20000210

08021d48 <__fpclassifyd>:
 8021d48:	ec51 0b10 	vmov	r0, r1, d0
 8021d4c:	460b      	mov	r3, r1
 8021d4e:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8021d52:	b510      	push	{r4, lr}
 8021d54:	d104      	bne.n	8021d60 <__fpclassifyd+0x18>
 8021d56:	2800      	cmp	r0, #0
 8021d58:	bf0c      	ite	eq
 8021d5a:	2002      	moveq	r0, #2
 8021d5c:	2003      	movne	r0, #3
 8021d5e:	bd10      	pop	{r4, pc}
 8021d60:	4a09      	ldr	r2, [pc, #36]	@ (8021d88 <__fpclassifyd+0x40>)
 8021d62:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8021d66:	4294      	cmp	r4, r2
 8021d68:	d908      	bls.n	8021d7c <__fpclassifyd+0x34>
 8021d6a:	4a08      	ldr	r2, [pc, #32]	@ (8021d8c <__fpclassifyd+0x44>)
 8021d6c:	4213      	tst	r3, r2
 8021d6e:	d007      	beq.n	8021d80 <__fpclassifyd+0x38>
 8021d70:	4291      	cmp	r1, r2
 8021d72:	d107      	bne.n	8021d84 <__fpclassifyd+0x3c>
 8021d74:	fab0 f080 	clz	r0, r0
 8021d78:	0940      	lsrs	r0, r0, #5
 8021d7a:	e7f0      	b.n	8021d5e <__fpclassifyd+0x16>
 8021d7c:	2004      	movs	r0, #4
 8021d7e:	e7ee      	b.n	8021d5e <__fpclassifyd+0x16>
 8021d80:	2003      	movs	r0, #3
 8021d82:	e7ec      	b.n	8021d5e <__fpclassifyd+0x16>
 8021d84:	2000      	movs	r0, #0
 8021d86:	e7ea      	b.n	8021d5e <__fpclassifyd+0x16>
 8021d88:	7fdfffff 	.word	0x7fdfffff
 8021d8c:	7ff00000 	.word	0x7ff00000

08021d90 <abort>:
 8021d90:	b508      	push	{r3, lr}
 8021d92:	2006      	movs	r0, #6
 8021d94:	f000 fa50 	bl	8022238 <raise>
 8021d98:	2001      	movs	r0, #1
 8021d9a:	f7e1 fa03 	bl	80031a4 <_exit>

08021d9e <_calloc_r>:
 8021d9e:	b570      	push	{r4, r5, r6, lr}
 8021da0:	fba1 5402 	umull	r5, r4, r1, r2
 8021da4:	b934      	cbnz	r4, 8021db4 <_calloc_r+0x16>
 8021da6:	4629      	mov	r1, r5
 8021da8:	f7fa fa6e 	bl	801c288 <_malloc_r>
 8021dac:	4606      	mov	r6, r0
 8021dae:	b928      	cbnz	r0, 8021dbc <_calloc_r+0x1e>
 8021db0:	4630      	mov	r0, r6
 8021db2:	bd70      	pop	{r4, r5, r6, pc}
 8021db4:	220c      	movs	r2, #12
 8021db6:	6002      	str	r2, [r0, #0]
 8021db8:	2600      	movs	r6, #0
 8021dba:	e7f9      	b.n	8021db0 <_calloc_r+0x12>
 8021dbc:	462a      	mov	r2, r5
 8021dbe:	4621      	mov	r1, r4
 8021dc0:	f7fc f979 	bl	801e0b6 <memset>
 8021dc4:	e7f4      	b.n	8021db0 <_calloc_r+0x12>
	...

08021dc8 <__env_lock>:
 8021dc8:	4801      	ldr	r0, [pc, #4]	@ (8021dd0 <__env_lock+0x8>)
 8021dca:	f7fd b9f1 	b.w	801f1b0 <__retarget_lock_acquire_recursive>
 8021dce:	bf00      	nop
 8021dd0:	200066c9 	.word	0x200066c9

08021dd4 <__env_unlock>:
 8021dd4:	4801      	ldr	r0, [pc, #4]	@ (8021ddc <__env_unlock+0x8>)
 8021dd6:	f7fd b9ed 	b.w	801f1b4 <__retarget_lock_release_recursive>
 8021dda:	bf00      	nop
 8021ddc:	200066c9 	.word	0x200066c9

08021de0 <_realloc_r>:
 8021de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021de4:	4607      	mov	r7, r0
 8021de6:	4614      	mov	r4, r2
 8021de8:	460d      	mov	r5, r1
 8021dea:	b921      	cbnz	r1, 8021df6 <_realloc_r+0x16>
 8021dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021df0:	4611      	mov	r1, r2
 8021df2:	f7fa ba49 	b.w	801c288 <_malloc_r>
 8021df6:	b92a      	cbnz	r2, 8021e04 <_realloc_r+0x24>
 8021df8:	f7fe f8d6 	bl	801ffa8 <_free_r>
 8021dfc:	4625      	mov	r5, r4
 8021dfe:	4628      	mov	r0, r5
 8021e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021e04:	f000 fa34 	bl	8022270 <_malloc_usable_size_r>
 8021e08:	4284      	cmp	r4, r0
 8021e0a:	4606      	mov	r6, r0
 8021e0c:	d802      	bhi.n	8021e14 <_realloc_r+0x34>
 8021e0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8021e12:	d8f4      	bhi.n	8021dfe <_realloc_r+0x1e>
 8021e14:	4621      	mov	r1, r4
 8021e16:	4638      	mov	r0, r7
 8021e18:	f7fa fa36 	bl	801c288 <_malloc_r>
 8021e1c:	4680      	mov	r8, r0
 8021e1e:	b908      	cbnz	r0, 8021e24 <_realloc_r+0x44>
 8021e20:	4645      	mov	r5, r8
 8021e22:	e7ec      	b.n	8021dfe <_realloc_r+0x1e>
 8021e24:	42b4      	cmp	r4, r6
 8021e26:	4622      	mov	r2, r4
 8021e28:	4629      	mov	r1, r5
 8021e2a:	bf28      	it	cs
 8021e2c:	4632      	movcs	r2, r6
 8021e2e:	f7fd f9ca 	bl	801f1c6 <memcpy>
 8021e32:	4629      	mov	r1, r5
 8021e34:	4638      	mov	r0, r7
 8021e36:	f7fe f8b7 	bl	801ffa8 <_free_r>
 8021e3a:	e7f1      	b.n	8021e20 <_realloc_r+0x40>

08021e3c <__sfputc_r>:
 8021e3c:	6893      	ldr	r3, [r2, #8]
 8021e3e:	3b01      	subs	r3, #1
 8021e40:	2b00      	cmp	r3, #0
 8021e42:	b410      	push	{r4}
 8021e44:	6093      	str	r3, [r2, #8]
 8021e46:	da08      	bge.n	8021e5a <__sfputc_r+0x1e>
 8021e48:	6994      	ldr	r4, [r2, #24]
 8021e4a:	42a3      	cmp	r3, r4
 8021e4c:	db01      	blt.n	8021e52 <__sfputc_r+0x16>
 8021e4e:	290a      	cmp	r1, #10
 8021e50:	d103      	bne.n	8021e5a <__sfputc_r+0x1e>
 8021e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021e56:	f000 b933 	b.w	80220c0 <__swbuf_r>
 8021e5a:	6813      	ldr	r3, [r2, #0]
 8021e5c:	1c58      	adds	r0, r3, #1
 8021e5e:	6010      	str	r0, [r2, #0]
 8021e60:	7019      	strb	r1, [r3, #0]
 8021e62:	4608      	mov	r0, r1
 8021e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021e68:	4770      	bx	lr

08021e6a <__sfputs_r>:
 8021e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e6c:	4606      	mov	r6, r0
 8021e6e:	460f      	mov	r7, r1
 8021e70:	4614      	mov	r4, r2
 8021e72:	18d5      	adds	r5, r2, r3
 8021e74:	42ac      	cmp	r4, r5
 8021e76:	d101      	bne.n	8021e7c <__sfputs_r+0x12>
 8021e78:	2000      	movs	r0, #0
 8021e7a:	e007      	b.n	8021e8c <__sfputs_r+0x22>
 8021e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021e80:	463a      	mov	r2, r7
 8021e82:	4630      	mov	r0, r6
 8021e84:	f7ff ffda 	bl	8021e3c <__sfputc_r>
 8021e88:	1c43      	adds	r3, r0, #1
 8021e8a:	d1f3      	bne.n	8021e74 <__sfputs_r+0xa>
 8021e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021e90 <_vfiprintf_r>:
 8021e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e94:	460d      	mov	r5, r1
 8021e96:	b09d      	sub	sp, #116	@ 0x74
 8021e98:	4614      	mov	r4, r2
 8021e9a:	4698      	mov	r8, r3
 8021e9c:	4606      	mov	r6, r0
 8021e9e:	b118      	cbz	r0, 8021ea8 <_vfiprintf_r+0x18>
 8021ea0:	6a03      	ldr	r3, [r0, #32]
 8021ea2:	b90b      	cbnz	r3, 8021ea8 <_vfiprintf_r+0x18>
 8021ea4:	f7fc f808 	bl	801deb8 <__sinit>
 8021ea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021eaa:	07d9      	lsls	r1, r3, #31
 8021eac:	d405      	bmi.n	8021eba <_vfiprintf_r+0x2a>
 8021eae:	89ab      	ldrh	r3, [r5, #12]
 8021eb0:	059a      	lsls	r2, r3, #22
 8021eb2:	d402      	bmi.n	8021eba <_vfiprintf_r+0x2a>
 8021eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021eb6:	f7fd f97b 	bl	801f1b0 <__retarget_lock_acquire_recursive>
 8021eba:	89ab      	ldrh	r3, [r5, #12]
 8021ebc:	071b      	lsls	r3, r3, #28
 8021ebe:	d501      	bpl.n	8021ec4 <_vfiprintf_r+0x34>
 8021ec0:	692b      	ldr	r3, [r5, #16]
 8021ec2:	b99b      	cbnz	r3, 8021eec <_vfiprintf_r+0x5c>
 8021ec4:	4629      	mov	r1, r5
 8021ec6:	4630      	mov	r0, r6
 8021ec8:	f000 f938 	bl	802213c <__swsetup_r>
 8021ecc:	b170      	cbz	r0, 8021eec <_vfiprintf_r+0x5c>
 8021ece:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021ed0:	07dc      	lsls	r4, r3, #31
 8021ed2:	d504      	bpl.n	8021ede <_vfiprintf_r+0x4e>
 8021ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8021ed8:	b01d      	add	sp, #116	@ 0x74
 8021eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ede:	89ab      	ldrh	r3, [r5, #12]
 8021ee0:	0598      	lsls	r0, r3, #22
 8021ee2:	d4f7      	bmi.n	8021ed4 <_vfiprintf_r+0x44>
 8021ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021ee6:	f7fd f965 	bl	801f1b4 <__retarget_lock_release_recursive>
 8021eea:	e7f3      	b.n	8021ed4 <_vfiprintf_r+0x44>
 8021eec:	2300      	movs	r3, #0
 8021eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ef0:	2320      	movs	r3, #32
 8021ef2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8021efa:	2330      	movs	r3, #48	@ 0x30
 8021efc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80220ac <_vfiprintf_r+0x21c>
 8021f00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021f04:	f04f 0901 	mov.w	r9, #1
 8021f08:	4623      	mov	r3, r4
 8021f0a:	469a      	mov	sl, r3
 8021f0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021f10:	b10a      	cbz	r2, 8021f16 <_vfiprintf_r+0x86>
 8021f12:	2a25      	cmp	r2, #37	@ 0x25
 8021f14:	d1f9      	bne.n	8021f0a <_vfiprintf_r+0x7a>
 8021f16:	ebba 0b04 	subs.w	fp, sl, r4
 8021f1a:	d00b      	beq.n	8021f34 <_vfiprintf_r+0xa4>
 8021f1c:	465b      	mov	r3, fp
 8021f1e:	4622      	mov	r2, r4
 8021f20:	4629      	mov	r1, r5
 8021f22:	4630      	mov	r0, r6
 8021f24:	f7ff ffa1 	bl	8021e6a <__sfputs_r>
 8021f28:	3001      	adds	r0, #1
 8021f2a:	f000 80a7 	beq.w	802207c <_vfiprintf_r+0x1ec>
 8021f2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021f30:	445a      	add	r2, fp
 8021f32:	9209      	str	r2, [sp, #36]	@ 0x24
 8021f34:	f89a 3000 	ldrb.w	r3, [sl]
 8021f38:	2b00      	cmp	r3, #0
 8021f3a:	f000 809f 	beq.w	802207c <_vfiprintf_r+0x1ec>
 8021f3e:	2300      	movs	r3, #0
 8021f40:	f04f 32ff 	mov.w	r2, #4294967295
 8021f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021f48:	f10a 0a01 	add.w	sl, sl, #1
 8021f4c:	9304      	str	r3, [sp, #16]
 8021f4e:	9307      	str	r3, [sp, #28]
 8021f50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021f54:	931a      	str	r3, [sp, #104]	@ 0x68
 8021f56:	4654      	mov	r4, sl
 8021f58:	2205      	movs	r2, #5
 8021f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021f5e:	4853      	ldr	r0, [pc, #332]	@ (80220ac <_vfiprintf_r+0x21c>)
 8021f60:	f7de f946 	bl	80001f0 <memchr>
 8021f64:	9a04      	ldr	r2, [sp, #16]
 8021f66:	b9d8      	cbnz	r0, 8021fa0 <_vfiprintf_r+0x110>
 8021f68:	06d1      	lsls	r1, r2, #27
 8021f6a:	bf44      	itt	mi
 8021f6c:	2320      	movmi	r3, #32
 8021f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021f72:	0713      	lsls	r3, r2, #28
 8021f74:	bf44      	itt	mi
 8021f76:	232b      	movmi	r3, #43	@ 0x2b
 8021f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8021f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8021f82:	d015      	beq.n	8021fb0 <_vfiprintf_r+0x120>
 8021f84:	9a07      	ldr	r2, [sp, #28]
 8021f86:	4654      	mov	r4, sl
 8021f88:	2000      	movs	r0, #0
 8021f8a:	f04f 0c0a 	mov.w	ip, #10
 8021f8e:	4621      	mov	r1, r4
 8021f90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021f94:	3b30      	subs	r3, #48	@ 0x30
 8021f96:	2b09      	cmp	r3, #9
 8021f98:	d94b      	bls.n	8022032 <_vfiprintf_r+0x1a2>
 8021f9a:	b1b0      	cbz	r0, 8021fca <_vfiprintf_r+0x13a>
 8021f9c:	9207      	str	r2, [sp, #28]
 8021f9e:	e014      	b.n	8021fca <_vfiprintf_r+0x13a>
 8021fa0:	eba0 0308 	sub.w	r3, r0, r8
 8021fa4:	fa09 f303 	lsl.w	r3, r9, r3
 8021fa8:	4313      	orrs	r3, r2
 8021faa:	9304      	str	r3, [sp, #16]
 8021fac:	46a2      	mov	sl, r4
 8021fae:	e7d2      	b.n	8021f56 <_vfiprintf_r+0xc6>
 8021fb0:	9b03      	ldr	r3, [sp, #12]
 8021fb2:	1d19      	adds	r1, r3, #4
 8021fb4:	681b      	ldr	r3, [r3, #0]
 8021fb6:	9103      	str	r1, [sp, #12]
 8021fb8:	2b00      	cmp	r3, #0
 8021fba:	bfbb      	ittet	lt
 8021fbc:	425b      	neglt	r3, r3
 8021fbe:	f042 0202 	orrlt.w	r2, r2, #2
 8021fc2:	9307      	strge	r3, [sp, #28]
 8021fc4:	9307      	strlt	r3, [sp, #28]
 8021fc6:	bfb8      	it	lt
 8021fc8:	9204      	strlt	r2, [sp, #16]
 8021fca:	7823      	ldrb	r3, [r4, #0]
 8021fcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8021fce:	d10a      	bne.n	8021fe6 <_vfiprintf_r+0x156>
 8021fd0:	7863      	ldrb	r3, [r4, #1]
 8021fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8021fd4:	d132      	bne.n	802203c <_vfiprintf_r+0x1ac>
 8021fd6:	9b03      	ldr	r3, [sp, #12]
 8021fd8:	1d1a      	adds	r2, r3, #4
 8021fda:	681b      	ldr	r3, [r3, #0]
 8021fdc:	9203      	str	r2, [sp, #12]
 8021fde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021fe2:	3402      	adds	r4, #2
 8021fe4:	9305      	str	r3, [sp, #20]
 8021fe6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80220bc <_vfiprintf_r+0x22c>
 8021fea:	7821      	ldrb	r1, [r4, #0]
 8021fec:	2203      	movs	r2, #3
 8021fee:	4650      	mov	r0, sl
 8021ff0:	f7de f8fe 	bl	80001f0 <memchr>
 8021ff4:	b138      	cbz	r0, 8022006 <_vfiprintf_r+0x176>
 8021ff6:	9b04      	ldr	r3, [sp, #16]
 8021ff8:	eba0 000a 	sub.w	r0, r0, sl
 8021ffc:	2240      	movs	r2, #64	@ 0x40
 8021ffe:	4082      	lsls	r2, r0
 8022000:	4313      	orrs	r3, r2
 8022002:	3401      	adds	r4, #1
 8022004:	9304      	str	r3, [sp, #16]
 8022006:	f814 1b01 	ldrb.w	r1, [r4], #1
 802200a:	4829      	ldr	r0, [pc, #164]	@ (80220b0 <_vfiprintf_r+0x220>)
 802200c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022010:	2206      	movs	r2, #6
 8022012:	f7de f8ed 	bl	80001f0 <memchr>
 8022016:	2800      	cmp	r0, #0
 8022018:	d03f      	beq.n	802209a <_vfiprintf_r+0x20a>
 802201a:	4b26      	ldr	r3, [pc, #152]	@ (80220b4 <_vfiprintf_r+0x224>)
 802201c:	bb1b      	cbnz	r3, 8022066 <_vfiprintf_r+0x1d6>
 802201e:	9b03      	ldr	r3, [sp, #12]
 8022020:	3307      	adds	r3, #7
 8022022:	f023 0307 	bic.w	r3, r3, #7
 8022026:	3308      	adds	r3, #8
 8022028:	9303      	str	r3, [sp, #12]
 802202a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802202c:	443b      	add	r3, r7
 802202e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022030:	e76a      	b.n	8021f08 <_vfiprintf_r+0x78>
 8022032:	fb0c 3202 	mla	r2, ip, r2, r3
 8022036:	460c      	mov	r4, r1
 8022038:	2001      	movs	r0, #1
 802203a:	e7a8      	b.n	8021f8e <_vfiprintf_r+0xfe>
 802203c:	2300      	movs	r3, #0
 802203e:	3401      	adds	r4, #1
 8022040:	9305      	str	r3, [sp, #20]
 8022042:	4619      	mov	r1, r3
 8022044:	f04f 0c0a 	mov.w	ip, #10
 8022048:	4620      	mov	r0, r4
 802204a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802204e:	3a30      	subs	r2, #48	@ 0x30
 8022050:	2a09      	cmp	r2, #9
 8022052:	d903      	bls.n	802205c <_vfiprintf_r+0x1cc>
 8022054:	2b00      	cmp	r3, #0
 8022056:	d0c6      	beq.n	8021fe6 <_vfiprintf_r+0x156>
 8022058:	9105      	str	r1, [sp, #20]
 802205a:	e7c4      	b.n	8021fe6 <_vfiprintf_r+0x156>
 802205c:	fb0c 2101 	mla	r1, ip, r1, r2
 8022060:	4604      	mov	r4, r0
 8022062:	2301      	movs	r3, #1
 8022064:	e7f0      	b.n	8022048 <_vfiprintf_r+0x1b8>
 8022066:	ab03      	add	r3, sp, #12
 8022068:	9300      	str	r3, [sp, #0]
 802206a:	462a      	mov	r2, r5
 802206c:	4b12      	ldr	r3, [pc, #72]	@ (80220b8 <_vfiprintf_r+0x228>)
 802206e:	a904      	add	r1, sp, #16
 8022070:	4630      	mov	r0, r6
 8022072:	f7fb f8d1 	bl	801d218 <_printf_float>
 8022076:	4607      	mov	r7, r0
 8022078:	1c78      	adds	r0, r7, #1
 802207a:	d1d6      	bne.n	802202a <_vfiprintf_r+0x19a>
 802207c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802207e:	07d9      	lsls	r1, r3, #31
 8022080:	d405      	bmi.n	802208e <_vfiprintf_r+0x1fe>
 8022082:	89ab      	ldrh	r3, [r5, #12]
 8022084:	059a      	lsls	r2, r3, #22
 8022086:	d402      	bmi.n	802208e <_vfiprintf_r+0x1fe>
 8022088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802208a:	f7fd f893 	bl	801f1b4 <__retarget_lock_release_recursive>
 802208e:	89ab      	ldrh	r3, [r5, #12]
 8022090:	065b      	lsls	r3, r3, #25
 8022092:	f53f af1f 	bmi.w	8021ed4 <_vfiprintf_r+0x44>
 8022096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022098:	e71e      	b.n	8021ed8 <_vfiprintf_r+0x48>
 802209a:	ab03      	add	r3, sp, #12
 802209c:	9300      	str	r3, [sp, #0]
 802209e:	462a      	mov	r2, r5
 80220a0:	4b05      	ldr	r3, [pc, #20]	@ (80220b8 <_vfiprintf_r+0x228>)
 80220a2:	a904      	add	r1, sp, #16
 80220a4:	4630      	mov	r0, r6
 80220a6:	f7fb fb4f 	bl	801d748 <_printf_i>
 80220aa:	e7e4      	b.n	8022076 <_vfiprintf_r+0x1e6>
 80220ac:	0802626d 	.word	0x0802626d
 80220b0:	08026277 	.word	0x08026277
 80220b4:	0801d219 	.word	0x0801d219
 80220b8:	08021e6b 	.word	0x08021e6b
 80220bc:	08026273 	.word	0x08026273

080220c0 <__swbuf_r>:
 80220c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80220c2:	460e      	mov	r6, r1
 80220c4:	4614      	mov	r4, r2
 80220c6:	4605      	mov	r5, r0
 80220c8:	b118      	cbz	r0, 80220d2 <__swbuf_r+0x12>
 80220ca:	6a03      	ldr	r3, [r0, #32]
 80220cc:	b90b      	cbnz	r3, 80220d2 <__swbuf_r+0x12>
 80220ce:	f7fb fef3 	bl	801deb8 <__sinit>
 80220d2:	69a3      	ldr	r3, [r4, #24]
 80220d4:	60a3      	str	r3, [r4, #8]
 80220d6:	89a3      	ldrh	r3, [r4, #12]
 80220d8:	071a      	lsls	r2, r3, #28
 80220da:	d501      	bpl.n	80220e0 <__swbuf_r+0x20>
 80220dc:	6923      	ldr	r3, [r4, #16]
 80220de:	b943      	cbnz	r3, 80220f2 <__swbuf_r+0x32>
 80220e0:	4621      	mov	r1, r4
 80220e2:	4628      	mov	r0, r5
 80220e4:	f000 f82a 	bl	802213c <__swsetup_r>
 80220e8:	b118      	cbz	r0, 80220f2 <__swbuf_r+0x32>
 80220ea:	f04f 37ff 	mov.w	r7, #4294967295
 80220ee:	4638      	mov	r0, r7
 80220f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80220f2:	6823      	ldr	r3, [r4, #0]
 80220f4:	6922      	ldr	r2, [r4, #16]
 80220f6:	1a98      	subs	r0, r3, r2
 80220f8:	6963      	ldr	r3, [r4, #20]
 80220fa:	b2f6      	uxtb	r6, r6
 80220fc:	4283      	cmp	r3, r0
 80220fe:	4637      	mov	r7, r6
 8022100:	dc05      	bgt.n	802210e <__swbuf_r+0x4e>
 8022102:	4621      	mov	r1, r4
 8022104:	4628      	mov	r0, r5
 8022106:	f7ff fd53 	bl	8021bb0 <_fflush_r>
 802210a:	2800      	cmp	r0, #0
 802210c:	d1ed      	bne.n	80220ea <__swbuf_r+0x2a>
 802210e:	68a3      	ldr	r3, [r4, #8]
 8022110:	3b01      	subs	r3, #1
 8022112:	60a3      	str	r3, [r4, #8]
 8022114:	6823      	ldr	r3, [r4, #0]
 8022116:	1c5a      	adds	r2, r3, #1
 8022118:	6022      	str	r2, [r4, #0]
 802211a:	701e      	strb	r6, [r3, #0]
 802211c:	6962      	ldr	r2, [r4, #20]
 802211e:	1c43      	adds	r3, r0, #1
 8022120:	429a      	cmp	r2, r3
 8022122:	d004      	beq.n	802212e <__swbuf_r+0x6e>
 8022124:	89a3      	ldrh	r3, [r4, #12]
 8022126:	07db      	lsls	r3, r3, #31
 8022128:	d5e1      	bpl.n	80220ee <__swbuf_r+0x2e>
 802212a:	2e0a      	cmp	r6, #10
 802212c:	d1df      	bne.n	80220ee <__swbuf_r+0x2e>
 802212e:	4621      	mov	r1, r4
 8022130:	4628      	mov	r0, r5
 8022132:	f7ff fd3d 	bl	8021bb0 <_fflush_r>
 8022136:	2800      	cmp	r0, #0
 8022138:	d0d9      	beq.n	80220ee <__swbuf_r+0x2e>
 802213a:	e7d6      	b.n	80220ea <__swbuf_r+0x2a>

0802213c <__swsetup_r>:
 802213c:	b538      	push	{r3, r4, r5, lr}
 802213e:	4b29      	ldr	r3, [pc, #164]	@ (80221e4 <__swsetup_r+0xa8>)
 8022140:	4605      	mov	r5, r0
 8022142:	6818      	ldr	r0, [r3, #0]
 8022144:	460c      	mov	r4, r1
 8022146:	b118      	cbz	r0, 8022150 <__swsetup_r+0x14>
 8022148:	6a03      	ldr	r3, [r0, #32]
 802214a:	b90b      	cbnz	r3, 8022150 <__swsetup_r+0x14>
 802214c:	f7fb feb4 	bl	801deb8 <__sinit>
 8022150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022154:	0719      	lsls	r1, r3, #28
 8022156:	d422      	bmi.n	802219e <__swsetup_r+0x62>
 8022158:	06da      	lsls	r2, r3, #27
 802215a:	d407      	bmi.n	802216c <__swsetup_r+0x30>
 802215c:	2209      	movs	r2, #9
 802215e:	602a      	str	r2, [r5, #0]
 8022160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022164:	81a3      	strh	r3, [r4, #12]
 8022166:	f04f 30ff 	mov.w	r0, #4294967295
 802216a:	e033      	b.n	80221d4 <__swsetup_r+0x98>
 802216c:	0758      	lsls	r0, r3, #29
 802216e:	d512      	bpl.n	8022196 <__swsetup_r+0x5a>
 8022170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022172:	b141      	cbz	r1, 8022186 <__swsetup_r+0x4a>
 8022174:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022178:	4299      	cmp	r1, r3
 802217a:	d002      	beq.n	8022182 <__swsetup_r+0x46>
 802217c:	4628      	mov	r0, r5
 802217e:	f7fd ff13 	bl	801ffa8 <_free_r>
 8022182:	2300      	movs	r3, #0
 8022184:	6363      	str	r3, [r4, #52]	@ 0x34
 8022186:	89a3      	ldrh	r3, [r4, #12]
 8022188:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802218c:	81a3      	strh	r3, [r4, #12]
 802218e:	2300      	movs	r3, #0
 8022190:	6063      	str	r3, [r4, #4]
 8022192:	6923      	ldr	r3, [r4, #16]
 8022194:	6023      	str	r3, [r4, #0]
 8022196:	89a3      	ldrh	r3, [r4, #12]
 8022198:	f043 0308 	orr.w	r3, r3, #8
 802219c:	81a3      	strh	r3, [r4, #12]
 802219e:	6923      	ldr	r3, [r4, #16]
 80221a0:	b94b      	cbnz	r3, 80221b6 <__swsetup_r+0x7a>
 80221a2:	89a3      	ldrh	r3, [r4, #12]
 80221a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80221a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80221ac:	d003      	beq.n	80221b6 <__swsetup_r+0x7a>
 80221ae:	4621      	mov	r1, r4
 80221b0:	4628      	mov	r0, r5
 80221b2:	f000 f88b 	bl	80222cc <__smakebuf_r>
 80221b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80221ba:	f013 0201 	ands.w	r2, r3, #1
 80221be:	d00a      	beq.n	80221d6 <__swsetup_r+0x9a>
 80221c0:	2200      	movs	r2, #0
 80221c2:	60a2      	str	r2, [r4, #8]
 80221c4:	6962      	ldr	r2, [r4, #20]
 80221c6:	4252      	negs	r2, r2
 80221c8:	61a2      	str	r2, [r4, #24]
 80221ca:	6922      	ldr	r2, [r4, #16]
 80221cc:	b942      	cbnz	r2, 80221e0 <__swsetup_r+0xa4>
 80221ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80221d2:	d1c5      	bne.n	8022160 <__swsetup_r+0x24>
 80221d4:	bd38      	pop	{r3, r4, r5, pc}
 80221d6:	0799      	lsls	r1, r3, #30
 80221d8:	bf58      	it	pl
 80221da:	6962      	ldrpl	r2, [r4, #20]
 80221dc:	60a2      	str	r2, [r4, #8]
 80221de:	e7f4      	b.n	80221ca <__swsetup_r+0x8e>
 80221e0:	2000      	movs	r0, #0
 80221e2:	e7f7      	b.n	80221d4 <__swsetup_r+0x98>
 80221e4:	200001c0 	.word	0x200001c0

080221e8 <_raise_r>:
 80221e8:	291f      	cmp	r1, #31
 80221ea:	b538      	push	{r3, r4, r5, lr}
 80221ec:	4605      	mov	r5, r0
 80221ee:	460c      	mov	r4, r1
 80221f0:	d904      	bls.n	80221fc <_raise_r+0x14>
 80221f2:	2316      	movs	r3, #22
 80221f4:	6003      	str	r3, [r0, #0]
 80221f6:	f04f 30ff 	mov.w	r0, #4294967295
 80221fa:	bd38      	pop	{r3, r4, r5, pc}
 80221fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80221fe:	b112      	cbz	r2, 8022206 <_raise_r+0x1e>
 8022200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022204:	b94b      	cbnz	r3, 802221a <_raise_r+0x32>
 8022206:	4628      	mov	r0, r5
 8022208:	f000 f830 	bl	802226c <_getpid_r>
 802220c:	4622      	mov	r2, r4
 802220e:	4601      	mov	r1, r0
 8022210:	4628      	mov	r0, r5
 8022212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022216:	f000 b817 	b.w	8022248 <_kill_r>
 802221a:	2b01      	cmp	r3, #1
 802221c:	d00a      	beq.n	8022234 <_raise_r+0x4c>
 802221e:	1c59      	adds	r1, r3, #1
 8022220:	d103      	bne.n	802222a <_raise_r+0x42>
 8022222:	2316      	movs	r3, #22
 8022224:	6003      	str	r3, [r0, #0]
 8022226:	2001      	movs	r0, #1
 8022228:	e7e7      	b.n	80221fa <_raise_r+0x12>
 802222a:	2100      	movs	r1, #0
 802222c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022230:	4620      	mov	r0, r4
 8022232:	4798      	blx	r3
 8022234:	2000      	movs	r0, #0
 8022236:	e7e0      	b.n	80221fa <_raise_r+0x12>

08022238 <raise>:
 8022238:	4b02      	ldr	r3, [pc, #8]	@ (8022244 <raise+0xc>)
 802223a:	4601      	mov	r1, r0
 802223c:	6818      	ldr	r0, [r3, #0]
 802223e:	f7ff bfd3 	b.w	80221e8 <_raise_r>
 8022242:	bf00      	nop
 8022244:	200001c0 	.word	0x200001c0

08022248 <_kill_r>:
 8022248:	b538      	push	{r3, r4, r5, lr}
 802224a:	4d07      	ldr	r5, [pc, #28]	@ (8022268 <_kill_r+0x20>)
 802224c:	2300      	movs	r3, #0
 802224e:	4604      	mov	r4, r0
 8022250:	4608      	mov	r0, r1
 8022252:	4611      	mov	r1, r2
 8022254:	602b      	str	r3, [r5, #0]
 8022256:	f7e0 ff95 	bl	8003184 <_kill>
 802225a:	1c43      	adds	r3, r0, #1
 802225c:	d102      	bne.n	8022264 <_kill_r+0x1c>
 802225e:	682b      	ldr	r3, [r5, #0]
 8022260:	b103      	cbz	r3, 8022264 <_kill_r+0x1c>
 8022262:	6023      	str	r3, [r4, #0]
 8022264:	bd38      	pop	{r3, r4, r5, pc}
 8022266:	bf00      	nop
 8022268:	200066c4 	.word	0x200066c4

0802226c <_getpid_r>:
 802226c:	f7e0 bf82 	b.w	8003174 <_getpid>

08022270 <_malloc_usable_size_r>:
 8022270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022274:	1f18      	subs	r0, r3, #4
 8022276:	2b00      	cmp	r3, #0
 8022278:	bfbc      	itt	lt
 802227a:	580b      	ldrlt	r3, [r1, r0]
 802227c:	18c0      	addlt	r0, r0, r3
 802227e:	4770      	bx	lr

08022280 <__swhatbuf_r>:
 8022280:	b570      	push	{r4, r5, r6, lr}
 8022282:	460c      	mov	r4, r1
 8022284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022288:	2900      	cmp	r1, #0
 802228a:	b096      	sub	sp, #88	@ 0x58
 802228c:	4615      	mov	r5, r2
 802228e:	461e      	mov	r6, r3
 8022290:	da0d      	bge.n	80222ae <__swhatbuf_r+0x2e>
 8022292:	89a3      	ldrh	r3, [r4, #12]
 8022294:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022298:	f04f 0100 	mov.w	r1, #0
 802229c:	bf14      	ite	ne
 802229e:	2340      	movne	r3, #64	@ 0x40
 80222a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80222a4:	2000      	movs	r0, #0
 80222a6:	6031      	str	r1, [r6, #0]
 80222a8:	602b      	str	r3, [r5, #0]
 80222aa:	b016      	add	sp, #88	@ 0x58
 80222ac:	bd70      	pop	{r4, r5, r6, pc}
 80222ae:	466a      	mov	r2, sp
 80222b0:	f000 f848 	bl	8022344 <_fstat_r>
 80222b4:	2800      	cmp	r0, #0
 80222b6:	dbec      	blt.n	8022292 <__swhatbuf_r+0x12>
 80222b8:	9901      	ldr	r1, [sp, #4]
 80222ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80222be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80222c2:	4259      	negs	r1, r3
 80222c4:	4159      	adcs	r1, r3
 80222c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80222ca:	e7eb      	b.n	80222a4 <__swhatbuf_r+0x24>

080222cc <__smakebuf_r>:
 80222cc:	898b      	ldrh	r3, [r1, #12]
 80222ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80222d0:	079d      	lsls	r5, r3, #30
 80222d2:	4606      	mov	r6, r0
 80222d4:	460c      	mov	r4, r1
 80222d6:	d507      	bpl.n	80222e8 <__smakebuf_r+0x1c>
 80222d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80222dc:	6023      	str	r3, [r4, #0]
 80222de:	6123      	str	r3, [r4, #16]
 80222e0:	2301      	movs	r3, #1
 80222e2:	6163      	str	r3, [r4, #20]
 80222e4:	b003      	add	sp, #12
 80222e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80222e8:	ab01      	add	r3, sp, #4
 80222ea:	466a      	mov	r2, sp
 80222ec:	f7ff ffc8 	bl	8022280 <__swhatbuf_r>
 80222f0:	9f00      	ldr	r7, [sp, #0]
 80222f2:	4605      	mov	r5, r0
 80222f4:	4639      	mov	r1, r7
 80222f6:	4630      	mov	r0, r6
 80222f8:	f7f9 ffc6 	bl	801c288 <_malloc_r>
 80222fc:	b948      	cbnz	r0, 8022312 <__smakebuf_r+0x46>
 80222fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022302:	059a      	lsls	r2, r3, #22
 8022304:	d4ee      	bmi.n	80222e4 <__smakebuf_r+0x18>
 8022306:	f023 0303 	bic.w	r3, r3, #3
 802230a:	f043 0302 	orr.w	r3, r3, #2
 802230e:	81a3      	strh	r3, [r4, #12]
 8022310:	e7e2      	b.n	80222d8 <__smakebuf_r+0xc>
 8022312:	89a3      	ldrh	r3, [r4, #12]
 8022314:	6020      	str	r0, [r4, #0]
 8022316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802231a:	81a3      	strh	r3, [r4, #12]
 802231c:	9b01      	ldr	r3, [sp, #4]
 802231e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022322:	b15b      	cbz	r3, 802233c <__smakebuf_r+0x70>
 8022324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022328:	4630      	mov	r0, r6
 802232a:	f000 f81d 	bl	8022368 <_isatty_r>
 802232e:	b128      	cbz	r0, 802233c <__smakebuf_r+0x70>
 8022330:	89a3      	ldrh	r3, [r4, #12]
 8022332:	f023 0303 	bic.w	r3, r3, #3
 8022336:	f043 0301 	orr.w	r3, r3, #1
 802233a:	81a3      	strh	r3, [r4, #12]
 802233c:	89a3      	ldrh	r3, [r4, #12]
 802233e:	431d      	orrs	r5, r3
 8022340:	81a5      	strh	r5, [r4, #12]
 8022342:	e7cf      	b.n	80222e4 <__smakebuf_r+0x18>

08022344 <_fstat_r>:
 8022344:	b538      	push	{r3, r4, r5, lr}
 8022346:	4d07      	ldr	r5, [pc, #28]	@ (8022364 <_fstat_r+0x20>)
 8022348:	2300      	movs	r3, #0
 802234a:	4604      	mov	r4, r0
 802234c:	4608      	mov	r0, r1
 802234e:	4611      	mov	r1, r2
 8022350:	602b      	str	r3, [r5, #0]
 8022352:	f7e0 ff77 	bl	8003244 <_fstat>
 8022356:	1c43      	adds	r3, r0, #1
 8022358:	d102      	bne.n	8022360 <_fstat_r+0x1c>
 802235a:	682b      	ldr	r3, [r5, #0]
 802235c:	b103      	cbz	r3, 8022360 <_fstat_r+0x1c>
 802235e:	6023      	str	r3, [r4, #0]
 8022360:	bd38      	pop	{r3, r4, r5, pc}
 8022362:	bf00      	nop
 8022364:	200066c4 	.word	0x200066c4

08022368 <_isatty_r>:
 8022368:	b538      	push	{r3, r4, r5, lr}
 802236a:	4d06      	ldr	r5, [pc, #24]	@ (8022384 <_isatty_r+0x1c>)
 802236c:	2300      	movs	r3, #0
 802236e:	4604      	mov	r4, r0
 8022370:	4608      	mov	r0, r1
 8022372:	602b      	str	r3, [r5, #0]
 8022374:	f7e0 ff76 	bl	8003264 <_isatty>
 8022378:	1c43      	adds	r3, r0, #1
 802237a:	d102      	bne.n	8022382 <_isatty_r+0x1a>
 802237c:	682b      	ldr	r3, [r5, #0]
 802237e:	b103      	cbz	r3, 8022382 <_isatty_r+0x1a>
 8022380:	6023      	str	r3, [r4, #0]
 8022382:	bd38      	pop	{r3, r4, r5, pc}
 8022384:	200066c4 	.word	0x200066c4

08022388 <acos>:
 8022388:	b538      	push	{r3, r4, r5, lr}
 802238a:	ed2d 8b02 	vpush	{d8}
 802238e:	ec55 4b10 	vmov	r4, r5, d0
 8022392:	f000 fee5 	bl	8023160 <__ieee754_acos>
 8022396:	4622      	mov	r2, r4
 8022398:	462b      	mov	r3, r5
 802239a:	4620      	mov	r0, r4
 802239c:	4629      	mov	r1, r5
 802239e:	eeb0 8a40 	vmov.f32	s16, s0
 80223a2:	eef0 8a60 	vmov.f32	s17, s1
 80223a6:	f7de fbd1 	bl	8000b4c <__aeabi_dcmpun>
 80223aa:	b9a8      	cbnz	r0, 80223d8 <acos+0x50>
 80223ac:	ec45 4b10 	vmov	d0, r4, r5
 80223b0:	f000 fb96 	bl	8022ae0 <fabs>
 80223b4:	4b0c      	ldr	r3, [pc, #48]	@ (80223e8 <acos+0x60>)
 80223b6:	ec51 0b10 	vmov	r0, r1, d0
 80223ba:	2200      	movs	r2, #0
 80223bc:	f7de fbbc 	bl	8000b38 <__aeabi_dcmpgt>
 80223c0:	b150      	cbz	r0, 80223d8 <acos+0x50>
 80223c2:	f7fc fec9 	bl	801f158 <__errno>
 80223c6:	ecbd 8b02 	vpop	{d8}
 80223ca:	2321      	movs	r3, #33	@ 0x21
 80223cc:	6003      	str	r3, [r0, #0]
 80223ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80223d2:	4806      	ldr	r0, [pc, #24]	@ (80223ec <acos+0x64>)
 80223d4:	f7fc bf08 	b.w	801f1e8 <nan>
 80223d8:	eeb0 0a48 	vmov.f32	s0, s16
 80223dc:	eef0 0a68 	vmov.f32	s1, s17
 80223e0:	ecbd 8b02 	vpop	{d8}
 80223e4:	bd38      	pop	{r3, r4, r5, pc}
 80223e6:	bf00      	nop
 80223e8:	3ff00000 	.word	0x3ff00000
 80223ec:	0802613d 	.word	0x0802613d

080223f0 <asin>:
 80223f0:	b538      	push	{r3, r4, r5, lr}
 80223f2:	ed2d 8b02 	vpush	{d8}
 80223f6:	ec55 4b10 	vmov	r4, r5, d0
 80223fa:	f001 f90d 	bl	8023618 <__ieee754_asin>
 80223fe:	4622      	mov	r2, r4
 8022400:	462b      	mov	r3, r5
 8022402:	4620      	mov	r0, r4
 8022404:	4629      	mov	r1, r5
 8022406:	eeb0 8a40 	vmov.f32	s16, s0
 802240a:	eef0 8a60 	vmov.f32	s17, s1
 802240e:	f7de fb9d 	bl	8000b4c <__aeabi_dcmpun>
 8022412:	b9a8      	cbnz	r0, 8022440 <asin+0x50>
 8022414:	ec45 4b10 	vmov	d0, r4, r5
 8022418:	f000 fb62 	bl	8022ae0 <fabs>
 802241c:	4b0c      	ldr	r3, [pc, #48]	@ (8022450 <asin+0x60>)
 802241e:	ec51 0b10 	vmov	r0, r1, d0
 8022422:	2200      	movs	r2, #0
 8022424:	f7de fb88 	bl	8000b38 <__aeabi_dcmpgt>
 8022428:	b150      	cbz	r0, 8022440 <asin+0x50>
 802242a:	f7fc fe95 	bl	801f158 <__errno>
 802242e:	ecbd 8b02 	vpop	{d8}
 8022432:	2321      	movs	r3, #33	@ 0x21
 8022434:	6003      	str	r3, [r0, #0]
 8022436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802243a:	4806      	ldr	r0, [pc, #24]	@ (8022454 <asin+0x64>)
 802243c:	f7fc bed4 	b.w	801f1e8 <nan>
 8022440:	eeb0 0a48 	vmov.f32	s0, s16
 8022444:	eef0 0a68 	vmov.f32	s1, s17
 8022448:	ecbd 8b02 	vpop	{d8}
 802244c:	bd38      	pop	{r3, r4, r5, pc}
 802244e:	bf00      	nop
 8022450:	3ff00000 	.word	0x3ff00000
 8022454:	0802613d 	.word	0x0802613d

08022458 <atan2>:
 8022458:	f001 bae2 	b.w	8023a20 <__ieee754_atan2>
 802245c:	0000      	movs	r0, r0
	...

08022460 <exp>:
 8022460:	b538      	push	{r3, r4, r5, lr}
 8022462:	ed2d 8b02 	vpush	{d8}
 8022466:	ec55 4b10 	vmov	r4, r5, d0
 802246a:	f001 fba1 	bl	8023bb0 <__ieee754_exp>
 802246e:	eeb0 8a40 	vmov.f32	s16, s0
 8022472:	eef0 8a60 	vmov.f32	s17, s1
 8022476:	ec45 4b10 	vmov	d0, r4, r5
 802247a:	f000 fb8d 	bl	8022b98 <finite>
 802247e:	b168      	cbz	r0, 802249c <exp+0x3c>
 8022480:	a317      	add	r3, pc, #92	@ (adr r3, 80224e0 <exp+0x80>)
 8022482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022486:	4620      	mov	r0, r4
 8022488:	4629      	mov	r1, r5
 802248a:	f7de fb55 	bl	8000b38 <__aeabi_dcmpgt>
 802248e:	b160      	cbz	r0, 80224aa <exp+0x4a>
 8022490:	f7fc fe62 	bl	801f158 <__errno>
 8022494:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 80224d0 <exp+0x70>
 8022498:	2322      	movs	r3, #34	@ 0x22
 802249a:	6003      	str	r3, [r0, #0]
 802249c:	eeb0 0a48 	vmov.f32	s0, s16
 80224a0:	eef0 0a68 	vmov.f32	s1, s17
 80224a4:	ecbd 8b02 	vpop	{d8}
 80224a8:	bd38      	pop	{r3, r4, r5, pc}
 80224aa:	a30f      	add	r3, pc, #60	@ (adr r3, 80224e8 <exp+0x88>)
 80224ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224b0:	4620      	mov	r0, r4
 80224b2:	4629      	mov	r1, r5
 80224b4:	f7de fb22 	bl	8000afc <__aeabi_dcmplt>
 80224b8:	2800      	cmp	r0, #0
 80224ba:	d0ef      	beq.n	802249c <exp+0x3c>
 80224bc:	f7fc fe4c 	bl	801f158 <__errno>
 80224c0:	2322      	movs	r3, #34	@ 0x22
 80224c2:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 80224d8 <exp+0x78>
 80224c6:	6003      	str	r3, [r0, #0]
 80224c8:	e7e8      	b.n	802249c <exp+0x3c>
 80224ca:	bf00      	nop
 80224cc:	f3af 8000 	nop.w
 80224d0:	00000000 	.word	0x00000000
 80224d4:	7ff00000 	.word	0x7ff00000
	...
 80224e0:	fefa39ef 	.word	0xfefa39ef
 80224e4:	40862e42 	.word	0x40862e42
 80224e8:	d52d3051 	.word	0xd52d3051
 80224ec:	c0874910 	.word	0xc0874910

080224f0 <fmod>:
 80224f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80224f2:	ed2d 8b02 	vpush	{d8}
 80224f6:	ec57 6b10 	vmov	r6, r7, d0
 80224fa:	ec55 4b11 	vmov	r4, r5, d1
 80224fe:	f001 fcd1 	bl	8023ea4 <__ieee754_fmod>
 8022502:	4622      	mov	r2, r4
 8022504:	462b      	mov	r3, r5
 8022506:	4630      	mov	r0, r6
 8022508:	4639      	mov	r1, r7
 802250a:	eeb0 8a40 	vmov.f32	s16, s0
 802250e:	eef0 8a60 	vmov.f32	s17, s1
 8022512:	f7de fb1b 	bl	8000b4c <__aeabi_dcmpun>
 8022516:	b990      	cbnz	r0, 802253e <fmod+0x4e>
 8022518:	2200      	movs	r2, #0
 802251a:	2300      	movs	r3, #0
 802251c:	4620      	mov	r0, r4
 802251e:	4629      	mov	r1, r5
 8022520:	f7de fae2 	bl	8000ae8 <__aeabi_dcmpeq>
 8022524:	b158      	cbz	r0, 802253e <fmod+0x4e>
 8022526:	f7fc fe17 	bl	801f158 <__errno>
 802252a:	2321      	movs	r3, #33	@ 0x21
 802252c:	6003      	str	r3, [r0, #0]
 802252e:	2200      	movs	r2, #0
 8022530:	2300      	movs	r3, #0
 8022532:	4610      	mov	r0, r2
 8022534:	4619      	mov	r1, r3
 8022536:	f7de f999 	bl	800086c <__aeabi_ddiv>
 802253a:	ec41 0b18 	vmov	d8, r0, r1
 802253e:	eeb0 0a48 	vmov.f32	s0, s16
 8022542:	eef0 0a68 	vmov.f32	s1, s17
 8022546:	ecbd 8b02 	vpop	{d8}
 802254a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802254c:	0000      	movs	r0, r0
	...

08022550 <log>:
 8022550:	b538      	push	{r3, r4, r5, lr}
 8022552:	ed2d 8b02 	vpush	{d8}
 8022556:	ec55 4b10 	vmov	r4, r5, d0
 802255a:	f001 fdad 	bl	80240b8 <__ieee754_log>
 802255e:	4622      	mov	r2, r4
 8022560:	462b      	mov	r3, r5
 8022562:	4620      	mov	r0, r4
 8022564:	4629      	mov	r1, r5
 8022566:	eeb0 8a40 	vmov.f32	s16, s0
 802256a:	eef0 8a60 	vmov.f32	s17, s1
 802256e:	f7de faed 	bl	8000b4c <__aeabi_dcmpun>
 8022572:	b998      	cbnz	r0, 802259c <log+0x4c>
 8022574:	2200      	movs	r2, #0
 8022576:	2300      	movs	r3, #0
 8022578:	4620      	mov	r0, r4
 802257a:	4629      	mov	r1, r5
 802257c:	f7de fadc 	bl	8000b38 <__aeabi_dcmpgt>
 8022580:	b960      	cbnz	r0, 802259c <log+0x4c>
 8022582:	2200      	movs	r2, #0
 8022584:	2300      	movs	r3, #0
 8022586:	4620      	mov	r0, r4
 8022588:	4629      	mov	r1, r5
 802258a:	f7de faad 	bl	8000ae8 <__aeabi_dcmpeq>
 802258e:	b160      	cbz	r0, 80225aa <log+0x5a>
 8022590:	f7fc fde2 	bl	801f158 <__errno>
 8022594:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80225c0 <log+0x70>
 8022598:	2322      	movs	r3, #34	@ 0x22
 802259a:	6003      	str	r3, [r0, #0]
 802259c:	eeb0 0a48 	vmov.f32	s0, s16
 80225a0:	eef0 0a68 	vmov.f32	s1, s17
 80225a4:	ecbd 8b02 	vpop	{d8}
 80225a8:	bd38      	pop	{r3, r4, r5, pc}
 80225aa:	f7fc fdd5 	bl	801f158 <__errno>
 80225ae:	ecbd 8b02 	vpop	{d8}
 80225b2:	2321      	movs	r3, #33	@ 0x21
 80225b4:	6003      	str	r3, [r0, #0]
 80225b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80225ba:	4803      	ldr	r0, [pc, #12]	@ (80225c8 <log+0x78>)
 80225bc:	f7fc be14 	b.w	801f1e8 <nan>
 80225c0:	00000000 	.word	0x00000000
 80225c4:	fff00000 	.word	0xfff00000
 80225c8:	0802613d 	.word	0x0802613d

080225cc <pow>:
 80225cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80225ce:	ed2d 8b02 	vpush	{d8}
 80225d2:	eeb0 8a40 	vmov.f32	s16, s0
 80225d6:	eef0 8a60 	vmov.f32	s17, s1
 80225da:	ec55 4b11 	vmov	r4, r5, d1
 80225de:	f001 ff23 	bl	8024428 <__ieee754_pow>
 80225e2:	4622      	mov	r2, r4
 80225e4:	462b      	mov	r3, r5
 80225e6:	4620      	mov	r0, r4
 80225e8:	4629      	mov	r1, r5
 80225ea:	ec57 6b10 	vmov	r6, r7, d0
 80225ee:	f7de faad 	bl	8000b4c <__aeabi_dcmpun>
 80225f2:	2800      	cmp	r0, #0
 80225f4:	d13b      	bne.n	802266e <pow+0xa2>
 80225f6:	ec51 0b18 	vmov	r0, r1, d8
 80225fa:	2200      	movs	r2, #0
 80225fc:	2300      	movs	r3, #0
 80225fe:	f7de fa73 	bl	8000ae8 <__aeabi_dcmpeq>
 8022602:	b1b8      	cbz	r0, 8022634 <pow+0x68>
 8022604:	2200      	movs	r2, #0
 8022606:	2300      	movs	r3, #0
 8022608:	4620      	mov	r0, r4
 802260a:	4629      	mov	r1, r5
 802260c:	f7de fa6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8022610:	2800      	cmp	r0, #0
 8022612:	d146      	bne.n	80226a2 <pow+0xd6>
 8022614:	ec45 4b10 	vmov	d0, r4, r5
 8022618:	f000 fabe 	bl	8022b98 <finite>
 802261c:	b338      	cbz	r0, 802266e <pow+0xa2>
 802261e:	2200      	movs	r2, #0
 8022620:	2300      	movs	r3, #0
 8022622:	4620      	mov	r0, r4
 8022624:	4629      	mov	r1, r5
 8022626:	f7de fa69 	bl	8000afc <__aeabi_dcmplt>
 802262a:	b300      	cbz	r0, 802266e <pow+0xa2>
 802262c:	f7fc fd94 	bl	801f158 <__errno>
 8022630:	2322      	movs	r3, #34	@ 0x22
 8022632:	e01b      	b.n	802266c <pow+0xa0>
 8022634:	ec47 6b10 	vmov	d0, r6, r7
 8022638:	f000 faae 	bl	8022b98 <finite>
 802263c:	b9e0      	cbnz	r0, 8022678 <pow+0xac>
 802263e:	eeb0 0a48 	vmov.f32	s0, s16
 8022642:	eef0 0a68 	vmov.f32	s1, s17
 8022646:	f000 faa7 	bl	8022b98 <finite>
 802264a:	b1a8      	cbz	r0, 8022678 <pow+0xac>
 802264c:	ec45 4b10 	vmov	d0, r4, r5
 8022650:	f000 faa2 	bl	8022b98 <finite>
 8022654:	b180      	cbz	r0, 8022678 <pow+0xac>
 8022656:	4632      	mov	r2, r6
 8022658:	463b      	mov	r3, r7
 802265a:	4630      	mov	r0, r6
 802265c:	4639      	mov	r1, r7
 802265e:	f7de fa75 	bl	8000b4c <__aeabi_dcmpun>
 8022662:	2800      	cmp	r0, #0
 8022664:	d0e2      	beq.n	802262c <pow+0x60>
 8022666:	f7fc fd77 	bl	801f158 <__errno>
 802266a:	2321      	movs	r3, #33	@ 0x21
 802266c:	6003      	str	r3, [r0, #0]
 802266e:	ecbd 8b02 	vpop	{d8}
 8022672:	ec47 6b10 	vmov	d0, r6, r7
 8022676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022678:	2200      	movs	r2, #0
 802267a:	2300      	movs	r3, #0
 802267c:	4630      	mov	r0, r6
 802267e:	4639      	mov	r1, r7
 8022680:	f7de fa32 	bl	8000ae8 <__aeabi_dcmpeq>
 8022684:	2800      	cmp	r0, #0
 8022686:	d0f2      	beq.n	802266e <pow+0xa2>
 8022688:	eeb0 0a48 	vmov.f32	s0, s16
 802268c:	eef0 0a68 	vmov.f32	s1, s17
 8022690:	f000 fa82 	bl	8022b98 <finite>
 8022694:	2800      	cmp	r0, #0
 8022696:	d0ea      	beq.n	802266e <pow+0xa2>
 8022698:	ec45 4b10 	vmov	d0, r4, r5
 802269c:	f000 fa7c 	bl	8022b98 <finite>
 80226a0:	e7c3      	b.n	802262a <pow+0x5e>
 80226a2:	4f01      	ldr	r7, [pc, #4]	@ (80226a8 <pow+0xdc>)
 80226a4:	2600      	movs	r6, #0
 80226a6:	e7e2      	b.n	802266e <pow+0xa2>
 80226a8:	3ff00000 	.word	0x3ff00000

080226ac <sqrt>:
 80226ac:	b538      	push	{r3, r4, r5, lr}
 80226ae:	ed2d 8b02 	vpush	{d8}
 80226b2:	ec55 4b10 	vmov	r4, r5, d0
 80226b6:	f000 fa7b 	bl	8022bb0 <__ieee754_sqrt>
 80226ba:	4622      	mov	r2, r4
 80226bc:	462b      	mov	r3, r5
 80226be:	4620      	mov	r0, r4
 80226c0:	4629      	mov	r1, r5
 80226c2:	eeb0 8a40 	vmov.f32	s16, s0
 80226c6:	eef0 8a60 	vmov.f32	s17, s1
 80226ca:	f7de fa3f 	bl	8000b4c <__aeabi_dcmpun>
 80226ce:	b990      	cbnz	r0, 80226f6 <sqrt+0x4a>
 80226d0:	2200      	movs	r2, #0
 80226d2:	2300      	movs	r3, #0
 80226d4:	4620      	mov	r0, r4
 80226d6:	4629      	mov	r1, r5
 80226d8:	f7de fa10 	bl	8000afc <__aeabi_dcmplt>
 80226dc:	b158      	cbz	r0, 80226f6 <sqrt+0x4a>
 80226de:	f7fc fd3b 	bl	801f158 <__errno>
 80226e2:	2321      	movs	r3, #33	@ 0x21
 80226e4:	6003      	str	r3, [r0, #0]
 80226e6:	2200      	movs	r2, #0
 80226e8:	2300      	movs	r3, #0
 80226ea:	4610      	mov	r0, r2
 80226ec:	4619      	mov	r1, r3
 80226ee:	f7de f8bd 	bl	800086c <__aeabi_ddiv>
 80226f2:	ec41 0b18 	vmov	d8, r0, r1
 80226f6:	eeb0 0a48 	vmov.f32	s0, s16
 80226fa:	eef0 0a68 	vmov.f32	s1, s17
 80226fe:	ecbd 8b02 	vpop	{d8}
 8022702:	bd38      	pop	{r3, r4, r5, pc}
 8022704:	0000      	movs	r0, r0
	...

08022708 <atan>:
 8022708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802270c:	ec55 4b10 	vmov	r4, r5, d0
 8022710:	4bbf      	ldr	r3, [pc, #764]	@ (8022a10 <atan+0x308>)
 8022712:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8022716:	429e      	cmp	r6, r3
 8022718:	46ab      	mov	fp, r5
 802271a:	d918      	bls.n	802274e <atan+0x46>
 802271c:	4bbd      	ldr	r3, [pc, #756]	@ (8022a14 <atan+0x30c>)
 802271e:	429e      	cmp	r6, r3
 8022720:	d801      	bhi.n	8022726 <atan+0x1e>
 8022722:	d109      	bne.n	8022738 <atan+0x30>
 8022724:	b144      	cbz	r4, 8022738 <atan+0x30>
 8022726:	4622      	mov	r2, r4
 8022728:	462b      	mov	r3, r5
 802272a:	4620      	mov	r0, r4
 802272c:	4629      	mov	r1, r5
 802272e:	f7dd fdbd 	bl	80002ac <__adddf3>
 8022732:	4604      	mov	r4, r0
 8022734:	460d      	mov	r5, r1
 8022736:	e006      	b.n	8022746 <atan+0x3e>
 8022738:	f1bb 0f00 	cmp.w	fp, #0
 802273c:	f340 812b 	ble.w	8022996 <atan+0x28e>
 8022740:	a597      	add	r5, pc, #604	@ (adr r5, 80229a0 <atan+0x298>)
 8022742:	e9d5 4500 	ldrd	r4, r5, [r5]
 8022746:	ec45 4b10 	vmov	d0, r4, r5
 802274a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802274e:	4bb2      	ldr	r3, [pc, #712]	@ (8022a18 <atan+0x310>)
 8022750:	429e      	cmp	r6, r3
 8022752:	d813      	bhi.n	802277c <atan+0x74>
 8022754:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8022758:	429e      	cmp	r6, r3
 802275a:	d80c      	bhi.n	8022776 <atan+0x6e>
 802275c:	a392      	add	r3, pc, #584	@ (adr r3, 80229a8 <atan+0x2a0>)
 802275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022762:	4620      	mov	r0, r4
 8022764:	4629      	mov	r1, r5
 8022766:	f7dd fda1 	bl	80002ac <__adddf3>
 802276a:	4bac      	ldr	r3, [pc, #688]	@ (8022a1c <atan+0x314>)
 802276c:	2200      	movs	r2, #0
 802276e:	f7de f9e3 	bl	8000b38 <__aeabi_dcmpgt>
 8022772:	2800      	cmp	r0, #0
 8022774:	d1e7      	bne.n	8022746 <atan+0x3e>
 8022776:	f04f 3aff 	mov.w	sl, #4294967295
 802277a:	e029      	b.n	80227d0 <atan+0xc8>
 802277c:	f000 f9b0 	bl	8022ae0 <fabs>
 8022780:	4ba7      	ldr	r3, [pc, #668]	@ (8022a20 <atan+0x318>)
 8022782:	429e      	cmp	r6, r3
 8022784:	ec55 4b10 	vmov	r4, r5, d0
 8022788:	f200 80bc 	bhi.w	8022904 <atan+0x1fc>
 802278c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8022790:	429e      	cmp	r6, r3
 8022792:	f200 809e 	bhi.w	80228d2 <atan+0x1ca>
 8022796:	4622      	mov	r2, r4
 8022798:	462b      	mov	r3, r5
 802279a:	4620      	mov	r0, r4
 802279c:	4629      	mov	r1, r5
 802279e:	f7dd fd85 	bl	80002ac <__adddf3>
 80227a2:	4b9e      	ldr	r3, [pc, #632]	@ (8022a1c <atan+0x314>)
 80227a4:	2200      	movs	r2, #0
 80227a6:	f7dd fd7f 	bl	80002a8 <__aeabi_dsub>
 80227aa:	2200      	movs	r2, #0
 80227ac:	4606      	mov	r6, r0
 80227ae:	460f      	mov	r7, r1
 80227b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80227b4:	4620      	mov	r0, r4
 80227b6:	4629      	mov	r1, r5
 80227b8:	f7dd fd78 	bl	80002ac <__adddf3>
 80227bc:	4602      	mov	r2, r0
 80227be:	460b      	mov	r3, r1
 80227c0:	4630      	mov	r0, r6
 80227c2:	4639      	mov	r1, r7
 80227c4:	f7de f852 	bl	800086c <__aeabi_ddiv>
 80227c8:	f04f 0a00 	mov.w	sl, #0
 80227cc:	4604      	mov	r4, r0
 80227ce:	460d      	mov	r5, r1
 80227d0:	4622      	mov	r2, r4
 80227d2:	462b      	mov	r3, r5
 80227d4:	4620      	mov	r0, r4
 80227d6:	4629      	mov	r1, r5
 80227d8:	f7dd ff1e 	bl	8000618 <__aeabi_dmul>
 80227dc:	4602      	mov	r2, r0
 80227de:	460b      	mov	r3, r1
 80227e0:	4680      	mov	r8, r0
 80227e2:	4689      	mov	r9, r1
 80227e4:	f7dd ff18 	bl	8000618 <__aeabi_dmul>
 80227e8:	a371      	add	r3, pc, #452	@ (adr r3, 80229b0 <atan+0x2a8>)
 80227ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227ee:	4606      	mov	r6, r0
 80227f0:	460f      	mov	r7, r1
 80227f2:	f7dd ff11 	bl	8000618 <__aeabi_dmul>
 80227f6:	a370      	add	r3, pc, #448	@ (adr r3, 80229b8 <atan+0x2b0>)
 80227f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227fc:	f7dd fd56 	bl	80002ac <__adddf3>
 8022800:	4632      	mov	r2, r6
 8022802:	463b      	mov	r3, r7
 8022804:	f7dd ff08 	bl	8000618 <__aeabi_dmul>
 8022808:	a36d      	add	r3, pc, #436	@ (adr r3, 80229c0 <atan+0x2b8>)
 802280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802280e:	f7dd fd4d 	bl	80002ac <__adddf3>
 8022812:	4632      	mov	r2, r6
 8022814:	463b      	mov	r3, r7
 8022816:	f7dd feff 	bl	8000618 <__aeabi_dmul>
 802281a:	a36b      	add	r3, pc, #428	@ (adr r3, 80229c8 <atan+0x2c0>)
 802281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022820:	f7dd fd44 	bl	80002ac <__adddf3>
 8022824:	4632      	mov	r2, r6
 8022826:	463b      	mov	r3, r7
 8022828:	f7dd fef6 	bl	8000618 <__aeabi_dmul>
 802282c:	a368      	add	r3, pc, #416	@ (adr r3, 80229d0 <atan+0x2c8>)
 802282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022832:	f7dd fd3b 	bl	80002ac <__adddf3>
 8022836:	4632      	mov	r2, r6
 8022838:	463b      	mov	r3, r7
 802283a:	f7dd feed 	bl	8000618 <__aeabi_dmul>
 802283e:	a366      	add	r3, pc, #408	@ (adr r3, 80229d8 <atan+0x2d0>)
 8022840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022844:	f7dd fd32 	bl	80002ac <__adddf3>
 8022848:	4642      	mov	r2, r8
 802284a:	464b      	mov	r3, r9
 802284c:	f7dd fee4 	bl	8000618 <__aeabi_dmul>
 8022850:	a363      	add	r3, pc, #396	@ (adr r3, 80229e0 <atan+0x2d8>)
 8022852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022856:	4680      	mov	r8, r0
 8022858:	4689      	mov	r9, r1
 802285a:	4630      	mov	r0, r6
 802285c:	4639      	mov	r1, r7
 802285e:	f7dd fedb 	bl	8000618 <__aeabi_dmul>
 8022862:	a361      	add	r3, pc, #388	@ (adr r3, 80229e8 <atan+0x2e0>)
 8022864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022868:	f7dd fd1e 	bl	80002a8 <__aeabi_dsub>
 802286c:	4632      	mov	r2, r6
 802286e:	463b      	mov	r3, r7
 8022870:	f7dd fed2 	bl	8000618 <__aeabi_dmul>
 8022874:	a35e      	add	r3, pc, #376	@ (adr r3, 80229f0 <atan+0x2e8>)
 8022876:	e9d3 2300 	ldrd	r2, r3, [r3]
 802287a:	f7dd fd15 	bl	80002a8 <__aeabi_dsub>
 802287e:	4632      	mov	r2, r6
 8022880:	463b      	mov	r3, r7
 8022882:	f7dd fec9 	bl	8000618 <__aeabi_dmul>
 8022886:	a35c      	add	r3, pc, #368	@ (adr r3, 80229f8 <atan+0x2f0>)
 8022888:	e9d3 2300 	ldrd	r2, r3, [r3]
 802288c:	f7dd fd0c 	bl	80002a8 <__aeabi_dsub>
 8022890:	4632      	mov	r2, r6
 8022892:	463b      	mov	r3, r7
 8022894:	f7dd fec0 	bl	8000618 <__aeabi_dmul>
 8022898:	a359      	add	r3, pc, #356	@ (adr r3, 8022a00 <atan+0x2f8>)
 802289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802289e:	f7dd fd03 	bl	80002a8 <__aeabi_dsub>
 80228a2:	4632      	mov	r2, r6
 80228a4:	463b      	mov	r3, r7
 80228a6:	f7dd feb7 	bl	8000618 <__aeabi_dmul>
 80228aa:	4602      	mov	r2, r0
 80228ac:	460b      	mov	r3, r1
 80228ae:	4640      	mov	r0, r8
 80228b0:	4649      	mov	r1, r9
 80228b2:	f7dd fcfb 	bl	80002ac <__adddf3>
 80228b6:	4622      	mov	r2, r4
 80228b8:	462b      	mov	r3, r5
 80228ba:	f7dd fead 	bl	8000618 <__aeabi_dmul>
 80228be:	f1ba 3fff 	cmp.w	sl, #4294967295
 80228c2:	4602      	mov	r2, r0
 80228c4:	460b      	mov	r3, r1
 80228c6:	d148      	bne.n	802295a <atan+0x252>
 80228c8:	4620      	mov	r0, r4
 80228ca:	4629      	mov	r1, r5
 80228cc:	f7dd fcec 	bl	80002a8 <__aeabi_dsub>
 80228d0:	e72f      	b.n	8022732 <atan+0x2a>
 80228d2:	4b52      	ldr	r3, [pc, #328]	@ (8022a1c <atan+0x314>)
 80228d4:	2200      	movs	r2, #0
 80228d6:	4620      	mov	r0, r4
 80228d8:	4629      	mov	r1, r5
 80228da:	f7dd fce5 	bl	80002a8 <__aeabi_dsub>
 80228de:	4b4f      	ldr	r3, [pc, #316]	@ (8022a1c <atan+0x314>)
 80228e0:	4606      	mov	r6, r0
 80228e2:	460f      	mov	r7, r1
 80228e4:	2200      	movs	r2, #0
 80228e6:	4620      	mov	r0, r4
 80228e8:	4629      	mov	r1, r5
 80228ea:	f7dd fcdf 	bl	80002ac <__adddf3>
 80228ee:	4602      	mov	r2, r0
 80228f0:	460b      	mov	r3, r1
 80228f2:	4630      	mov	r0, r6
 80228f4:	4639      	mov	r1, r7
 80228f6:	f7dd ffb9 	bl	800086c <__aeabi_ddiv>
 80228fa:	f04f 0a01 	mov.w	sl, #1
 80228fe:	4604      	mov	r4, r0
 8022900:	460d      	mov	r5, r1
 8022902:	e765      	b.n	80227d0 <atan+0xc8>
 8022904:	4b47      	ldr	r3, [pc, #284]	@ (8022a24 <atan+0x31c>)
 8022906:	429e      	cmp	r6, r3
 8022908:	d21c      	bcs.n	8022944 <atan+0x23c>
 802290a:	4b47      	ldr	r3, [pc, #284]	@ (8022a28 <atan+0x320>)
 802290c:	2200      	movs	r2, #0
 802290e:	4620      	mov	r0, r4
 8022910:	4629      	mov	r1, r5
 8022912:	f7dd fcc9 	bl	80002a8 <__aeabi_dsub>
 8022916:	4b44      	ldr	r3, [pc, #272]	@ (8022a28 <atan+0x320>)
 8022918:	4606      	mov	r6, r0
 802291a:	460f      	mov	r7, r1
 802291c:	2200      	movs	r2, #0
 802291e:	4620      	mov	r0, r4
 8022920:	4629      	mov	r1, r5
 8022922:	f7dd fe79 	bl	8000618 <__aeabi_dmul>
 8022926:	4b3d      	ldr	r3, [pc, #244]	@ (8022a1c <atan+0x314>)
 8022928:	2200      	movs	r2, #0
 802292a:	f7dd fcbf 	bl	80002ac <__adddf3>
 802292e:	4602      	mov	r2, r0
 8022930:	460b      	mov	r3, r1
 8022932:	4630      	mov	r0, r6
 8022934:	4639      	mov	r1, r7
 8022936:	f7dd ff99 	bl	800086c <__aeabi_ddiv>
 802293a:	f04f 0a02 	mov.w	sl, #2
 802293e:	4604      	mov	r4, r0
 8022940:	460d      	mov	r5, r1
 8022942:	e745      	b.n	80227d0 <atan+0xc8>
 8022944:	4622      	mov	r2, r4
 8022946:	462b      	mov	r3, r5
 8022948:	4938      	ldr	r1, [pc, #224]	@ (8022a2c <atan+0x324>)
 802294a:	2000      	movs	r0, #0
 802294c:	f7dd ff8e 	bl	800086c <__aeabi_ddiv>
 8022950:	f04f 0a03 	mov.w	sl, #3
 8022954:	4604      	mov	r4, r0
 8022956:	460d      	mov	r5, r1
 8022958:	e73a      	b.n	80227d0 <atan+0xc8>
 802295a:	4b35      	ldr	r3, [pc, #212]	@ (8022a30 <atan+0x328>)
 802295c:	4e35      	ldr	r6, [pc, #212]	@ (8022a34 <atan+0x32c>)
 802295e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8022962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022966:	f7dd fc9f 	bl	80002a8 <__aeabi_dsub>
 802296a:	4622      	mov	r2, r4
 802296c:	462b      	mov	r3, r5
 802296e:	f7dd fc9b 	bl	80002a8 <__aeabi_dsub>
 8022972:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8022976:	4602      	mov	r2, r0
 8022978:	460b      	mov	r3, r1
 802297a:	e9d6 0100 	ldrd	r0, r1, [r6]
 802297e:	f7dd fc93 	bl	80002a8 <__aeabi_dsub>
 8022982:	f1bb 0f00 	cmp.w	fp, #0
 8022986:	4604      	mov	r4, r0
 8022988:	460d      	mov	r5, r1
 802298a:	f6bf aedc 	bge.w	8022746 <atan+0x3e>
 802298e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8022992:	461d      	mov	r5, r3
 8022994:	e6d7      	b.n	8022746 <atan+0x3e>
 8022996:	a51c      	add	r5, pc, #112	@ (adr r5, 8022a08 <atan+0x300>)
 8022998:	e9d5 4500 	ldrd	r4, r5, [r5]
 802299c:	e6d3      	b.n	8022746 <atan+0x3e>
 802299e:	bf00      	nop
 80229a0:	54442d18 	.word	0x54442d18
 80229a4:	3ff921fb 	.word	0x3ff921fb
 80229a8:	8800759c 	.word	0x8800759c
 80229ac:	7e37e43c 	.word	0x7e37e43c
 80229b0:	e322da11 	.word	0xe322da11
 80229b4:	3f90ad3a 	.word	0x3f90ad3a
 80229b8:	24760deb 	.word	0x24760deb
 80229bc:	3fa97b4b 	.word	0x3fa97b4b
 80229c0:	a0d03d51 	.word	0xa0d03d51
 80229c4:	3fb10d66 	.word	0x3fb10d66
 80229c8:	c54c206e 	.word	0xc54c206e
 80229cc:	3fb745cd 	.word	0x3fb745cd
 80229d0:	920083ff 	.word	0x920083ff
 80229d4:	3fc24924 	.word	0x3fc24924
 80229d8:	5555550d 	.word	0x5555550d
 80229dc:	3fd55555 	.word	0x3fd55555
 80229e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80229e4:	bfa2b444 	.word	0xbfa2b444
 80229e8:	52defd9a 	.word	0x52defd9a
 80229ec:	3fadde2d 	.word	0x3fadde2d
 80229f0:	af749a6d 	.word	0xaf749a6d
 80229f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80229f8:	fe231671 	.word	0xfe231671
 80229fc:	3fbc71c6 	.word	0x3fbc71c6
 8022a00:	9998ebc4 	.word	0x9998ebc4
 8022a04:	3fc99999 	.word	0x3fc99999
 8022a08:	54442d18 	.word	0x54442d18
 8022a0c:	bff921fb 	.word	0xbff921fb
 8022a10:	440fffff 	.word	0x440fffff
 8022a14:	7ff00000 	.word	0x7ff00000
 8022a18:	3fdbffff 	.word	0x3fdbffff
 8022a1c:	3ff00000 	.word	0x3ff00000
 8022a20:	3ff2ffff 	.word	0x3ff2ffff
 8022a24:	40038000 	.word	0x40038000
 8022a28:	3ff80000 	.word	0x3ff80000
 8022a2c:	bff00000 	.word	0xbff00000
 8022a30:	080265b0 	.word	0x080265b0
 8022a34:	080265d0 	.word	0x080265d0

08022a38 <cos>:
 8022a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022a3a:	ec53 2b10 	vmov	r2, r3, d0
 8022a3e:	4826      	ldr	r0, [pc, #152]	@ (8022ad8 <cos+0xa0>)
 8022a40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8022a44:	4281      	cmp	r1, r0
 8022a46:	d806      	bhi.n	8022a56 <cos+0x1e>
 8022a48:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8022ad0 <cos+0x98>
 8022a4c:	b005      	add	sp, #20
 8022a4e:	f85d eb04 	ldr.w	lr, [sp], #4
 8022a52:	f000 ba01 	b.w	8022e58 <__kernel_cos>
 8022a56:	4821      	ldr	r0, [pc, #132]	@ (8022adc <cos+0xa4>)
 8022a58:	4281      	cmp	r1, r0
 8022a5a:	d908      	bls.n	8022a6e <cos+0x36>
 8022a5c:	4610      	mov	r0, r2
 8022a5e:	4619      	mov	r1, r3
 8022a60:	f7dd fc22 	bl	80002a8 <__aeabi_dsub>
 8022a64:	ec41 0b10 	vmov	d0, r0, r1
 8022a68:	b005      	add	sp, #20
 8022a6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8022a6e:	4668      	mov	r0, sp
 8022a70:	f002 fa26 	bl	8024ec0 <__ieee754_rem_pio2>
 8022a74:	f000 0003 	and.w	r0, r0, #3
 8022a78:	2801      	cmp	r0, #1
 8022a7a:	d00b      	beq.n	8022a94 <cos+0x5c>
 8022a7c:	2802      	cmp	r0, #2
 8022a7e:	d015      	beq.n	8022aac <cos+0x74>
 8022a80:	b9d8      	cbnz	r0, 8022aba <cos+0x82>
 8022a82:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022a86:	ed9d 0b00 	vldr	d0, [sp]
 8022a8a:	f000 f9e5 	bl	8022e58 <__kernel_cos>
 8022a8e:	ec51 0b10 	vmov	r0, r1, d0
 8022a92:	e7e7      	b.n	8022a64 <cos+0x2c>
 8022a94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022a98:	ed9d 0b00 	vldr	d0, [sp]
 8022a9c:	f000 faa4 	bl	8022fe8 <__kernel_sin>
 8022aa0:	ec53 2b10 	vmov	r2, r3, d0
 8022aa4:	4610      	mov	r0, r2
 8022aa6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8022aaa:	e7db      	b.n	8022a64 <cos+0x2c>
 8022aac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022ab0:	ed9d 0b00 	vldr	d0, [sp]
 8022ab4:	f000 f9d0 	bl	8022e58 <__kernel_cos>
 8022ab8:	e7f2      	b.n	8022aa0 <cos+0x68>
 8022aba:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022abe:	ed9d 0b00 	vldr	d0, [sp]
 8022ac2:	2001      	movs	r0, #1
 8022ac4:	f000 fa90 	bl	8022fe8 <__kernel_sin>
 8022ac8:	e7e1      	b.n	8022a8e <cos+0x56>
 8022aca:	bf00      	nop
 8022acc:	f3af 8000 	nop.w
	...
 8022ad8:	3fe921fb 	.word	0x3fe921fb
 8022adc:	7fefffff 	.word	0x7fefffff

08022ae0 <fabs>:
 8022ae0:	ec51 0b10 	vmov	r0, r1, d0
 8022ae4:	4602      	mov	r2, r0
 8022ae6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8022aea:	ec43 2b10 	vmov	d0, r2, r3
 8022aee:	4770      	bx	lr

08022af0 <sin>:
 8022af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022af2:	ec53 2b10 	vmov	r2, r3, d0
 8022af6:	4826      	ldr	r0, [pc, #152]	@ (8022b90 <sin+0xa0>)
 8022af8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8022afc:	4281      	cmp	r1, r0
 8022afe:	d807      	bhi.n	8022b10 <sin+0x20>
 8022b00:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8022b88 <sin+0x98>
 8022b04:	2000      	movs	r0, #0
 8022b06:	b005      	add	sp, #20
 8022b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8022b0c:	f000 ba6c 	b.w	8022fe8 <__kernel_sin>
 8022b10:	4820      	ldr	r0, [pc, #128]	@ (8022b94 <sin+0xa4>)
 8022b12:	4281      	cmp	r1, r0
 8022b14:	d908      	bls.n	8022b28 <sin+0x38>
 8022b16:	4610      	mov	r0, r2
 8022b18:	4619      	mov	r1, r3
 8022b1a:	f7dd fbc5 	bl	80002a8 <__aeabi_dsub>
 8022b1e:	ec41 0b10 	vmov	d0, r0, r1
 8022b22:	b005      	add	sp, #20
 8022b24:	f85d fb04 	ldr.w	pc, [sp], #4
 8022b28:	4668      	mov	r0, sp
 8022b2a:	f002 f9c9 	bl	8024ec0 <__ieee754_rem_pio2>
 8022b2e:	f000 0003 	and.w	r0, r0, #3
 8022b32:	2801      	cmp	r0, #1
 8022b34:	d00c      	beq.n	8022b50 <sin+0x60>
 8022b36:	2802      	cmp	r0, #2
 8022b38:	d011      	beq.n	8022b5e <sin+0x6e>
 8022b3a:	b9e8      	cbnz	r0, 8022b78 <sin+0x88>
 8022b3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022b40:	ed9d 0b00 	vldr	d0, [sp]
 8022b44:	2001      	movs	r0, #1
 8022b46:	f000 fa4f 	bl	8022fe8 <__kernel_sin>
 8022b4a:	ec51 0b10 	vmov	r0, r1, d0
 8022b4e:	e7e6      	b.n	8022b1e <sin+0x2e>
 8022b50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022b54:	ed9d 0b00 	vldr	d0, [sp]
 8022b58:	f000 f97e 	bl	8022e58 <__kernel_cos>
 8022b5c:	e7f5      	b.n	8022b4a <sin+0x5a>
 8022b5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022b62:	ed9d 0b00 	vldr	d0, [sp]
 8022b66:	2001      	movs	r0, #1
 8022b68:	f000 fa3e 	bl	8022fe8 <__kernel_sin>
 8022b6c:	ec53 2b10 	vmov	r2, r3, d0
 8022b70:	4610      	mov	r0, r2
 8022b72:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8022b76:	e7d2      	b.n	8022b1e <sin+0x2e>
 8022b78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022b7c:	ed9d 0b00 	vldr	d0, [sp]
 8022b80:	f000 f96a 	bl	8022e58 <__kernel_cos>
 8022b84:	e7f2      	b.n	8022b6c <sin+0x7c>
 8022b86:	bf00      	nop
	...
 8022b90:	3fe921fb 	.word	0x3fe921fb
 8022b94:	7fefffff 	.word	0x7fefffff

08022b98 <finite>:
 8022b98:	b082      	sub	sp, #8
 8022b9a:	ed8d 0b00 	vstr	d0, [sp]
 8022b9e:	9801      	ldr	r0, [sp, #4]
 8022ba0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8022ba4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8022ba8:	0fc0      	lsrs	r0, r0, #31
 8022baa:	b002      	add	sp, #8
 8022bac:	4770      	bx	lr
	...

08022bb0 <__ieee754_sqrt>:
 8022bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bb4:	4a66      	ldr	r2, [pc, #408]	@ (8022d50 <__ieee754_sqrt+0x1a0>)
 8022bb6:	ec55 4b10 	vmov	r4, r5, d0
 8022bba:	43aa      	bics	r2, r5
 8022bbc:	462b      	mov	r3, r5
 8022bbe:	4621      	mov	r1, r4
 8022bc0:	d110      	bne.n	8022be4 <__ieee754_sqrt+0x34>
 8022bc2:	4622      	mov	r2, r4
 8022bc4:	4620      	mov	r0, r4
 8022bc6:	4629      	mov	r1, r5
 8022bc8:	f7dd fd26 	bl	8000618 <__aeabi_dmul>
 8022bcc:	4602      	mov	r2, r0
 8022bce:	460b      	mov	r3, r1
 8022bd0:	4620      	mov	r0, r4
 8022bd2:	4629      	mov	r1, r5
 8022bd4:	f7dd fb6a 	bl	80002ac <__adddf3>
 8022bd8:	4604      	mov	r4, r0
 8022bda:	460d      	mov	r5, r1
 8022bdc:	ec45 4b10 	vmov	d0, r4, r5
 8022be0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022be4:	2d00      	cmp	r5, #0
 8022be6:	dc0e      	bgt.n	8022c06 <__ieee754_sqrt+0x56>
 8022be8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8022bec:	4322      	orrs	r2, r4
 8022bee:	d0f5      	beq.n	8022bdc <__ieee754_sqrt+0x2c>
 8022bf0:	b19d      	cbz	r5, 8022c1a <__ieee754_sqrt+0x6a>
 8022bf2:	4622      	mov	r2, r4
 8022bf4:	4620      	mov	r0, r4
 8022bf6:	4629      	mov	r1, r5
 8022bf8:	f7dd fb56 	bl	80002a8 <__aeabi_dsub>
 8022bfc:	4602      	mov	r2, r0
 8022bfe:	460b      	mov	r3, r1
 8022c00:	f7dd fe34 	bl	800086c <__aeabi_ddiv>
 8022c04:	e7e8      	b.n	8022bd8 <__ieee754_sqrt+0x28>
 8022c06:	152a      	asrs	r2, r5, #20
 8022c08:	d115      	bne.n	8022c36 <__ieee754_sqrt+0x86>
 8022c0a:	2000      	movs	r0, #0
 8022c0c:	e009      	b.n	8022c22 <__ieee754_sqrt+0x72>
 8022c0e:	0acb      	lsrs	r3, r1, #11
 8022c10:	3a15      	subs	r2, #21
 8022c12:	0549      	lsls	r1, r1, #21
 8022c14:	2b00      	cmp	r3, #0
 8022c16:	d0fa      	beq.n	8022c0e <__ieee754_sqrt+0x5e>
 8022c18:	e7f7      	b.n	8022c0a <__ieee754_sqrt+0x5a>
 8022c1a:	462a      	mov	r2, r5
 8022c1c:	e7fa      	b.n	8022c14 <__ieee754_sqrt+0x64>
 8022c1e:	005b      	lsls	r3, r3, #1
 8022c20:	3001      	adds	r0, #1
 8022c22:	02dc      	lsls	r4, r3, #11
 8022c24:	d5fb      	bpl.n	8022c1e <__ieee754_sqrt+0x6e>
 8022c26:	1e44      	subs	r4, r0, #1
 8022c28:	1b12      	subs	r2, r2, r4
 8022c2a:	f1c0 0420 	rsb	r4, r0, #32
 8022c2e:	fa21 f404 	lsr.w	r4, r1, r4
 8022c32:	4323      	orrs	r3, r4
 8022c34:	4081      	lsls	r1, r0
 8022c36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022c3a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8022c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8022c42:	07d2      	lsls	r2, r2, #31
 8022c44:	bf5c      	itt	pl
 8022c46:	005b      	lslpl	r3, r3, #1
 8022c48:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8022c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8022c50:	bf58      	it	pl
 8022c52:	0049      	lslpl	r1, r1, #1
 8022c54:	2600      	movs	r6, #0
 8022c56:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8022c5a:	107f      	asrs	r7, r7, #1
 8022c5c:	0049      	lsls	r1, r1, #1
 8022c5e:	2016      	movs	r0, #22
 8022c60:	4632      	mov	r2, r6
 8022c62:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8022c66:	1915      	adds	r5, r2, r4
 8022c68:	429d      	cmp	r5, r3
 8022c6a:	bfde      	ittt	le
 8022c6c:	192a      	addle	r2, r5, r4
 8022c6e:	1b5b      	suble	r3, r3, r5
 8022c70:	1936      	addle	r6, r6, r4
 8022c72:	0fcd      	lsrs	r5, r1, #31
 8022c74:	3801      	subs	r0, #1
 8022c76:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8022c7a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8022c7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8022c82:	d1f0      	bne.n	8022c66 <__ieee754_sqrt+0xb6>
 8022c84:	4605      	mov	r5, r0
 8022c86:	2420      	movs	r4, #32
 8022c88:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8022c8c:	4293      	cmp	r3, r2
 8022c8e:	eb0c 0e00 	add.w	lr, ip, r0
 8022c92:	dc02      	bgt.n	8022c9a <__ieee754_sqrt+0xea>
 8022c94:	d113      	bne.n	8022cbe <__ieee754_sqrt+0x10e>
 8022c96:	458e      	cmp	lr, r1
 8022c98:	d811      	bhi.n	8022cbe <__ieee754_sqrt+0x10e>
 8022c9a:	f1be 0f00 	cmp.w	lr, #0
 8022c9e:	eb0e 000c 	add.w	r0, lr, ip
 8022ca2:	da3f      	bge.n	8022d24 <__ieee754_sqrt+0x174>
 8022ca4:	2800      	cmp	r0, #0
 8022ca6:	db3d      	blt.n	8022d24 <__ieee754_sqrt+0x174>
 8022ca8:	f102 0801 	add.w	r8, r2, #1
 8022cac:	1a9b      	subs	r3, r3, r2
 8022cae:	458e      	cmp	lr, r1
 8022cb0:	bf88      	it	hi
 8022cb2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8022cb6:	eba1 010e 	sub.w	r1, r1, lr
 8022cba:	4465      	add	r5, ip
 8022cbc:	4642      	mov	r2, r8
 8022cbe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8022cc2:	3c01      	subs	r4, #1
 8022cc4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8022cc8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8022ccc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8022cd0:	d1dc      	bne.n	8022c8c <__ieee754_sqrt+0xdc>
 8022cd2:	4319      	orrs	r1, r3
 8022cd4:	d01b      	beq.n	8022d0e <__ieee754_sqrt+0x15e>
 8022cd6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8022d54 <__ieee754_sqrt+0x1a4>
 8022cda:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8022d58 <__ieee754_sqrt+0x1a8>
 8022cde:	e9da 0100 	ldrd	r0, r1, [sl]
 8022ce2:	e9db 2300 	ldrd	r2, r3, [fp]
 8022ce6:	f7dd fadf 	bl	80002a8 <__aeabi_dsub>
 8022cea:	e9da 8900 	ldrd	r8, r9, [sl]
 8022cee:	4602      	mov	r2, r0
 8022cf0:	460b      	mov	r3, r1
 8022cf2:	4640      	mov	r0, r8
 8022cf4:	4649      	mov	r1, r9
 8022cf6:	f7dd ff0b 	bl	8000b10 <__aeabi_dcmple>
 8022cfa:	b140      	cbz	r0, 8022d0e <__ieee754_sqrt+0x15e>
 8022cfc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8022d00:	e9da 0100 	ldrd	r0, r1, [sl]
 8022d04:	e9db 2300 	ldrd	r2, r3, [fp]
 8022d08:	d10e      	bne.n	8022d28 <__ieee754_sqrt+0x178>
 8022d0a:	3601      	adds	r6, #1
 8022d0c:	4625      	mov	r5, r4
 8022d0e:	1073      	asrs	r3, r6, #1
 8022d10:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8022d14:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8022d18:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8022d1c:	086b      	lsrs	r3, r5, #1
 8022d1e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8022d22:	e759      	b.n	8022bd8 <__ieee754_sqrt+0x28>
 8022d24:	4690      	mov	r8, r2
 8022d26:	e7c1      	b.n	8022cac <__ieee754_sqrt+0xfc>
 8022d28:	f7dd fac0 	bl	80002ac <__adddf3>
 8022d2c:	e9da 8900 	ldrd	r8, r9, [sl]
 8022d30:	4602      	mov	r2, r0
 8022d32:	460b      	mov	r3, r1
 8022d34:	4640      	mov	r0, r8
 8022d36:	4649      	mov	r1, r9
 8022d38:	f7dd fee0 	bl	8000afc <__aeabi_dcmplt>
 8022d3c:	b120      	cbz	r0, 8022d48 <__ieee754_sqrt+0x198>
 8022d3e:	1cab      	adds	r3, r5, #2
 8022d40:	bf08      	it	eq
 8022d42:	3601      	addeq	r6, #1
 8022d44:	3502      	adds	r5, #2
 8022d46:	e7e2      	b.n	8022d0e <__ieee754_sqrt+0x15e>
 8022d48:	1c6b      	adds	r3, r5, #1
 8022d4a:	f023 0501 	bic.w	r5, r3, #1
 8022d4e:	e7de      	b.n	8022d0e <__ieee754_sqrt+0x15e>
 8022d50:	7ff00000 	.word	0x7ff00000
 8022d54:	080265f8 	.word	0x080265f8
 8022d58:	080265f0 	.word	0x080265f0
 8022d5c:	00000000 	.word	0x00000000

08022d60 <floor>:
 8022d60:	ec51 0b10 	vmov	r0, r1, d0
 8022d64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8022d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022d6c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8022d70:	2e13      	cmp	r6, #19
 8022d72:	460c      	mov	r4, r1
 8022d74:	4605      	mov	r5, r0
 8022d76:	4680      	mov	r8, r0
 8022d78:	dc34      	bgt.n	8022de4 <floor+0x84>
 8022d7a:	2e00      	cmp	r6, #0
 8022d7c:	da17      	bge.n	8022dae <floor+0x4e>
 8022d7e:	a332      	add	r3, pc, #200	@ (adr r3, 8022e48 <floor+0xe8>)
 8022d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d84:	f7dd fa92 	bl	80002ac <__adddf3>
 8022d88:	2200      	movs	r2, #0
 8022d8a:	2300      	movs	r3, #0
 8022d8c:	f7dd fed4 	bl	8000b38 <__aeabi_dcmpgt>
 8022d90:	b150      	cbz	r0, 8022da8 <floor+0x48>
 8022d92:	2c00      	cmp	r4, #0
 8022d94:	da55      	bge.n	8022e42 <floor+0xe2>
 8022d96:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8022d9a:	432c      	orrs	r4, r5
 8022d9c:	2500      	movs	r5, #0
 8022d9e:	42ac      	cmp	r4, r5
 8022da0:	4c2b      	ldr	r4, [pc, #172]	@ (8022e50 <floor+0xf0>)
 8022da2:	bf08      	it	eq
 8022da4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8022da8:	4621      	mov	r1, r4
 8022daa:	4628      	mov	r0, r5
 8022dac:	e023      	b.n	8022df6 <floor+0x96>
 8022dae:	4f29      	ldr	r7, [pc, #164]	@ (8022e54 <floor+0xf4>)
 8022db0:	4137      	asrs	r7, r6
 8022db2:	ea01 0307 	and.w	r3, r1, r7
 8022db6:	4303      	orrs	r3, r0
 8022db8:	d01d      	beq.n	8022df6 <floor+0x96>
 8022dba:	a323      	add	r3, pc, #140	@ (adr r3, 8022e48 <floor+0xe8>)
 8022dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dc0:	f7dd fa74 	bl	80002ac <__adddf3>
 8022dc4:	2200      	movs	r2, #0
 8022dc6:	2300      	movs	r3, #0
 8022dc8:	f7dd feb6 	bl	8000b38 <__aeabi_dcmpgt>
 8022dcc:	2800      	cmp	r0, #0
 8022dce:	d0eb      	beq.n	8022da8 <floor+0x48>
 8022dd0:	2c00      	cmp	r4, #0
 8022dd2:	bfbe      	ittt	lt
 8022dd4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8022dd8:	4133      	asrlt	r3, r6
 8022dda:	18e4      	addlt	r4, r4, r3
 8022ddc:	ea24 0407 	bic.w	r4, r4, r7
 8022de0:	2500      	movs	r5, #0
 8022de2:	e7e1      	b.n	8022da8 <floor+0x48>
 8022de4:	2e33      	cmp	r6, #51	@ 0x33
 8022de6:	dd0a      	ble.n	8022dfe <floor+0x9e>
 8022de8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8022dec:	d103      	bne.n	8022df6 <floor+0x96>
 8022dee:	4602      	mov	r2, r0
 8022df0:	460b      	mov	r3, r1
 8022df2:	f7dd fa5b 	bl	80002ac <__adddf3>
 8022df6:	ec41 0b10 	vmov	d0, r0, r1
 8022dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022dfe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8022e02:	f04f 37ff 	mov.w	r7, #4294967295
 8022e06:	40df      	lsrs	r7, r3
 8022e08:	4207      	tst	r7, r0
 8022e0a:	d0f4      	beq.n	8022df6 <floor+0x96>
 8022e0c:	a30e      	add	r3, pc, #56	@ (adr r3, 8022e48 <floor+0xe8>)
 8022e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e12:	f7dd fa4b 	bl	80002ac <__adddf3>
 8022e16:	2200      	movs	r2, #0
 8022e18:	2300      	movs	r3, #0
 8022e1a:	f7dd fe8d 	bl	8000b38 <__aeabi_dcmpgt>
 8022e1e:	2800      	cmp	r0, #0
 8022e20:	d0c2      	beq.n	8022da8 <floor+0x48>
 8022e22:	2c00      	cmp	r4, #0
 8022e24:	da0a      	bge.n	8022e3c <floor+0xdc>
 8022e26:	2e14      	cmp	r6, #20
 8022e28:	d101      	bne.n	8022e2e <floor+0xce>
 8022e2a:	3401      	adds	r4, #1
 8022e2c:	e006      	b.n	8022e3c <floor+0xdc>
 8022e2e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8022e32:	2301      	movs	r3, #1
 8022e34:	40b3      	lsls	r3, r6
 8022e36:	441d      	add	r5, r3
 8022e38:	4545      	cmp	r5, r8
 8022e3a:	d3f6      	bcc.n	8022e2a <floor+0xca>
 8022e3c:	ea25 0507 	bic.w	r5, r5, r7
 8022e40:	e7b2      	b.n	8022da8 <floor+0x48>
 8022e42:	2500      	movs	r5, #0
 8022e44:	462c      	mov	r4, r5
 8022e46:	e7af      	b.n	8022da8 <floor+0x48>
 8022e48:	8800759c 	.word	0x8800759c
 8022e4c:	7e37e43c 	.word	0x7e37e43c
 8022e50:	bff00000 	.word	0xbff00000
 8022e54:	000fffff 	.word	0x000fffff

08022e58 <__kernel_cos>:
 8022e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e5c:	ec57 6b10 	vmov	r6, r7, d0
 8022e60:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8022e64:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8022e68:	ed8d 1b00 	vstr	d1, [sp]
 8022e6c:	d206      	bcs.n	8022e7c <__kernel_cos+0x24>
 8022e6e:	4630      	mov	r0, r6
 8022e70:	4639      	mov	r1, r7
 8022e72:	f7dd fe81 	bl	8000b78 <__aeabi_d2iz>
 8022e76:	2800      	cmp	r0, #0
 8022e78:	f000 8088 	beq.w	8022f8c <__kernel_cos+0x134>
 8022e7c:	4632      	mov	r2, r6
 8022e7e:	463b      	mov	r3, r7
 8022e80:	4630      	mov	r0, r6
 8022e82:	4639      	mov	r1, r7
 8022e84:	f7dd fbc8 	bl	8000618 <__aeabi_dmul>
 8022e88:	4b51      	ldr	r3, [pc, #324]	@ (8022fd0 <__kernel_cos+0x178>)
 8022e8a:	2200      	movs	r2, #0
 8022e8c:	4604      	mov	r4, r0
 8022e8e:	460d      	mov	r5, r1
 8022e90:	f7dd fbc2 	bl	8000618 <__aeabi_dmul>
 8022e94:	a340      	add	r3, pc, #256	@ (adr r3, 8022f98 <__kernel_cos+0x140>)
 8022e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e9a:	4682      	mov	sl, r0
 8022e9c:	468b      	mov	fp, r1
 8022e9e:	4620      	mov	r0, r4
 8022ea0:	4629      	mov	r1, r5
 8022ea2:	f7dd fbb9 	bl	8000618 <__aeabi_dmul>
 8022ea6:	a33e      	add	r3, pc, #248	@ (adr r3, 8022fa0 <__kernel_cos+0x148>)
 8022ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022eac:	f7dd f9fe 	bl	80002ac <__adddf3>
 8022eb0:	4622      	mov	r2, r4
 8022eb2:	462b      	mov	r3, r5
 8022eb4:	f7dd fbb0 	bl	8000618 <__aeabi_dmul>
 8022eb8:	a33b      	add	r3, pc, #236	@ (adr r3, 8022fa8 <__kernel_cos+0x150>)
 8022eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ebe:	f7dd f9f3 	bl	80002a8 <__aeabi_dsub>
 8022ec2:	4622      	mov	r2, r4
 8022ec4:	462b      	mov	r3, r5
 8022ec6:	f7dd fba7 	bl	8000618 <__aeabi_dmul>
 8022eca:	a339      	add	r3, pc, #228	@ (adr r3, 8022fb0 <__kernel_cos+0x158>)
 8022ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ed0:	f7dd f9ec 	bl	80002ac <__adddf3>
 8022ed4:	4622      	mov	r2, r4
 8022ed6:	462b      	mov	r3, r5
 8022ed8:	f7dd fb9e 	bl	8000618 <__aeabi_dmul>
 8022edc:	a336      	add	r3, pc, #216	@ (adr r3, 8022fb8 <__kernel_cos+0x160>)
 8022ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ee2:	f7dd f9e1 	bl	80002a8 <__aeabi_dsub>
 8022ee6:	4622      	mov	r2, r4
 8022ee8:	462b      	mov	r3, r5
 8022eea:	f7dd fb95 	bl	8000618 <__aeabi_dmul>
 8022eee:	a334      	add	r3, pc, #208	@ (adr r3, 8022fc0 <__kernel_cos+0x168>)
 8022ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ef4:	f7dd f9da 	bl	80002ac <__adddf3>
 8022ef8:	4622      	mov	r2, r4
 8022efa:	462b      	mov	r3, r5
 8022efc:	f7dd fb8c 	bl	8000618 <__aeabi_dmul>
 8022f00:	4622      	mov	r2, r4
 8022f02:	462b      	mov	r3, r5
 8022f04:	f7dd fb88 	bl	8000618 <__aeabi_dmul>
 8022f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022f0c:	4604      	mov	r4, r0
 8022f0e:	460d      	mov	r5, r1
 8022f10:	4630      	mov	r0, r6
 8022f12:	4639      	mov	r1, r7
 8022f14:	f7dd fb80 	bl	8000618 <__aeabi_dmul>
 8022f18:	460b      	mov	r3, r1
 8022f1a:	4602      	mov	r2, r0
 8022f1c:	4629      	mov	r1, r5
 8022f1e:	4620      	mov	r0, r4
 8022f20:	f7dd f9c2 	bl	80002a8 <__aeabi_dsub>
 8022f24:	4b2b      	ldr	r3, [pc, #172]	@ (8022fd4 <__kernel_cos+0x17c>)
 8022f26:	4598      	cmp	r8, r3
 8022f28:	4606      	mov	r6, r0
 8022f2a:	460f      	mov	r7, r1
 8022f2c:	d810      	bhi.n	8022f50 <__kernel_cos+0xf8>
 8022f2e:	4602      	mov	r2, r0
 8022f30:	460b      	mov	r3, r1
 8022f32:	4650      	mov	r0, sl
 8022f34:	4659      	mov	r1, fp
 8022f36:	f7dd f9b7 	bl	80002a8 <__aeabi_dsub>
 8022f3a:	460b      	mov	r3, r1
 8022f3c:	4926      	ldr	r1, [pc, #152]	@ (8022fd8 <__kernel_cos+0x180>)
 8022f3e:	4602      	mov	r2, r0
 8022f40:	2000      	movs	r0, #0
 8022f42:	f7dd f9b1 	bl	80002a8 <__aeabi_dsub>
 8022f46:	ec41 0b10 	vmov	d0, r0, r1
 8022f4a:	b003      	add	sp, #12
 8022f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f50:	4b22      	ldr	r3, [pc, #136]	@ (8022fdc <__kernel_cos+0x184>)
 8022f52:	4921      	ldr	r1, [pc, #132]	@ (8022fd8 <__kernel_cos+0x180>)
 8022f54:	4598      	cmp	r8, r3
 8022f56:	bf8c      	ite	hi
 8022f58:	4d21      	ldrhi	r5, [pc, #132]	@ (8022fe0 <__kernel_cos+0x188>)
 8022f5a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8022f5e:	2400      	movs	r4, #0
 8022f60:	4622      	mov	r2, r4
 8022f62:	462b      	mov	r3, r5
 8022f64:	2000      	movs	r0, #0
 8022f66:	f7dd f99f 	bl	80002a8 <__aeabi_dsub>
 8022f6a:	4622      	mov	r2, r4
 8022f6c:	4680      	mov	r8, r0
 8022f6e:	4689      	mov	r9, r1
 8022f70:	462b      	mov	r3, r5
 8022f72:	4650      	mov	r0, sl
 8022f74:	4659      	mov	r1, fp
 8022f76:	f7dd f997 	bl	80002a8 <__aeabi_dsub>
 8022f7a:	4632      	mov	r2, r6
 8022f7c:	463b      	mov	r3, r7
 8022f7e:	f7dd f993 	bl	80002a8 <__aeabi_dsub>
 8022f82:	4602      	mov	r2, r0
 8022f84:	460b      	mov	r3, r1
 8022f86:	4640      	mov	r0, r8
 8022f88:	4649      	mov	r1, r9
 8022f8a:	e7da      	b.n	8022f42 <__kernel_cos+0xea>
 8022f8c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8022fc8 <__kernel_cos+0x170>
 8022f90:	e7db      	b.n	8022f4a <__kernel_cos+0xf2>
 8022f92:	bf00      	nop
 8022f94:	f3af 8000 	nop.w
 8022f98:	be8838d4 	.word	0xbe8838d4
 8022f9c:	bda8fae9 	.word	0xbda8fae9
 8022fa0:	bdb4b1c4 	.word	0xbdb4b1c4
 8022fa4:	3e21ee9e 	.word	0x3e21ee9e
 8022fa8:	809c52ad 	.word	0x809c52ad
 8022fac:	3e927e4f 	.word	0x3e927e4f
 8022fb0:	19cb1590 	.word	0x19cb1590
 8022fb4:	3efa01a0 	.word	0x3efa01a0
 8022fb8:	16c15177 	.word	0x16c15177
 8022fbc:	3f56c16c 	.word	0x3f56c16c
 8022fc0:	5555554c 	.word	0x5555554c
 8022fc4:	3fa55555 	.word	0x3fa55555
 8022fc8:	00000000 	.word	0x00000000
 8022fcc:	3ff00000 	.word	0x3ff00000
 8022fd0:	3fe00000 	.word	0x3fe00000
 8022fd4:	3fd33332 	.word	0x3fd33332
 8022fd8:	3ff00000 	.word	0x3ff00000
 8022fdc:	3fe90000 	.word	0x3fe90000
 8022fe0:	3fd20000 	.word	0x3fd20000
 8022fe4:	00000000 	.word	0x00000000

08022fe8 <__kernel_sin>:
 8022fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fec:	ec55 4b10 	vmov	r4, r5, d0
 8022ff0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8022ff4:	b085      	sub	sp, #20
 8022ff6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8022ffa:	ed8d 1b02 	vstr	d1, [sp, #8]
 8022ffe:	4680      	mov	r8, r0
 8023000:	d205      	bcs.n	802300e <__kernel_sin+0x26>
 8023002:	4620      	mov	r0, r4
 8023004:	4629      	mov	r1, r5
 8023006:	f7dd fdb7 	bl	8000b78 <__aeabi_d2iz>
 802300a:	2800      	cmp	r0, #0
 802300c:	d052      	beq.n	80230b4 <__kernel_sin+0xcc>
 802300e:	4622      	mov	r2, r4
 8023010:	462b      	mov	r3, r5
 8023012:	4620      	mov	r0, r4
 8023014:	4629      	mov	r1, r5
 8023016:	f7dd faff 	bl	8000618 <__aeabi_dmul>
 802301a:	4682      	mov	sl, r0
 802301c:	468b      	mov	fp, r1
 802301e:	4602      	mov	r2, r0
 8023020:	460b      	mov	r3, r1
 8023022:	4620      	mov	r0, r4
 8023024:	4629      	mov	r1, r5
 8023026:	f7dd faf7 	bl	8000618 <__aeabi_dmul>
 802302a:	a342      	add	r3, pc, #264	@ (adr r3, 8023134 <__kernel_sin+0x14c>)
 802302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023030:	e9cd 0100 	strd	r0, r1, [sp]
 8023034:	4650      	mov	r0, sl
 8023036:	4659      	mov	r1, fp
 8023038:	f7dd faee 	bl	8000618 <__aeabi_dmul>
 802303c:	a33f      	add	r3, pc, #252	@ (adr r3, 802313c <__kernel_sin+0x154>)
 802303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023042:	f7dd f931 	bl	80002a8 <__aeabi_dsub>
 8023046:	4652      	mov	r2, sl
 8023048:	465b      	mov	r3, fp
 802304a:	f7dd fae5 	bl	8000618 <__aeabi_dmul>
 802304e:	a33d      	add	r3, pc, #244	@ (adr r3, 8023144 <__kernel_sin+0x15c>)
 8023050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023054:	f7dd f92a 	bl	80002ac <__adddf3>
 8023058:	4652      	mov	r2, sl
 802305a:	465b      	mov	r3, fp
 802305c:	f7dd fadc 	bl	8000618 <__aeabi_dmul>
 8023060:	a33a      	add	r3, pc, #232	@ (adr r3, 802314c <__kernel_sin+0x164>)
 8023062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023066:	f7dd f91f 	bl	80002a8 <__aeabi_dsub>
 802306a:	4652      	mov	r2, sl
 802306c:	465b      	mov	r3, fp
 802306e:	f7dd fad3 	bl	8000618 <__aeabi_dmul>
 8023072:	a338      	add	r3, pc, #224	@ (adr r3, 8023154 <__kernel_sin+0x16c>)
 8023074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023078:	f7dd f918 	bl	80002ac <__adddf3>
 802307c:	4606      	mov	r6, r0
 802307e:	460f      	mov	r7, r1
 8023080:	f1b8 0f00 	cmp.w	r8, #0
 8023084:	d11b      	bne.n	80230be <__kernel_sin+0xd6>
 8023086:	4602      	mov	r2, r0
 8023088:	460b      	mov	r3, r1
 802308a:	4650      	mov	r0, sl
 802308c:	4659      	mov	r1, fp
 802308e:	f7dd fac3 	bl	8000618 <__aeabi_dmul>
 8023092:	a325      	add	r3, pc, #148	@ (adr r3, 8023128 <__kernel_sin+0x140>)
 8023094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023098:	f7dd f906 	bl	80002a8 <__aeabi_dsub>
 802309c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80230a0:	f7dd faba 	bl	8000618 <__aeabi_dmul>
 80230a4:	4602      	mov	r2, r0
 80230a6:	460b      	mov	r3, r1
 80230a8:	4620      	mov	r0, r4
 80230aa:	4629      	mov	r1, r5
 80230ac:	f7dd f8fe 	bl	80002ac <__adddf3>
 80230b0:	4604      	mov	r4, r0
 80230b2:	460d      	mov	r5, r1
 80230b4:	ec45 4b10 	vmov	d0, r4, r5
 80230b8:	b005      	add	sp, #20
 80230ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80230c2:	4b1b      	ldr	r3, [pc, #108]	@ (8023130 <__kernel_sin+0x148>)
 80230c4:	2200      	movs	r2, #0
 80230c6:	f7dd faa7 	bl	8000618 <__aeabi_dmul>
 80230ca:	4632      	mov	r2, r6
 80230cc:	4680      	mov	r8, r0
 80230ce:	4689      	mov	r9, r1
 80230d0:	463b      	mov	r3, r7
 80230d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80230d6:	f7dd fa9f 	bl	8000618 <__aeabi_dmul>
 80230da:	4602      	mov	r2, r0
 80230dc:	460b      	mov	r3, r1
 80230de:	4640      	mov	r0, r8
 80230e0:	4649      	mov	r1, r9
 80230e2:	f7dd f8e1 	bl	80002a8 <__aeabi_dsub>
 80230e6:	4652      	mov	r2, sl
 80230e8:	465b      	mov	r3, fp
 80230ea:	f7dd fa95 	bl	8000618 <__aeabi_dmul>
 80230ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80230f2:	f7dd f8d9 	bl	80002a8 <__aeabi_dsub>
 80230f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8023128 <__kernel_sin+0x140>)
 80230f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230fc:	4606      	mov	r6, r0
 80230fe:	460f      	mov	r7, r1
 8023100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023104:	f7dd fa88 	bl	8000618 <__aeabi_dmul>
 8023108:	4602      	mov	r2, r0
 802310a:	460b      	mov	r3, r1
 802310c:	4630      	mov	r0, r6
 802310e:	4639      	mov	r1, r7
 8023110:	f7dd f8cc 	bl	80002ac <__adddf3>
 8023114:	4602      	mov	r2, r0
 8023116:	460b      	mov	r3, r1
 8023118:	4620      	mov	r0, r4
 802311a:	4629      	mov	r1, r5
 802311c:	f7dd f8c4 	bl	80002a8 <__aeabi_dsub>
 8023120:	e7c6      	b.n	80230b0 <__kernel_sin+0xc8>
 8023122:	bf00      	nop
 8023124:	f3af 8000 	nop.w
 8023128:	55555549 	.word	0x55555549
 802312c:	3fc55555 	.word	0x3fc55555
 8023130:	3fe00000 	.word	0x3fe00000
 8023134:	5acfd57c 	.word	0x5acfd57c
 8023138:	3de5d93a 	.word	0x3de5d93a
 802313c:	8a2b9ceb 	.word	0x8a2b9ceb
 8023140:	3e5ae5e6 	.word	0x3e5ae5e6
 8023144:	57b1fe7d 	.word	0x57b1fe7d
 8023148:	3ec71de3 	.word	0x3ec71de3
 802314c:	19c161d5 	.word	0x19c161d5
 8023150:	3f2a01a0 	.word	0x3f2a01a0
 8023154:	1110f8a6 	.word	0x1110f8a6
 8023158:	3f811111 	.word	0x3f811111
 802315c:	00000000 	.word	0x00000000

08023160 <__ieee754_acos>:
 8023160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023164:	ec55 4b10 	vmov	r4, r5, d0
 8023168:	49b7      	ldr	r1, [pc, #732]	@ (8023448 <__ieee754_acos+0x2e8>)
 802316a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 802316e:	428b      	cmp	r3, r1
 8023170:	d919      	bls.n	80231a6 <__ieee754_acos+0x46>
 8023172:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8023176:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 802317a:	4323      	orrs	r3, r4
 802317c:	d106      	bne.n	802318c <__ieee754_acos+0x2c>
 802317e:	2d00      	cmp	r5, #0
 8023180:	f340 8210 	ble.w	80235a4 <__ieee754_acos+0x444>
 8023184:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 80233d8 <__ieee754_acos+0x278>
 8023188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802318c:	4622      	mov	r2, r4
 802318e:	462b      	mov	r3, r5
 8023190:	4620      	mov	r0, r4
 8023192:	4629      	mov	r1, r5
 8023194:	f7dd f888 	bl	80002a8 <__aeabi_dsub>
 8023198:	4602      	mov	r2, r0
 802319a:	460b      	mov	r3, r1
 802319c:	f7dd fb66 	bl	800086c <__aeabi_ddiv>
 80231a0:	ec41 0b10 	vmov	d0, r0, r1
 80231a4:	e7f0      	b.n	8023188 <__ieee754_acos+0x28>
 80231a6:	49a9      	ldr	r1, [pc, #676]	@ (802344c <__ieee754_acos+0x2ec>)
 80231a8:	428b      	cmp	r3, r1
 80231aa:	f200 8085 	bhi.w	80232b8 <__ieee754_acos+0x158>
 80231ae:	4aa8      	ldr	r2, [pc, #672]	@ (8023450 <__ieee754_acos+0x2f0>)
 80231b0:	4293      	cmp	r3, r2
 80231b2:	f240 81fa 	bls.w	80235aa <__ieee754_acos+0x44a>
 80231b6:	4622      	mov	r2, r4
 80231b8:	462b      	mov	r3, r5
 80231ba:	4620      	mov	r0, r4
 80231bc:	4629      	mov	r1, r5
 80231be:	f7dd fa2b 	bl	8000618 <__aeabi_dmul>
 80231c2:	a387      	add	r3, pc, #540	@ (adr r3, 80233e0 <__ieee754_acos+0x280>)
 80231c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231c8:	4606      	mov	r6, r0
 80231ca:	460f      	mov	r7, r1
 80231cc:	f7dd fa24 	bl	8000618 <__aeabi_dmul>
 80231d0:	a385      	add	r3, pc, #532	@ (adr r3, 80233e8 <__ieee754_acos+0x288>)
 80231d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231d6:	f7dd f869 	bl	80002ac <__adddf3>
 80231da:	4632      	mov	r2, r6
 80231dc:	463b      	mov	r3, r7
 80231de:	f7dd fa1b 	bl	8000618 <__aeabi_dmul>
 80231e2:	a383      	add	r3, pc, #524	@ (adr r3, 80233f0 <__ieee754_acos+0x290>)
 80231e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231e8:	f7dd f85e 	bl	80002a8 <__aeabi_dsub>
 80231ec:	4632      	mov	r2, r6
 80231ee:	463b      	mov	r3, r7
 80231f0:	f7dd fa12 	bl	8000618 <__aeabi_dmul>
 80231f4:	a380      	add	r3, pc, #512	@ (adr r3, 80233f8 <__ieee754_acos+0x298>)
 80231f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231fa:	f7dd f857 	bl	80002ac <__adddf3>
 80231fe:	4632      	mov	r2, r6
 8023200:	463b      	mov	r3, r7
 8023202:	f7dd fa09 	bl	8000618 <__aeabi_dmul>
 8023206:	a37e      	add	r3, pc, #504	@ (adr r3, 8023400 <__ieee754_acos+0x2a0>)
 8023208:	e9d3 2300 	ldrd	r2, r3, [r3]
 802320c:	f7dd f84c 	bl	80002a8 <__aeabi_dsub>
 8023210:	4632      	mov	r2, r6
 8023212:	463b      	mov	r3, r7
 8023214:	f7dd fa00 	bl	8000618 <__aeabi_dmul>
 8023218:	a37b      	add	r3, pc, #492	@ (adr r3, 8023408 <__ieee754_acos+0x2a8>)
 802321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802321e:	f7dd f845 	bl	80002ac <__adddf3>
 8023222:	4632      	mov	r2, r6
 8023224:	463b      	mov	r3, r7
 8023226:	f7dd f9f7 	bl	8000618 <__aeabi_dmul>
 802322a:	a379      	add	r3, pc, #484	@ (adr r3, 8023410 <__ieee754_acos+0x2b0>)
 802322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023230:	4680      	mov	r8, r0
 8023232:	4689      	mov	r9, r1
 8023234:	4630      	mov	r0, r6
 8023236:	4639      	mov	r1, r7
 8023238:	f7dd f9ee 	bl	8000618 <__aeabi_dmul>
 802323c:	a376      	add	r3, pc, #472	@ (adr r3, 8023418 <__ieee754_acos+0x2b8>)
 802323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023242:	f7dd f831 	bl	80002a8 <__aeabi_dsub>
 8023246:	4632      	mov	r2, r6
 8023248:	463b      	mov	r3, r7
 802324a:	f7dd f9e5 	bl	8000618 <__aeabi_dmul>
 802324e:	a374      	add	r3, pc, #464	@ (adr r3, 8023420 <__ieee754_acos+0x2c0>)
 8023250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023254:	f7dd f82a 	bl	80002ac <__adddf3>
 8023258:	4632      	mov	r2, r6
 802325a:	463b      	mov	r3, r7
 802325c:	f7dd f9dc 	bl	8000618 <__aeabi_dmul>
 8023260:	a371      	add	r3, pc, #452	@ (adr r3, 8023428 <__ieee754_acos+0x2c8>)
 8023262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023266:	f7dd f81f 	bl	80002a8 <__aeabi_dsub>
 802326a:	4632      	mov	r2, r6
 802326c:	463b      	mov	r3, r7
 802326e:	f7dd f9d3 	bl	8000618 <__aeabi_dmul>
 8023272:	4b78      	ldr	r3, [pc, #480]	@ (8023454 <__ieee754_acos+0x2f4>)
 8023274:	2200      	movs	r2, #0
 8023276:	f7dd f819 	bl	80002ac <__adddf3>
 802327a:	4602      	mov	r2, r0
 802327c:	460b      	mov	r3, r1
 802327e:	4640      	mov	r0, r8
 8023280:	4649      	mov	r1, r9
 8023282:	f7dd faf3 	bl	800086c <__aeabi_ddiv>
 8023286:	4622      	mov	r2, r4
 8023288:	462b      	mov	r3, r5
 802328a:	f7dd f9c5 	bl	8000618 <__aeabi_dmul>
 802328e:	4602      	mov	r2, r0
 8023290:	460b      	mov	r3, r1
 8023292:	a167      	add	r1, pc, #412	@ (adr r1, 8023430 <__ieee754_acos+0x2d0>)
 8023294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023298:	f7dd f806 	bl	80002a8 <__aeabi_dsub>
 802329c:	4602      	mov	r2, r0
 802329e:	460b      	mov	r3, r1
 80232a0:	4620      	mov	r0, r4
 80232a2:	4629      	mov	r1, r5
 80232a4:	f7dd f800 	bl	80002a8 <__aeabi_dsub>
 80232a8:	4602      	mov	r2, r0
 80232aa:	460b      	mov	r3, r1
 80232ac:	a162      	add	r1, pc, #392	@ (adr r1, 8023438 <__ieee754_acos+0x2d8>)
 80232ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80232b2:	f7dc fff9 	bl	80002a8 <__aeabi_dsub>
 80232b6:	e773      	b.n	80231a0 <__ieee754_acos+0x40>
 80232b8:	2d00      	cmp	r5, #0
 80232ba:	f280 80cf 	bge.w	802345c <__ieee754_acos+0x2fc>
 80232be:	4b65      	ldr	r3, [pc, #404]	@ (8023454 <__ieee754_acos+0x2f4>)
 80232c0:	2200      	movs	r2, #0
 80232c2:	4620      	mov	r0, r4
 80232c4:	4629      	mov	r1, r5
 80232c6:	f7dc fff1 	bl	80002ac <__adddf3>
 80232ca:	4b63      	ldr	r3, [pc, #396]	@ (8023458 <__ieee754_acos+0x2f8>)
 80232cc:	2200      	movs	r2, #0
 80232ce:	f7dd f9a3 	bl	8000618 <__aeabi_dmul>
 80232d2:	a343      	add	r3, pc, #268	@ (adr r3, 80233e0 <__ieee754_acos+0x280>)
 80232d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232d8:	4604      	mov	r4, r0
 80232da:	460d      	mov	r5, r1
 80232dc:	f7dd f99c 	bl	8000618 <__aeabi_dmul>
 80232e0:	a341      	add	r3, pc, #260	@ (adr r3, 80233e8 <__ieee754_acos+0x288>)
 80232e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232e6:	f7dc ffe1 	bl	80002ac <__adddf3>
 80232ea:	4622      	mov	r2, r4
 80232ec:	462b      	mov	r3, r5
 80232ee:	f7dd f993 	bl	8000618 <__aeabi_dmul>
 80232f2:	a33f      	add	r3, pc, #252	@ (adr r3, 80233f0 <__ieee754_acos+0x290>)
 80232f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232f8:	f7dc ffd6 	bl	80002a8 <__aeabi_dsub>
 80232fc:	4622      	mov	r2, r4
 80232fe:	462b      	mov	r3, r5
 8023300:	f7dd f98a 	bl	8000618 <__aeabi_dmul>
 8023304:	a33c      	add	r3, pc, #240	@ (adr r3, 80233f8 <__ieee754_acos+0x298>)
 8023306:	e9d3 2300 	ldrd	r2, r3, [r3]
 802330a:	f7dc ffcf 	bl	80002ac <__adddf3>
 802330e:	4622      	mov	r2, r4
 8023310:	462b      	mov	r3, r5
 8023312:	f7dd f981 	bl	8000618 <__aeabi_dmul>
 8023316:	a33a      	add	r3, pc, #232	@ (adr r3, 8023400 <__ieee754_acos+0x2a0>)
 8023318:	e9d3 2300 	ldrd	r2, r3, [r3]
 802331c:	f7dc ffc4 	bl	80002a8 <__aeabi_dsub>
 8023320:	4622      	mov	r2, r4
 8023322:	462b      	mov	r3, r5
 8023324:	f7dd f978 	bl	8000618 <__aeabi_dmul>
 8023328:	a337      	add	r3, pc, #220	@ (adr r3, 8023408 <__ieee754_acos+0x2a8>)
 802332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802332e:	f7dc ffbd 	bl	80002ac <__adddf3>
 8023332:	4622      	mov	r2, r4
 8023334:	462b      	mov	r3, r5
 8023336:	f7dd f96f 	bl	8000618 <__aeabi_dmul>
 802333a:	a335      	add	r3, pc, #212	@ (adr r3, 8023410 <__ieee754_acos+0x2b0>)
 802333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023340:	4606      	mov	r6, r0
 8023342:	460f      	mov	r7, r1
 8023344:	4620      	mov	r0, r4
 8023346:	4629      	mov	r1, r5
 8023348:	f7dd f966 	bl	8000618 <__aeabi_dmul>
 802334c:	a332      	add	r3, pc, #200	@ (adr r3, 8023418 <__ieee754_acos+0x2b8>)
 802334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023352:	f7dc ffa9 	bl	80002a8 <__aeabi_dsub>
 8023356:	4622      	mov	r2, r4
 8023358:	462b      	mov	r3, r5
 802335a:	f7dd f95d 	bl	8000618 <__aeabi_dmul>
 802335e:	a330      	add	r3, pc, #192	@ (adr r3, 8023420 <__ieee754_acos+0x2c0>)
 8023360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023364:	f7dc ffa2 	bl	80002ac <__adddf3>
 8023368:	4622      	mov	r2, r4
 802336a:	462b      	mov	r3, r5
 802336c:	f7dd f954 	bl	8000618 <__aeabi_dmul>
 8023370:	a32d      	add	r3, pc, #180	@ (adr r3, 8023428 <__ieee754_acos+0x2c8>)
 8023372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023376:	f7dc ff97 	bl	80002a8 <__aeabi_dsub>
 802337a:	4622      	mov	r2, r4
 802337c:	462b      	mov	r3, r5
 802337e:	f7dd f94b 	bl	8000618 <__aeabi_dmul>
 8023382:	4b34      	ldr	r3, [pc, #208]	@ (8023454 <__ieee754_acos+0x2f4>)
 8023384:	2200      	movs	r2, #0
 8023386:	f7dc ff91 	bl	80002ac <__adddf3>
 802338a:	ec45 4b10 	vmov	d0, r4, r5
 802338e:	4680      	mov	r8, r0
 8023390:	4689      	mov	r9, r1
 8023392:	f7ff fc0d 	bl	8022bb0 <__ieee754_sqrt>
 8023396:	ec55 4b10 	vmov	r4, r5, d0
 802339a:	4642      	mov	r2, r8
 802339c:	464b      	mov	r3, r9
 802339e:	4630      	mov	r0, r6
 80233a0:	4639      	mov	r1, r7
 80233a2:	f7dd fa63 	bl	800086c <__aeabi_ddiv>
 80233a6:	4622      	mov	r2, r4
 80233a8:	462b      	mov	r3, r5
 80233aa:	f7dd f935 	bl	8000618 <__aeabi_dmul>
 80233ae:	a320      	add	r3, pc, #128	@ (adr r3, 8023430 <__ieee754_acos+0x2d0>)
 80233b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233b4:	f7dc ff78 	bl	80002a8 <__aeabi_dsub>
 80233b8:	4622      	mov	r2, r4
 80233ba:	462b      	mov	r3, r5
 80233bc:	f7dc ff76 	bl	80002ac <__adddf3>
 80233c0:	4602      	mov	r2, r0
 80233c2:	460b      	mov	r3, r1
 80233c4:	f7dc ff72 	bl	80002ac <__adddf3>
 80233c8:	4602      	mov	r2, r0
 80233ca:	460b      	mov	r3, r1
 80233cc:	a11c      	add	r1, pc, #112	@ (adr r1, 8023440 <__ieee754_acos+0x2e0>)
 80233ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80233d2:	e76e      	b.n	80232b2 <__ieee754_acos+0x152>
 80233d4:	f3af 8000 	nop.w
	...
 80233e0:	0dfdf709 	.word	0x0dfdf709
 80233e4:	3f023de1 	.word	0x3f023de1
 80233e8:	7501b288 	.word	0x7501b288
 80233ec:	3f49efe0 	.word	0x3f49efe0
 80233f0:	b5688f3b 	.word	0xb5688f3b
 80233f4:	3fa48228 	.word	0x3fa48228
 80233f8:	0e884455 	.word	0x0e884455
 80233fc:	3fc9c155 	.word	0x3fc9c155
 8023400:	03eb6f7d 	.word	0x03eb6f7d
 8023404:	3fd4d612 	.word	0x3fd4d612
 8023408:	55555555 	.word	0x55555555
 802340c:	3fc55555 	.word	0x3fc55555
 8023410:	b12e9282 	.word	0xb12e9282
 8023414:	3fb3b8c5 	.word	0x3fb3b8c5
 8023418:	1b8d0159 	.word	0x1b8d0159
 802341c:	3fe6066c 	.word	0x3fe6066c
 8023420:	9c598ac8 	.word	0x9c598ac8
 8023424:	40002ae5 	.word	0x40002ae5
 8023428:	1c8a2d4b 	.word	0x1c8a2d4b
 802342c:	40033a27 	.word	0x40033a27
 8023430:	33145c07 	.word	0x33145c07
 8023434:	3c91a626 	.word	0x3c91a626
 8023438:	54442d18 	.word	0x54442d18
 802343c:	3ff921fb 	.word	0x3ff921fb
 8023440:	54442d18 	.word	0x54442d18
 8023444:	400921fb 	.word	0x400921fb
 8023448:	3fefffff 	.word	0x3fefffff
 802344c:	3fdfffff 	.word	0x3fdfffff
 8023450:	3c600000 	.word	0x3c600000
 8023454:	3ff00000 	.word	0x3ff00000
 8023458:	3fe00000 	.word	0x3fe00000
 802345c:	4622      	mov	r2, r4
 802345e:	462b      	mov	r3, r5
 8023460:	496b      	ldr	r1, [pc, #428]	@ (8023610 <__ieee754_acos+0x4b0>)
 8023462:	2000      	movs	r0, #0
 8023464:	f7dc ff20 	bl	80002a8 <__aeabi_dsub>
 8023468:	4b6a      	ldr	r3, [pc, #424]	@ (8023614 <__ieee754_acos+0x4b4>)
 802346a:	2200      	movs	r2, #0
 802346c:	f7dd f8d4 	bl	8000618 <__aeabi_dmul>
 8023470:	4604      	mov	r4, r0
 8023472:	460d      	mov	r5, r1
 8023474:	ec45 4b10 	vmov	d0, r4, r5
 8023478:	f7ff fb9a 	bl	8022bb0 <__ieee754_sqrt>
 802347c:	a34c      	add	r3, pc, #304	@ (adr r3, 80235b0 <__ieee754_acos+0x450>)
 802347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023482:	4620      	mov	r0, r4
 8023484:	4629      	mov	r1, r5
 8023486:	ec59 8b10 	vmov	r8, r9, d0
 802348a:	f7dd f8c5 	bl	8000618 <__aeabi_dmul>
 802348e:	a34a      	add	r3, pc, #296	@ (adr r3, 80235b8 <__ieee754_acos+0x458>)
 8023490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023494:	f7dc ff0a 	bl	80002ac <__adddf3>
 8023498:	4622      	mov	r2, r4
 802349a:	462b      	mov	r3, r5
 802349c:	f7dd f8bc 	bl	8000618 <__aeabi_dmul>
 80234a0:	a347      	add	r3, pc, #284	@ (adr r3, 80235c0 <__ieee754_acos+0x460>)
 80234a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234a6:	f7dc feff 	bl	80002a8 <__aeabi_dsub>
 80234aa:	4622      	mov	r2, r4
 80234ac:	462b      	mov	r3, r5
 80234ae:	f7dd f8b3 	bl	8000618 <__aeabi_dmul>
 80234b2:	a345      	add	r3, pc, #276	@ (adr r3, 80235c8 <__ieee754_acos+0x468>)
 80234b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234b8:	f7dc fef8 	bl	80002ac <__adddf3>
 80234bc:	4622      	mov	r2, r4
 80234be:	462b      	mov	r3, r5
 80234c0:	f7dd f8aa 	bl	8000618 <__aeabi_dmul>
 80234c4:	a342      	add	r3, pc, #264	@ (adr r3, 80235d0 <__ieee754_acos+0x470>)
 80234c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234ca:	f7dc feed 	bl	80002a8 <__aeabi_dsub>
 80234ce:	4622      	mov	r2, r4
 80234d0:	462b      	mov	r3, r5
 80234d2:	f7dd f8a1 	bl	8000618 <__aeabi_dmul>
 80234d6:	a340      	add	r3, pc, #256	@ (adr r3, 80235d8 <__ieee754_acos+0x478>)
 80234d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234dc:	f7dc fee6 	bl	80002ac <__adddf3>
 80234e0:	4622      	mov	r2, r4
 80234e2:	462b      	mov	r3, r5
 80234e4:	f7dd f898 	bl	8000618 <__aeabi_dmul>
 80234e8:	a33d      	add	r3, pc, #244	@ (adr r3, 80235e0 <__ieee754_acos+0x480>)
 80234ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234ee:	4682      	mov	sl, r0
 80234f0:	468b      	mov	fp, r1
 80234f2:	4620      	mov	r0, r4
 80234f4:	4629      	mov	r1, r5
 80234f6:	f7dd f88f 	bl	8000618 <__aeabi_dmul>
 80234fa:	a33b      	add	r3, pc, #236	@ (adr r3, 80235e8 <__ieee754_acos+0x488>)
 80234fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023500:	f7dc fed2 	bl	80002a8 <__aeabi_dsub>
 8023504:	4622      	mov	r2, r4
 8023506:	462b      	mov	r3, r5
 8023508:	f7dd f886 	bl	8000618 <__aeabi_dmul>
 802350c:	a338      	add	r3, pc, #224	@ (adr r3, 80235f0 <__ieee754_acos+0x490>)
 802350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023512:	f7dc fecb 	bl	80002ac <__adddf3>
 8023516:	4622      	mov	r2, r4
 8023518:	462b      	mov	r3, r5
 802351a:	f7dd f87d 	bl	8000618 <__aeabi_dmul>
 802351e:	a336      	add	r3, pc, #216	@ (adr r3, 80235f8 <__ieee754_acos+0x498>)
 8023520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023524:	f7dc fec0 	bl	80002a8 <__aeabi_dsub>
 8023528:	4622      	mov	r2, r4
 802352a:	462b      	mov	r3, r5
 802352c:	f7dd f874 	bl	8000618 <__aeabi_dmul>
 8023530:	4b37      	ldr	r3, [pc, #220]	@ (8023610 <__ieee754_acos+0x4b0>)
 8023532:	2200      	movs	r2, #0
 8023534:	f7dc feba 	bl	80002ac <__adddf3>
 8023538:	4602      	mov	r2, r0
 802353a:	460b      	mov	r3, r1
 802353c:	4650      	mov	r0, sl
 802353e:	4659      	mov	r1, fp
 8023540:	f7dd f994 	bl	800086c <__aeabi_ddiv>
 8023544:	4642      	mov	r2, r8
 8023546:	464b      	mov	r3, r9
 8023548:	f7dd f866 	bl	8000618 <__aeabi_dmul>
 802354c:	2600      	movs	r6, #0
 802354e:	4682      	mov	sl, r0
 8023550:	468b      	mov	fp, r1
 8023552:	4632      	mov	r2, r6
 8023554:	464b      	mov	r3, r9
 8023556:	4630      	mov	r0, r6
 8023558:	4649      	mov	r1, r9
 802355a:	f7dd f85d 	bl	8000618 <__aeabi_dmul>
 802355e:	4602      	mov	r2, r0
 8023560:	460b      	mov	r3, r1
 8023562:	4620      	mov	r0, r4
 8023564:	4629      	mov	r1, r5
 8023566:	f7dc fe9f 	bl	80002a8 <__aeabi_dsub>
 802356a:	4632      	mov	r2, r6
 802356c:	4604      	mov	r4, r0
 802356e:	460d      	mov	r5, r1
 8023570:	464b      	mov	r3, r9
 8023572:	4640      	mov	r0, r8
 8023574:	4649      	mov	r1, r9
 8023576:	f7dc fe99 	bl	80002ac <__adddf3>
 802357a:	4602      	mov	r2, r0
 802357c:	460b      	mov	r3, r1
 802357e:	4620      	mov	r0, r4
 8023580:	4629      	mov	r1, r5
 8023582:	f7dd f973 	bl	800086c <__aeabi_ddiv>
 8023586:	4602      	mov	r2, r0
 8023588:	460b      	mov	r3, r1
 802358a:	4650      	mov	r0, sl
 802358c:	4659      	mov	r1, fp
 802358e:	f7dc fe8d 	bl	80002ac <__adddf3>
 8023592:	4632      	mov	r2, r6
 8023594:	464b      	mov	r3, r9
 8023596:	f7dc fe89 	bl	80002ac <__adddf3>
 802359a:	4602      	mov	r2, r0
 802359c:	460b      	mov	r3, r1
 802359e:	f7dc fe85 	bl	80002ac <__adddf3>
 80235a2:	e5fd      	b.n	80231a0 <__ieee754_acos+0x40>
 80235a4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8023600 <__ieee754_acos+0x4a0>
 80235a8:	e5ee      	b.n	8023188 <__ieee754_acos+0x28>
 80235aa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8023608 <__ieee754_acos+0x4a8>
 80235ae:	e5eb      	b.n	8023188 <__ieee754_acos+0x28>
 80235b0:	0dfdf709 	.word	0x0dfdf709
 80235b4:	3f023de1 	.word	0x3f023de1
 80235b8:	7501b288 	.word	0x7501b288
 80235bc:	3f49efe0 	.word	0x3f49efe0
 80235c0:	b5688f3b 	.word	0xb5688f3b
 80235c4:	3fa48228 	.word	0x3fa48228
 80235c8:	0e884455 	.word	0x0e884455
 80235cc:	3fc9c155 	.word	0x3fc9c155
 80235d0:	03eb6f7d 	.word	0x03eb6f7d
 80235d4:	3fd4d612 	.word	0x3fd4d612
 80235d8:	55555555 	.word	0x55555555
 80235dc:	3fc55555 	.word	0x3fc55555
 80235e0:	b12e9282 	.word	0xb12e9282
 80235e4:	3fb3b8c5 	.word	0x3fb3b8c5
 80235e8:	1b8d0159 	.word	0x1b8d0159
 80235ec:	3fe6066c 	.word	0x3fe6066c
 80235f0:	9c598ac8 	.word	0x9c598ac8
 80235f4:	40002ae5 	.word	0x40002ae5
 80235f8:	1c8a2d4b 	.word	0x1c8a2d4b
 80235fc:	40033a27 	.word	0x40033a27
 8023600:	54442d18 	.word	0x54442d18
 8023604:	400921fb 	.word	0x400921fb
 8023608:	54442d18 	.word	0x54442d18
 802360c:	3ff921fb 	.word	0x3ff921fb
 8023610:	3ff00000 	.word	0x3ff00000
 8023614:	3fe00000 	.word	0x3fe00000

08023618 <__ieee754_asin>:
 8023618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802361c:	ec55 4b10 	vmov	r4, r5, d0
 8023620:	4bc7      	ldr	r3, [pc, #796]	@ (8023940 <__ieee754_asin+0x328>)
 8023622:	b087      	sub	sp, #28
 8023624:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8023628:	429e      	cmp	r6, r3
 802362a:	9501      	str	r5, [sp, #4]
 802362c:	d92d      	bls.n	802368a <__ieee754_asin+0x72>
 802362e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8023632:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8023636:	4326      	orrs	r6, r4
 8023638:	d116      	bne.n	8023668 <__ieee754_asin+0x50>
 802363a:	a3a7      	add	r3, pc, #668	@ (adr r3, 80238d8 <__ieee754_asin+0x2c0>)
 802363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023640:	4620      	mov	r0, r4
 8023642:	4629      	mov	r1, r5
 8023644:	f7dc ffe8 	bl	8000618 <__aeabi_dmul>
 8023648:	a3a5      	add	r3, pc, #660	@ (adr r3, 80238e0 <__ieee754_asin+0x2c8>)
 802364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802364e:	4606      	mov	r6, r0
 8023650:	460f      	mov	r7, r1
 8023652:	4620      	mov	r0, r4
 8023654:	4629      	mov	r1, r5
 8023656:	f7dc ffdf 	bl	8000618 <__aeabi_dmul>
 802365a:	4602      	mov	r2, r0
 802365c:	460b      	mov	r3, r1
 802365e:	4630      	mov	r0, r6
 8023660:	4639      	mov	r1, r7
 8023662:	f7dc fe23 	bl	80002ac <__adddf3>
 8023666:	e009      	b.n	802367c <__ieee754_asin+0x64>
 8023668:	4622      	mov	r2, r4
 802366a:	462b      	mov	r3, r5
 802366c:	4620      	mov	r0, r4
 802366e:	4629      	mov	r1, r5
 8023670:	f7dc fe1a 	bl	80002a8 <__aeabi_dsub>
 8023674:	4602      	mov	r2, r0
 8023676:	460b      	mov	r3, r1
 8023678:	f7dd f8f8 	bl	800086c <__aeabi_ddiv>
 802367c:	4604      	mov	r4, r0
 802367e:	460d      	mov	r5, r1
 8023680:	ec45 4b10 	vmov	d0, r4, r5
 8023684:	b007      	add	sp, #28
 8023686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802368a:	4bae      	ldr	r3, [pc, #696]	@ (8023944 <__ieee754_asin+0x32c>)
 802368c:	429e      	cmp	r6, r3
 802368e:	d810      	bhi.n	80236b2 <__ieee754_asin+0x9a>
 8023690:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8023694:	f080 80ad 	bcs.w	80237f2 <__ieee754_asin+0x1da>
 8023698:	a393      	add	r3, pc, #588	@ (adr r3, 80238e8 <__ieee754_asin+0x2d0>)
 802369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802369e:	4620      	mov	r0, r4
 80236a0:	4629      	mov	r1, r5
 80236a2:	f7dc fe03 	bl	80002ac <__adddf3>
 80236a6:	4ba8      	ldr	r3, [pc, #672]	@ (8023948 <__ieee754_asin+0x330>)
 80236a8:	2200      	movs	r2, #0
 80236aa:	f7dd fa45 	bl	8000b38 <__aeabi_dcmpgt>
 80236ae:	2800      	cmp	r0, #0
 80236b0:	d1e6      	bne.n	8023680 <__ieee754_asin+0x68>
 80236b2:	ec45 4b10 	vmov	d0, r4, r5
 80236b6:	f7ff fa13 	bl	8022ae0 <fabs>
 80236ba:	49a3      	ldr	r1, [pc, #652]	@ (8023948 <__ieee754_asin+0x330>)
 80236bc:	ec53 2b10 	vmov	r2, r3, d0
 80236c0:	2000      	movs	r0, #0
 80236c2:	f7dc fdf1 	bl	80002a8 <__aeabi_dsub>
 80236c6:	4ba1      	ldr	r3, [pc, #644]	@ (802394c <__ieee754_asin+0x334>)
 80236c8:	2200      	movs	r2, #0
 80236ca:	f7dc ffa5 	bl	8000618 <__aeabi_dmul>
 80236ce:	a388      	add	r3, pc, #544	@ (adr r3, 80238f0 <__ieee754_asin+0x2d8>)
 80236d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236d4:	4604      	mov	r4, r0
 80236d6:	460d      	mov	r5, r1
 80236d8:	f7dc ff9e 	bl	8000618 <__aeabi_dmul>
 80236dc:	a386      	add	r3, pc, #536	@ (adr r3, 80238f8 <__ieee754_asin+0x2e0>)
 80236de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236e2:	f7dc fde3 	bl	80002ac <__adddf3>
 80236e6:	4622      	mov	r2, r4
 80236e8:	462b      	mov	r3, r5
 80236ea:	f7dc ff95 	bl	8000618 <__aeabi_dmul>
 80236ee:	a384      	add	r3, pc, #528	@ (adr r3, 8023900 <__ieee754_asin+0x2e8>)
 80236f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236f4:	f7dc fdd8 	bl	80002a8 <__aeabi_dsub>
 80236f8:	4622      	mov	r2, r4
 80236fa:	462b      	mov	r3, r5
 80236fc:	f7dc ff8c 	bl	8000618 <__aeabi_dmul>
 8023700:	a381      	add	r3, pc, #516	@ (adr r3, 8023908 <__ieee754_asin+0x2f0>)
 8023702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023706:	f7dc fdd1 	bl	80002ac <__adddf3>
 802370a:	4622      	mov	r2, r4
 802370c:	462b      	mov	r3, r5
 802370e:	f7dc ff83 	bl	8000618 <__aeabi_dmul>
 8023712:	a37f      	add	r3, pc, #508	@ (adr r3, 8023910 <__ieee754_asin+0x2f8>)
 8023714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023718:	f7dc fdc6 	bl	80002a8 <__aeabi_dsub>
 802371c:	4622      	mov	r2, r4
 802371e:	462b      	mov	r3, r5
 8023720:	f7dc ff7a 	bl	8000618 <__aeabi_dmul>
 8023724:	a37c      	add	r3, pc, #496	@ (adr r3, 8023918 <__ieee754_asin+0x300>)
 8023726:	e9d3 2300 	ldrd	r2, r3, [r3]
 802372a:	f7dc fdbf 	bl	80002ac <__adddf3>
 802372e:	4622      	mov	r2, r4
 8023730:	462b      	mov	r3, r5
 8023732:	f7dc ff71 	bl	8000618 <__aeabi_dmul>
 8023736:	a37a      	add	r3, pc, #488	@ (adr r3, 8023920 <__ieee754_asin+0x308>)
 8023738:	e9d3 2300 	ldrd	r2, r3, [r3]
 802373c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023740:	4620      	mov	r0, r4
 8023742:	4629      	mov	r1, r5
 8023744:	f7dc ff68 	bl	8000618 <__aeabi_dmul>
 8023748:	a377      	add	r3, pc, #476	@ (adr r3, 8023928 <__ieee754_asin+0x310>)
 802374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802374e:	f7dc fdab 	bl	80002a8 <__aeabi_dsub>
 8023752:	4622      	mov	r2, r4
 8023754:	462b      	mov	r3, r5
 8023756:	f7dc ff5f 	bl	8000618 <__aeabi_dmul>
 802375a:	a375      	add	r3, pc, #468	@ (adr r3, 8023930 <__ieee754_asin+0x318>)
 802375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023760:	f7dc fda4 	bl	80002ac <__adddf3>
 8023764:	4622      	mov	r2, r4
 8023766:	462b      	mov	r3, r5
 8023768:	f7dc ff56 	bl	8000618 <__aeabi_dmul>
 802376c:	a372      	add	r3, pc, #456	@ (adr r3, 8023938 <__ieee754_asin+0x320>)
 802376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023772:	f7dc fd99 	bl	80002a8 <__aeabi_dsub>
 8023776:	4622      	mov	r2, r4
 8023778:	462b      	mov	r3, r5
 802377a:	f7dc ff4d 	bl	8000618 <__aeabi_dmul>
 802377e:	4b72      	ldr	r3, [pc, #456]	@ (8023948 <__ieee754_asin+0x330>)
 8023780:	2200      	movs	r2, #0
 8023782:	f7dc fd93 	bl	80002ac <__adddf3>
 8023786:	ec45 4b10 	vmov	d0, r4, r5
 802378a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802378e:	f7ff fa0f 	bl	8022bb0 <__ieee754_sqrt>
 8023792:	4b6f      	ldr	r3, [pc, #444]	@ (8023950 <__ieee754_asin+0x338>)
 8023794:	429e      	cmp	r6, r3
 8023796:	ec5b ab10 	vmov	sl, fp, d0
 802379a:	f240 80db 	bls.w	8023954 <__ieee754_asin+0x33c>
 802379e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80237a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80237a6:	f7dd f861 	bl	800086c <__aeabi_ddiv>
 80237aa:	4652      	mov	r2, sl
 80237ac:	465b      	mov	r3, fp
 80237ae:	f7dc ff33 	bl	8000618 <__aeabi_dmul>
 80237b2:	4652      	mov	r2, sl
 80237b4:	465b      	mov	r3, fp
 80237b6:	f7dc fd79 	bl	80002ac <__adddf3>
 80237ba:	4602      	mov	r2, r0
 80237bc:	460b      	mov	r3, r1
 80237be:	f7dc fd75 	bl	80002ac <__adddf3>
 80237c2:	a347      	add	r3, pc, #284	@ (adr r3, 80238e0 <__ieee754_asin+0x2c8>)
 80237c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237c8:	f7dc fd6e 	bl	80002a8 <__aeabi_dsub>
 80237cc:	4602      	mov	r2, r0
 80237ce:	460b      	mov	r3, r1
 80237d0:	a141      	add	r1, pc, #260	@ (adr r1, 80238d8 <__ieee754_asin+0x2c0>)
 80237d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80237d6:	f7dc fd67 	bl	80002a8 <__aeabi_dsub>
 80237da:	9b01      	ldr	r3, [sp, #4]
 80237dc:	2b00      	cmp	r3, #0
 80237de:	bfdc      	itt	le
 80237e0:	4602      	movle	r2, r0
 80237e2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 80237e6:	4604      	mov	r4, r0
 80237e8:	460d      	mov	r5, r1
 80237ea:	bfdc      	itt	le
 80237ec:	4614      	movle	r4, r2
 80237ee:	461d      	movle	r5, r3
 80237f0:	e746      	b.n	8023680 <__ieee754_asin+0x68>
 80237f2:	4622      	mov	r2, r4
 80237f4:	462b      	mov	r3, r5
 80237f6:	4620      	mov	r0, r4
 80237f8:	4629      	mov	r1, r5
 80237fa:	f7dc ff0d 	bl	8000618 <__aeabi_dmul>
 80237fe:	a33c      	add	r3, pc, #240	@ (adr r3, 80238f0 <__ieee754_asin+0x2d8>)
 8023800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023804:	4606      	mov	r6, r0
 8023806:	460f      	mov	r7, r1
 8023808:	f7dc ff06 	bl	8000618 <__aeabi_dmul>
 802380c:	a33a      	add	r3, pc, #232	@ (adr r3, 80238f8 <__ieee754_asin+0x2e0>)
 802380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023812:	f7dc fd4b 	bl	80002ac <__adddf3>
 8023816:	4632      	mov	r2, r6
 8023818:	463b      	mov	r3, r7
 802381a:	f7dc fefd 	bl	8000618 <__aeabi_dmul>
 802381e:	a338      	add	r3, pc, #224	@ (adr r3, 8023900 <__ieee754_asin+0x2e8>)
 8023820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023824:	f7dc fd40 	bl	80002a8 <__aeabi_dsub>
 8023828:	4632      	mov	r2, r6
 802382a:	463b      	mov	r3, r7
 802382c:	f7dc fef4 	bl	8000618 <__aeabi_dmul>
 8023830:	a335      	add	r3, pc, #212	@ (adr r3, 8023908 <__ieee754_asin+0x2f0>)
 8023832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023836:	f7dc fd39 	bl	80002ac <__adddf3>
 802383a:	4632      	mov	r2, r6
 802383c:	463b      	mov	r3, r7
 802383e:	f7dc feeb 	bl	8000618 <__aeabi_dmul>
 8023842:	a333      	add	r3, pc, #204	@ (adr r3, 8023910 <__ieee754_asin+0x2f8>)
 8023844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023848:	f7dc fd2e 	bl	80002a8 <__aeabi_dsub>
 802384c:	4632      	mov	r2, r6
 802384e:	463b      	mov	r3, r7
 8023850:	f7dc fee2 	bl	8000618 <__aeabi_dmul>
 8023854:	a330      	add	r3, pc, #192	@ (adr r3, 8023918 <__ieee754_asin+0x300>)
 8023856:	e9d3 2300 	ldrd	r2, r3, [r3]
 802385a:	f7dc fd27 	bl	80002ac <__adddf3>
 802385e:	4632      	mov	r2, r6
 8023860:	463b      	mov	r3, r7
 8023862:	f7dc fed9 	bl	8000618 <__aeabi_dmul>
 8023866:	a32e      	add	r3, pc, #184	@ (adr r3, 8023920 <__ieee754_asin+0x308>)
 8023868:	e9d3 2300 	ldrd	r2, r3, [r3]
 802386c:	4680      	mov	r8, r0
 802386e:	4689      	mov	r9, r1
 8023870:	4630      	mov	r0, r6
 8023872:	4639      	mov	r1, r7
 8023874:	f7dc fed0 	bl	8000618 <__aeabi_dmul>
 8023878:	a32b      	add	r3, pc, #172	@ (adr r3, 8023928 <__ieee754_asin+0x310>)
 802387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802387e:	f7dc fd13 	bl	80002a8 <__aeabi_dsub>
 8023882:	4632      	mov	r2, r6
 8023884:	463b      	mov	r3, r7
 8023886:	f7dc fec7 	bl	8000618 <__aeabi_dmul>
 802388a:	a329      	add	r3, pc, #164	@ (adr r3, 8023930 <__ieee754_asin+0x318>)
 802388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023890:	f7dc fd0c 	bl	80002ac <__adddf3>
 8023894:	4632      	mov	r2, r6
 8023896:	463b      	mov	r3, r7
 8023898:	f7dc febe 	bl	8000618 <__aeabi_dmul>
 802389c:	a326      	add	r3, pc, #152	@ (adr r3, 8023938 <__ieee754_asin+0x320>)
 802389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238a2:	f7dc fd01 	bl	80002a8 <__aeabi_dsub>
 80238a6:	4632      	mov	r2, r6
 80238a8:	463b      	mov	r3, r7
 80238aa:	f7dc feb5 	bl	8000618 <__aeabi_dmul>
 80238ae:	4b26      	ldr	r3, [pc, #152]	@ (8023948 <__ieee754_asin+0x330>)
 80238b0:	2200      	movs	r2, #0
 80238b2:	f7dc fcfb 	bl	80002ac <__adddf3>
 80238b6:	4602      	mov	r2, r0
 80238b8:	460b      	mov	r3, r1
 80238ba:	4640      	mov	r0, r8
 80238bc:	4649      	mov	r1, r9
 80238be:	f7dc ffd5 	bl	800086c <__aeabi_ddiv>
 80238c2:	4622      	mov	r2, r4
 80238c4:	462b      	mov	r3, r5
 80238c6:	f7dc fea7 	bl	8000618 <__aeabi_dmul>
 80238ca:	4602      	mov	r2, r0
 80238cc:	460b      	mov	r3, r1
 80238ce:	4620      	mov	r0, r4
 80238d0:	4629      	mov	r1, r5
 80238d2:	e6c6      	b.n	8023662 <__ieee754_asin+0x4a>
 80238d4:	f3af 8000 	nop.w
 80238d8:	54442d18 	.word	0x54442d18
 80238dc:	3ff921fb 	.word	0x3ff921fb
 80238e0:	33145c07 	.word	0x33145c07
 80238e4:	3c91a626 	.word	0x3c91a626
 80238e8:	8800759c 	.word	0x8800759c
 80238ec:	7e37e43c 	.word	0x7e37e43c
 80238f0:	0dfdf709 	.word	0x0dfdf709
 80238f4:	3f023de1 	.word	0x3f023de1
 80238f8:	7501b288 	.word	0x7501b288
 80238fc:	3f49efe0 	.word	0x3f49efe0
 8023900:	b5688f3b 	.word	0xb5688f3b
 8023904:	3fa48228 	.word	0x3fa48228
 8023908:	0e884455 	.word	0x0e884455
 802390c:	3fc9c155 	.word	0x3fc9c155
 8023910:	03eb6f7d 	.word	0x03eb6f7d
 8023914:	3fd4d612 	.word	0x3fd4d612
 8023918:	55555555 	.word	0x55555555
 802391c:	3fc55555 	.word	0x3fc55555
 8023920:	b12e9282 	.word	0xb12e9282
 8023924:	3fb3b8c5 	.word	0x3fb3b8c5
 8023928:	1b8d0159 	.word	0x1b8d0159
 802392c:	3fe6066c 	.word	0x3fe6066c
 8023930:	9c598ac8 	.word	0x9c598ac8
 8023934:	40002ae5 	.word	0x40002ae5
 8023938:	1c8a2d4b 	.word	0x1c8a2d4b
 802393c:	40033a27 	.word	0x40033a27
 8023940:	3fefffff 	.word	0x3fefffff
 8023944:	3fdfffff 	.word	0x3fdfffff
 8023948:	3ff00000 	.word	0x3ff00000
 802394c:	3fe00000 	.word	0x3fe00000
 8023950:	3fef3332 	.word	0x3fef3332
 8023954:	4652      	mov	r2, sl
 8023956:	465b      	mov	r3, fp
 8023958:	4650      	mov	r0, sl
 802395a:	4659      	mov	r1, fp
 802395c:	f7dc fca6 	bl	80002ac <__adddf3>
 8023960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023964:	4606      	mov	r6, r0
 8023966:	460f      	mov	r7, r1
 8023968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802396c:	f7dc ff7e 	bl	800086c <__aeabi_ddiv>
 8023970:	4602      	mov	r2, r0
 8023972:	460b      	mov	r3, r1
 8023974:	4630      	mov	r0, r6
 8023976:	4639      	mov	r1, r7
 8023978:	f7dc fe4e 	bl	8000618 <__aeabi_dmul>
 802397c:	f04f 0800 	mov.w	r8, #0
 8023980:	4606      	mov	r6, r0
 8023982:	460f      	mov	r7, r1
 8023984:	4642      	mov	r2, r8
 8023986:	465b      	mov	r3, fp
 8023988:	4640      	mov	r0, r8
 802398a:	4659      	mov	r1, fp
 802398c:	f7dc fe44 	bl	8000618 <__aeabi_dmul>
 8023990:	4602      	mov	r2, r0
 8023992:	460b      	mov	r3, r1
 8023994:	4620      	mov	r0, r4
 8023996:	4629      	mov	r1, r5
 8023998:	f7dc fc86 	bl	80002a8 <__aeabi_dsub>
 802399c:	4642      	mov	r2, r8
 802399e:	4604      	mov	r4, r0
 80239a0:	460d      	mov	r5, r1
 80239a2:	465b      	mov	r3, fp
 80239a4:	4650      	mov	r0, sl
 80239a6:	4659      	mov	r1, fp
 80239a8:	f7dc fc80 	bl	80002ac <__adddf3>
 80239ac:	4602      	mov	r2, r0
 80239ae:	460b      	mov	r3, r1
 80239b0:	4620      	mov	r0, r4
 80239b2:	4629      	mov	r1, r5
 80239b4:	f7dc ff5a 	bl	800086c <__aeabi_ddiv>
 80239b8:	4602      	mov	r2, r0
 80239ba:	460b      	mov	r3, r1
 80239bc:	f7dc fc76 	bl	80002ac <__adddf3>
 80239c0:	4602      	mov	r2, r0
 80239c2:	460b      	mov	r3, r1
 80239c4:	a112      	add	r1, pc, #72	@ (adr r1, 8023a10 <__ieee754_asin+0x3f8>)
 80239c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80239ca:	f7dc fc6d 	bl	80002a8 <__aeabi_dsub>
 80239ce:	4602      	mov	r2, r0
 80239d0:	460b      	mov	r3, r1
 80239d2:	4630      	mov	r0, r6
 80239d4:	4639      	mov	r1, r7
 80239d6:	f7dc fc67 	bl	80002a8 <__aeabi_dsub>
 80239da:	4642      	mov	r2, r8
 80239dc:	4604      	mov	r4, r0
 80239de:	460d      	mov	r5, r1
 80239e0:	465b      	mov	r3, fp
 80239e2:	4640      	mov	r0, r8
 80239e4:	4659      	mov	r1, fp
 80239e6:	f7dc fc61 	bl	80002ac <__adddf3>
 80239ea:	4602      	mov	r2, r0
 80239ec:	460b      	mov	r3, r1
 80239ee:	a10a      	add	r1, pc, #40	@ (adr r1, 8023a18 <__ieee754_asin+0x400>)
 80239f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80239f4:	f7dc fc58 	bl	80002a8 <__aeabi_dsub>
 80239f8:	4602      	mov	r2, r0
 80239fa:	460b      	mov	r3, r1
 80239fc:	4620      	mov	r0, r4
 80239fe:	4629      	mov	r1, r5
 8023a00:	f7dc fc52 	bl	80002a8 <__aeabi_dsub>
 8023a04:	4602      	mov	r2, r0
 8023a06:	460b      	mov	r3, r1
 8023a08:	a103      	add	r1, pc, #12	@ (adr r1, 8023a18 <__ieee754_asin+0x400>)
 8023a0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a0e:	e6e2      	b.n	80237d6 <__ieee754_asin+0x1be>
 8023a10:	33145c07 	.word	0x33145c07
 8023a14:	3c91a626 	.word	0x3c91a626
 8023a18:	54442d18 	.word	0x54442d18
 8023a1c:	3fe921fb 	.word	0x3fe921fb

08023a20 <__ieee754_atan2>:
 8023a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023a24:	ec57 6b11 	vmov	r6, r7, d1
 8023a28:	4273      	negs	r3, r6
 8023a2a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8023ba8 <__ieee754_atan2+0x188>
 8023a2e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8023a32:	4333      	orrs	r3, r6
 8023a34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8023a38:	4543      	cmp	r3, r8
 8023a3a:	ec51 0b10 	vmov	r0, r1, d0
 8023a3e:	4635      	mov	r5, r6
 8023a40:	d809      	bhi.n	8023a56 <__ieee754_atan2+0x36>
 8023a42:	4244      	negs	r4, r0
 8023a44:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8023a48:	4304      	orrs	r4, r0
 8023a4a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8023a4e:	4544      	cmp	r4, r8
 8023a50:	468e      	mov	lr, r1
 8023a52:	4681      	mov	r9, r0
 8023a54:	d907      	bls.n	8023a66 <__ieee754_atan2+0x46>
 8023a56:	4632      	mov	r2, r6
 8023a58:	463b      	mov	r3, r7
 8023a5a:	f7dc fc27 	bl	80002ac <__adddf3>
 8023a5e:	ec41 0b10 	vmov	d0, r0, r1
 8023a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023a66:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8023a6a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8023a6e:	4334      	orrs	r4, r6
 8023a70:	d103      	bne.n	8023a7a <__ieee754_atan2+0x5a>
 8023a72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023a76:	f7fe be47 	b.w	8022708 <atan>
 8023a7a:	17bc      	asrs	r4, r7, #30
 8023a7c:	f004 0402 	and.w	r4, r4, #2
 8023a80:	ea53 0909 	orrs.w	r9, r3, r9
 8023a84:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8023a88:	d107      	bne.n	8023a9a <__ieee754_atan2+0x7a>
 8023a8a:	2c02      	cmp	r4, #2
 8023a8c:	d05f      	beq.n	8023b4e <__ieee754_atan2+0x12e>
 8023a8e:	2c03      	cmp	r4, #3
 8023a90:	d1e5      	bne.n	8023a5e <__ieee754_atan2+0x3e>
 8023a92:	a143      	add	r1, pc, #268	@ (adr r1, 8023ba0 <__ieee754_atan2+0x180>)
 8023a94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a98:	e7e1      	b.n	8023a5e <__ieee754_atan2+0x3e>
 8023a9a:	4315      	orrs	r5, r2
 8023a9c:	d106      	bne.n	8023aac <__ieee754_atan2+0x8c>
 8023a9e:	f1be 0f00 	cmp.w	lr, #0
 8023aa2:	db5f      	blt.n	8023b64 <__ieee754_atan2+0x144>
 8023aa4:	a136      	add	r1, pc, #216	@ (adr r1, 8023b80 <__ieee754_atan2+0x160>)
 8023aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023aaa:	e7d8      	b.n	8023a5e <__ieee754_atan2+0x3e>
 8023aac:	4542      	cmp	r2, r8
 8023aae:	d10f      	bne.n	8023ad0 <__ieee754_atan2+0xb0>
 8023ab0:	4293      	cmp	r3, r2
 8023ab2:	f104 34ff 	add.w	r4, r4, #4294967295
 8023ab6:	d107      	bne.n	8023ac8 <__ieee754_atan2+0xa8>
 8023ab8:	2c02      	cmp	r4, #2
 8023aba:	d84c      	bhi.n	8023b56 <__ieee754_atan2+0x136>
 8023abc:	4b36      	ldr	r3, [pc, #216]	@ (8023b98 <__ieee754_atan2+0x178>)
 8023abe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023ac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023ac6:	e7ca      	b.n	8023a5e <__ieee754_atan2+0x3e>
 8023ac8:	2c02      	cmp	r4, #2
 8023aca:	d848      	bhi.n	8023b5e <__ieee754_atan2+0x13e>
 8023acc:	4b33      	ldr	r3, [pc, #204]	@ (8023b9c <__ieee754_atan2+0x17c>)
 8023ace:	e7f6      	b.n	8023abe <__ieee754_atan2+0x9e>
 8023ad0:	4543      	cmp	r3, r8
 8023ad2:	d0e4      	beq.n	8023a9e <__ieee754_atan2+0x7e>
 8023ad4:	1a9b      	subs	r3, r3, r2
 8023ad6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8023ada:	ea4f 5223 	mov.w	r2, r3, asr #20
 8023ade:	da1e      	bge.n	8023b1e <__ieee754_atan2+0xfe>
 8023ae0:	2f00      	cmp	r7, #0
 8023ae2:	da01      	bge.n	8023ae8 <__ieee754_atan2+0xc8>
 8023ae4:	323c      	adds	r2, #60	@ 0x3c
 8023ae6:	db1e      	blt.n	8023b26 <__ieee754_atan2+0x106>
 8023ae8:	4632      	mov	r2, r6
 8023aea:	463b      	mov	r3, r7
 8023aec:	f7dc febe 	bl	800086c <__aeabi_ddiv>
 8023af0:	ec41 0b10 	vmov	d0, r0, r1
 8023af4:	f7fe fff4 	bl	8022ae0 <fabs>
 8023af8:	f7fe fe06 	bl	8022708 <atan>
 8023afc:	ec51 0b10 	vmov	r0, r1, d0
 8023b00:	2c01      	cmp	r4, #1
 8023b02:	d013      	beq.n	8023b2c <__ieee754_atan2+0x10c>
 8023b04:	2c02      	cmp	r4, #2
 8023b06:	d015      	beq.n	8023b34 <__ieee754_atan2+0x114>
 8023b08:	2c00      	cmp	r4, #0
 8023b0a:	d0a8      	beq.n	8023a5e <__ieee754_atan2+0x3e>
 8023b0c:	a318      	add	r3, pc, #96	@ (adr r3, 8023b70 <__ieee754_atan2+0x150>)
 8023b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b12:	f7dc fbc9 	bl	80002a8 <__aeabi_dsub>
 8023b16:	a318      	add	r3, pc, #96	@ (adr r3, 8023b78 <__ieee754_atan2+0x158>)
 8023b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b1c:	e014      	b.n	8023b48 <__ieee754_atan2+0x128>
 8023b1e:	a118      	add	r1, pc, #96	@ (adr r1, 8023b80 <__ieee754_atan2+0x160>)
 8023b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023b24:	e7ec      	b.n	8023b00 <__ieee754_atan2+0xe0>
 8023b26:	2000      	movs	r0, #0
 8023b28:	2100      	movs	r1, #0
 8023b2a:	e7e9      	b.n	8023b00 <__ieee754_atan2+0xe0>
 8023b2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023b30:	4619      	mov	r1, r3
 8023b32:	e794      	b.n	8023a5e <__ieee754_atan2+0x3e>
 8023b34:	a30e      	add	r3, pc, #56	@ (adr r3, 8023b70 <__ieee754_atan2+0x150>)
 8023b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b3a:	f7dc fbb5 	bl	80002a8 <__aeabi_dsub>
 8023b3e:	4602      	mov	r2, r0
 8023b40:	460b      	mov	r3, r1
 8023b42:	a10d      	add	r1, pc, #52	@ (adr r1, 8023b78 <__ieee754_atan2+0x158>)
 8023b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023b48:	f7dc fbae 	bl	80002a8 <__aeabi_dsub>
 8023b4c:	e787      	b.n	8023a5e <__ieee754_atan2+0x3e>
 8023b4e:	a10a      	add	r1, pc, #40	@ (adr r1, 8023b78 <__ieee754_atan2+0x158>)
 8023b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023b54:	e783      	b.n	8023a5e <__ieee754_atan2+0x3e>
 8023b56:	a10c      	add	r1, pc, #48	@ (adr r1, 8023b88 <__ieee754_atan2+0x168>)
 8023b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023b5c:	e77f      	b.n	8023a5e <__ieee754_atan2+0x3e>
 8023b5e:	2000      	movs	r0, #0
 8023b60:	2100      	movs	r1, #0
 8023b62:	e77c      	b.n	8023a5e <__ieee754_atan2+0x3e>
 8023b64:	a10a      	add	r1, pc, #40	@ (adr r1, 8023b90 <__ieee754_atan2+0x170>)
 8023b66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023b6a:	e778      	b.n	8023a5e <__ieee754_atan2+0x3e>
 8023b6c:	f3af 8000 	nop.w
 8023b70:	33145c07 	.word	0x33145c07
 8023b74:	3ca1a626 	.word	0x3ca1a626
 8023b78:	54442d18 	.word	0x54442d18
 8023b7c:	400921fb 	.word	0x400921fb
 8023b80:	54442d18 	.word	0x54442d18
 8023b84:	3ff921fb 	.word	0x3ff921fb
 8023b88:	54442d18 	.word	0x54442d18
 8023b8c:	3fe921fb 	.word	0x3fe921fb
 8023b90:	54442d18 	.word	0x54442d18
 8023b94:	bff921fb 	.word	0xbff921fb
 8023b98:	08026618 	.word	0x08026618
 8023b9c:	08026600 	.word	0x08026600
 8023ba0:	54442d18 	.word	0x54442d18
 8023ba4:	c00921fb 	.word	0xc00921fb
 8023ba8:	7ff00000 	.word	0x7ff00000
 8023bac:	00000000 	.word	0x00000000

08023bb0 <__ieee754_exp>:
 8023bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023bb4:	ec55 4b10 	vmov	r4, r5, d0
 8023bb8:	49b1      	ldr	r1, [pc, #708]	@ (8023e80 <__ieee754_exp+0x2d0>)
 8023bba:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8023bbe:	428a      	cmp	r2, r1
 8023bc0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8023bc4:	d936      	bls.n	8023c34 <__ieee754_exp+0x84>
 8023bc6:	49af      	ldr	r1, [pc, #700]	@ (8023e84 <__ieee754_exp+0x2d4>)
 8023bc8:	428a      	cmp	r2, r1
 8023bca:	d914      	bls.n	8023bf6 <__ieee754_exp+0x46>
 8023bcc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8023bd0:	4323      	orrs	r3, r4
 8023bd2:	4622      	mov	r2, r4
 8023bd4:	d007      	beq.n	8023be6 <__ieee754_exp+0x36>
 8023bd6:	462b      	mov	r3, r5
 8023bd8:	4620      	mov	r0, r4
 8023bda:	4629      	mov	r1, r5
 8023bdc:	f7dc fb66 	bl	80002ac <__adddf3>
 8023be0:	4604      	mov	r4, r0
 8023be2:	460d      	mov	r5, r1
 8023be4:	e002      	b.n	8023bec <__ieee754_exp+0x3c>
 8023be6:	2e00      	cmp	r6, #0
 8023be8:	f040 8118 	bne.w	8023e1c <__ieee754_exp+0x26c>
 8023bec:	ec45 4b10 	vmov	d0, r4, r5
 8023bf0:	b004      	add	sp, #16
 8023bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023bf6:	a38c      	add	r3, pc, #560	@ (adr r3, 8023e28 <__ieee754_exp+0x278>)
 8023bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bfc:	4620      	mov	r0, r4
 8023bfe:	4629      	mov	r1, r5
 8023c00:	f7dc ff9a 	bl	8000b38 <__aeabi_dcmpgt>
 8023c04:	4607      	mov	r7, r0
 8023c06:	b128      	cbz	r0, 8023c14 <__ieee754_exp+0x64>
 8023c08:	2000      	movs	r0, #0
 8023c0a:	b004      	add	sp, #16
 8023c0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023c10:	f001 bc02 	b.w	8025418 <__math_oflow>
 8023c14:	a386      	add	r3, pc, #536	@ (adr r3, 8023e30 <__ieee754_exp+0x280>)
 8023c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c1a:	4620      	mov	r0, r4
 8023c1c:	4629      	mov	r1, r5
 8023c1e:	f7dc ff6d 	bl	8000afc <__aeabi_dcmplt>
 8023c22:	2800      	cmp	r0, #0
 8023c24:	f000 8087 	beq.w	8023d36 <__ieee754_exp+0x186>
 8023c28:	4638      	mov	r0, r7
 8023c2a:	b004      	add	sp, #16
 8023c2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023c30:	f001 bbea 	b.w	8025408 <__math_uflow>
 8023c34:	4b94      	ldr	r3, [pc, #592]	@ (8023e88 <__ieee754_exp+0x2d8>)
 8023c36:	429a      	cmp	r2, r3
 8023c38:	f240 80a9 	bls.w	8023d8e <__ieee754_exp+0x1de>
 8023c3c:	4b93      	ldr	r3, [pc, #588]	@ (8023e8c <__ieee754_exp+0x2dc>)
 8023c3e:	429a      	cmp	r2, r3
 8023c40:	d879      	bhi.n	8023d36 <__ieee754_exp+0x186>
 8023c42:	4b93      	ldr	r3, [pc, #588]	@ (8023e90 <__ieee754_exp+0x2e0>)
 8023c44:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8023c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c4c:	4620      	mov	r0, r4
 8023c4e:	4629      	mov	r1, r5
 8023c50:	f7dc fb2a 	bl	80002a8 <__aeabi_dsub>
 8023c54:	4b8f      	ldr	r3, [pc, #572]	@ (8023e94 <__ieee754_exp+0x2e4>)
 8023c56:	00f7      	lsls	r7, r6, #3
 8023c58:	443b      	add	r3, r7
 8023c5a:	ed93 7b00 	vldr	d7, [r3]
 8023c5e:	ed8d 7b00 	vstr	d7, [sp]
 8023c62:	f086 0a01 	eor.w	sl, r6, #1
 8023c66:	4680      	mov	r8, r0
 8023c68:	4689      	mov	r9, r1
 8023c6a:	ebaa 0a06 	sub.w	sl, sl, r6
 8023c6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023c72:	4640      	mov	r0, r8
 8023c74:	4649      	mov	r1, r9
 8023c76:	f7dc fb17 	bl	80002a8 <__aeabi_dsub>
 8023c7a:	4604      	mov	r4, r0
 8023c7c:	460d      	mov	r5, r1
 8023c7e:	4622      	mov	r2, r4
 8023c80:	462b      	mov	r3, r5
 8023c82:	4620      	mov	r0, r4
 8023c84:	4629      	mov	r1, r5
 8023c86:	f7dc fcc7 	bl	8000618 <__aeabi_dmul>
 8023c8a:	a36b      	add	r3, pc, #428	@ (adr r3, 8023e38 <__ieee754_exp+0x288>)
 8023c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c90:	4606      	mov	r6, r0
 8023c92:	460f      	mov	r7, r1
 8023c94:	f7dc fcc0 	bl	8000618 <__aeabi_dmul>
 8023c98:	a369      	add	r3, pc, #420	@ (adr r3, 8023e40 <__ieee754_exp+0x290>)
 8023c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c9e:	f7dc fb03 	bl	80002a8 <__aeabi_dsub>
 8023ca2:	4632      	mov	r2, r6
 8023ca4:	463b      	mov	r3, r7
 8023ca6:	f7dc fcb7 	bl	8000618 <__aeabi_dmul>
 8023caa:	a367      	add	r3, pc, #412	@ (adr r3, 8023e48 <__ieee754_exp+0x298>)
 8023cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cb0:	f7dc fafc 	bl	80002ac <__adddf3>
 8023cb4:	4632      	mov	r2, r6
 8023cb6:	463b      	mov	r3, r7
 8023cb8:	f7dc fcae 	bl	8000618 <__aeabi_dmul>
 8023cbc:	a364      	add	r3, pc, #400	@ (adr r3, 8023e50 <__ieee754_exp+0x2a0>)
 8023cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cc2:	f7dc faf1 	bl	80002a8 <__aeabi_dsub>
 8023cc6:	4632      	mov	r2, r6
 8023cc8:	463b      	mov	r3, r7
 8023cca:	f7dc fca5 	bl	8000618 <__aeabi_dmul>
 8023cce:	a362      	add	r3, pc, #392	@ (adr r3, 8023e58 <__ieee754_exp+0x2a8>)
 8023cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cd4:	f7dc faea 	bl	80002ac <__adddf3>
 8023cd8:	4632      	mov	r2, r6
 8023cda:	463b      	mov	r3, r7
 8023cdc:	f7dc fc9c 	bl	8000618 <__aeabi_dmul>
 8023ce0:	4602      	mov	r2, r0
 8023ce2:	460b      	mov	r3, r1
 8023ce4:	4620      	mov	r0, r4
 8023ce6:	4629      	mov	r1, r5
 8023ce8:	f7dc fade 	bl	80002a8 <__aeabi_dsub>
 8023cec:	4602      	mov	r2, r0
 8023cee:	460b      	mov	r3, r1
 8023cf0:	4606      	mov	r6, r0
 8023cf2:	460f      	mov	r7, r1
 8023cf4:	4620      	mov	r0, r4
 8023cf6:	4629      	mov	r1, r5
 8023cf8:	f7dc fc8e 	bl	8000618 <__aeabi_dmul>
 8023cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023d00:	f1ba 0f00 	cmp.w	sl, #0
 8023d04:	d15c      	bne.n	8023dc0 <__ieee754_exp+0x210>
 8023d06:	2200      	movs	r2, #0
 8023d08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8023d0c:	4630      	mov	r0, r6
 8023d0e:	4639      	mov	r1, r7
 8023d10:	f7dc faca 	bl	80002a8 <__aeabi_dsub>
 8023d14:	4602      	mov	r2, r0
 8023d16:	460b      	mov	r3, r1
 8023d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023d1c:	f7dc fda6 	bl	800086c <__aeabi_ddiv>
 8023d20:	4622      	mov	r2, r4
 8023d22:	462b      	mov	r3, r5
 8023d24:	f7dc fac0 	bl	80002a8 <__aeabi_dsub>
 8023d28:	4602      	mov	r2, r0
 8023d2a:	460b      	mov	r3, r1
 8023d2c:	2000      	movs	r0, #0
 8023d2e:	495a      	ldr	r1, [pc, #360]	@ (8023e98 <__ieee754_exp+0x2e8>)
 8023d30:	f7dc faba 	bl	80002a8 <__aeabi_dsub>
 8023d34:	e754      	b.n	8023be0 <__ieee754_exp+0x30>
 8023d36:	4b59      	ldr	r3, [pc, #356]	@ (8023e9c <__ieee754_exp+0x2ec>)
 8023d38:	4620      	mov	r0, r4
 8023d3a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8023d3e:	4629      	mov	r1, r5
 8023d40:	a347      	add	r3, pc, #284	@ (adr r3, 8023e60 <__ieee754_exp+0x2b0>)
 8023d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d46:	f7dc fc67 	bl	8000618 <__aeabi_dmul>
 8023d4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023d4e:	f7dc faad 	bl	80002ac <__adddf3>
 8023d52:	f7dc ff11 	bl	8000b78 <__aeabi_d2iz>
 8023d56:	4682      	mov	sl, r0
 8023d58:	f7dc fbf4 	bl	8000544 <__aeabi_i2d>
 8023d5c:	a342      	add	r3, pc, #264	@ (adr r3, 8023e68 <__ieee754_exp+0x2b8>)
 8023d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d62:	4606      	mov	r6, r0
 8023d64:	460f      	mov	r7, r1
 8023d66:	f7dc fc57 	bl	8000618 <__aeabi_dmul>
 8023d6a:	4602      	mov	r2, r0
 8023d6c:	460b      	mov	r3, r1
 8023d6e:	4620      	mov	r0, r4
 8023d70:	4629      	mov	r1, r5
 8023d72:	f7dc fa99 	bl	80002a8 <__aeabi_dsub>
 8023d76:	a33e      	add	r3, pc, #248	@ (adr r3, 8023e70 <__ieee754_exp+0x2c0>)
 8023d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d7c:	4680      	mov	r8, r0
 8023d7e:	4689      	mov	r9, r1
 8023d80:	4630      	mov	r0, r6
 8023d82:	4639      	mov	r1, r7
 8023d84:	f7dc fc48 	bl	8000618 <__aeabi_dmul>
 8023d88:	e9cd 0100 	strd	r0, r1, [sp]
 8023d8c:	e76f      	b.n	8023c6e <__ieee754_exp+0xbe>
 8023d8e:	4b44      	ldr	r3, [pc, #272]	@ (8023ea0 <__ieee754_exp+0x2f0>)
 8023d90:	429a      	cmp	r2, r3
 8023d92:	d810      	bhi.n	8023db6 <__ieee754_exp+0x206>
 8023d94:	a338      	add	r3, pc, #224	@ (adr r3, 8023e78 <__ieee754_exp+0x2c8>)
 8023d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d9a:	4620      	mov	r0, r4
 8023d9c:	4629      	mov	r1, r5
 8023d9e:	f7dc fa85 	bl	80002ac <__adddf3>
 8023da2:	4b3d      	ldr	r3, [pc, #244]	@ (8023e98 <__ieee754_exp+0x2e8>)
 8023da4:	2200      	movs	r2, #0
 8023da6:	f7dc fec7 	bl	8000b38 <__aeabi_dcmpgt>
 8023daa:	b138      	cbz	r0, 8023dbc <__ieee754_exp+0x20c>
 8023dac:	4b3a      	ldr	r3, [pc, #232]	@ (8023e98 <__ieee754_exp+0x2e8>)
 8023dae:	2200      	movs	r2, #0
 8023db0:	4620      	mov	r0, r4
 8023db2:	4629      	mov	r1, r5
 8023db4:	e712      	b.n	8023bdc <__ieee754_exp+0x2c>
 8023db6:	f04f 0a00 	mov.w	sl, #0
 8023dba:	e760      	b.n	8023c7e <__ieee754_exp+0xce>
 8023dbc:	4682      	mov	sl, r0
 8023dbe:	e75e      	b.n	8023c7e <__ieee754_exp+0xce>
 8023dc0:	4632      	mov	r2, r6
 8023dc2:	463b      	mov	r3, r7
 8023dc4:	2000      	movs	r0, #0
 8023dc6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8023dca:	f7dc fa6d 	bl	80002a8 <__aeabi_dsub>
 8023dce:	4602      	mov	r2, r0
 8023dd0:	460b      	mov	r3, r1
 8023dd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023dd6:	f7dc fd49 	bl	800086c <__aeabi_ddiv>
 8023dda:	4602      	mov	r2, r0
 8023ddc:	460b      	mov	r3, r1
 8023dde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023de2:	f7dc fa61 	bl	80002a8 <__aeabi_dsub>
 8023de6:	4642      	mov	r2, r8
 8023de8:	464b      	mov	r3, r9
 8023dea:	f7dc fa5d 	bl	80002a8 <__aeabi_dsub>
 8023dee:	4602      	mov	r2, r0
 8023df0:	460b      	mov	r3, r1
 8023df2:	2000      	movs	r0, #0
 8023df4:	4928      	ldr	r1, [pc, #160]	@ (8023e98 <__ieee754_exp+0x2e8>)
 8023df6:	f7dc fa57 	bl	80002a8 <__aeabi_dsub>
 8023dfa:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8023dfe:	4592      	cmp	sl, r2
 8023e00:	db02      	blt.n	8023e08 <__ieee754_exp+0x258>
 8023e02:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023e06:	e6eb      	b.n	8023be0 <__ieee754_exp+0x30>
 8023e08:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8023e0c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023e10:	2200      	movs	r2, #0
 8023e12:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8023e16:	f7dc fbff 	bl	8000618 <__aeabi_dmul>
 8023e1a:	e6e1      	b.n	8023be0 <__ieee754_exp+0x30>
 8023e1c:	2400      	movs	r4, #0
 8023e1e:	2500      	movs	r5, #0
 8023e20:	e6e4      	b.n	8023bec <__ieee754_exp+0x3c>
 8023e22:	bf00      	nop
 8023e24:	f3af 8000 	nop.w
 8023e28:	fefa39ef 	.word	0xfefa39ef
 8023e2c:	40862e42 	.word	0x40862e42
 8023e30:	d52d3051 	.word	0xd52d3051
 8023e34:	c0874910 	.word	0xc0874910
 8023e38:	72bea4d0 	.word	0x72bea4d0
 8023e3c:	3e663769 	.word	0x3e663769
 8023e40:	c5d26bf1 	.word	0xc5d26bf1
 8023e44:	3ebbbd41 	.word	0x3ebbbd41
 8023e48:	af25de2c 	.word	0xaf25de2c
 8023e4c:	3f11566a 	.word	0x3f11566a
 8023e50:	16bebd93 	.word	0x16bebd93
 8023e54:	3f66c16c 	.word	0x3f66c16c
 8023e58:	5555553e 	.word	0x5555553e
 8023e5c:	3fc55555 	.word	0x3fc55555
 8023e60:	652b82fe 	.word	0x652b82fe
 8023e64:	3ff71547 	.word	0x3ff71547
 8023e68:	fee00000 	.word	0xfee00000
 8023e6c:	3fe62e42 	.word	0x3fe62e42
 8023e70:	35793c76 	.word	0x35793c76
 8023e74:	3dea39ef 	.word	0x3dea39ef
 8023e78:	8800759c 	.word	0x8800759c
 8023e7c:	7e37e43c 	.word	0x7e37e43c
 8023e80:	40862e41 	.word	0x40862e41
 8023e84:	7fefffff 	.word	0x7fefffff
 8023e88:	3fd62e42 	.word	0x3fd62e42
 8023e8c:	3ff0a2b1 	.word	0x3ff0a2b1
 8023e90:	08026640 	.word	0x08026640
 8023e94:	08026630 	.word	0x08026630
 8023e98:	3ff00000 	.word	0x3ff00000
 8023e9c:	08026650 	.word	0x08026650
 8023ea0:	3defffff 	.word	0x3defffff

08023ea4 <__ieee754_fmod>:
 8023ea4:	ec53 2b11 	vmov	r2, r3, d1
 8023ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023eac:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 8023eb0:	ea52 0408 	orrs.w	r4, r2, r8
 8023eb4:	ec51 0b10 	vmov	r0, r1, d0
 8023eb8:	461e      	mov	r6, r3
 8023eba:	4696      	mov	lr, r2
 8023ebc:	4694      	mov	ip, r2
 8023ebe:	d00c      	beq.n	8023eda <__ieee754_fmod+0x36>
 8023ec0:	4d76      	ldr	r5, [pc, #472]	@ (802409c <__ieee754_fmod+0x1f8>)
 8023ec2:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 8023ec6:	45a9      	cmp	r9, r5
 8023ec8:	460c      	mov	r4, r1
 8023eca:	d806      	bhi.n	8023eda <__ieee754_fmod+0x36>
 8023ecc:	4255      	negs	r5, r2
 8023ece:	4f74      	ldr	r7, [pc, #464]	@ (80240a0 <__ieee754_fmod+0x1fc>)
 8023ed0:	4315      	orrs	r5, r2
 8023ed2:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 8023ed6:	42bd      	cmp	r5, r7
 8023ed8:	d909      	bls.n	8023eee <__ieee754_fmod+0x4a>
 8023eda:	f7dc fb9d 	bl	8000618 <__aeabi_dmul>
 8023ede:	4602      	mov	r2, r0
 8023ee0:	460b      	mov	r3, r1
 8023ee2:	f7dc fcc3 	bl	800086c <__aeabi_ddiv>
 8023ee6:	ec41 0b10 	vmov	d0, r0, r1
 8023eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023eee:	45c1      	cmp	r9, r8
 8023ef0:	4682      	mov	sl, r0
 8023ef2:	4607      	mov	r7, r0
 8023ef4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8023ef8:	dc09      	bgt.n	8023f0e <__ieee754_fmod+0x6a>
 8023efa:	dbf4      	blt.n	8023ee6 <__ieee754_fmod+0x42>
 8023efc:	4282      	cmp	r2, r0
 8023efe:	d8f2      	bhi.n	8023ee6 <__ieee754_fmod+0x42>
 8023f00:	d105      	bne.n	8023f0e <__ieee754_fmod+0x6a>
 8023f02:	4b68      	ldr	r3, [pc, #416]	@ (80240a4 <__ieee754_fmod+0x200>)
 8023f04:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8023f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023f0c:	e7eb      	b.n	8023ee6 <__ieee754_fmod+0x42>
 8023f0e:	4964      	ldr	r1, [pc, #400]	@ (80240a0 <__ieee754_fmod+0x1fc>)
 8023f10:	420c      	tst	r4, r1
 8023f12:	d148      	bne.n	8023fa6 <__ieee754_fmod+0x102>
 8023f14:	f1b9 0f00 	cmp.w	r9, #0
 8023f18:	d13d      	bne.n	8023f96 <__ieee754_fmod+0xf2>
 8023f1a:	4a63      	ldr	r2, [pc, #396]	@ (80240a8 <__ieee754_fmod+0x204>)
 8023f1c:	4653      	mov	r3, sl
 8023f1e:	2b00      	cmp	r3, #0
 8023f20:	dc36      	bgt.n	8023f90 <__ieee754_fmod+0xec>
 8023f22:	420e      	tst	r6, r1
 8023f24:	d14f      	bne.n	8023fc6 <__ieee754_fmod+0x122>
 8023f26:	f1b8 0f00 	cmp.w	r8, #0
 8023f2a:	d144      	bne.n	8023fb6 <__ieee754_fmod+0x112>
 8023f2c:	4b5e      	ldr	r3, [pc, #376]	@ (80240a8 <__ieee754_fmod+0x204>)
 8023f2e:	4671      	mov	r1, lr
 8023f30:	2900      	cmp	r1, #0
 8023f32:	dc3d      	bgt.n	8023fb0 <__ieee754_fmod+0x10c>
 8023f34:	485d      	ldr	r0, [pc, #372]	@ (80240ac <__ieee754_fmod+0x208>)
 8023f36:	4282      	cmp	r2, r0
 8023f38:	db4a      	blt.n	8023fd0 <__ieee754_fmod+0x12c>
 8023f3a:	f3c4 0113 	ubfx	r1, r4, #0, #20
 8023f3e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8023f42:	485a      	ldr	r0, [pc, #360]	@ (80240ac <__ieee754_fmod+0x208>)
 8023f44:	4283      	cmp	r3, r0
 8023f46:	db57      	blt.n	8023ff8 <__ieee754_fmod+0x154>
 8023f48:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8023f4c:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8023f50:	1ad0      	subs	r0, r2, r3
 8023f52:	1b8a      	subs	r2, r1, r6
 8023f54:	eba7 040c 	sub.w	r4, r7, ip
 8023f58:	2800      	cmp	r0, #0
 8023f5a:	d162      	bne.n	8024022 <__ieee754_fmod+0x17e>
 8023f5c:	4567      	cmp	r7, ip
 8023f5e:	bf38      	it	cc
 8023f60:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8023f64:	2a00      	cmp	r2, #0
 8023f66:	bfbc      	itt	lt
 8023f68:	463c      	movlt	r4, r7
 8023f6a:	460a      	movlt	r2, r1
 8023f6c:	ea52 0104 	orrs.w	r1, r2, r4
 8023f70:	d0c7      	beq.n	8023f02 <__ieee754_fmod+0x5e>
 8023f72:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8023f76:	db69      	blt.n	802404c <__ieee754_fmod+0x1a8>
 8023f78:	494c      	ldr	r1, [pc, #304]	@ (80240ac <__ieee754_fmod+0x208>)
 8023f7a:	428b      	cmp	r3, r1
 8023f7c:	db6c      	blt.n	8024058 <__ieee754_fmod+0x1b4>
 8023f7e:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 8023f82:	432a      	orrs	r2, r5
 8023f84:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8023f88:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 8023f8c:	4620      	mov	r0, r4
 8023f8e:	e7aa      	b.n	8023ee6 <__ieee754_fmod+0x42>
 8023f90:	3a01      	subs	r2, #1
 8023f92:	005b      	lsls	r3, r3, #1
 8023f94:	e7c3      	b.n	8023f1e <__ieee754_fmod+0x7a>
 8023f96:	4a45      	ldr	r2, [pc, #276]	@ (80240ac <__ieee754_fmod+0x208>)
 8023f98:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 8023f9c:	2b00      	cmp	r3, #0
 8023f9e:	ddc0      	ble.n	8023f22 <__ieee754_fmod+0x7e>
 8023fa0:	3a01      	subs	r2, #1
 8023fa2:	005b      	lsls	r3, r3, #1
 8023fa4:	e7fa      	b.n	8023f9c <__ieee754_fmod+0xf8>
 8023fa6:	ea4f 5229 	mov.w	r2, r9, asr #20
 8023faa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8023fae:	e7b8      	b.n	8023f22 <__ieee754_fmod+0x7e>
 8023fb0:	3b01      	subs	r3, #1
 8023fb2:	0049      	lsls	r1, r1, #1
 8023fb4:	e7bc      	b.n	8023f30 <__ieee754_fmod+0x8c>
 8023fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80240ac <__ieee754_fmod+0x208>)
 8023fb8:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8023fbc:	2900      	cmp	r1, #0
 8023fbe:	ddb9      	ble.n	8023f34 <__ieee754_fmod+0x90>
 8023fc0:	3b01      	subs	r3, #1
 8023fc2:	0049      	lsls	r1, r1, #1
 8023fc4:	e7fa      	b.n	8023fbc <__ieee754_fmod+0x118>
 8023fc6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8023fca:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8023fce:	e7b1      	b.n	8023f34 <__ieee754_fmod+0x90>
 8023fd0:	1a80      	subs	r0, r0, r2
 8023fd2:	281f      	cmp	r0, #31
 8023fd4:	dc0a      	bgt.n	8023fec <__ieee754_fmod+0x148>
 8023fd6:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 8023fda:	fa09 f900 	lsl.w	r9, r9, r0
 8023fde:	fa2a f101 	lsr.w	r1, sl, r1
 8023fe2:	ea41 0109 	orr.w	r1, r1, r9
 8023fe6:	fa0a f700 	lsl.w	r7, sl, r0
 8023fea:	e7aa      	b.n	8023f42 <__ieee754_fmod+0x9e>
 8023fec:	4930      	ldr	r1, [pc, #192]	@ (80240b0 <__ieee754_fmod+0x20c>)
 8023fee:	1a89      	subs	r1, r1, r2
 8023ff0:	fa0a f101 	lsl.w	r1, sl, r1
 8023ff4:	2700      	movs	r7, #0
 8023ff6:	e7a4      	b.n	8023f42 <__ieee754_fmod+0x9e>
 8023ff8:	1ac0      	subs	r0, r0, r3
 8023ffa:	281f      	cmp	r0, #31
 8023ffc:	dc0a      	bgt.n	8024014 <__ieee754_fmod+0x170>
 8023ffe:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 8024002:	fa08 f800 	lsl.w	r8, r8, r0
 8024006:	fa2e f606 	lsr.w	r6, lr, r6
 802400a:	ea46 0608 	orr.w	r6, r6, r8
 802400e:	fa0e fc00 	lsl.w	ip, lr, r0
 8024012:	e79d      	b.n	8023f50 <__ieee754_fmod+0xac>
 8024014:	4e26      	ldr	r6, [pc, #152]	@ (80240b0 <__ieee754_fmod+0x20c>)
 8024016:	1af6      	subs	r6, r6, r3
 8024018:	fa0e f606 	lsl.w	r6, lr, r6
 802401c:	f04f 0c00 	mov.w	ip, #0
 8024020:	e796      	b.n	8023f50 <__ieee754_fmod+0xac>
 8024022:	4567      	cmp	r7, ip
 8024024:	bf38      	it	cc
 8024026:	f102 32ff 	addcc.w	r2, r2, #4294967295
 802402a:	2a00      	cmp	r2, #0
 802402c:	da05      	bge.n	802403a <__ieee754_fmod+0x196>
 802402e:	0ffa      	lsrs	r2, r7, #31
 8024030:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8024034:	007f      	lsls	r7, r7, #1
 8024036:	3801      	subs	r0, #1
 8024038:	e78b      	b.n	8023f52 <__ieee754_fmod+0xae>
 802403a:	ea52 0104 	orrs.w	r1, r2, r4
 802403e:	f43f af60 	beq.w	8023f02 <__ieee754_fmod+0x5e>
 8024042:	0fe1      	lsrs	r1, r4, #31
 8024044:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8024048:	0067      	lsls	r7, r4, #1
 802404a:	e7f4      	b.n	8024036 <__ieee754_fmod+0x192>
 802404c:	0fe1      	lsrs	r1, r4, #31
 802404e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8024052:	0064      	lsls	r4, r4, #1
 8024054:	3b01      	subs	r3, #1
 8024056:	e78c      	b.n	8023f72 <__ieee754_fmod+0xce>
 8024058:	1ac9      	subs	r1, r1, r3
 802405a:	2914      	cmp	r1, #20
 802405c:	dc0a      	bgt.n	8024074 <__ieee754_fmod+0x1d0>
 802405e:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 8024062:	fa02 f303 	lsl.w	r3, r2, r3
 8024066:	40cc      	lsrs	r4, r1
 8024068:	4323      	orrs	r3, r4
 802406a:	410a      	asrs	r2, r1
 802406c:	ea42 0105 	orr.w	r1, r2, r5
 8024070:	4618      	mov	r0, r3
 8024072:	e738      	b.n	8023ee6 <__ieee754_fmod+0x42>
 8024074:	291f      	cmp	r1, #31
 8024076:	dc07      	bgt.n	8024088 <__ieee754_fmod+0x1e4>
 8024078:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 802407c:	40cc      	lsrs	r4, r1
 802407e:	fa02 f303 	lsl.w	r3, r2, r3
 8024082:	4323      	orrs	r3, r4
 8024084:	462a      	mov	r2, r5
 8024086:	e7f1      	b.n	802406c <__ieee754_fmod+0x1c8>
 8024088:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 802408c:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8024090:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 8024094:	33e2      	adds	r3, #226	@ 0xe2
 8024096:	fa42 f303 	asr.w	r3, r2, r3
 802409a:	e7f3      	b.n	8024084 <__ieee754_fmod+0x1e0>
 802409c:	7fefffff 	.word	0x7fefffff
 80240a0:	7ff00000 	.word	0x7ff00000
 80240a4:	08026660 	.word	0x08026660
 80240a8:	fffffbed 	.word	0xfffffbed
 80240ac:	fffffc02 	.word	0xfffffc02
 80240b0:	fffffbe2 	.word	0xfffffbe2
 80240b4:	00000000 	.word	0x00000000

080240b8 <__ieee754_log>:
 80240b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240bc:	ec51 0b10 	vmov	r0, r1, d0
 80240c0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80240c4:	b087      	sub	sp, #28
 80240c6:	460d      	mov	r5, r1
 80240c8:	da26      	bge.n	8024118 <__ieee754_log+0x60>
 80240ca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80240ce:	4303      	orrs	r3, r0
 80240d0:	4602      	mov	r2, r0
 80240d2:	d10a      	bne.n	80240ea <__ieee754_log+0x32>
 80240d4:	49ce      	ldr	r1, [pc, #824]	@ (8024410 <__ieee754_log+0x358>)
 80240d6:	2200      	movs	r2, #0
 80240d8:	2300      	movs	r3, #0
 80240da:	2000      	movs	r0, #0
 80240dc:	f7dc fbc6 	bl	800086c <__aeabi_ddiv>
 80240e0:	ec41 0b10 	vmov	d0, r0, r1
 80240e4:	b007      	add	sp, #28
 80240e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240ea:	2900      	cmp	r1, #0
 80240ec:	da05      	bge.n	80240fa <__ieee754_log+0x42>
 80240ee:	460b      	mov	r3, r1
 80240f0:	f7dc f8da 	bl	80002a8 <__aeabi_dsub>
 80240f4:	2200      	movs	r2, #0
 80240f6:	2300      	movs	r3, #0
 80240f8:	e7f0      	b.n	80240dc <__ieee754_log+0x24>
 80240fa:	4bc6      	ldr	r3, [pc, #792]	@ (8024414 <__ieee754_log+0x35c>)
 80240fc:	2200      	movs	r2, #0
 80240fe:	f7dc fa8b 	bl	8000618 <__aeabi_dmul>
 8024102:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8024106:	460d      	mov	r5, r1
 8024108:	4ac3      	ldr	r2, [pc, #780]	@ (8024418 <__ieee754_log+0x360>)
 802410a:	4295      	cmp	r5, r2
 802410c:	dd06      	ble.n	802411c <__ieee754_log+0x64>
 802410e:	4602      	mov	r2, r0
 8024110:	460b      	mov	r3, r1
 8024112:	f7dc f8cb 	bl	80002ac <__adddf3>
 8024116:	e7e3      	b.n	80240e0 <__ieee754_log+0x28>
 8024118:	2300      	movs	r3, #0
 802411a:	e7f5      	b.n	8024108 <__ieee754_log+0x50>
 802411c:	152c      	asrs	r4, r5, #20
 802411e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8024122:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8024126:	441c      	add	r4, r3
 8024128:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 802412c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8024130:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8024134:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8024138:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 802413c:	ea42 0105 	orr.w	r1, r2, r5
 8024140:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8024144:	2200      	movs	r2, #0
 8024146:	4bb5      	ldr	r3, [pc, #724]	@ (802441c <__ieee754_log+0x364>)
 8024148:	f7dc f8ae 	bl	80002a8 <__aeabi_dsub>
 802414c:	1cab      	adds	r3, r5, #2
 802414e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8024152:	2b02      	cmp	r3, #2
 8024154:	4682      	mov	sl, r0
 8024156:	468b      	mov	fp, r1
 8024158:	f04f 0200 	mov.w	r2, #0
 802415c:	dc53      	bgt.n	8024206 <__ieee754_log+0x14e>
 802415e:	2300      	movs	r3, #0
 8024160:	f7dc fcc2 	bl	8000ae8 <__aeabi_dcmpeq>
 8024164:	b1d0      	cbz	r0, 802419c <__ieee754_log+0xe4>
 8024166:	2c00      	cmp	r4, #0
 8024168:	f000 8120 	beq.w	80243ac <__ieee754_log+0x2f4>
 802416c:	4620      	mov	r0, r4
 802416e:	f7dc f9e9 	bl	8000544 <__aeabi_i2d>
 8024172:	a391      	add	r3, pc, #580	@ (adr r3, 80243b8 <__ieee754_log+0x300>)
 8024174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024178:	4606      	mov	r6, r0
 802417a:	460f      	mov	r7, r1
 802417c:	f7dc fa4c 	bl	8000618 <__aeabi_dmul>
 8024180:	a38f      	add	r3, pc, #572	@ (adr r3, 80243c0 <__ieee754_log+0x308>)
 8024182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024186:	4604      	mov	r4, r0
 8024188:	460d      	mov	r5, r1
 802418a:	4630      	mov	r0, r6
 802418c:	4639      	mov	r1, r7
 802418e:	f7dc fa43 	bl	8000618 <__aeabi_dmul>
 8024192:	4602      	mov	r2, r0
 8024194:	460b      	mov	r3, r1
 8024196:	4620      	mov	r0, r4
 8024198:	4629      	mov	r1, r5
 802419a:	e7ba      	b.n	8024112 <__ieee754_log+0x5a>
 802419c:	a38a      	add	r3, pc, #552	@ (adr r3, 80243c8 <__ieee754_log+0x310>)
 802419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241a2:	4650      	mov	r0, sl
 80241a4:	4659      	mov	r1, fp
 80241a6:	f7dc fa37 	bl	8000618 <__aeabi_dmul>
 80241aa:	4602      	mov	r2, r0
 80241ac:	460b      	mov	r3, r1
 80241ae:	2000      	movs	r0, #0
 80241b0:	499b      	ldr	r1, [pc, #620]	@ (8024420 <__ieee754_log+0x368>)
 80241b2:	f7dc f879 	bl	80002a8 <__aeabi_dsub>
 80241b6:	4652      	mov	r2, sl
 80241b8:	4606      	mov	r6, r0
 80241ba:	460f      	mov	r7, r1
 80241bc:	465b      	mov	r3, fp
 80241be:	4650      	mov	r0, sl
 80241c0:	4659      	mov	r1, fp
 80241c2:	f7dc fa29 	bl	8000618 <__aeabi_dmul>
 80241c6:	4602      	mov	r2, r0
 80241c8:	460b      	mov	r3, r1
 80241ca:	4630      	mov	r0, r6
 80241cc:	4639      	mov	r1, r7
 80241ce:	f7dc fa23 	bl	8000618 <__aeabi_dmul>
 80241d2:	4606      	mov	r6, r0
 80241d4:	460f      	mov	r7, r1
 80241d6:	b914      	cbnz	r4, 80241de <__ieee754_log+0x126>
 80241d8:	4632      	mov	r2, r6
 80241da:	463b      	mov	r3, r7
 80241dc:	e0a0      	b.n	8024320 <__ieee754_log+0x268>
 80241de:	4620      	mov	r0, r4
 80241e0:	f7dc f9b0 	bl	8000544 <__aeabi_i2d>
 80241e4:	a374      	add	r3, pc, #464	@ (adr r3, 80243b8 <__ieee754_log+0x300>)
 80241e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241ea:	4680      	mov	r8, r0
 80241ec:	4689      	mov	r9, r1
 80241ee:	f7dc fa13 	bl	8000618 <__aeabi_dmul>
 80241f2:	a373      	add	r3, pc, #460	@ (adr r3, 80243c0 <__ieee754_log+0x308>)
 80241f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241f8:	4604      	mov	r4, r0
 80241fa:	460d      	mov	r5, r1
 80241fc:	4640      	mov	r0, r8
 80241fe:	4649      	mov	r1, r9
 8024200:	f7dc fa0a 	bl	8000618 <__aeabi_dmul>
 8024204:	e0a5      	b.n	8024352 <__ieee754_log+0x29a>
 8024206:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802420a:	f7dc f84f 	bl	80002ac <__adddf3>
 802420e:	4602      	mov	r2, r0
 8024210:	460b      	mov	r3, r1
 8024212:	4650      	mov	r0, sl
 8024214:	4659      	mov	r1, fp
 8024216:	f7dc fb29 	bl	800086c <__aeabi_ddiv>
 802421a:	e9cd 0100 	strd	r0, r1, [sp]
 802421e:	4620      	mov	r0, r4
 8024220:	f7dc f990 	bl	8000544 <__aeabi_i2d>
 8024224:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024228:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802422c:	4610      	mov	r0, r2
 802422e:	4619      	mov	r1, r3
 8024230:	f7dc f9f2 	bl	8000618 <__aeabi_dmul>
 8024234:	4602      	mov	r2, r0
 8024236:	460b      	mov	r3, r1
 8024238:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802423c:	f7dc f9ec 	bl	8000618 <__aeabi_dmul>
 8024240:	a363      	add	r3, pc, #396	@ (adr r3, 80243d0 <__ieee754_log+0x318>)
 8024242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024246:	4680      	mov	r8, r0
 8024248:	4689      	mov	r9, r1
 802424a:	f7dc f9e5 	bl	8000618 <__aeabi_dmul>
 802424e:	a362      	add	r3, pc, #392	@ (adr r3, 80243d8 <__ieee754_log+0x320>)
 8024250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024254:	f7dc f82a 	bl	80002ac <__adddf3>
 8024258:	4642      	mov	r2, r8
 802425a:	464b      	mov	r3, r9
 802425c:	f7dc f9dc 	bl	8000618 <__aeabi_dmul>
 8024260:	a35f      	add	r3, pc, #380	@ (adr r3, 80243e0 <__ieee754_log+0x328>)
 8024262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024266:	f7dc f821 	bl	80002ac <__adddf3>
 802426a:	4642      	mov	r2, r8
 802426c:	464b      	mov	r3, r9
 802426e:	f7dc f9d3 	bl	8000618 <__aeabi_dmul>
 8024272:	a35d      	add	r3, pc, #372	@ (adr r3, 80243e8 <__ieee754_log+0x330>)
 8024274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024278:	f7dc f818 	bl	80002ac <__adddf3>
 802427c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024280:	f7dc f9ca 	bl	8000618 <__aeabi_dmul>
 8024284:	a35a      	add	r3, pc, #360	@ (adr r3, 80243f0 <__ieee754_log+0x338>)
 8024286:	e9d3 2300 	ldrd	r2, r3, [r3]
 802428a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802428e:	4640      	mov	r0, r8
 8024290:	4649      	mov	r1, r9
 8024292:	f7dc f9c1 	bl	8000618 <__aeabi_dmul>
 8024296:	a358      	add	r3, pc, #352	@ (adr r3, 80243f8 <__ieee754_log+0x340>)
 8024298:	e9d3 2300 	ldrd	r2, r3, [r3]
 802429c:	f7dc f806 	bl	80002ac <__adddf3>
 80242a0:	4642      	mov	r2, r8
 80242a2:	464b      	mov	r3, r9
 80242a4:	f7dc f9b8 	bl	8000618 <__aeabi_dmul>
 80242a8:	a355      	add	r3, pc, #340	@ (adr r3, 8024400 <__ieee754_log+0x348>)
 80242aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242ae:	f7db fffd 	bl	80002ac <__adddf3>
 80242b2:	4642      	mov	r2, r8
 80242b4:	464b      	mov	r3, r9
 80242b6:	f7dc f9af 	bl	8000618 <__aeabi_dmul>
 80242ba:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80242be:	4602      	mov	r2, r0
 80242c0:	460b      	mov	r3, r1
 80242c2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80242c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80242ca:	f7db ffef 	bl	80002ac <__adddf3>
 80242ce:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80242d2:	3551      	adds	r5, #81	@ 0x51
 80242d4:	4335      	orrs	r5, r6
 80242d6:	2d00      	cmp	r5, #0
 80242d8:	4680      	mov	r8, r0
 80242da:	4689      	mov	r9, r1
 80242dc:	dd48      	ble.n	8024370 <__ieee754_log+0x2b8>
 80242de:	4b50      	ldr	r3, [pc, #320]	@ (8024420 <__ieee754_log+0x368>)
 80242e0:	2200      	movs	r2, #0
 80242e2:	4650      	mov	r0, sl
 80242e4:	4659      	mov	r1, fp
 80242e6:	f7dc f997 	bl	8000618 <__aeabi_dmul>
 80242ea:	4652      	mov	r2, sl
 80242ec:	465b      	mov	r3, fp
 80242ee:	f7dc f993 	bl	8000618 <__aeabi_dmul>
 80242f2:	4602      	mov	r2, r0
 80242f4:	460b      	mov	r3, r1
 80242f6:	4606      	mov	r6, r0
 80242f8:	460f      	mov	r7, r1
 80242fa:	4640      	mov	r0, r8
 80242fc:	4649      	mov	r1, r9
 80242fe:	f7db ffd5 	bl	80002ac <__adddf3>
 8024302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024306:	f7dc f987 	bl	8000618 <__aeabi_dmul>
 802430a:	4680      	mov	r8, r0
 802430c:	4689      	mov	r9, r1
 802430e:	b964      	cbnz	r4, 802432a <__ieee754_log+0x272>
 8024310:	4602      	mov	r2, r0
 8024312:	460b      	mov	r3, r1
 8024314:	4630      	mov	r0, r6
 8024316:	4639      	mov	r1, r7
 8024318:	f7db ffc6 	bl	80002a8 <__aeabi_dsub>
 802431c:	4602      	mov	r2, r0
 802431e:	460b      	mov	r3, r1
 8024320:	4650      	mov	r0, sl
 8024322:	4659      	mov	r1, fp
 8024324:	f7db ffc0 	bl	80002a8 <__aeabi_dsub>
 8024328:	e6da      	b.n	80240e0 <__ieee754_log+0x28>
 802432a:	a323      	add	r3, pc, #140	@ (adr r3, 80243b8 <__ieee754_log+0x300>)
 802432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024334:	f7dc f970 	bl	8000618 <__aeabi_dmul>
 8024338:	a321      	add	r3, pc, #132	@ (adr r3, 80243c0 <__ieee754_log+0x308>)
 802433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802433e:	4604      	mov	r4, r0
 8024340:	460d      	mov	r5, r1
 8024342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024346:	f7dc f967 	bl	8000618 <__aeabi_dmul>
 802434a:	4642      	mov	r2, r8
 802434c:	464b      	mov	r3, r9
 802434e:	f7db ffad 	bl	80002ac <__adddf3>
 8024352:	4602      	mov	r2, r0
 8024354:	460b      	mov	r3, r1
 8024356:	4630      	mov	r0, r6
 8024358:	4639      	mov	r1, r7
 802435a:	f7db ffa5 	bl	80002a8 <__aeabi_dsub>
 802435e:	4652      	mov	r2, sl
 8024360:	465b      	mov	r3, fp
 8024362:	f7db ffa1 	bl	80002a8 <__aeabi_dsub>
 8024366:	4602      	mov	r2, r0
 8024368:	460b      	mov	r3, r1
 802436a:	4620      	mov	r0, r4
 802436c:	4629      	mov	r1, r5
 802436e:	e7d9      	b.n	8024324 <__ieee754_log+0x26c>
 8024370:	4602      	mov	r2, r0
 8024372:	460b      	mov	r3, r1
 8024374:	4650      	mov	r0, sl
 8024376:	4659      	mov	r1, fp
 8024378:	f7db ff96 	bl	80002a8 <__aeabi_dsub>
 802437c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024380:	f7dc f94a 	bl	8000618 <__aeabi_dmul>
 8024384:	4606      	mov	r6, r0
 8024386:	460f      	mov	r7, r1
 8024388:	2c00      	cmp	r4, #0
 802438a:	f43f af25 	beq.w	80241d8 <__ieee754_log+0x120>
 802438e:	a30a      	add	r3, pc, #40	@ (adr r3, 80243b8 <__ieee754_log+0x300>)
 8024390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024398:	f7dc f93e 	bl	8000618 <__aeabi_dmul>
 802439c:	a308      	add	r3, pc, #32	@ (adr r3, 80243c0 <__ieee754_log+0x308>)
 802439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243a2:	4604      	mov	r4, r0
 80243a4:	460d      	mov	r5, r1
 80243a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80243aa:	e729      	b.n	8024200 <__ieee754_log+0x148>
 80243ac:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8024408 <__ieee754_log+0x350>
 80243b0:	e698      	b.n	80240e4 <__ieee754_log+0x2c>
 80243b2:	bf00      	nop
 80243b4:	f3af 8000 	nop.w
 80243b8:	fee00000 	.word	0xfee00000
 80243bc:	3fe62e42 	.word	0x3fe62e42
 80243c0:	35793c76 	.word	0x35793c76
 80243c4:	3dea39ef 	.word	0x3dea39ef
 80243c8:	55555555 	.word	0x55555555
 80243cc:	3fd55555 	.word	0x3fd55555
 80243d0:	df3e5244 	.word	0xdf3e5244
 80243d4:	3fc2f112 	.word	0x3fc2f112
 80243d8:	96cb03de 	.word	0x96cb03de
 80243dc:	3fc74664 	.word	0x3fc74664
 80243e0:	94229359 	.word	0x94229359
 80243e4:	3fd24924 	.word	0x3fd24924
 80243e8:	55555593 	.word	0x55555593
 80243ec:	3fe55555 	.word	0x3fe55555
 80243f0:	d078c69f 	.word	0xd078c69f
 80243f4:	3fc39a09 	.word	0x3fc39a09
 80243f8:	1d8e78af 	.word	0x1d8e78af
 80243fc:	3fcc71c5 	.word	0x3fcc71c5
 8024400:	9997fa04 	.word	0x9997fa04
 8024404:	3fd99999 	.word	0x3fd99999
	...
 8024410:	c3500000 	.word	0xc3500000
 8024414:	43500000 	.word	0x43500000
 8024418:	7fefffff 	.word	0x7fefffff
 802441c:	3ff00000 	.word	0x3ff00000
 8024420:	3fe00000 	.word	0x3fe00000
 8024424:	00000000 	.word	0x00000000

08024428 <__ieee754_pow>:
 8024428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802442c:	b091      	sub	sp, #68	@ 0x44
 802442e:	ed8d 1b00 	vstr	d1, [sp]
 8024432:	e9dd 1900 	ldrd	r1, r9, [sp]
 8024436:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 802443a:	ea5a 0001 	orrs.w	r0, sl, r1
 802443e:	ec57 6b10 	vmov	r6, r7, d0
 8024442:	d113      	bne.n	802446c <__ieee754_pow+0x44>
 8024444:	19b3      	adds	r3, r6, r6
 8024446:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 802444a:	4152      	adcs	r2, r2
 802444c:	4298      	cmp	r0, r3
 802444e:	4b9a      	ldr	r3, [pc, #616]	@ (80246b8 <__ieee754_pow+0x290>)
 8024450:	4193      	sbcs	r3, r2
 8024452:	f080 84ee 	bcs.w	8024e32 <__ieee754_pow+0xa0a>
 8024456:	e9dd 2300 	ldrd	r2, r3, [sp]
 802445a:	4630      	mov	r0, r6
 802445c:	4639      	mov	r1, r7
 802445e:	f7db ff25 	bl	80002ac <__adddf3>
 8024462:	ec41 0b10 	vmov	d0, r0, r1
 8024466:	b011      	add	sp, #68	@ 0x44
 8024468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802446c:	4a93      	ldr	r2, [pc, #588]	@ (80246bc <__ieee754_pow+0x294>)
 802446e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8024472:	4295      	cmp	r5, r2
 8024474:	46b8      	mov	r8, r7
 8024476:	4633      	mov	r3, r6
 8024478:	d80a      	bhi.n	8024490 <__ieee754_pow+0x68>
 802447a:	d104      	bne.n	8024486 <__ieee754_pow+0x5e>
 802447c:	2e00      	cmp	r6, #0
 802447e:	d1ea      	bne.n	8024456 <__ieee754_pow+0x2e>
 8024480:	45aa      	cmp	sl, r5
 8024482:	d8e8      	bhi.n	8024456 <__ieee754_pow+0x2e>
 8024484:	e001      	b.n	802448a <__ieee754_pow+0x62>
 8024486:	4592      	cmp	sl, r2
 8024488:	d802      	bhi.n	8024490 <__ieee754_pow+0x68>
 802448a:	4592      	cmp	sl, r2
 802448c:	d10f      	bne.n	80244ae <__ieee754_pow+0x86>
 802448e:	b171      	cbz	r1, 80244ae <__ieee754_pow+0x86>
 8024490:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8024494:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8024498:	ea58 0803 	orrs.w	r8, r8, r3
 802449c:	d1db      	bne.n	8024456 <__ieee754_pow+0x2e>
 802449e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80244a2:	18db      	adds	r3, r3, r3
 80244a4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80244a8:	4152      	adcs	r2, r2
 80244aa:	4598      	cmp	r8, r3
 80244ac:	e7cf      	b.n	802444e <__ieee754_pow+0x26>
 80244ae:	f1b8 0f00 	cmp.w	r8, #0
 80244b2:	46ab      	mov	fp, r5
 80244b4:	da43      	bge.n	802453e <__ieee754_pow+0x116>
 80244b6:	4a82      	ldr	r2, [pc, #520]	@ (80246c0 <__ieee754_pow+0x298>)
 80244b8:	4592      	cmp	sl, r2
 80244ba:	d856      	bhi.n	802456a <__ieee754_pow+0x142>
 80244bc:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80244c0:	4592      	cmp	sl, r2
 80244c2:	f240 84c5 	bls.w	8024e50 <__ieee754_pow+0xa28>
 80244c6:	ea4f 522a 	mov.w	r2, sl, asr #20
 80244ca:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80244ce:	2a14      	cmp	r2, #20
 80244d0:	dd18      	ble.n	8024504 <__ieee754_pow+0xdc>
 80244d2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80244d6:	fa21 f402 	lsr.w	r4, r1, r2
 80244da:	fa04 f202 	lsl.w	r2, r4, r2
 80244de:	428a      	cmp	r2, r1
 80244e0:	f040 84b6 	bne.w	8024e50 <__ieee754_pow+0xa28>
 80244e4:	f004 0401 	and.w	r4, r4, #1
 80244e8:	f1c4 0402 	rsb	r4, r4, #2
 80244ec:	2900      	cmp	r1, #0
 80244ee:	d159      	bne.n	80245a4 <__ieee754_pow+0x17c>
 80244f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80244f4:	d148      	bne.n	8024588 <__ieee754_pow+0x160>
 80244f6:	4632      	mov	r2, r6
 80244f8:	463b      	mov	r3, r7
 80244fa:	4630      	mov	r0, r6
 80244fc:	4639      	mov	r1, r7
 80244fe:	f7dc f88b 	bl	8000618 <__aeabi_dmul>
 8024502:	e7ae      	b.n	8024462 <__ieee754_pow+0x3a>
 8024504:	2900      	cmp	r1, #0
 8024506:	d14c      	bne.n	80245a2 <__ieee754_pow+0x17a>
 8024508:	f1c2 0214 	rsb	r2, r2, #20
 802450c:	fa4a f402 	asr.w	r4, sl, r2
 8024510:	fa04 f202 	lsl.w	r2, r4, r2
 8024514:	4552      	cmp	r2, sl
 8024516:	f040 8498 	bne.w	8024e4a <__ieee754_pow+0xa22>
 802451a:	f004 0401 	and.w	r4, r4, #1
 802451e:	f1c4 0402 	rsb	r4, r4, #2
 8024522:	4a68      	ldr	r2, [pc, #416]	@ (80246c4 <__ieee754_pow+0x29c>)
 8024524:	4592      	cmp	sl, r2
 8024526:	d1e3      	bne.n	80244f0 <__ieee754_pow+0xc8>
 8024528:	f1b9 0f00 	cmp.w	r9, #0
 802452c:	f280 8489 	bge.w	8024e42 <__ieee754_pow+0xa1a>
 8024530:	4964      	ldr	r1, [pc, #400]	@ (80246c4 <__ieee754_pow+0x29c>)
 8024532:	4632      	mov	r2, r6
 8024534:	463b      	mov	r3, r7
 8024536:	2000      	movs	r0, #0
 8024538:	f7dc f998 	bl	800086c <__aeabi_ddiv>
 802453c:	e791      	b.n	8024462 <__ieee754_pow+0x3a>
 802453e:	2400      	movs	r4, #0
 8024540:	bb81      	cbnz	r1, 80245a4 <__ieee754_pow+0x17c>
 8024542:	4a5e      	ldr	r2, [pc, #376]	@ (80246bc <__ieee754_pow+0x294>)
 8024544:	4592      	cmp	sl, r2
 8024546:	d1ec      	bne.n	8024522 <__ieee754_pow+0xfa>
 8024548:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 802454c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8024550:	431a      	orrs	r2, r3
 8024552:	f000 846e 	beq.w	8024e32 <__ieee754_pow+0xa0a>
 8024556:	4b5c      	ldr	r3, [pc, #368]	@ (80246c8 <__ieee754_pow+0x2a0>)
 8024558:	429d      	cmp	r5, r3
 802455a:	d908      	bls.n	802456e <__ieee754_pow+0x146>
 802455c:	f1b9 0f00 	cmp.w	r9, #0
 8024560:	f280 846b 	bge.w	8024e3a <__ieee754_pow+0xa12>
 8024564:	2000      	movs	r0, #0
 8024566:	2100      	movs	r1, #0
 8024568:	e77b      	b.n	8024462 <__ieee754_pow+0x3a>
 802456a:	2402      	movs	r4, #2
 802456c:	e7e8      	b.n	8024540 <__ieee754_pow+0x118>
 802456e:	f1b9 0f00 	cmp.w	r9, #0
 8024572:	f04f 0000 	mov.w	r0, #0
 8024576:	f04f 0100 	mov.w	r1, #0
 802457a:	f6bf af72 	bge.w	8024462 <__ieee754_pow+0x3a>
 802457e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8024582:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8024586:	e76c      	b.n	8024462 <__ieee754_pow+0x3a>
 8024588:	4a50      	ldr	r2, [pc, #320]	@ (80246cc <__ieee754_pow+0x2a4>)
 802458a:	4591      	cmp	r9, r2
 802458c:	d10a      	bne.n	80245a4 <__ieee754_pow+0x17c>
 802458e:	f1b8 0f00 	cmp.w	r8, #0
 8024592:	db07      	blt.n	80245a4 <__ieee754_pow+0x17c>
 8024594:	ec47 6b10 	vmov	d0, r6, r7
 8024598:	b011      	add	sp, #68	@ 0x44
 802459a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802459e:	f7fe bb07 	b.w	8022bb0 <__ieee754_sqrt>
 80245a2:	2400      	movs	r4, #0
 80245a4:	ec47 6b10 	vmov	d0, r6, r7
 80245a8:	9302      	str	r3, [sp, #8]
 80245aa:	f7fe fa99 	bl	8022ae0 <fabs>
 80245ae:	9b02      	ldr	r3, [sp, #8]
 80245b0:	ec51 0b10 	vmov	r0, r1, d0
 80245b4:	bb43      	cbnz	r3, 8024608 <__ieee754_pow+0x1e0>
 80245b6:	4b43      	ldr	r3, [pc, #268]	@ (80246c4 <__ieee754_pow+0x29c>)
 80245b8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80245bc:	429a      	cmp	r2, r3
 80245be:	d000      	beq.n	80245c2 <__ieee754_pow+0x19a>
 80245c0:	bb15      	cbnz	r5, 8024608 <__ieee754_pow+0x1e0>
 80245c2:	f1b9 0f00 	cmp.w	r9, #0
 80245c6:	da05      	bge.n	80245d4 <__ieee754_pow+0x1ac>
 80245c8:	4602      	mov	r2, r0
 80245ca:	460b      	mov	r3, r1
 80245cc:	2000      	movs	r0, #0
 80245ce:	493d      	ldr	r1, [pc, #244]	@ (80246c4 <__ieee754_pow+0x29c>)
 80245d0:	f7dc f94c 	bl	800086c <__aeabi_ddiv>
 80245d4:	f1b8 0f00 	cmp.w	r8, #0
 80245d8:	f6bf af43 	bge.w	8024462 <__ieee754_pow+0x3a>
 80245dc:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80245e0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80245e4:	4325      	orrs	r5, r4
 80245e6:	d108      	bne.n	80245fa <__ieee754_pow+0x1d2>
 80245e8:	4602      	mov	r2, r0
 80245ea:	460b      	mov	r3, r1
 80245ec:	4610      	mov	r0, r2
 80245ee:	4619      	mov	r1, r3
 80245f0:	f7db fe5a 	bl	80002a8 <__aeabi_dsub>
 80245f4:	4602      	mov	r2, r0
 80245f6:	460b      	mov	r3, r1
 80245f8:	e79e      	b.n	8024538 <__ieee754_pow+0x110>
 80245fa:	2c01      	cmp	r4, #1
 80245fc:	f47f af31 	bne.w	8024462 <__ieee754_pow+0x3a>
 8024600:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8024604:	4619      	mov	r1, r3
 8024606:	e72c      	b.n	8024462 <__ieee754_pow+0x3a>
 8024608:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 802460c:	3b01      	subs	r3, #1
 802460e:	ea53 0204 	orrs.w	r2, r3, r4
 8024612:	d102      	bne.n	802461a <__ieee754_pow+0x1f2>
 8024614:	4632      	mov	r2, r6
 8024616:	463b      	mov	r3, r7
 8024618:	e7e8      	b.n	80245ec <__ieee754_pow+0x1c4>
 802461a:	3c01      	subs	r4, #1
 802461c:	431c      	orrs	r4, r3
 802461e:	d016      	beq.n	802464e <__ieee754_pow+0x226>
 8024620:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80246a8 <__ieee754_pow+0x280>
 8024624:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8024628:	ed8d 7b02 	vstr	d7, [sp, #8]
 802462c:	f240 8110 	bls.w	8024850 <__ieee754_pow+0x428>
 8024630:	4b27      	ldr	r3, [pc, #156]	@ (80246d0 <__ieee754_pow+0x2a8>)
 8024632:	459a      	cmp	sl, r3
 8024634:	4b24      	ldr	r3, [pc, #144]	@ (80246c8 <__ieee754_pow+0x2a0>)
 8024636:	d916      	bls.n	8024666 <__ieee754_pow+0x23e>
 8024638:	429d      	cmp	r5, r3
 802463a:	d80b      	bhi.n	8024654 <__ieee754_pow+0x22c>
 802463c:	f1b9 0f00 	cmp.w	r9, #0
 8024640:	da0b      	bge.n	802465a <__ieee754_pow+0x232>
 8024642:	2000      	movs	r0, #0
 8024644:	b011      	add	sp, #68	@ 0x44
 8024646:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802464a:	f000 bee5 	b.w	8025418 <__math_oflow>
 802464e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80246b0 <__ieee754_pow+0x288>
 8024652:	e7e7      	b.n	8024624 <__ieee754_pow+0x1fc>
 8024654:	f1b9 0f00 	cmp.w	r9, #0
 8024658:	dcf3      	bgt.n	8024642 <__ieee754_pow+0x21a>
 802465a:	2000      	movs	r0, #0
 802465c:	b011      	add	sp, #68	@ 0x44
 802465e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024662:	f000 bed1 	b.w	8025408 <__math_uflow>
 8024666:	429d      	cmp	r5, r3
 8024668:	d20c      	bcs.n	8024684 <__ieee754_pow+0x25c>
 802466a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802466e:	2200      	movs	r2, #0
 8024670:	2300      	movs	r3, #0
 8024672:	f7dc fa43 	bl	8000afc <__aeabi_dcmplt>
 8024676:	3800      	subs	r0, #0
 8024678:	bf18      	it	ne
 802467a:	2001      	movne	r0, #1
 802467c:	f1b9 0f00 	cmp.w	r9, #0
 8024680:	daec      	bge.n	802465c <__ieee754_pow+0x234>
 8024682:	e7df      	b.n	8024644 <__ieee754_pow+0x21c>
 8024684:	4b0f      	ldr	r3, [pc, #60]	@ (80246c4 <__ieee754_pow+0x29c>)
 8024686:	429d      	cmp	r5, r3
 8024688:	f04f 0200 	mov.w	r2, #0
 802468c:	d922      	bls.n	80246d4 <__ieee754_pow+0x2ac>
 802468e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024692:	2300      	movs	r3, #0
 8024694:	f7dc fa32 	bl	8000afc <__aeabi_dcmplt>
 8024698:	3800      	subs	r0, #0
 802469a:	bf18      	it	ne
 802469c:	2001      	movne	r0, #1
 802469e:	f1b9 0f00 	cmp.w	r9, #0
 80246a2:	dccf      	bgt.n	8024644 <__ieee754_pow+0x21c>
 80246a4:	e7da      	b.n	802465c <__ieee754_pow+0x234>
 80246a6:	bf00      	nop
 80246a8:	00000000 	.word	0x00000000
 80246ac:	3ff00000 	.word	0x3ff00000
 80246b0:	00000000 	.word	0x00000000
 80246b4:	bff00000 	.word	0xbff00000
 80246b8:	fff00000 	.word	0xfff00000
 80246bc:	7ff00000 	.word	0x7ff00000
 80246c0:	433fffff 	.word	0x433fffff
 80246c4:	3ff00000 	.word	0x3ff00000
 80246c8:	3fefffff 	.word	0x3fefffff
 80246cc:	3fe00000 	.word	0x3fe00000
 80246d0:	43f00000 	.word	0x43f00000
 80246d4:	4b5a      	ldr	r3, [pc, #360]	@ (8024840 <__ieee754_pow+0x418>)
 80246d6:	f7db fde7 	bl	80002a8 <__aeabi_dsub>
 80246da:	a351      	add	r3, pc, #324	@ (adr r3, 8024820 <__ieee754_pow+0x3f8>)
 80246dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246e0:	4604      	mov	r4, r0
 80246e2:	460d      	mov	r5, r1
 80246e4:	f7db ff98 	bl	8000618 <__aeabi_dmul>
 80246e8:	a34f      	add	r3, pc, #316	@ (adr r3, 8024828 <__ieee754_pow+0x400>)
 80246ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246ee:	4606      	mov	r6, r0
 80246f0:	460f      	mov	r7, r1
 80246f2:	4620      	mov	r0, r4
 80246f4:	4629      	mov	r1, r5
 80246f6:	f7db ff8f 	bl	8000618 <__aeabi_dmul>
 80246fa:	4b52      	ldr	r3, [pc, #328]	@ (8024844 <__ieee754_pow+0x41c>)
 80246fc:	4682      	mov	sl, r0
 80246fe:	468b      	mov	fp, r1
 8024700:	2200      	movs	r2, #0
 8024702:	4620      	mov	r0, r4
 8024704:	4629      	mov	r1, r5
 8024706:	f7db ff87 	bl	8000618 <__aeabi_dmul>
 802470a:	4602      	mov	r2, r0
 802470c:	460b      	mov	r3, r1
 802470e:	a148      	add	r1, pc, #288	@ (adr r1, 8024830 <__ieee754_pow+0x408>)
 8024710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024714:	f7db fdc8 	bl	80002a8 <__aeabi_dsub>
 8024718:	4622      	mov	r2, r4
 802471a:	462b      	mov	r3, r5
 802471c:	f7db ff7c 	bl	8000618 <__aeabi_dmul>
 8024720:	4602      	mov	r2, r0
 8024722:	460b      	mov	r3, r1
 8024724:	2000      	movs	r0, #0
 8024726:	4948      	ldr	r1, [pc, #288]	@ (8024848 <__ieee754_pow+0x420>)
 8024728:	f7db fdbe 	bl	80002a8 <__aeabi_dsub>
 802472c:	4622      	mov	r2, r4
 802472e:	4680      	mov	r8, r0
 8024730:	4689      	mov	r9, r1
 8024732:	462b      	mov	r3, r5
 8024734:	4620      	mov	r0, r4
 8024736:	4629      	mov	r1, r5
 8024738:	f7db ff6e 	bl	8000618 <__aeabi_dmul>
 802473c:	4602      	mov	r2, r0
 802473e:	460b      	mov	r3, r1
 8024740:	4640      	mov	r0, r8
 8024742:	4649      	mov	r1, r9
 8024744:	f7db ff68 	bl	8000618 <__aeabi_dmul>
 8024748:	a33b      	add	r3, pc, #236	@ (adr r3, 8024838 <__ieee754_pow+0x410>)
 802474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802474e:	f7db ff63 	bl	8000618 <__aeabi_dmul>
 8024752:	4602      	mov	r2, r0
 8024754:	460b      	mov	r3, r1
 8024756:	4650      	mov	r0, sl
 8024758:	4659      	mov	r1, fp
 802475a:	f7db fda5 	bl	80002a8 <__aeabi_dsub>
 802475e:	4602      	mov	r2, r0
 8024760:	460b      	mov	r3, r1
 8024762:	4680      	mov	r8, r0
 8024764:	4689      	mov	r9, r1
 8024766:	4630      	mov	r0, r6
 8024768:	4639      	mov	r1, r7
 802476a:	f7db fd9f 	bl	80002ac <__adddf3>
 802476e:	2400      	movs	r4, #0
 8024770:	4632      	mov	r2, r6
 8024772:	463b      	mov	r3, r7
 8024774:	4620      	mov	r0, r4
 8024776:	460d      	mov	r5, r1
 8024778:	f7db fd96 	bl	80002a8 <__aeabi_dsub>
 802477c:	4602      	mov	r2, r0
 802477e:	460b      	mov	r3, r1
 8024780:	4640      	mov	r0, r8
 8024782:	4649      	mov	r1, r9
 8024784:	f7db fd90 	bl	80002a8 <__aeabi_dsub>
 8024788:	e9dd 2300 	ldrd	r2, r3, [sp]
 802478c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8024790:	2300      	movs	r3, #0
 8024792:	9304      	str	r3, [sp, #16]
 8024794:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8024798:	4606      	mov	r6, r0
 802479a:	460f      	mov	r7, r1
 802479c:	465b      	mov	r3, fp
 802479e:	4652      	mov	r2, sl
 80247a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80247a4:	f7db fd80 	bl	80002a8 <__aeabi_dsub>
 80247a8:	4622      	mov	r2, r4
 80247aa:	462b      	mov	r3, r5
 80247ac:	f7db ff34 	bl	8000618 <__aeabi_dmul>
 80247b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80247b4:	4680      	mov	r8, r0
 80247b6:	4689      	mov	r9, r1
 80247b8:	4630      	mov	r0, r6
 80247ba:	4639      	mov	r1, r7
 80247bc:	f7db ff2c 	bl	8000618 <__aeabi_dmul>
 80247c0:	4602      	mov	r2, r0
 80247c2:	460b      	mov	r3, r1
 80247c4:	4640      	mov	r0, r8
 80247c6:	4649      	mov	r1, r9
 80247c8:	f7db fd70 	bl	80002ac <__adddf3>
 80247cc:	465b      	mov	r3, fp
 80247ce:	4606      	mov	r6, r0
 80247d0:	460f      	mov	r7, r1
 80247d2:	4652      	mov	r2, sl
 80247d4:	4620      	mov	r0, r4
 80247d6:	4629      	mov	r1, r5
 80247d8:	f7db ff1e 	bl	8000618 <__aeabi_dmul>
 80247dc:	460b      	mov	r3, r1
 80247de:	4602      	mov	r2, r0
 80247e0:	4680      	mov	r8, r0
 80247e2:	4689      	mov	r9, r1
 80247e4:	4630      	mov	r0, r6
 80247e6:	4639      	mov	r1, r7
 80247e8:	f7db fd60 	bl	80002ac <__adddf3>
 80247ec:	4b17      	ldr	r3, [pc, #92]	@ (802484c <__ieee754_pow+0x424>)
 80247ee:	4299      	cmp	r1, r3
 80247f0:	4604      	mov	r4, r0
 80247f2:	460d      	mov	r5, r1
 80247f4:	468b      	mov	fp, r1
 80247f6:	f340 820b 	ble.w	8024c10 <__ieee754_pow+0x7e8>
 80247fa:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80247fe:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8024802:	4303      	orrs	r3, r0
 8024804:	f000 81ea 	beq.w	8024bdc <__ieee754_pow+0x7b4>
 8024808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802480c:	2200      	movs	r2, #0
 802480e:	2300      	movs	r3, #0
 8024810:	f7dc f974 	bl	8000afc <__aeabi_dcmplt>
 8024814:	3800      	subs	r0, #0
 8024816:	bf18      	it	ne
 8024818:	2001      	movne	r0, #1
 802481a:	e713      	b.n	8024644 <__ieee754_pow+0x21c>
 802481c:	f3af 8000 	nop.w
 8024820:	60000000 	.word	0x60000000
 8024824:	3ff71547 	.word	0x3ff71547
 8024828:	f85ddf44 	.word	0xf85ddf44
 802482c:	3e54ae0b 	.word	0x3e54ae0b
 8024830:	55555555 	.word	0x55555555
 8024834:	3fd55555 	.word	0x3fd55555
 8024838:	652b82fe 	.word	0x652b82fe
 802483c:	3ff71547 	.word	0x3ff71547
 8024840:	3ff00000 	.word	0x3ff00000
 8024844:	3fd00000 	.word	0x3fd00000
 8024848:	3fe00000 	.word	0x3fe00000
 802484c:	408fffff 	.word	0x408fffff
 8024850:	4bd5      	ldr	r3, [pc, #852]	@ (8024ba8 <__ieee754_pow+0x780>)
 8024852:	ea08 0303 	and.w	r3, r8, r3
 8024856:	2200      	movs	r2, #0
 8024858:	b92b      	cbnz	r3, 8024866 <__ieee754_pow+0x43e>
 802485a:	4bd4      	ldr	r3, [pc, #848]	@ (8024bac <__ieee754_pow+0x784>)
 802485c:	f7db fedc 	bl	8000618 <__aeabi_dmul>
 8024860:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8024864:	468b      	mov	fp, r1
 8024866:	ea4f 532b 	mov.w	r3, fp, asr #20
 802486a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 802486e:	4413      	add	r3, r2
 8024870:	930a      	str	r3, [sp, #40]	@ 0x28
 8024872:	4bcf      	ldr	r3, [pc, #828]	@ (8024bb0 <__ieee754_pow+0x788>)
 8024874:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8024878:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 802487c:	459b      	cmp	fp, r3
 802487e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8024882:	dd08      	ble.n	8024896 <__ieee754_pow+0x46e>
 8024884:	4bcb      	ldr	r3, [pc, #812]	@ (8024bb4 <__ieee754_pow+0x78c>)
 8024886:	459b      	cmp	fp, r3
 8024888:	f340 81a5 	ble.w	8024bd6 <__ieee754_pow+0x7ae>
 802488c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802488e:	3301      	adds	r3, #1
 8024890:	930a      	str	r3, [sp, #40]	@ 0x28
 8024892:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8024896:	f04f 0a00 	mov.w	sl, #0
 802489a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 802489e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80248a0:	4bc5      	ldr	r3, [pc, #788]	@ (8024bb8 <__ieee754_pow+0x790>)
 80248a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80248a6:	ed93 7b00 	vldr	d7, [r3]
 80248aa:	4629      	mov	r1, r5
 80248ac:	ec53 2b17 	vmov	r2, r3, d7
 80248b0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80248b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80248b8:	f7db fcf6 	bl	80002a8 <__aeabi_dsub>
 80248bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80248c0:	4606      	mov	r6, r0
 80248c2:	460f      	mov	r7, r1
 80248c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80248c8:	f7db fcf0 	bl	80002ac <__adddf3>
 80248cc:	4602      	mov	r2, r0
 80248ce:	460b      	mov	r3, r1
 80248d0:	2000      	movs	r0, #0
 80248d2:	49ba      	ldr	r1, [pc, #744]	@ (8024bbc <__ieee754_pow+0x794>)
 80248d4:	f7db ffca 	bl	800086c <__aeabi_ddiv>
 80248d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80248dc:	4602      	mov	r2, r0
 80248de:	460b      	mov	r3, r1
 80248e0:	4630      	mov	r0, r6
 80248e2:	4639      	mov	r1, r7
 80248e4:	f7db fe98 	bl	8000618 <__aeabi_dmul>
 80248e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80248ec:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80248f0:	106d      	asrs	r5, r5, #1
 80248f2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80248f6:	f04f 0b00 	mov.w	fp, #0
 80248fa:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80248fe:	4661      	mov	r1, ip
 8024900:	2200      	movs	r2, #0
 8024902:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8024906:	4658      	mov	r0, fp
 8024908:	46e1      	mov	r9, ip
 802490a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 802490e:	4614      	mov	r4, r2
 8024910:	461d      	mov	r5, r3
 8024912:	f7db fe81 	bl	8000618 <__aeabi_dmul>
 8024916:	4602      	mov	r2, r0
 8024918:	460b      	mov	r3, r1
 802491a:	4630      	mov	r0, r6
 802491c:	4639      	mov	r1, r7
 802491e:	f7db fcc3 	bl	80002a8 <__aeabi_dsub>
 8024922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024926:	4606      	mov	r6, r0
 8024928:	460f      	mov	r7, r1
 802492a:	4620      	mov	r0, r4
 802492c:	4629      	mov	r1, r5
 802492e:	f7db fcbb 	bl	80002a8 <__aeabi_dsub>
 8024932:	4602      	mov	r2, r0
 8024934:	460b      	mov	r3, r1
 8024936:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802493a:	f7db fcb5 	bl	80002a8 <__aeabi_dsub>
 802493e:	465a      	mov	r2, fp
 8024940:	464b      	mov	r3, r9
 8024942:	f7db fe69 	bl	8000618 <__aeabi_dmul>
 8024946:	4602      	mov	r2, r0
 8024948:	460b      	mov	r3, r1
 802494a:	4630      	mov	r0, r6
 802494c:	4639      	mov	r1, r7
 802494e:	f7db fcab 	bl	80002a8 <__aeabi_dsub>
 8024952:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8024956:	f7db fe5f 	bl	8000618 <__aeabi_dmul>
 802495a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802495e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024962:	4610      	mov	r0, r2
 8024964:	4619      	mov	r1, r3
 8024966:	f7db fe57 	bl	8000618 <__aeabi_dmul>
 802496a:	a37d      	add	r3, pc, #500	@ (adr r3, 8024b60 <__ieee754_pow+0x738>)
 802496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024970:	4604      	mov	r4, r0
 8024972:	460d      	mov	r5, r1
 8024974:	f7db fe50 	bl	8000618 <__aeabi_dmul>
 8024978:	a37b      	add	r3, pc, #492	@ (adr r3, 8024b68 <__ieee754_pow+0x740>)
 802497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802497e:	f7db fc95 	bl	80002ac <__adddf3>
 8024982:	4622      	mov	r2, r4
 8024984:	462b      	mov	r3, r5
 8024986:	f7db fe47 	bl	8000618 <__aeabi_dmul>
 802498a:	a379      	add	r3, pc, #484	@ (adr r3, 8024b70 <__ieee754_pow+0x748>)
 802498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024990:	f7db fc8c 	bl	80002ac <__adddf3>
 8024994:	4622      	mov	r2, r4
 8024996:	462b      	mov	r3, r5
 8024998:	f7db fe3e 	bl	8000618 <__aeabi_dmul>
 802499c:	a376      	add	r3, pc, #472	@ (adr r3, 8024b78 <__ieee754_pow+0x750>)
 802499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249a2:	f7db fc83 	bl	80002ac <__adddf3>
 80249a6:	4622      	mov	r2, r4
 80249a8:	462b      	mov	r3, r5
 80249aa:	f7db fe35 	bl	8000618 <__aeabi_dmul>
 80249ae:	a374      	add	r3, pc, #464	@ (adr r3, 8024b80 <__ieee754_pow+0x758>)
 80249b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249b4:	f7db fc7a 	bl	80002ac <__adddf3>
 80249b8:	4622      	mov	r2, r4
 80249ba:	462b      	mov	r3, r5
 80249bc:	f7db fe2c 	bl	8000618 <__aeabi_dmul>
 80249c0:	a371      	add	r3, pc, #452	@ (adr r3, 8024b88 <__ieee754_pow+0x760>)
 80249c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249c6:	f7db fc71 	bl	80002ac <__adddf3>
 80249ca:	4622      	mov	r2, r4
 80249cc:	4606      	mov	r6, r0
 80249ce:	460f      	mov	r7, r1
 80249d0:	462b      	mov	r3, r5
 80249d2:	4620      	mov	r0, r4
 80249d4:	4629      	mov	r1, r5
 80249d6:	f7db fe1f 	bl	8000618 <__aeabi_dmul>
 80249da:	4602      	mov	r2, r0
 80249dc:	460b      	mov	r3, r1
 80249de:	4630      	mov	r0, r6
 80249e0:	4639      	mov	r1, r7
 80249e2:	f7db fe19 	bl	8000618 <__aeabi_dmul>
 80249e6:	465a      	mov	r2, fp
 80249e8:	4604      	mov	r4, r0
 80249ea:	460d      	mov	r5, r1
 80249ec:	464b      	mov	r3, r9
 80249ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80249f2:	f7db fc5b 	bl	80002ac <__adddf3>
 80249f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80249fa:	f7db fe0d 	bl	8000618 <__aeabi_dmul>
 80249fe:	4622      	mov	r2, r4
 8024a00:	462b      	mov	r3, r5
 8024a02:	f7db fc53 	bl	80002ac <__adddf3>
 8024a06:	465a      	mov	r2, fp
 8024a08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024a0c:	464b      	mov	r3, r9
 8024a0e:	4658      	mov	r0, fp
 8024a10:	4649      	mov	r1, r9
 8024a12:	f7db fe01 	bl	8000618 <__aeabi_dmul>
 8024a16:	4b6a      	ldr	r3, [pc, #424]	@ (8024bc0 <__ieee754_pow+0x798>)
 8024a18:	2200      	movs	r2, #0
 8024a1a:	4606      	mov	r6, r0
 8024a1c:	460f      	mov	r7, r1
 8024a1e:	f7db fc45 	bl	80002ac <__adddf3>
 8024a22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8024a26:	f7db fc41 	bl	80002ac <__adddf3>
 8024a2a:	46d8      	mov	r8, fp
 8024a2c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8024a30:	460d      	mov	r5, r1
 8024a32:	465a      	mov	r2, fp
 8024a34:	460b      	mov	r3, r1
 8024a36:	4640      	mov	r0, r8
 8024a38:	4649      	mov	r1, r9
 8024a3a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8024a3e:	f7db fdeb 	bl	8000618 <__aeabi_dmul>
 8024a42:	465c      	mov	r4, fp
 8024a44:	4680      	mov	r8, r0
 8024a46:	4689      	mov	r9, r1
 8024a48:	4b5d      	ldr	r3, [pc, #372]	@ (8024bc0 <__ieee754_pow+0x798>)
 8024a4a:	2200      	movs	r2, #0
 8024a4c:	4620      	mov	r0, r4
 8024a4e:	4629      	mov	r1, r5
 8024a50:	f7db fc2a 	bl	80002a8 <__aeabi_dsub>
 8024a54:	4632      	mov	r2, r6
 8024a56:	463b      	mov	r3, r7
 8024a58:	f7db fc26 	bl	80002a8 <__aeabi_dsub>
 8024a5c:	4602      	mov	r2, r0
 8024a5e:	460b      	mov	r3, r1
 8024a60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024a64:	f7db fc20 	bl	80002a8 <__aeabi_dsub>
 8024a68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024a6c:	f7db fdd4 	bl	8000618 <__aeabi_dmul>
 8024a70:	4622      	mov	r2, r4
 8024a72:	4606      	mov	r6, r0
 8024a74:	460f      	mov	r7, r1
 8024a76:	462b      	mov	r3, r5
 8024a78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024a7c:	f7db fdcc 	bl	8000618 <__aeabi_dmul>
 8024a80:	4602      	mov	r2, r0
 8024a82:	460b      	mov	r3, r1
 8024a84:	4630      	mov	r0, r6
 8024a86:	4639      	mov	r1, r7
 8024a88:	f7db fc10 	bl	80002ac <__adddf3>
 8024a8c:	4606      	mov	r6, r0
 8024a8e:	460f      	mov	r7, r1
 8024a90:	4602      	mov	r2, r0
 8024a92:	460b      	mov	r3, r1
 8024a94:	4640      	mov	r0, r8
 8024a96:	4649      	mov	r1, r9
 8024a98:	f7db fc08 	bl	80002ac <__adddf3>
 8024a9c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8024aa0:	a33b      	add	r3, pc, #236	@ (adr r3, 8024b90 <__ieee754_pow+0x768>)
 8024aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024aa6:	4658      	mov	r0, fp
 8024aa8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8024aac:	460d      	mov	r5, r1
 8024aae:	f7db fdb3 	bl	8000618 <__aeabi_dmul>
 8024ab2:	465c      	mov	r4, fp
 8024ab4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024ab8:	4642      	mov	r2, r8
 8024aba:	464b      	mov	r3, r9
 8024abc:	4620      	mov	r0, r4
 8024abe:	4629      	mov	r1, r5
 8024ac0:	f7db fbf2 	bl	80002a8 <__aeabi_dsub>
 8024ac4:	4602      	mov	r2, r0
 8024ac6:	460b      	mov	r3, r1
 8024ac8:	4630      	mov	r0, r6
 8024aca:	4639      	mov	r1, r7
 8024acc:	f7db fbec 	bl	80002a8 <__aeabi_dsub>
 8024ad0:	a331      	add	r3, pc, #196	@ (adr r3, 8024b98 <__ieee754_pow+0x770>)
 8024ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ad6:	f7db fd9f 	bl	8000618 <__aeabi_dmul>
 8024ada:	a331      	add	r3, pc, #196	@ (adr r3, 8024ba0 <__ieee754_pow+0x778>)
 8024adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ae0:	4606      	mov	r6, r0
 8024ae2:	460f      	mov	r7, r1
 8024ae4:	4620      	mov	r0, r4
 8024ae6:	4629      	mov	r1, r5
 8024ae8:	f7db fd96 	bl	8000618 <__aeabi_dmul>
 8024aec:	4602      	mov	r2, r0
 8024aee:	460b      	mov	r3, r1
 8024af0:	4630      	mov	r0, r6
 8024af2:	4639      	mov	r1, r7
 8024af4:	f7db fbda 	bl	80002ac <__adddf3>
 8024af8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024afa:	4b32      	ldr	r3, [pc, #200]	@ (8024bc4 <__ieee754_pow+0x79c>)
 8024afc:	4413      	add	r3, r2
 8024afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b02:	f7db fbd3 	bl	80002ac <__adddf3>
 8024b06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024b0a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024b0c:	f7db fd1a 	bl	8000544 <__aeabi_i2d>
 8024b10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024b12:	4b2d      	ldr	r3, [pc, #180]	@ (8024bc8 <__ieee754_pow+0x7a0>)
 8024b14:	4413      	add	r3, r2
 8024b16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024b1a:	4606      	mov	r6, r0
 8024b1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024b20:	460f      	mov	r7, r1
 8024b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024b26:	f7db fbc1 	bl	80002ac <__adddf3>
 8024b2a:	4642      	mov	r2, r8
 8024b2c:	464b      	mov	r3, r9
 8024b2e:	f7db fbbd 	bl	80002ac <__adddf3>
 8024b32:	4632      	mov	r2, r6
 8024b34:	463b      	mov	r3, r7
 8024b36:	f7db fbb9 	bl	80002ac <__adddf3>
 8024b3a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8024b3e:	4632      	mov	r2, r6
 8024b40:	463b      	mov	r3, r7
 8024b42:	4658      	mov	r0, fp
 8024b44:	460d      	mov	r5, r1
 8024b46:	f7db fbaf 	bl	80002a8 <__aeabi_dsub>
 8024b4a:	4642      	mov	r2, r8
 8024b4c:	464b      	mov	r3, r9
 8024b4e:	f7db fbab 	bl	80002a8 <__aeabi_dsub>
 8024b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024b56:	f7db fba7 	bl	80002a8 <__aeabi_dsub>
 8024b5a:	465c      	mov	r4, fp
 8024b5c:	e036      	b.n	8024bcc <__ieee754_pow+0x7a4>
 8024b5e:	bf00      	nop
 8024b60:	4a454eef 	.word	0x4a454eef
 8024b64:	3fca7e28 	.word	0x3fca7e28
 8024b68:	93c9db65 	.word	0x93c9db65
 8024b6c:	3fcd864a 	.word	0x3fcd864a
 8024b70:	a91d4101 	.word	0xa91d4101
 8024b74:	3fd17460 	.word	0x3fd17460
 8024b78:	518f264d 	.word	0x518f264d
 8024b7c:	3fd55555 	.word	0x3fd55555
 8024b80:	db6fabff 	.word	0xdb6fabff
 8024b84:	3fdb6db6 	.word	0x3fdb6db6
 8024b88:	33333303 	.word	0x33333303
 8024b8c:	3fe33333 	.word	0x3fe33333
 8024b90:	e0000000 	.word	0xe0000000
 8024b94:	3feec709 	.word	0x3feec709
 8024b98:	dc3a03fd 	.word	0xdc3a03fd
 8024b9c:	3feec709 	.word	0x3feec709
 8024ba0:	145b01f5 	.word	0x145b01f5
 8024ba4:	be3e2fe0 	.word	0xbe3e2fe0
 8024ba8:	7ff00000 	.word	0x7ff00000
 8024bac:	43400000 	.word	0x43400000
 8024bb0:	0003988e 	.word	0x0003988e
 8024bb4:	000bb679 	.word	0x000bb679
 8024bb8:	08026690 	.word	0x08026690
 8024bbc:	3ff00000 	.word	0x3ff00000
 8024bc0:	40080000 	.word	0x40080000
 8024bc4:	08026670 	.word	0x08026670
 8024bc8:	08026680 	.word	0x08026680
 8024bcc:	4602      	mov	r2, r0
 8024bce:	460b      	mov	r3, r1
 8024bd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024bd4:	e5d6      	b.n	8024784 <__ieee754_pow+0x35c>
 8024bd6:	f04f 0a01 	mov.w	sl, #1
 8024bda:	e65e      	b.n	802489a <__ieee754_pow+0x472>
 8024bdc:	a3b5      	add	r3, pc, #724	@ (adr r3, 8024eb4 <__ieee754_pow+0xa8c>)
 8024bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024be2:	4630      	mov	r0, r6
 8024be4:	4639      	mov	r1, r7
 8024be6:	f7db fb61 	bl	80002ac <__adddf3>
 8024bea:	4642      	mov	r2, r8
 8024bec:	e9cd 0100 	strd	r0, r1, [sp]
 8024bf0:	464b      	mov	r3, r9
 8024bf2:	4620      	mov	r0, r4
 8024bf4:	4629      	mov	r1, r5
 8024bf6:	f7db fb57 	bl	80002a8 <__aeabi_dsub>
 8024bfa:	4602      	mov	r2, r0
 8024bfc:	460b      	mov	r3, r1
 8024bfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024c02:	f7db ff99 	bl	8000b38 <__aeabi_dcmpgt>
 8024c06:	2800      	cmp	r0, #0
 8024c08:	f47f adfe 	bne.w	8024808 <__ieee754_pow+0x3e0>
 8024c0c:	4ba2      	ldr	r3, [pc, #648]	@ (8024e98 <__ieee754_pow+0xa70>)
 8024c0e:	e022      	b.n	8024c56 <__ieee754_pow+0x82e>
 8024c10:	4ca2      	ldr	r4, [pc, #648]	@ (8024e9c <__ieee754_pow+0xa74>)
 8024c12:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8024c16:	42a3      	cmp	r3, r4
 8024c18:	d919      	bls.n	8024c4e <__ieee754_pow+0x826>
 8024c1a:	4ba1      	ldr	r3, [pc, #644]	@ (8024ea0 <__ieee754_pow+0xa78>)
 8024c1c:	440b      	add	r3, r1
 8024c1e:	4303      	orrs	r3, r0
 8024c20:	d009      	beq.n	8024c36 <__ieee754_pow+0x80e>
 8024c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024c26:	2200      	movs	r2, #0
 8024c28:	2300      	movs	r3, #0
 8024c2a:	f7db ff67 	bl	8000afc <__aeabi_dcmplt>
 8024c2e:	3800      	subs	r0, #0
 8024c30:	bf18      	it	ne
 8024c32:	2001      	movne	r0, #1
 8024c34:	e512      	b.n	802465c <__ieee754_pow+0x234>
 8024c36:	4642      	mov	r2, r8
 8024c38:	464b      	mov	r3, r9
 8024c3a:	f7db fb35 	bl	80002a8 <__aeabi_dsub>
 8024c3e:	4632      	mov	r2, r6
 8024c40:	463b      	mov	r3, r7
 8024c42:	f7db ff6f 	bl	8000b24 <__aeabi_dcmpge>
 8024c46:	2800      	cmp	r0, #0
 8024c48:	d1eb      	bne.n	8024c22 <__ieee754_pow+0x7fa>
 8024c4a:	4b96      	ldr	r3, [pc, #600]	@ (8024ea4 <__ieee754_pow+0xa7c>)
 8024c4c:	e003      	b.n	8024c56 <__ieee754_pow+0x82e>
 8024c4e:	4a96      	ldr	r2, [pc, #600]	@ (8024ea8 <__ieee754_pow+0xa80>)
 8024c50:	4293      	cmp	r3, r2
 8024c52:	f240 80e7 	bls.w	8024e24 <__ieee754_pow+0x9fc>
 8024c56:	151b      	asrs	r3, r3, #20
 8024c58:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8024c5c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8024c60:	fa4a fa03 	asr.w	sl, sl, r3
 8024c64:	44da      	add	sl, fp
 8024c66:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8024c6a:	4890      	ldr	r0, [pc, #576]	@ (8024eac <__ieee754_pow+0xa84>)
 8024c6c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8024c70:	4108      	asrs	r0, r1
 8024c72:	ea00 030a 	and.w	r3, r0, sl
 8024c76:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8024c7a:	f1c1 0114 	rsb	r1, r1, #20
 8024c7e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8024c82:	fa4a fa01 	asr.w	sl, sl, r1
 8024c86:	f1bb 0f00 	cmp.w	fp, #0
 8024c8a:	4640      	mov	r0, r8
 8024c8c:	4649      	mov	r1, r9
 8024c8e:	f04f 0200 	mov.w	r2, #0
 8024c92:	bfb8      	it	lt
 8024c94:	f1ca 0a00 	rsblt	sl, sl, #0
 8024c98:	f7db fb06 	bl	80002a8 <__aeabi_dsub>
 8024c9c:	4680      	mov	r8, r0
 8024c9e:	4689      	mov	r9, r1
 8024ca0:	4632      	mov	r2, r6
 8024ca2:	463b      	mov	r3, r7
 8024ca4:	4640      	mov	r0, r8
 8024ca6:	4649      	mov	r1, r9
 8024ca8:	f7db fb00 	bl	80002ac <__adddf3>
 8024cac:	2400      	movs	r4, #0
 8024cae:	a36a      	add	r3, pc, #424	@ (adr r3, 8024e58 <__ieee754_pow+0xa30>)
 8024cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cb4:	4620      	mov	r0, r4
 8024cb6:	460d      	mov	r5, r1
 8024cb8:	f7db fcae 	bl	8000618 <__aeabi_dmul>
 8024cbc:	4642      	mov	r2, r8
 8024cbe:	e9cd 0100 	strd	r0, r1, [sp]
 8024cc2:	464b      	mov	r3, r9
 8024cc4:	4620      	mov	r0, r4
 8024cc6:	4629      	mov	r1, r5
 8024cc8:	f7db faee 	bl	80002a8 <__aeabi_dsub>
 8024ccc:	4602      	mov	r2, r0
 8024cce:	460b      	mov	r3, r1
 8024cd0:	4630      	mov	r0, r6
 8024cd2:	4639      	mov	r1, r7
 8024cd4:	f7db fae8 	bl	80002a8 <__aeabi_dsub>
 8024cd8:	a361      	add	r3, pc, #388	@ (adr r3, 8024e60 <__ieee754_pow+0xa38>)
 8024cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cde:	f7db fc9b 	bl	8000618 <__aeabi_dmul>
 8024ce2:	a361      	add	r3, pc, #388	@ (adr r3, 8024e68 <__ieee754_pow+0xa40>)
 8024ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ce8:	4680      	mov	r8, r0
 8024cea:	4689      	mov	r9, r1
 8024cec:	4620      	mov	r0, r4
 8024cee:	4629      	mov	r1, r5
 8024cf0:	f7db fc92 	bl	8000618 <__aeabi_dmul>
 8024cf4:	4602      	mov	r2, r0
 8024cf6:	460b      	mov	r3, r1
 8024cf8:	4640      	mov	r0, r8
 8024cfa:	4649      	mov	r1, r9
 8024cfc:	f7db fad6 	bl	80002ac <__adddf3>
 8024d00:	4604      	mov	r4, r0
 8024d02:	460d      	mov	r5, r1
 8024d04:	4602      	mov	r2, r0
 8024d06:	460b      	mov	r3, r1
 8024d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024d0c:	f7db face 	bl	80002ac <__adddf3>
 8024d10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024d14:	4680      	mov	r8, r0
 8024d16:	4689      	mov	r9, r1
 8024d18:	f7db fac6 	bl	80002a8 <__aeabi_dsub>
 8024d1c:	4602      	mov	r2, r0
 8024d1e:	460b      	mov	r3, r1
 8024d20:	4620      	mov	r0, r4
 8024d22:	4629      	mov	r1, r5
 8024d24:	f7db fac0 	bl	80002a8 <__aeabi_dsub>
 8024d28:	4642      	mov	r2, r8
 8024d2a:	4606      	mov	r6, r0
 8024d2c:	460f      	mov	r7, r1
 8024d2e:	464b      	mov	r3, r9
 8024d30:	4640      	mov	r0, r8
 8024d32:	4649      	mov	r1, r9
 8024d34:	f7db fc70 	bl	8000618 <__aeabi_dmul>
 8024d38:	a34d      	add	r3, pc, #308	@ (adr r3, 8024e70 <__ieee754_pow+0xa48>)
 8024d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d3e:	4604      	mov	r4, r0
 8024d40:	460d      	mov	r5, r1
 8024d42:	f7db fc69 	bl	8000618 <__aeabi_dmul>
 8024d46:	a34c      	add	r3, pc, #304	@ (adr r3, 8024e78 <__ieee754_pow+0xa50>)
 8024d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d4c:	f7db faac 	bl	80002a8 <__aeabi_dsub>
 8024d50:	4622      	mov	r2, r4
 8024d52:	462b      	mov	r3, r5
 8024d54:	f7db fc60 	bl	8000618 <__aeabi_dmul>
 8024d58:	a349      	add	r3, pc, #292	@ (adr r3, 8024e80 <__ieee754_pow+0xa58>)
 8024d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d5e:	f7db faa5 	bl	80002ac <__adddf3>
 8024d62:	4622      	mov	r2, r4
 8024d64:	462b      	mov	r3, r5
 8024d66:	f7db fc57 	bl	8000618 <__aeabi_dmul>
 8024d6a:	a347      	add	r3, pc, #284	@ (adr r3, 8024e88 <__ieee754_pow+0xa60>)
 8024d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d70:	f7db fa9a 	bl	80002a8 <__aeabi_dsub>
 8024d74:	4622      	mov	r2, r4
 8024d76:	462b      	mov	r3, r5
 8024d78:	f7db fc4e 	bl	8000618 <__aeabi_dmul>
 8024d7c:	a344      	add	r3, pc, #272	@ (adr r3, 8024e90 <__ieee754_pow+0xa68>)
 8024d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d82:	f7db fa93 	bl	80002ac <__adddf3>
 8024d86:	4622      	mov	r2, r4
 8024d88:	462b      	mov	r3, r5
 8024d8a:	f7db fc45 	bl	8000618 <__aeabi_dmul>
 8024d8e:	4602      	mov	r2, r0
 8024d90:	460b      	mov	r3, r1
 8024d92:	4640      	mov	r0, r8
 8024d94:	4649      	mov	r1, r9
 8024d96:	f7db fa87 	bl	80002a8 <__aeabi_dsub>
 8024d9a:	4604      	mov	r4, r0
 8024d9c:	460d      	mov	r5, r1
 8024d9e:	4602      	mov	r2, r0
 8024da0:	460b      	mov	r3, r1
 8024da2:	4640      	mov	r0, r8
 8024da4:	4649      	mov	r1, r9
 8024da6:	f7db fc37 	bl	8000618 <__aeabi_dmul>
 8024daa:	2200      	movs	r2, #0
 8024dac:	e9cd 0100 	strd	r0, r1, [sp]
 8024db0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8024db4:	4620      	mov	r0, r4
 8024db6:	4629      	mov	r1, r5
 8024db8:	f7db fa76 	bl	80002a8 <__aeabi_dsub>
 8024dbc:	4602      	mov	r2, r0
 8024dbe:	460b      	mov	r3, r1
 8024dc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024dc4:	f7db fd52 	bl	800086c <__aeabi_ddiv>
 8024dc8:	4632      	mov	r2, r6
 8024dca:	4604      	mov	r4, r0
 8024dcc:	460d      	mov	r5, r1
 8024dce:	463b      	mov	r3, r7
 8024dd0:	4640      	mov	r0, r8
 8024dd2:	4649      	mov	r1, r9
 8024dd4:	f7db fc20 	bl	8000618 <__aeabi_dmul>
 8024dd8:	4632      	mov	r2, r6
 8024dda:	463b      	mov	r3, r7
 8024ddc:	f7db fa66 	bl	80002ac <__adddf3>
 8024de0:	4602      	mov	r2, r0
 8024de2:	460b      	mov	r3, r1
 8024de4:	4620      	mov	r0, r4
 8024de6:	4629      	mov	r1, r5
 8024de8:	f7db fa5e 	bl	80002a8 <__aeabi_dsub>
 8024dec:	4642      	mov	r2, r8
 8024dee:	464b      	mov	r3, r9
 8024df0:	f7db fa5a 	bl	80002a8 <__aeabi_dsub>
 8024df4:	460b      	mov	r3, r1
 8024df6:	4602      	mov	r2, r0
 8024df8:	492d      	ldr	r1, [pc, #180]	@ (8024eb0 <__ieee754_pow+0xa88>)
 8024dfa:	2000      	movs	r0, #0
 8024dfc:	f7db fa54 	bl	80002a8 <__aeabi_dsub>
 8024e00:	ec41 0b10 	vmov	d0, r0, r1
 8024e04:	ee10 3a90 	vmov	r3, s1
 8024e08:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8024e0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8024e10:	da0b      	bge.n	8024e2a <__ieee754_pow+0xa02>
 8024e12:	4650      	mov	r0, sl
 8024e14:	f000 fa50 	bl	80252b8 <scalbn>
 8024e18:	ec51 0b10 	vmov	r0, r1, d0
 8024e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024e20:	f7ff bb6d 	b.w	80244fe <__ieee754_pow+0xd6>
 8024e24:	f8dd a010 	ldr.w	sl, [sp, #16]
 8024e28:	e73a      	b.n	8024ca0 <__ieee754_pow+0x878>
 8024e2a:	ec51 0b10 	vmov	r0, r1, d0
 8024e2e:	4619      	mov	r1, r3
 8024e30:	e7f4      	b.n	8024e1c <__ieee754_pow+0x9f4>
 8024e32:	491f      	ldr	r1, [pc, #124]	@ (8024eb0 <__ieee754_pow+0xa88>)
 8024e34:	2000      	movs	r0, #0
 8024e36:	f7ff bb14 	b.w	8024462 <__ieee754_pow+0x3a>
 8024e3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024e3e:	f7ff bb10 	b.w	8024462 <__ieee754_pow+0x3a>
 8024e42:	4630      	mov	r0, r6
 8024e44:	4639      	mov	r1, r7
 8024e46:	f7ff bb0c 	b.w	8024462 <__ieee754_pow+0x3a>
 8024e4a:	460c      	mov	r4, r1
 8024e4c:	f7ff bb69 	b.w	8024522 <__ieee754_pow+0xfa>
 8024e50:	2400      	movs	r4, #0
 8024e52:	f7ff bb4b 	b.w	80244ec <__ieee754_pow+0xc4>
 8024e56:	bf00      	nop
 8024e58:	00000000 	.word	0x00000000
 8024e5c:	3fe62e43 	.word	0x3fe62e43
 8024e60:	fefa39ef 	.word	0xfefa39ef
 8024e64:	3fe62e42 	.word	0x3fe62e42
 8024e68:	0ca86c39 	.word	0x0ca86c39
 8024e6c:	be205c61 	.word	0xbe205c61
 8024e70:	72bea4d0 	.word	0x72bea4d0
 8024e74:	3e663769 	.word	0x3e663769
 8024e78:	c5d26bf1 	.word	0xc5d26bf1
 8024e7c:	3ebbbd41 	.word	0x3ebbbd41
 8024e80:	af25de2c 	.word	0xaf25de2c
 8024e84:	3f11566a 	.word	0x3f11566a
 8024e88:	16bebd93 	.word	0x16bebd93
 8024e8c:	3f66c16c 	.word	0x3f66c16c
 8024e90:	5555553e 	.word	0x5555553e
 8024e94:	3fc55555 	.word	0x3fc55555
 8024e98:	40900000 	.word	0x40900000
 8024e9c:	4090cbff 	.word	0x4090cbff
 8024ea0:	3f6f3400 	.word	0x3f6f3400
 8024ea4:	4090cc00 	.word	0x4090cc00
 8024ea8:	3fe00000 	.word	0x3fe00000
 8024eac:	fff00000 	.word	0xfff00000
 8024eb0:	3ff00000 	.word	0x3ff00000
 8024eb4:	652b82fe 	.word	0x652b82fe
 8024eb8:	3c971547 	.word	0x3c971547
 8024ebc:	00000000 	.word	0x00000000

08024ec0 <__ieee754_rem_pio2>:
 8024ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ec4:	ec57 6b10 	vmov	r6, r7, d0
 8024ec8:	4bc5      	ldr	r3, [pc, #788]	@ (80251e0 <__ieee754_rem_pio2+0x320>)
 8024eca:	b08d      	sub	sp, #52	@ 0x34
 8024ecc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8024ed0:	4598      	cmp	r8, r3
 8024ed2:	4604      	mov	r4, r0
 8024ed4:	9704      	str	r7, [sp, #16]
 8024ed6:	d807      	bhi.n	8024ee8 <__ieee754_rem_pio2+0x28>
 8024ed8:	2200      	movs	r2, #0
 8024eda:	2300      	movs	r3, #0
 8024edc:	ed80 0b00 	vstr	d0, [r0]
 8024ee0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8024ee4:	2500      	movs	r5, #0
 8024ee6:	e028      	b.n	8024f3a <__ieee754_rem_pio2+0x7a>
 8024ee8:	4bbe      	ldr	r3, [pc, #760]	@ (80251e4 <__ieee754_rem_pio2+0x324>)
 8024eea:	4598      	cmp	r8, r3
 8024eec:	d878      	bhi.n	8024fe0 <__ieee754_rem_pio2+0x120>
 8024eee:	9b04      	ldr	r3, [sp, #16]
 8024ef0:	4dbd      	ldr	r5, [pc, #756]	@ (80251e8 <__ieee754_rem_pio2+0x328>)
 8024ef2:	2b00      	cmp	r3, #0
 8024ef4:	4630      	mov	r0, r6
 8024ef6:	a3ac      	add	r3, pc, #688	@ (adr r3, 80251a8 <__ieee754_rem_pio2+0x2e8>)
 8024ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024efc:	4639      	mov	r1, r7
 8024efe:	dd38      	ble.n	8024f72 <__ieee754_rem_pio2+0xb2>
 8024f00:	f7db f9d2 	bl	80002a8 <__aeabi_dsub>
 8024f04:	45a8      	cmp	r8, r5
 8024f06:	4606      	mov	r6, r0
 8024f08:	460f      	mov	r7, r1
 8024f0a:	d01a      	beq.n	8024f42 <__ieee754_rem_pio2+0x82>
 8024f0c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80251b0 <__ieee754_rem_pio2+0x2f0>)
 8024f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f12:	f7db f9c9 	bl	80002a8 <__aeabi_dsub>
 8024f16:	4602      	mov	r2, r0
 8024f18:	460b      	mov	r3, r1
 8024f1a:	4680      	mov	r8, r0
 8024f1c:	4689      	mov	r9, r1
 8024f1e:	4630      	mov	r0, r6
 8024f20:	4639      	mov	r1, r7
 8024f22:	f7db f9c1 	bl	80002a8 <__aeabi_dsub>
 8024f26:	a3a2      	add	r3, pc, #648	@ (adr r3, 80251b0 <__ieee754_rem_pio2+0x2f0>)
 8024f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f2c:	f7db f9bc 	bl	80002a8 <__aeabi_dsub>
 8024f30:	e9c4 8900 	strd	r8, r9, [r4]
 8024f34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8024f38:	2501      	movs	r5, #1
 8024f3a:	4628      	mov	r0, r5
 8024f3c:	b00d      	add	sp, #52	@ 0x34
 8024f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f42:	a39d      	add	r3, pc, #628	@ (adr r3, 80251b8 <__ieee754_rem_pio2+0x2f8>)
 8024f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f48:	f7db f9ae 	bl	80002a8 <__aeabi_dsub>
 8024f4c:	a39c      	add	r3, pc, #624	@ (adr r3, 80251c0 <__ieee754_rem_pio2+0x300>)
 8024f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f52:	4606      	mov	r6, r0
 8024f54:	460f      	mov	r7, r1
 8024f56:	f7db f9a7 	bl	80002a8 <__aeabi_dsub>
 8024f5a:	4602      	mov	r2, r0
 8024f5c:	460b      	mov	r3, r1
 8024f5e:	4680      	mov	r8, r0
 8024f60:	4689      	mov	r9, r1
 8024f62:	4630      	mov	r0, r6
 8024f64:	4639      	mov	r1, r7
 8024f66:	f7db f99f 	bl	80002a8 <__aeabi_dsub>
 8024f6a:	a395      	add	r3, pc, #596	@ (adr r3, 80251c0 <__ieee754_rem_pio2+0x300>)
 8024f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f70:	e7dc      	b.n	8024f2c <__ieee754_rem_pio2+0x6c>
 8024f72:	f7db f99b 	bl	80002ac <__adddf3>
 8024f76:	45a8      	cmp	r8, r5
 8024f78:	4606      	mov	r6, r0
 8024f7a:	460f      	mov	r7, r1
 8024f7c:	d018      	beq.n	8024fb0 <__ieee754_rem_pio2+0xf0>
 8024f7e:	a38c      	add	r3, pc, #560	@ (adr r3, 80251b0 <__ieee754_rem_pio2+0x2f0>)
 8024f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f84:	f7db f992 	bl	80002ac <__adddf3>
 8024f88:	4602      	mov	r2, r0
 8024f8a:	460b      	mov	r3, r1
 8024f8c:	4680      	mov	r8, r0
 8024f8e:	4689      	mov	r9, r1
 8024f90:	4630      	mov	r0, r6
 8024f92:	4639      	mov	r1, r7
 8024f94:	f7db f988 	bl	80002a8 <__aeabi_dsub>
 8024f98:	a385      	add	r3, pc, #532	@ (adr r3, 80251b0 <__ieee754_rem_pio2+0x2f0>)
 8024f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f9e:	f7db f985 	bl	80002ac <__adddf3>
 8024fa2:	f04f 35ff 	mov.w	r5, #4294967295
 8024fa6:	e9c4 8900 	strd	r8, r9, [r4]
 8024faa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8024fae:	e7c4      	b.n	8024f3a <__ieee754_rem_pio2+0x7a>
 8024fb0:	a381      	add	r3, pc, #516	@ (adr r3, 80251b8 <__ieee754_rem_pio2+0x2f8>)
 8024fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fb6:	f7db f979 	bl	80002ac <__adddf3>
 8024fba:	a381      	add	r3, pc, #516	@ (adr r3, 80251c0 <__ieee754_rem_pio2+0x300>)
 8024fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fc0:	4606      	mov	r6, r0
 8024fc2:	460f      	mov	r7, r1
 8024fc4:	f7db f972 	bl	80002ac <__adddf3>
 8024fc8:	4602      	mov	r2, r0
 8024fca:	460b      	mov	r3, r1
 8024fcc:	4680      	mov	r8, r0
 8024fce:	4689      	mov	r9, r1
 8024fd0:	4630      	mov	r0, r6
 8024fd2:	4639      	mov	r1, r7
 8024fd4:	f7db f968 	bl	80002a8 <__aeabi_dsub>
 8024fd8:	a379      	add	r3, pc, #484	@ (adr r3, 80251c0 <__ieee754_rem_pio2+0x300>)
 8024fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fde:	e7de      	b.n	8024f9e <__ieee754_rem_pio2+0xde>
 8024fe0:	4b82      	ldr	r3, [pc, #520]	@ (80251ec <__ieee754_rem_pio2+0x32c>)
 8024fe2:	4598      	cmp	r8, r3
 8024fe4:	f200 80d1 	bhi.w	802518a <__ieee754_rem_pio2+0x2ca>
 8024fe8:	f7fd fd7a 	bl	8022ae0 <fabs>
 8024fec:	ec57 6b10 	vmov	r6, r7, d0
 8024ff0:	a375      	add	r3, pc, #468	@ (adr r3, 80251c8 <__ieee754_rem_pio2+0x308>)
 8024ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ff6:	4630      	mov	r0, r6
 8024ff8:	4639      	mov	r1, r7
 8024ffa:	f7db fb0d 	bl	8000618 <__aeabi_dmul>
 8024ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80251f0 <__ieee754_rem_pio2+0x330>)
 8025000:	2200      	movs	r2, #0
 8025002:	f7db f953 	bl	80002ac <__adddf3>
 8025006:	f7db fdb7 	bl	8000b78 <__aeabi_d2iz>
 802500a:	4605      	mov	r5, r0
 802500c:	f7db fa9a 	bl	8000544 <__aeabi_i2d>
 8025010:	4602      	mov	r2, r0
 8025012:	460b      	mov	r3, r1
 8025014:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025018:	a363      	add	r3, pc, #396	@ (adr r3, 80251a8 <__ieee754_rem_pio2+0x2e8>)
 802501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802501e:	f7db fafb 	bl	8000618 <__aeabi_dmul>
 8025022:	4602      	mov	r2, r0
 8025024:	460b      	mov	r3, r1
 8025026:	4630      	mov	r0, r6
 8025028:	4639      	mov	r1, r7
 802502a:	f7db f93d 	bl	80002a8 <__aeabi_dsub>
 802502e:	a360      	add	r3, pc, #384	@ (adr r3, 80251b0 <__ieee754_rem_pio2+0x2f0>)
 8025030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025034:	4682      	mov	sl, r0
 8025036:	468b      	mov	fp, r1
 8025038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802503c:	f7db faec 	bl	8000618 <__aeabi_dmul>
 8025040:	2d1f      	cmp	r5, #31
 8025042:	4606      	mov	r6, r0
 8025044:	460f      	mov	r7, r1
 8025046:	dc0c      	bgt.n	8025062 <__ieee754_rem_pio2+0x1a2>
 8025048:	4b6a      	ldr	r3, [pc, #424]	@ (80251f4 <__ieee754_rem_pio2+0x334>)
 802504a:	1e6a      	subs	r2, r5, #1
 802504c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025050:	4543      	cmp	r3, r8
 8025052:	d006      	beq.n	8025062 <__ieee754_rem_pio2+0x1a2>
 8025054:	4632      	mov	r2, r6
 8025056:	463b      	mov	r3, r7
 8025058:	4650      	mov	r0, sl
 802505a:	4659      	mov	r1, fp
 802505c:	f7db f924 	bl	80002a8 <__aeabi_dsub>
 8025060:	e00e      	b.n	8025080 <__ieee754_rem_pio2+0x1c0>
 8025062:	463b      	mov	r3, r7
 8025064:	4632      	mov	r2, r6
 8025066:	4650      	mov	r0, sl
 8025068:	4659      	mov	r1, fp
 802506a:	f7db f91d 	bl	80002a8 <__aeabi_dsub>
 802506e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8025072:	9305      	str	r3, [sp, #20]
 8025074:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8025078:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 802507c:	2b10      	cmp	r3, #16
 802507e:	dc02      	bgt.n	8025086 <__ieee754_rem_pio2+0x1c6>
 8025080:	e9c4 0100 	strd	r0, r1, [r4]
 8025084:	e039      	b.n	80250fa <__ieee754_rem_pio2+0x23a>
 8025086:	a34c      	add	r3, pc, #304	@ (adr r3, 80251b8 <__ieee754_rem_pio2+0x2f8>)
 8025088:	e9d3 2300 	ldrd	r2, r3, [r3]
 802508c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025090:	f7db fac2 	bl	8000618 <__aeabi_dmul>
 8025094:	4606      	mov	r6, r0
 8025096:	460f      	mov	r7, r1
 8025098:	4602      	mov	r2, r0
 802509a:	460b      	mov	r3, r1
 802509c:	4650      	mov	r0, sl
 802509e:	4659      	mov	r1, fp
 80250a0:	f7db f902 	bl	80002a8 <__aeabi_dsub>
 80250a4:	4602      	mov	r2, r0
 80250a6:	460b      	mov	r3, r1
 80250a8:	4680      	mov	r8, r0
 80250aa:	4689      	mov	r9, r1
 80250ac:	4650      	mov	r0, sl
 80250ae:	4659      	mov	r1, fp
 80250b0:	f7db f8fa 	bl	80002a8 <__aeabi_dsub>
 80250b4:	4632      	mov	r2, r6
 80250b6:	463b      	mov	r3, r7
 80250b8:	f7db f8f6 	bl	80002a8 <__aeabi_dsub>
 80250bc:	a340      	add	r3, pc, #256	@ (adr r3, 80251c0 <__ieee754_rem_pio2+0x300>)
 80250be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250c2:	4606      	mov	r6, r0
 80250c4:	460f      	mov	r7, r1
 80250c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80250ca:	f7db faa5 	bl	8000618 <__aeabi_dmul>
 80250ce:	4632      	mov	r2, r6
 80250d0:	463b      	mov	r3, r7
 80250d2:	f7db f8e9 	bl	80002a8 <__aeabi_dsub>
 80250d6:	4602      	mov	r2, r0
 80250d8:	460b      	mov	r3, r1
 80250da:	4606      	mov	r6, r0
 80250dc:	460f      	mov	r7, r1
 80250de:	4640      	mov	r0, r8
 80250e0:	4649      	mov	r1, r9
 80250e2:	f7db f8e1 	bl	80002a8 <__aeabi_dsub>
 80250e6:	9a05      	ldr	r2, [sp, #20]
 80250e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80250ec:	1ad3      	subs	r3, r2, r3
 80250ee:	2b31      	cmp	r3, #49	@ 0x31
 80250f0:	dc20      	bgt.n	8025134 <__ieee754_rem_pio2+0x274>
 80250f2:	e9c4 0100 	strd	r0, r1, [r4]
 80250f6:	46c2      	mov	sl, r8
 80250f8:	46cb      	mov	fp, r9
 80250fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80250fe:	4650      	mov	r0, sl
 8025100:	4642      	mov	r2, r8
 8025102:	464b      	mov	r3, r9
 8025104:	4659      	mov	r1, fp
 8025106:	f7db f8cf 	bl	80002a8 <__aeabi_dsub>
 802510a:	463b      	mov	r3, r7
 802510c:	4632      	mov	r2, r6
 802510e:	f7db f8cb 	bl	80002a8 <__aeabi_dsub>
 8025112:	9b04      	ldr	r3, [sp, #16]
 8025114:	2b00      	cmp	r3, #0
 8025116:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802511a:	f6bf af0e 	bge.w	8024f3a <__ieee754_rem_pio2+0x7a>
 802511e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8025122:	6063      	str	r3, [r4, #4]
 8025124:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8025128:	f8c4 8000 	str.w	r8, [r4]
 802512c:	60a0      	str	r0, [r4, #8]
 802512e:	60e3      	str	r3, [r4, #12]
 8025130:	426d      	negs	r5, r5
 8025132:	e702      	b.n	8024f3a <__ieee754_rem_pio2+0x7a>
 8025134:	a326      	add	r3, pc, #152	@ (adr r3, 80251d0 <__ieee754_rem_pio2+0x310>)
 8025136:	e9d3 2300 	ldrd	r2, r3, [r3]
 802513a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802513e:	f7db fa6b 	bl	8000618 <__aeabi_dmul>
 8025142:	4606      	mov	r6, r0
 8025144:	460f      	mov	r7, r1
 8025146:	4602      	mov	r2, r0
 8025148:	460b      	mov	r3, r1
 802514a:	4640      	mov	r0, r8
 802514c:	4649      	mov	r1, r9
 802514e:	f7db f8ab 	bl	80002a8 <__aeabi_dsub>
 8025152:	4602      	mov	r2, r0
 8025154:	460b      	mov	r3, r1
 8025156:	4682      	mov	sl, r0
 8025158:	468b      	mov	fp, r1
 802515a:	4640      	mov	r0, r8
 802515c:	4649      	mov	r1, r9
 802515e:	f7db f8a3 	bl	80002a8 <__aeabi_dsub>
 8025162:	4632      	mov	r2, r6
 8025164:	463b      	mov	r3, r7
 8025166:	f7db f89f 	bl	80002a8 <__aeabi_dsub>
 802516a:	a31b      	add	r3, pc, #108	@ (adr r3, 80251d8 <__ieee754_rem_pio2+0x318>)
 802516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025170:	4606      	mov	r6, r0
 8025172:	460f      	mov	r7, r1
 8025174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025178:	f7db fa4e 	bl	8000618 <__aeabi_dmul>
 802517c:	4632      	mov	r2, r6
 802517e:	463b      	mov	r3, r7
 8025180:	f7db f892 	bl	80002a8 <__aeabi_dsub>
 8025184:	4606      	mov	r6, r0
 8025186:	460f      	mov	r7, r1
 8025188:	e764      	b.n	8025054 <__ieee754_rem_pio2+0x194>
 802518a:	4b1b      	ldr	r3, [pc, #108]	@ (80251f8 <__ieee754_rem_pio2+0x338>)
 802518c:	4598      	cmp	r8, r3
 802518e:	d935      	bls.n	80251fc <__ieee754_rem_pio2+0x33c>
 8025190:	4632      	mov	r2, r6
 8025192:	463b      	mov	r3, r7
 8025194:	4630      	mov	r0, r6
 8025196:	4639      	mov	r1, r7
 8025198:	f7db f886 	bl	80002a8 <__aeabi_dsub>
 802519c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80251a0:	e9c4 0100 	strd	r0, r1, [r4]
 80251a4:	e69e      	b.n	8024ee4 <__ieee754_rem_pio2+0x24>
 80251a6:	bf00      	nop
 80251a8:	54400000 	.word	0x54400000
 80251ac:	3ff921fb 	.word	0x3ff921fb
 80251b0:	1a626331 	.word	0x1a626331
 80251b4:	3dd0b461 	.word	0x3dd0b461
 80251b8:	1a600000 	.word	0x1a600000
 80251bc:	3dd0b461 	.word	0x3dd0b461
 80251c0:	2e037073 	.word	0x2e037073
 80251c4:	3ba3198a 	.word	0x3ba3198a
 80251c8:	6dc9c883 	.word	0x6dc9c883
 80251cc:	3fe45f30 	.word	0x3fe45f30
 80251d0:	2e000000 	.word	0x2e000000
 80251d4:	3ba3198a 	.word	0x3ba3198a
 80251d8:	252049c1 	.word	0x252049c1
 80251dc:	397b839a 	.word	0x397b839a
 80251e0:	3fe921fb 	.word	0x3fe921fb
 80251e4:	4002d97b 	.word	0x4002d97b
 80251e8:	3ff921fb 	.word	0x3ff921fb
 80251ec:	413921fb 	.word	0x413921fb
 80251f0:	3fe00000 	.word	0x3fe00000
 80251f4:	080266a0 	.word	0x080266a0
 80251f8:	7fefffff 	.word	0x7fefffff
 80251fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8025200:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8025204:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8025208:	4630      	mov	r0, r6
 802520a:	460f      	mov	r7, r1
 802520c:	f7db fcb4 	bl	8000b78 <__aeabi_d2iz>
 8025210:	f7db f998 	bl	8000544 <__aeabi_i2d>
 8025214:	4602      	mov	r2, r0
 8025216:	460b      	mov	r3, r1
 8025218:	4630      	mov	r0, r6
 802521a:	4639      	mov	r1, r7
 802521c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025220:	f7db f842 	bl	80002a8 <__aeabi_dsub>
 8025224:	4b22      	ldr	r3, [pc, #136]	@ (80252b0 <__ieee754_rem_pio2+0x3f0>)
 8025226:	2200      	movs	r2, #0
 8025228:	f7db f9f6 	bl	8000618 <__aeabi_dmul>
 802522c:	460f      	mov	r7, r1
 802522e:	4606      	mov	r6, r0
 8025230:	f7db fca2 	bl	8000b78 <__aeabi_d2iz>
 8025234:	f7db f986 	bl	8000544 <__aeabi_i2d>
 8025238:	4602      	mov	r2, r0
 802523a:	460b      	mov	r3, r1
 802523c:	4630      	mov	r0, r6
 802523e:	4639      	mov	r1, r7
 8025240:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025244:	f7db f830 	bl	80002a8 <__aeabi_dsub>
 8025248:	4b19      	ldr	r3, [pc, #100]	@ (80252b0 <__ieee754_rem_pio2+0x3f0>)
 802524a:	2200      	movs	r2, #0
 802524c:	f7db f9e4 	bl	8000618 <__aeabi_dmul>
 8025250:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8025254:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8025258:	f04f 0803 	mov.w	r8, #3
 802525c:	2600      	movs	r6, #0
 802525e:	2700      	movs	r7, #0
 8025260:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8025264:	4632      	mov	r2, r6
 8025266:	463b      	mov	r3, r7
 8025268:	46c2      	mov	sl, r8
 802526a:	f108 38ff 	add.w	r8, r8, #4294967295
 802526e:	f7db fc3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8025272:	2800      	cmp	r0, #0
 8025274:	d1f4      	bne.n	8025260 <__ieee754_rem_pio2+0x3a0>
 8025276:	4b0f      	ldr	r3, [pc, #60]	@ (80252b4 <__ieee754_rem_pio2+0x3f4>)
 8025278:	9301      	str	r3, [sp, #4]
 802527a:	2302      	movs	r3, #2
 802527c:	9300      	str	r3, [sp, #0]
 802527e:	462a      	mov	r2, r5
 8025280:	4653      	mov	r3, sl
 8025282:	4621      	mov	r1, r4
 8025284:	a806      	add	r0, sp, #24
 8025286:	f000 f8cf 	bl	8025428 <__kernel_rem_pio2>
 802528a:	9b04      	ldr	r3, [sp, #16]
 802528c:	2b00      	cmp	r3, #0
 802528e:	4605      	mov	r5, r0
 8025290:	f6bf ae53 	bge.w	8024f3a <__ieee754_rem_pio2+0x7a>
 8025294:	e9d4 2100 	ldrd	r2, r1, [r4]
 8025298:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802529c:	e9c4 2300 	strd	r2, r3, [r4]
 80252a0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80252a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80252a8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80252ac:	e740      	b.n	8025130 <__ieee754_rem_pio2+0x270>
 80252ae:	bf00      	nop
 80252b0:	41700000 	.word	0x41700000
 80252b4:	08026720 	.word	0x08026720

080252b8 <scalbn>:
 80252b8:	b570      	push	{r4, r5, r6, lr}
 80252ba:	ec55 4b10 	vmov	r4, r5, d0
 80252be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80252c2:	4606      	mov	r6, r0
 80252c4:	462b      	mov	r3, r5
 80252c6:	b991      	cbnz	r1, 80252ee <scalbn+0x36>
 80252c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80252cc:	4323      	orrs	r3, r4
 80252ce:	d03b      	beq.n	8025348 <scalbn+0x90>
 80252d0:	4b33      	ldr	r3, [pc, #204]	@ (80253a0 <scalbn+0xe8>)
 80252d2:	4620      	mov	r0, r4
 80252d4:	4629      	mov	r1, r5
 80252d6:	2200      	movs	r2, #0
 80252d8:	f7db f99e 	bl	8000618 <__aeabi_dmul>
 80252dc:	4b31      	ldr	r3, [pc, #196]	@ (80253a4 <scalbn+0xec>)
 80252de:	429e      	cmp	r6, r3
 80252e0:	4604      	mov	r4, r0
 80252e2:	460d      	mov	r5, r1
 80252e4:	da0f      	bge.n	8025306 <scalbn+0x4e>
 80252e6:	a326      	add	r3, pc, #152	@ (adr r3, 8025380 <scalbn+0xc8>)
 80252e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252ec:	e01e      	b.n	802532c <scalbn+0x74>
 80252ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80252f2:	4291      	cmp	r1, r2
 80252f4:	d10b      	bne.n	802530e <scalbn+0x56>
 80252f6:	4622      	mov	r2, r4
 80252f8:	4620      	mov	r0, r4
 80252fa:	4629      	mov	r1, r5
 80252fc:	f7da ffd6 	bl	80002ac <__adddf3>
 8025300:	4604      	mov	r4, r0
 8025302:	460d      	mov	r5, r1
 8025304:	e020      	b.n	8025348 <scalbn+0x90>
 8025306:	460b      	mov	r3, r1
 8025308:	f3c1 510a 	ubfx	r1, r1, #20, #11
 802530c:	3936      	subs	r1, #54	@ 0x36
 802530e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8025312:	4296      	cmp	r6, r2
 8025314:	dd0d      	ble.n	8025332 <scalbn+0x7a>
 8025316:	2d00      	cmp	r5, #0
 8025318:	a11b      	add	r1, pc, #108	@ (adr r1, 8025388 <scalbn+0xd0>)
 802531a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802531e:	da02      	bge.n	8025326 <scalbn+0x6e>
 8025320:	a11b      	add	r1, pc, #108	@ (adr r1, 8025390 <scalbn+0xd8>)
 8025322:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025326:	a318      	add	r3, pc, #96	@ (adr r3, 8025388 <scalbn+0xd0>)
 8025328:	e9d3 2300 	ldrd	r2, r3, [r3]
 802532c:	f7db f974 	bl	8000618 <__aeabi_dmul>
 8025330:	e7e6      	b.n	8025300 <scalbn+0x48>
 8025332:	1872      	adds	r2, r6, r1
 8025334:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8025338:	428a      	cmp	r2, r1
 802533a:	dcec      	bgt.n	8025316 <scalbn+0x5e>
 802533c:	2a00      	cmp	r2, #0
 802533e:	dd06      	ble.n	802534e <scalbn+0x96>
 8025340:	f36f 531e 	bfc	r3, #20, #11
 8025344:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025348:	ec45 4b10 	vmov	d0, r4, r5
 802534c:	bd70      	pop	{r4, r5, r6, pc}
 802534e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8025352:	da08      	bge.n	8025366 <scalbn+0xae>
 8025354:	2d00      	cmp	r5, #0
 8025356:	a10a      	add	r1, pc, #40	@ (adr r1, 8025380 <scalbn+0xc8>)
 8025358:	e9d1 0100 	ldrd	r0, r1, [r1]
 802535c:	dac3      	bge.n	80252e6 <scalbn+0x2e>
 802535e:	a10e      	add	r1, pc, #56	@ (adr r1, 8025398 <scalbn+0xe0>)
 8025360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025364:	e7bf      	b.n	80252e6 <scalbn+0x2e>
 8025366:	3236      	adds	r2, #54	@ 0x36
 8025368:	f36f 531e 	bfc	r3, #20, #11
 802536c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025370:	4620      	mov	r0, r4
 8025372:	4b0d      	ldr	r3, [pc, #52]	@ (80253a8 <scalbn+0xf0>)
 8025374:	4629      	mov	r1, r5
 8025376:	2200      	movs	r2, #0
 8025378:	e7d8      	b.n	802532c <scalbn+0x74>
 802537a:	bf00      	nop
 802537c:	f3af 8000 	nop.w
 8025380:	c2f8f359 	.word	0xc2f8f359
 8025384:	01a56e1f 	.word	0x01a56e1f
 8025388:	8800759c 	.word	0x8800759c
 802538c:	7e37e43c 	.word	0x7e37e43c
 8025390:	8800759c 	.word	0x8800759c
 8025394:	fe37e43c 	.word	0xfe37e43c
 8025398:	c2f8f359 	.word	0xc2f8f359
 802539c:	81a56e1f 	.word	0x81a56e1f
 80253a0:	43500000 	.word	0x43500000
 80253a4:	ffff3cb0 	.word	0xffff3cb0
 80253a8:	3c900000 	.word	0x3c900000

080253ac <with_errno>:
 80253ac:	b510      	push	{r4, lr}
 80253ae:	ed2d 8b02 	vpush	{d8}
 80253b2:	eeb0 8a40 	vmov.f32	s16, s0
 80253b6:	eef0 8a60 	vmov.f32	s17, s1
 80253ba:	4604      	mov	r4, r0
 80253bc:	f7f9 fecc 	bl	801f158 <__errno>
 80253c0:	eeb0 0a48 	vmov.f32	s0, s16
 80253c4:	eef0 0a68 	vmov.f32	s1, s17
 80253c8:	ecbd 8b02 	vpop	{d8}
 80253cc:	6004      	str	r4, [r0, #0]
 80253ce:	bd10      	pop	{r4, pc}

080253d0 <xflow>:
 80253d0:	4603      	mov	r3, r0
 80253d2:	b507      	push	{r0, r1, r2, lr}
 80253d4:	ec51 0b10 	vmov	r0, r1, d0
 80253d8:	b183      	cbz	r3, 80253fc <xflow+0x2c>
 80253da:	4602      	mov	r2, r0
 80253dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80253e0:	e9cd 2300 	strd	r2, r3, [sp]
 80253e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80253e8:	f7db f916 	bl	8000618 <__aeabi_dmul>
 80253ec:	ec41 0b10 	vmov	d0, r0, r1
 80253f0:	2022      	movs	r0, #34	@ 0x22
 80253f2:	b003      	add	sp, #12
 80253f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80253f8:	f7ff bfd8 	b.w	80253ac <with_errno>
 80253fc:	4602      	mov	r2, r0
 80253fe:	460b      	mov	r3, r1
 8025400:	e7ee      	b.n	80253e0 <xflow+0x10>
 8025402:	0000      	movs	r0, r0
 8025404:	0000      	movs	r0, r0
	...

08025408 <__math_uflow>:
 8025408:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8025410 <__math_uflow+0x8>
 802540c:	f7ff bfe0 	b.w	80253d0 <xflow>
 8025410:	00000000 	.word	0x00000000
 8025414:	10000000 	.word	0x10000000

08025418 <__math_oflow>:
 8025418:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8025420 <__math_oflow+0x8>
 802541c:	f7ff bfd8 	b.w	80253d0 <xflow>
 8025420:	00000000 	.word	0x00000000
 8025424:	70000000 	.word	0x70000000

08025428 <__kernel_rem_pio2>:
 8025428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802542c:	ed2d 8b02 	vpush	{d8}
 8025430:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8025434:	f112 0f14 	cmn.w	r2, #20
 8025438:	9306      	str	r3, [sp, #24]
 802543a:	9104      	str	r1, [sp, #16]
 802543c:	4bc2      	ldr	r3, [pc, #776]	@ (8025748 <__kernel_rem_pio2+0x320>)
 802543e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8025440:	9008      	str	r0, [sp, #32]
 8025442:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8025446:	9300      	str	r3, [sp, #0]
 8025448:	9b06      	ldr	r3, [sp, #24]
 802544a:	f103 33ff 	add.w	r3, r3, #4294967295
 802544e:	bfa8      	it	ge
 8025450:	1ed4      	subge	r4, r2, #3
 8025452:	9305      	str	r3, [sp, #20]
 8025454:	bfb2      	itee	lt
 8025456:	2400      	movlt	r4, #0
 8025458:	2318      	movge	r3, #24
 802545a:	fb94 f4f3 	sdivge	r4, r4, r3
 802545e:	f06f 0317 	mvn.w	r3, #23
 8025462:	fb04 3303 	mla	r3, r4, r3, r3
 8025466:	eb03 0b02 	add.w	fp, r3, r2
 802546a:	9b00      	ldr	r3, [sp, #0]
 802546c:	9a05      	ldr	r2, [sp, #20]
 802546e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8025738 <__kernel_rem_pio2+0x310>
 8025472:	eb03 0802 	add.w	r8, r3, r2
 8025476:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8025478:	1aa7      	subs	r7, r4, r2
 802547a:	ae20      	add	r6, sp, #128	@ 0x80
 802547c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8025480:	2500      	movs	r5, #0
 8025482:	4545      	cmp	r5, r8
 8025484:	dd12      	ble.n	80254ac <__kernel_rem_pio2+0x84>
 8025486:	9b06      	ldr	r3, [sp, #24]
 8025488:	aa20      	add	r2, sp, #128	@ 0x80
 802548a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 802548e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8025492:	2700      	movs	r7, #0
 8025494:	9b00      	ldr	r3, [sp, #0]
 8025496:	429f      	cmp	r7, r3
 8025498:	dc2e      	bgt.n	80254f8 <__kernel_rem_pio2+0xd0>
 802549a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8025738 <__kernel_rem_pio2+0x310>
 802549e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80254a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80254a6:	46a8      	mov	r8, r5
 80254a8:	2600      	movs	r6, #0
 80254aa:	e01b      	b.n	80254e4 <__kernel_rem_pio2+0xbc>
 80254ac:	42ef      	cmn	r7, r5
 80254ae:	d407      	bmi.n	80254c0 <__kernel_rem_pio2+0x98>
 80254b0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80254b4:	f7db f846 	bl	8000544 <__aeabi_i2d>
 80254b8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80254bc:	3501      	adds	r5, #1
 80254be:	e7e0      	b.n	8025482 <__kernel_rem_pio2+0x5a>
 80254c0:	ec51 0b18 	vmov	r0, r1, d8
 80254c4:	e7f8      	b.n	80254b8 <__kernel_rem_pio2+0x90>
 80254c6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80254ca:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80254ce:	f7db f8a3 	bl	8000618 <__aeabi_dmul>
 80254d2:	4602      	mov	r2, r0
 80254d4:	460b      	mov	r3, r1
 80254d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80254da:	f7da fee7 	bl	80002ac <__adddf3>
 80254de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80254e2:	3601      	adds	r6, #1
 80254e4:	9b05      	ldr	r3, [sp, #20]
 80254e6:	429e      	cmp	r6, r3
 80254e8:	dded      	ble.n	80254c6 <__kernel_rem_pio2+0x9e>
 80254ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80254ee:	3701      	adds	r7, #1
 80254f0:	ecaa 7b02 	vstmia	sl!, {d7}
 80254f4:	3508      	adds	r5, #8
 80254f6:	e7cd      	b.n	8025494 <__kernel_rem_pio2+0x6c>
 80254f8:	9b00      	ldr	r3, [sp, #0]
 80254fa:	f8dd 8000 	ldr.w	r8, [sp]
 80254fe:	aa0c      	add	r2, sp, #48	@ 0x30
 8025500:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025504:	930a      	str	r3, [sp, #40]	@ 0x28
 8025506:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8025508:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802550c:	9309      	str	r3, [sp, #36]	@ 0x24
 802550e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8025512:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025514:	ab98      	add	r3, sp, #608	@ 0x260
 8025516:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802551a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 802551e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025522:	ac0c      	add	r4, sp, #48	@ 0x30
 8025524:	ab70      	add	r3, sp, #448	@ 0x1c0
 8025526:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 802552a:	46a1      	mov	r9, r4
 802552c:	46c2      	mov	sl, r8
 802552e:	f1ba 0f00 	cmp.w	sl, #0
 8025532:	dc77      	bgt.n	8025624 <__kernel_rem_pio2+0x1fc>
 8025534:	4658      	mov	r0, fp
 8025536:	ed9d 0b02 	vldr	d0, [sp, #8]
 802553a:	f7ff febd 	bl	80252b8 <scalbn>
 802553e:	ec57 6b10 	vmov	r6, r7, d0
 8025542:	2200      	movs	r2, #0
 8025544:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8025548:	4630      	mov	r0, r6
 802554a:	4639      	mov	r1, r7
 802554c:	f7db f864 	bl	8000618 <__aeabi_dmul>
 8025550:	ec41 0b10 	vmov	d0, r0, r1
 8025554:	f7fd fc04 	bl	8022d60 <floor>
 8025558:	4b7c      	ldr	r3, [pc, #496]	@ (802574c <__kernel_rem_pio2+0x324>)
 802555a:	ec51 0b10 	vmov	r0, r1, d0
 802555e:	2200      	movs	r2, #0
 8025560:	f7db f85a 	bl	8000618 <__aeabi_dmul>
 8025564:	4602      	mov	r2, r0
 8025566:	460b      	mov	r3, r1
 8025568:	4630      	mov	r0, r6
 802556a:	4639      	mov	r1, r7
 802556c:	f7da fe9c 	bl	80002a8 <__aeabi_dsub>
 8025570:	460f      	mov	r7, r1
 8025572:	4606      	mov	r6, r0
 8025574:	f7db fb00 	bl	8000b78 <__aeabi_d2iz>
 8025578:	9002      	str	r0, [sp, #8]
 802557a:	f7da ffe3 	bl	8000544 <__aeabi_i2d>
 802557e:	4602      	mov	r2, r0
 8025580:	460b      	mov	r3, r1
 8025582:	4630      	mov	r0, r6
 8025584:	4639      	mov	r1, r7
 8025586:	f7da fe8f 	bl	80002a8 <__aeabi_dsub>
 802558a:	f1bb 0f00 	cmp.w	fp, #0
 802558e:	4606      	mov	r6, r0
 8025590:	460f      	mov	r7, r1
 8025592:	dd6c      	ble.n	802566e <__kernel_rem_pio2+0x246>
 8025594:	f108 31ff 	add.w	r1, r8, #4294967295
 8025598:	ab0c      	add	r3, sp, #48	@ 0x30
 802559a:	9d02      	ldr	r5, [sp, #8]
 802559c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80255a0:	f1cb 0018 	rsb	r0, fp, #24
 80255a4:	fa43 f200 	asr.w	r2, r3, r0
 80255a8:	4415      	add	r5, r2
 80255aa:	4082      	lsls	r2, r0
 80255ac:	1a9b      	subs	r3, r3, r2
 80255ae:	aa0c      	add	r2, sp, #48	@ 0x30
 80255b0:	9502      	str	r5, [sp, #8]
 80255b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80255b6:	f1cb 0217 	rsb	r2, fp, #23
 80255ba:	fa43 f902 	asr.w	r9, r3, r2
 80255be:	f1b9 0f00 	cmp.w	r9, #0
 80255c2:	dd64      	ble.n	802568e <__kernel_rem_pio2+0x266>
 80255c4:	9b02      	ldr	r3, [sp, #8]
 80255c6:	2200      	movs	r2, #0
 80255c8:	3301      	adds	r3, #1
 80255ca:	9302      	str	r3, [sp, #8]
 80255cc:	4615      	mov	r5, r2
 80255ce:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80255d2:	4590      	cmp	r8, r2
 80255d4:	f300 80a1 	bgt.w	802571a <__kernel_rem_pio2+0x2f2>
 80255d8:	f1bb 0f00 	cmp.w	fp, #0
 80255dc:	dd07      	ble.n	80255ee <__kernel_rem_pio2+0x1c6>
 80255de:	f1bb 0f01 	cmp.w	fp, #1
 80255e2:	f000 80c1 	beq.w	8025768 <__kernel_rem_pio2+0x340>
 80255e6:	f1bb 0f02 	cmp.w	fp, #2
 80255ea:	f000 80c8 	beq.w	802577e <__kernel_rem_pio2+0x356>
 80255ee:	f1b9 0f02 	cmp.w	r9, #2
 80255f2:	d14c      	bne.n	802568e <__kernel_rem_pio2+0x266>
 80255f4:	4632      	mov	r2, r6
 80255f6:	463b      	mov	r3, r7
 80255f8:	4955      	ldr	r1, [pc, #340]	@ (8025750 <__kernel_rem_pio2+0x328>)
 80255fa:	2000      	movs	r0, #0
 80255fc:	f7da fe54 	bl	80002a8 <__aeabi_dsub>
 8025600:	4606      	mov	r6, r0
 8025602:	460f      	mov	r7, r1
 8025604:	2d00      	cmp	r5, #0
 8025606:	d042      	beq.n	802568e <__kernel_rem_pio2+0x266>
 8025608:	4658      	mov	r0, fp
 802560a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8025740 <__kernel_rem_pio2+0x318>
 802560e:	f7ff fe53 	bl	80252b8 <scalbn>
 8025612:	4630      	mov	r0, r6
 8025614:	4639      	mov	r1, r7
 8025616:	ec53 2b10 	vmov	r2, r3, d0
 802561a:	f7da fe45 	bl	80002a8 <__aeabi_dsub>
 802561e:	4606      	mov	r6, r0
 8025620:	460f      	mov	r7, r1
 8025622:	e034      	b.n	802568e <__kernel_rem_pio2+0x266>
 8025624:	4b4b      	ldr	r3, [pc, #300]	@ (8025754 <__kernel_rem_pio2+0x32c>)
 8025626:	2200      	movs	r2, #0
 8025628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802562c:	f7da fff4 	bl	8000618 <__aeabi_dmul>
 8025630:	f7db faa2 	bl	8000b78 <__aeabi_d2iz>
 8025634:	f7da ff86 	bl	8000544 <__aeabi_i2d>
 8025638:	4b47      	ldr	r3, [pc, #284]	@ (8025758 <__kernel_rem_pio2+0x330>)
 802563a:	2200      	movs	r2, #0
 802563c:	4606      	mov	r6, r0
 802563e:	460f      	mov	r7, r1
 8025640:	f7da ffea 	bl	8000618 <__aeabi_dmul>
 8025644:	4602      	mov	r2, r0
 8025646:	460b      	mov	r3, r1
 8025648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802564c:	f7da fe2c 	bl	80002a8 <__aeabi_dsub>
 8025650:	f7db fa92 	bl	8000b78 <__aeabi_d2iz>
 8025654:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8025658:	f849 0b04 	str.w	r0, [r9], #4
 802565c:	4639      	mov	r1, r7
 802565e:	4630      	mov	r0, r6
 8025660:	f7da fe24 	bl	80002ac <__adddf3>
 8025664:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802566c:	e75f      	b.n	802552e <__kernel_rem_pio2+0x106>
 802566e:	d107      	bne.n	8025680 <__kernel_rem_pio2+0x258>
 8025670:	f108 33ff 	add.w	r3, r8, #4294967295
 8025674:	aa0c      	add	r2, sp, #48	@ 0x30
 8025676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802567a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 802567e:	e79e      	b.n	80255be <__kernel_rem_pio2+0x196>
 8025680:	4b36      	ldr	r3, [pc, #216]	@ (802575c <__kernel_rem_pio2+0x334>)
 8025682:	2200      	movs	r2, #0
 8025684:	f7db fa4e 	bl	8000b24 <__aeabi_dcmpge>
 8025688:	2800      	cmp	r0, #0
 802568a:	d143      	bne.n	8025714 <__kernel_rem_pio2+0x2ec>
 802568c:	4681      	mov	r9, r0
 802568e:	2200      	movs	r2, #0
 8025690:	2300      	movs	r3, #0
 8025692:	4630      	mov	r0, r6
 8025694:	4639      	mov	r1, r7
 8025696:	f7db fa27 	bl	8000ae8 <__aeabi_dcmpeq>
 802569a:	2800      	cmp	r0, #0
 802569c:	f000 80c1 	beq.w	8025822 <__kernel_rem_pio2+0x3fa>
 80256a0:	f108 33ff 	add.w	r3, r8, #4294967295
 80256a4:	2200      	movs	r2, #0
 80256a6:	9900      	ldr	r1, [sp, #0]
 80256a8:	428b      	cmp	r3, r1
 80256aa:	da70      	bge.n	802578e <__kernel_rem_pio2+0x366>
 80256ac:	2a00      	cmp	r2, #0
 80256ae:	f000 808b 	beq.w	80257c8 <__kernel_rem_pio2+0x3a0>
 80256b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80256b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80256b8:	f1ab 0b18 	sub.w	fp, fp, #24
 80256bc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80256c0:	2b00      	cmp	r3, #0
 80256c2:	d0f6      	beq.n	80256b2 <__kernel_rem_pio2+0x28a>
 80256c4:	4658      	mov	r0, fp
 80256c6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8025740 <__kernel_rem_pio2+0x318>
 80256ca:	f7ff fdf5 	bl	80252b8 <scalbn>
 80256ce:	f108 0301 	add.w	r3, r8, #1
 80256d2:	00da      	lsls	r2, r3, #3
 80256d4:	9205      	str	r2, [sp, #20]
 80256d6:	ec55 4b10 	vmov	r4, r5, d0
 80256da:	aa70      	add	r2, sp, #448	@ 0x1c0
 80256dc:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8025754 <__kernel_rem_pio2+0x32c>
 80256e0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80256e4:	4646      	mov	r6, r8
 80256e6:	f04f 0a00 	mov.w	sl, #0
 80256ea:	2e00      	cmp	r6, #0
 80256ec:	f280 80d1 	bge.w	8025892 <__kernel_rem_pio2+0x46a>
 80256f0:	4644      	mov	r4, r8
 80256f2:	2c00      	cmp	r4, #0
 80256f4:	f2c0 80ff 	blt.w	80258f6 <__kernel_rem_pio2+0x4ce>
 80256f8:	4b19      	ldr	r3, [pc, #100]	@ (8025760 <__kernel_rem_pio2+0x338>)
 80256fa:	461f      	mov	r7, r3
 80256fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80256fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8025702:	9306      	str	r3, [sp, #24]
 8025704:	f04f 0a00 	mov.w	sl, #0
 8025708:	f04f 0b00 	mov.w	fp, #0
 802570c:	2600      	movs	r6, #0
 802570e:	eba8 0504 	sub.w	r5, r8, r4
 8025712:	e0e4      	b.n	80258de <__kernel_rem_pio2+0x4b6>
 8025714:	f04f 0902 	mov.w	r9, #2
 8025718:	e754      	b.n	80255c4 <__kernel_rem_pio2+0x19c>
 802571a:	f854 3b04 	ldr.w	r3, [r4], #4
 802571e:	bb0d      	cbnz	r5, 8025764 <__kernel_rem_pio2+0x33c>
 8025720:	b123      	cbz	r3, 802572c <__kernel_rem_pio2+0x304>
 8025722:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8025726:	f844 3c04 	str.w	r3, [r4, #-4]
 802572a:	2301      	movs	r3, #1
 802572c:	3201      	adds	r2, #1
 802572e:	461d      	mov	r5, r3
 8025730:	e74f      	b.n	80255d2 <__kernel_rem_pio2+0x1aa>
 8025732:	bf00      	nop
 8025734:	f3af 8000 	nop.w
	...
 8025744:	3ff00000 	.word	0x3ff00000
 8025748:	08026868 	.word	0x08026868
 802574c:	40200000 	.word	0x40200000
 8025750:	3ff00000 	.word	0x3ff00000
 8025754:	3e700000 	.word	0x3e700000
 8025758:	41700000 	.word	0x41700000
 802575c:	3fe00000 	.word	0x3fe00000
 8025760:	08026828 	.word	0x08026828
 8025764:	1acb      	subs	r3, r1, r3
 8025766:	e7de      	b.n	8025726 <__kernel_rem_pio2+0x2fe>
 8025768:	f108 32ff 	add.w	r2, r8, #4294967295
 802576c:	ab0c      	add	r3, sp, #48	@ 0x30
 802576e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025772:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8025776:	a90c      	add	r1, sp, #48	@ 0x30
 8025778:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 802577c:	e737      	b.n	80255ee <__kernel_rem_pio2+0x1c6>
 802577e:	f108 32ff 	add.w	r2, r8, #4294967295
 8025782:	ab0c      	add	r3, sp, #48	@ 0x30
 8025784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025788:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802578c:	e7f3      	b.n	8025776 <__kernel_rem_pio2+0x34e>
 802578e:	a90c      	add	r1, sp, #48	@ 0x30
 8025790:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8025794:	3b01      	subs	r3, #1
 8025796:	430a      	orrs	r2, r1
 8025798:	e785      	b.n	80256a6 <__kernel_rem_pio2+0x27e>
 802579a:	3401      	adds	r4, #1
 802579c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80257a0:	2a00      	cmp	r2, #0
 80257a2:	d0fa      	beq.n	802579a <__kernel_rem_pio2+0x372>
 80257a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80257a6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80257aa:	eb0d 0503 	add.w	r5, sp, r3
 80257ae:	9b06      	ldr	r3, [sp, #24]
 80257b0:	aa20      	add	r2, sp, #128	@ 0x80
 80257b2:	4443      	add	r3, r8
 80257b4:	f108 0701 	add.w	r7, r8, #1
 80257b8:	3d98      	subs	r5, #152	@ 0x98
 80257ba:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80257be:	4444      	add	r4, r8
 80257c0:	42bc      	cmp	r4, r7
 80257c2:	da04      	bge.n	80257ce <__kernel_rem_pio2+0x3a6>
 80257c4:	46a0      	mov	r8, r4
 80257c6:	e6a2      	b.n	802550e <__kernel_rem_pio2+0xe6>
 80257c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80257ca:	2401      	movs	r4, #1
 80257cc:	e7e6      	b.n	802579c <__kernel_rem_pio2+0x374>
 80257ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257d0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80257d4:	f7da feb6 	bl	8000544 <__aeabi_i2d>
 80257d8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8025a98 <__kernel_rem_pio2+0x670>
 80257dc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80257e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80257e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80257e8:	46b2      	mov	sl, r6
 80257ea:	f04f 0800 	mov.w	r8, #0
 80257ee:	9b05      	ldr	r3, [sp, #20]
 80257f0:	4598      	cmp	r8, r3
 80257f2:	dd05      	ble.n	8025800 <__kernel_rem_pio2+0x3d8>
 80257f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80257f8:	3701      	adds	r7, #1
 80257fa:	eca5 7b02 	vstmia	r5!, {d7}
 80257fe:	e7df      	b.n	80257c0 <__kernel_rem_pio2+0x398>
 8025800:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8025804:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8025808:	f7da ff06 	bl	8000618 <__aeabi_dmul>
 802580c:	4602      	mov	r2, r0
 802580e:	460b      	mov	r3, r1
 8025810:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025814:	f7da fd4a 	bl	80002ac <__adddf3>
 8025818:	f108 0801 	add.w	r8, r8, #1
 802581c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025820:	e7e5      	b.n	80257ee <__kernel_rem_pio2+0x3c6>
 8025822:	f1cb 0000 	rsb	r0, fp, #0
 8025826:	ec47 6b10 	vmov	d0, r6, r7
 802582a:	f7ff fd45 	bl	80252b8 <scalbn>
 802582e:	ec55 4b10 	vmov	r4, r5, d0
 8025832:	4b9b      	ldr	r3, [pc, #620]	@ (8025aa0 <__kernel_rem_pio2+0x678>)
 8025834:	2200      	movs	r2, #0
 8025836:	4620      	mov	r0, r4
 8025838:	4629      	mov	r1, r5
 802583a:	f7db f973 	bl	8000b24 <__aeabi_dcmpge>
 802583e:	b300      	cbz	r0, 8025882 <__kernel_rem_pio2+0x45a>
 8025840:	4b98      	ldr	r3, [pc, #608]	@ (8025aa4 <__kernel_rem_pio2+0x67c>)
 8025842:	2200      	movs	r2, #0
 8025844:	4620      	mov	r0, r4
 8025846:	4629      	mov	r1, r5
 8025848:	f7da fee6 	bl	8000618 <__aeabi_dmul>
 802584c:	f7db f994 	bl	8000b78 <__aeabi_d2iz>
 8025850:	4606      	mov	r6, r0
 8025852:	f7da fe77 	bl	8000544 <__aeabi_i2d>
 8025856:	4b92      	ldr	r3, [pc, #584]	@ (8025aa0 <__kernel_rem_pio2+0x678>)
 8025858:	2200      	movs	r2, #0
 802585a:	f7da fedd 	bl	8000618 <__aeabi_dmul>
 802585e:	460b      	mov	r3, r1
 8025860:	4602      	mov	r2, r0
 8025862:	4629      	mov	r1, r5
 8025864:	4620      	mov	r0, r4
 8025866:	f7da fd1f 	bl	80002a8 <__aeabi_dsub>
 802586a:	f7db f985 	bl	8000b78 <__aeabi_d2iz>
 802586e:	ab0c      	add	r3, sp, #48	@ 0x30
 8025870:	f10b 0b18 	add.w	fp, fp, #24
 8025874:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8025878:	f108 0801 	add.w	r8, r8, #1
 802587c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8025880:	e720      	b.n	80256c4 <__kernel_rem_pio2+0x29c>
 8025882:	4620      	mov	r0, r4
 8025884:	4629      	mov	r1, r5
 8025886:	f7db f977 	bl	8000b78 <__aeabi_d2iz>
 802588a:	ab0c      	add	r3, sp, #48	@ 0x30
 802588c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8025890:	e718      	b.n	80256c4 <__kernel_rem_pio2+0x29c>
 8025892:	ab0c      	add	r3, sp, #48	@ 0x30
 8025894:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8025898:	f7da fe54 	bl	8000544 <__aeabi_i2d>
 802589c:	4622      	mov	r2, r4
 802589e:	462b      	mov	r3, r5
 80258a0:	f7da feba 	bl	8000618 <__aeabi_dmul>
 80258a4:	4652      	mov	r2, sl
 80258a6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80258aa:	465b      	mov	r3, fp
 80258ac:	4620      	mov	r0, r4
 80258ae:	4629      	mov	r1, r5
 80258b0:	f7da feb2 	bl	8000618 <__aeabi_dmul>
 80258b4:	3e01      	subs	r6, #1
 80258b6:	4604      	mov	r4, r0
 80258b8:	460d      	mov	r5, r1
 80258ba:	e716      	b.n	80256ea <__kernel_rem_pio2+0x2c2>
 80258bc:	9906      	ldr	r1, [sp, #24]
 80258be:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80258c2:	9106      	str	r1, [sp, #24]
 80258c4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80258c8:	f7da fea6 	bl	8000618 <__aeabi_dmul>
 80258cc:	4602      	mov	r2, r0
 80258ce:	460b      	mov	r3, r1
 80258d0:	4650      	mov	r0, sl
 80258d2:	4659      	mov	r1, fp
 80258d4:	f7da fcea 	bl	80002ac <__adddf3>
 80258d8:	3601      	adds	r6, #1
 80258da:	4682      	mov	sl, r0
 80258dc:	468b      	mov	fp, r1
 80258de:	9b00      	ldr	r3, [sp, #0]
 80258e0:	429e      	cmp	r6, r3
 80258e2:	dc01      	bgt.n	80258e8 <__kernel_rem_pio2+0x4c0>
 80258e4:	42ae      	cmp	r6, r5
 80258e6:	dde9      	ble.n	80258bc <__kernel_rem_pio2+0x494>
 80258e8:	ab48      	add	r3, sp, #288	@ 0x120
 80258ea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80258ee:	e9c5 ab00 	strd	sl, fp, [r5]
 80258f2:	3c01      	subs	r4, #1
 80258f4:	e6fd      	b.n	80256f2 <__kernel_rem_pio2+0x2ca>
 80258f6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80258f8:	2b02      	cmp	r3, #2
 80258fa:	dc0b      	bgt.n	8025914 <__kernel_rem_pio2+0x4ec>
 80258fc:	2b00      	cmp	r3, #0
 80258fe:	dc35      	bgt.n	802596c <__kernel_rem_pio2+0x544>
 8025900:	d059      	beq.n	80259b6 <__kernel_rem_pio2+0x58e>
 8025902:	9b02      	ldr	r3, [sp, #8]
 8025904:	f003 0007 	and.w	r0, r3, #7
 8025908:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 802590c:	ecbd 8b02 	vpop	{d8}
 8025910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025914:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8025916:	2b03      	cmp	r3, #3
 8025918:	d1f3      	bne.n	8025902 <__kernel_rem_pio2+0x4da>
 802591a:	9b05      	ldr	r3, [sp, #20]
 802591c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8025920:	eb0d 0403 	add.w	r4, sp, r3
 8025924:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8025928:	4625      	mov	r5, r4
 802592a:	46c2      	mov	sl, r8
 802592c:	f1ba 0f00 	cmp.w	sl, #0
 8025930:	dc69      	bgt.n	8025a06 <__kernel_rem_pio2+0x5de>
 8025932:	4645      	mov	r5, r8
 8025934:	2d01      	cmp	r5, #1
 8025936:	f300 8087 	bgt.w	8025a48 <__kernel_rem_pio2+0x620>
 802593a:	9c05      	ldr	r4, [sp, #20]
 802593c:	ab48      	add	r3, sp, #288	@ 0x120
 802593e:	441c      	add	r4, r3
 8025940:	2000      	movs	r0, #0
 8025942:	2100      	movs	r1, #0
 8025944:	f1b8 0f01 	cmp.w	r8, #1
 8025948:	f300 809c 	bgt.w	8025a84 <__kernel_rem_pio2+0x65c>
 802594c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8025950:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8025954:	f1b9 0f00 	cmp.w	r9, #0
 8025958:	f040 80a6 	bne.w	8025aa8 <__kernel_rem_pio2+0x680>
 802595c:	9b04      	ldr	r3, [sp, #16]
 802595e:	e9c3 5600 	strd	r5, r6, [r3]
 8025962:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8025966:	e9c3 0104 	strd	r0, r1, [r3, #16]
 802596a:	e7ca      	b.n	8025902 <__kernel_rem_pio2+0x4da>
 802596c:	9d05      	ldr	r5, [sp, #20]
 802596e:	ab48      	add	r3, sp, #288	@ 0x120
 8025970:	441d      	add	r5, r3
 8025972:	4644      	mov	r4, r8
 8025974:	2000      	movs	r0, #0
 8025976:	2100      	movs	r1, #0
 8025978:	2c00      	cmp	r4, #0
 802597a:	da35      	bge.n	80259e8 <__kernel_rem_pio2+0x5c0>
 802597c:	f1b9 0f00 	cmp.w	r9, #0
 8025980:	d038      	beq.n	80259f4 <__kernel_rem_pio2+0x5cc>
 8025982:	4602      	mov	r2, r0
 8025984:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8025988:	9c04      	ldr	r4, [sp, #16]
 802598a:	e9c4 2300 	strd	r2, r3, [r4]
 802598e:	4602      	mov	r2, r0
 8025990:	460b      	mov	r3, r1
 8025992:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8025996:	f7da fc87 	bl	80002a8 <__aeabi_dsub>
 802599a:	ad4a      	add	r5, sp, #296	@ 0x128
 802599c:	2401      	movs	r4, #1
 802599e:	45a0      	cmp	r8, r4
 80259a0:	da2b      	bge.n	80259fa <__kernel_rem_pio2+0x5d2>
 80259a2:	f1b9 0f00 	cmp.w	r9, #0
 80259a6:	d002      	beq.n	80259ae <__kernel_rem_pio2+0x586>
 80259a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80259ac:	4619      	mov	r1, r3
 80259ae:	9b04      	ldr	r3, [sp, #16]
 80259b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80259b4:	e7a5      	b.n	8025902 <__kernel_rem_pio2+0x4da>
 80259b6:	9c05      	ldr	r4, [sp, #20]
 80259b8:	ab48      	add	r3, sp, #288	@ 0x120
 80259ba:	441c      	add	r4, r3
 80259bc:	2000      	movs	r0, #0
 80259be:	2100      	movs	r1, #0
 80259c0:	f1b8 0f00 	cmp.w	r8, #0
 80259c4:	da09      	bge.n	80259da <__kernel_rem_pio2+0x5b2>
 80259c6:	f1b9 0f00 	cmp.w	r9, #0
 80259ca:	d002      	beq.n	80259d2 <__kernel_rem_pio2+0x5aa>
 80259cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80259d0:	4619      	mov	r1, r3
 80259d2:	9b04      	ldr	r3, [sp, #16]
 80259d4:	e9c3 0100 	strd	r0, r1, [r3]
 80259d8:	e793      	b.n	8025902 <__kernel_rem_pio2+0x4da>
 80259da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80259de:	f7da fc65 	bl	80002ac <__adddf3>
 80259e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80259e6:	e7eb      	b.n	80259c0 <__kernel_rem_pio2+0x598>
 80259e8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80259ec:	f7da fc5e 	bl	80002ac <__adddf3>
 80259f0:	3c01      	subs	r4, #1
 80259f2:	e7c1      	b.n	8025978 <__kernel_rem_pio2+0x550>
 80259f4:	4602      	mov	r2, r0
 80259f6:	460b      	mov	r3, r1
 80259f8:	e7c6      	b.n	8025988 <__kernel_rem_pio2+0x560>
 80259fa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80259fe:	f7da fc55 	bl	80002ac <__adddf3>
 8025a02:	3401      	adds	r4, #1
 8025a04:	e7cb      	b.n	802599e <__kernel_rem_pio2+0x576>
 8025a06:	ed35 7b02 	vldmdb	r5!, {d7}
 8025a0a:	ed8d 7b00 	vstr	d7, [sp]
 8025a0e:	ed95 7b02 	vldr	d7, [r5, #8]
 8025a12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025a16:	ec53 2b17 	vmov	r2, r3, d7
 8025a1a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8025a1e:	f7da fc45 	bl	80002ac <__adddf3>
 8025a22:	4602      	mov	r2, r0
 8025a24:	460b      	mov	r3, r1
 8025a26:	4606      	mov	r6, r0
 8025a28:	460f      	mov	r7, r1
 8025a2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025a2e:	f7da fc3b 	bl	80002a8 <__aeabi_dsub>
 8025a32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8025a36:	f7da fc39 	bl	80002ac <__adddf3>
 8025a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025a3e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8025a42:	e9c5 6700 	strd	r6, r7, [r5]
 8025a46:	e771      	b.n	802592c <__kernel_rem_pio2+0x504>
 8025a48:	ed34 7b02 	vldmdb	r4!, {d7}
 8025a4c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8025a50:	ec51 0b17 	vmov	r0, r1, d7
 8025a54:	4652      	mov	r2, sl
 8025a56:	465b      	mov	r3, fp
 8025a58:	ed8d 7b00 	vstr	d7, [sp]
 8025a5c:	f7da fc26 	bl	80002ac <__adddf3>
 8025a60:	4602      	mov	r2, r0
 8025a62:	460b      	mov	r3, r1
 8025a64:	4606      	mov	r6, r0
 8025a66:	460f      	mov	r7, r1
 8025a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025a6c:	f7da fc1c 	bl	80002a8 <__aeabi_dsub>
 8025a70:	4652      	mov	r2, sl
 8025a72:	465b      	mov	r3, fp
 8025a74:	f7da fc1a 	bl	80002ac <__adddf3>
 8025a78:	3d01      	subs	r5, #1
 8025a7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8025a7e:	e9c4 6700 	strd	r6, r7, [r4]
 8025a82:	e757      	b.n	8025934 <__kernel_rem_pio2+0x50c>
 8025a84:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8025a88:	f7da fc10 	bl	80002ac <__adddf3>
 8025a8c:	f108 38ff 	add.w	r8, r8, #4294967295
 8025a90:	e758      	b.n	8025944 <__kernel_rem_pio2+0x51c>
 8025a92:	bf00      	nop
 8025a94:	f3af 8000 	nop.w
	...
 8025aa0:	41700000 	.word	0x41700000
 8025aa4:	3e700000 	.word	0x3e700000
 8025aa8:	9b04      	ldr	r3, [sp, #16]
 8025aaa:	9a04      	ldr	r2, [sp, #16]
 8025aac:	601d      	str	r5, [r3, #0]
 8025aae:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8025ab2:	605c      	str	r4, [r3, #4]
 8025ab4:	609f      	str	r7, [r3, #8]
 8025ab6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8025aba:	60d3      	str	r3, [r2, #12]
 8025abc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8025ac0:	6110      	str	r0, [r2, #16]
 8025ac2:	6153      	str	r3, [r2, #20]
 8025ac4:	e71d      	b.n	8025902 <__kernel_rem_pio2+0x4da>
 8025ac6:	bf00      	nop

08025ac8 <_init>:
 8025ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025aca:	bf00      	nop
 8025acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025ace:	bc08      	pop	{r3}
 8025ad0:	469e      	mov	lr, r3
 8025ad2:	4770      	bx	lr

08025ad4 <_fini>:
 8025ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ad6:	bf00      	nop
 8025ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025ada:	bc08      	pop	{r3}
 8025adc:	469e      	mov	lr, r3
 8025ade:	4770      	bx	lr
